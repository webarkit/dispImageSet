

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
(function () {
  "use strict";
  var scope;
  if (typeof window !== "undefined") {
    scope = window;
  } else {
    scope = global;
  }

  var ARiset = function (width, height) {
    this.id = 0;
    this.nftMarkerCount = 0;
    this.imageSetWidth = 0;
    this.imageSetHeight = 0;
    this.frameIbwpointer = null;
    this.frameimgBWsize = null;
    this.canvas = null;
    this.ctx = null;
    this._init(width, height);
  };

  ARiset.prototype.createCanvas = function () {
    if (typeof document !== "undefined") {
      this.canvas = document.createElement("canvas");
      this.canvas.id = "iSet";
      this.ctx = this.canvas.getContext("2d");
      console.log('canvas created');
    };
  };

  ARiset.prototype.display = function () {
    this.createCanvas();
    document.body.appendChild(this.canvas);

    var self = this;
    document.addEventListener('nftMarker', function(ev) {
      self.canvas.width = ev.detail.widthNFT;
      self.canvas.height = ev.detail.heightNFT;

      var debugBuffer = new Uint8ClampedArray(
        Module.HEAPU8.buffer,
        self.frameIbwpointer,
        self.frameimgBWsize
      );
      console.log(debugBuffer.length);
      var id = new ImageData(
        new Uint8ClampedArray(self.canvas.width * self.canvas.height * 4),
        self.canvas.width,
        self.canvas.height
      );
      for (var i = 0, j = 0; i < debugBuffer.length; i++, j += 4) {
        var v = debugBuffer[i];
        id.data[j + 0] = v;
        id.data[j + 1] = v;
        id.data[j + 2] = v;
        id.data[j + 3] = 255;
      }

      self.ctx.putImageData(id, 0, 0);

      Module._free(debugBuffer);
    })
  };

  ARiset.prototype.loadNFTMarker = function (markerURL, onSuccess, onError) {
    var self = this;
    if (markerURL) {
      return ariset.readNFTMarker(
        this.id,
        markerURL,
        function (nftMarker) {
          console.log(nftMarker);
          var params = ariset.frameMalloc;
          self.frameIbwpointer = params.frameIbwpointer;
          self.frameimgBWsize = params.frameimgBWsize;
          var nftEvent = new CustomEvent('nftMarker', {
            detail: {
              widthNFT: nftMarker.width, heightNFT: nftMarker.height
            }
          });
          document.dispatchEvent(nftEvent);
        },
        onError
      );
    } else {
      if (onError) {
        onError("Marker URL needs to be defined and not equal empty string!");
      } else {
        console.error(
          "Marker URL needs to be defined and not equal empty string!"
        );
      }
    }
  };

  ARiset.prototype.getImageSet = function () {
    return this.imageSet;
  };

  ARiset.prototype._init = function (width, height) {
    this.id = ariset.setup(width, height);

  };

  var markerCount = 0;

  function readNFTMarker(arId, url, callback, onError) {
    var mId = markerCount++;
    var prefix = "/markerNFT_" + mId;
    var filename1 = prefix + ".fset";
    var filename2 = prefix + ".iset";
    var filename3 = prefix + ".fset3";
    ajax(
      url + ".fset",
      filename1,
      function () {
        ajax(
          url + ".iset",
          filename2,
          function () {
            ajax(
              url + ".fset3",
              filename3,
              function () {
                var id = Module._readNFTMarker(arId, prefix);
                if (callback) callback(id);
              },
              function(errorNumber) {
                if (onError) onError(errorNumber);
              }
            );
          },
          function(errorNumber) {
            if (onError) onError(errorNumber);
          }
        );
      },
      function(errorNumber) {
        if (onError) onError(errorNumber);
      }
    );
  }

  function writeStringToFS(target, string, callback) {
    var byteArray = new Uint8Array(string.length);
    for (var i = 0; i < byteArray.length; i++) {
      byteArray[i] = string.charCodeAt(i) & 0xff;
    }
    writeByteArrayToFS(target, byteArray, callback);
  }

  function writeByteArrayToFS(target, byteArray, callback) {
    FS.writeFile(target, byteArray, { encoding: "binary" });
    // console.log('FS written', target);

    callback(byteArray);
  }

  function ajax(url, target, callback, errorCallback) {
    var oReq = new XMLHttpRequest();
    oReq.open("GET", url, true);
    oReq.responseType = "arraybuffer"; // blob arraybuffer

    oReq.onload = function () {
      if (this.status == 200) {
        // console.log('ajax done for ', url);
        var arrayBuffer = oReq.response;
        var byteArray = new Uint8Array(arrayBuffer);
        writeByteArrayToFS(target, byteArray, callback);
      } else {
        errorCallback(this.status);
      }
    };

    oReq.send();
  }

  var ariset = {
    readNFTMarker: readNFTMarker
  };

  var FUNCTIONS = ["setup", "display", "getImageSet"];

  function runWhenLoaded() {
    FUNCTIONS.forEach(function (n) {
      ariset[n] = Module[n];
    });

    for (var m in Module) {
      if (m.match(/^AR/)) ariset[m] = Module[m];
    }
  }

  scope.ariset = ariset;
  scope.ARiset = ARiset;

  if (scope.Module) {
    scope.Module.onRuntimeInitialized = function () {
      runWhenLoaded();
      var event = new Event("dispImageSet-loaded");
      scope.dispatchEvent(event);
    };
  } else {
    scope.Module = {
      onRuntimeInitialized: function () {
        runWhenLoaded();
      }
    };
  }
})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




var STACK_ALIGN = 16;

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 8752, "EAcAALULAAAUEQAAdxMAAC5pc2V0AGZpbGUgb3BlbiBlcnJvcjogJXMuaXNldAoAcHJpbnRpbmcgcG9pbnRlciBpbWdCVzogJWQKAE5GVCBudW1iZXIgb2YgSW1hZ2VTZXQ6ICVpCgBORlQgbWFya2VyIHdpZHRoOiAlaQoATkZUIG1hcmtlciBoZWlnaHQ6ICVpCgBORlQgbWFya2VyIGRwaTogJWkKAGltZ0JXIGZpbGxlZAoAICBEb25lLgoAaW1nc2l6ZVBvaW50ZXI6ICVkCgBMb2FkaW5nIG9mIE5GVCBkYXRhIGNvbXBsZXRlLgoAUGFzc2luZyB0aGUgaW1nQlcgcG9pbnRlcjogJWQKAHsgaWYgKCFhcmlzZXRbImZyYW1lTWFsbG9jIl0pIHsgYXJpc2V0WyJmcmFtZU1hbGxvYyJdID0gKHt9KTsgfSB2YXIgZnJhbWVNYWxsb2MgPSBhcmlzZXRbImZyYW1lTWFsbG9jIl07IGZyYW1lTWFsbG9jWyJmcmFtZUlid3BvaW50ZXIiXSA9ICQxOyBmcmFtZU1hbGxvY1siZnJhbWVpbWdCV3NpemUiXSA9ICQyOyB9AGlpaQBBbGxvY2F0ZWQgaW1nQldzaXplICVkCgBzZXR1cABfcmVhZE5GVE1hcmtlcgBuZnRNYXJrZXIAd2lkdGgAaGVpZ2h0AGRwaQBpbWdCV3NpemUAcG9pbnRlcgAAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQAAAAA0VgAANFYAADRWAABpaWlpAAAAAMgkAAA0VgAAQCUAADluZnRNYXJrZXIAAIBWAAC8JAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUATlN0M19fMjIxX19iYXNpY19zdHJpbmdfY29tbW9uSUxiMUVFRQAAAACAVgAADyUAAARXAADQJAAAAAAAAAEAAAA4JQAAAAAAAGkAdmkAaWlpAHZpaWkAUmVhZCBJbWFnZVNldC4AICBlbmQuAFNPUw==");
  base64DecodeToExistingUint8Array(bufferView, 9677, "TFNF");
  base64DecodeToExistingUint8Array(bufferView, 9758, "Qm9ndXMgbWVzc2FnZSBjb2RlICVkAEFMSUdOX1RZUEUgaXMgd3JvbmcsIHBsZWFzZSBmaXgATUFYX0FMTE9DX0NIVU5LIGlzIHdyb25nLCBwbGVhc2UgZml4AEJvZ3VzIGJ1ZmZlciBjb250cm9sIG1vZGUASW52YWxpZCBjb21wb25lbnQgSUQgJWQgaW4gU09TAEludmFsaWQgY3JvcCByZXF1ZXN0AERDVCBjb2VmZmljaWVudCBvdXQgb2YgcmFuZ2UARENUIHNjYWxlZCBibG9jayBzaXplICVkeCVkIG5vdCBzdXBwb3J0ZWQAQ29tcG9uZW50IGluZGV4ICVkOiBtaXNtYXRjaGluZyBzYW1wbGluZyByYXRpbyAlZDolZCwgJWQ6JWQsICVjAEJvZ3VzIEh1ZmZtYW4gdGFibGUgZGVmaW5pdGlvbgBCb2d1cyBpbnB1dCBjb2xvcnNwYWNlAEJvZ3VzIEpQRUcgY29sb3JzcGFjZQBCb2d1cyBtYXJrZXIgbGVuZ3RoAFdyb25nIEpQRUcgbGlicmFyeSB2ZXJzaW9uOiBsaWJyYXJ5IGlzICVkLCBjYWxsZXIgZXhwZWN0cyAlZABTYW1wbGluZyBmYWN0b3JzIHRvbyBsYXJnZSBmb3IgaW50ZXJsZWF2ZWQgc2NhbgBJbnZhbGlkIG1lbW9yeSBwb29sIGNvZGUgJWQAVW5zdXBwb3J0ZWQgSlBFRyBkYXRhIHByZWNpc2lvbiAlZABJbnZhbGlkIHByb2dyZXNzaXZlIHBhcmFtZXRlcnMgU3M9JWQgU2U9JWQgQWg9JWQgQWw9JWQASW52YWxpZCBwcm9ncmVzc2l2ZSBwYXJhbWV0ZXJzIGF0IHNjYW4gc2NyaXB0IGVudHJ5ICVkAEJvZ3VzIHNhbXBsaW5nIGZhY3RvcnMASW52YWxpZCBzY2FuIHNjcmlwdCBhdCBlbnRyeSAlZABJbXByb3BlciBjYWxsIHRvIEpQRUcgbGlicmFyeSBpbiBzdGF0ZSAlZABKUEVHIHBhcmFtZXRlciBzdHJ1Y3QgbWlzbWF0Y2g6IGxpYnJhcnkgdGhpbmtzIHNpemUgaXMgJXUsIGNhbGxlciBleHBlY3RzICV1AEJvZ3VzIHZpcnR1YWwgYXJyYXkgYWNjZXNzAEJ1ZmZlciBwYXNzZWQgdG8gSlBFRyBsaWJyYXJ5IGlzIHRvbyBzbWFsbABTdXNwZW5zaW9uIG5vdCBhbGxvd2VkIGhlcmUAQ0NJUjYwMSBzYW1wbGluZyBub3QgaW1wbGVtZW50ZWQgeWV0AFRvbyBtYW55IGNvbG9yIGNvbXBvbmVudHM6ICVkLCBtYXggJWQAVW5zdXBwb3J0ZWQgY29sb3IgY29udmVyc2lvbiByZXF1ZXN0AEJvZ3VzIERBQyBpbmRleCAlZABCb2d1cyBEQUMgdmFsdWUgMHgleABCb2d1cyBESFQgaW5kZXggJWQAQm9ndXMgRFFUIGluZGV4ICVkAEVtcHR5IEpQRUcgaW1hZ2UgKEROTCBub3Qgc3VwcG9ydGVkKQBSZWFkIGZyb20gRU1TIGZhaWxlZABXcml0ZSB0byBFTVMgZmFpbGVkAERpZG4ndCBleHBlY3QgbW9yZSB0aGFuIG9uZSBzY2FuAElucHV0IGZpbGUgcmVhZCBlcnJvcgBPdXRwdXQgZmlsZSB3cml0ZSBlcnJvciAtLS0gb3V0IG9mIGRpc2sgc3BhY2U/AEZyYWN0aW9uYWwgc2FtcGxpbmcgbm90IGltcGxlbWVudGVkIHlldABIdWZmbWFuIGNvZGUgc2l6ZSB0YWJsZSBvdmVyZmxvdwBNaXNzaW5nIEh1ZmZtYW4gY29kZSB0YWJsZSBlbnRyeQBNYXhpbXVtIHN1cHBvcnRlZCBpbWFnZSBkaW1lbnNpb24gaXMgJXUgcGl4ZWxzAEVtcHR5IGlucHV0IGZpbGUAUHJlbWF0dXJlIGVuZCBvZiBpbnB1dCBmaWxlAENhbm5vdCB0cmFuc2NvZGUgZHVlIHRvIG11bHRpcGxlIHVzZSBvZiBxdWFudGl6YXRpb24gdGFibGUgJWQAU2NhbiBzY3JpcHQgZG9lcyBub3QgdHJhbnNtaXQgYWxsIGRhdGEASW52YWxpZCBjb2xvciBxdWFudGl6YXRpb24gbW9kZSBjaGFuZ2UATm90IGltcGxlbWVudGVkIHlldABSZXF1ZXN0ZWQgZmVhdHVyZSB3YXMgb21pdHRlZCBhdCBjb21waWxlIHRpbWUAQXJpdGhtZXRpYyB0YWJsZSAweCUwMnggd2FzIG5vdCBkZWZpbmVkAEJhY2tpbmcgc3RvcmUgbm90IHN1cHBvcnRlZABIdWZmbWFuIHRhYmxlIDB4JTAyeCB3YXMgbm90IGRlZmluZWQASlBFRyBkYXRhc3RyZWFtIGNvbnRhaW5zIG5vIGltYWdlAFF1YW50aXphdGlvbiB0YWJsZSAweCUwMnggd2FzIG5vdCBkZWZpbmVkAE5vdCBhIEpQRUcgZmlsZTogc3RhcnRzIHdpdGggMHglMDJ4IDB4JTAyeABJbnN1ZmZpY2llbnQgbWVtb3J5IChjYXNlICVkKQBDYW5ub3QgcXVhbnRpemUgbW9yZSB0aGFuICVkIGNvbG9yIGNvbXBvbmVudHMAQ2Fubm90IHF1YW50aXplIHRvIGZld2VyIHRoYW4gJWQgY29sb3JzAENhbm5vdCBxdWFudGl6ZSB0byBtb3JlIHRoYW4gJWQgY29sb3JzAEludmFsaWQgSlBFRyBmaWxlIHN0cnVjdHVyZTogJXMgYmVmb3JlIFNPRgBJbnZhbGlkIEpQRUcgZmlsZSBzdHJ1Y3R1cmU6IHR3byBTT0YgbWFya2VycwBJbnZhbGlkIEpQRUcgZmlsZSBzdHJ1Y3R1cmU6IG1pc3NpbmcgU09TIG1hcmtlcgBVbnN1cHBvcnRlZCBKUEVHIHByb2Nlc3M6IFNPRiB0eXBlIDB4JTAyeABJbnZhbGlkIEpQRUcgZmlsZSBzdHJ1Y3R1cmU6IHR3byBTT0kgbWFya2VycwBGYWlsZWQgdG8gY3JlYXRlIHRlbXBvcmFyeSBmaWxlICVzAFJlYWQgZmFpbGVkIG9uIHRlbXBvcmFyeSBmaWxlAFNlZWsgZmFpbGVkIG9uIHRlbXBvcmFyeSBmaWxlAFdyaXRlIGZhaWxlZCBvbiB0ZW1wb3JhcnkgZmlsZSAtLS0gb3V0IG9mIGRpc2sgc3BhY2U/AEFwcGxpY2F0aW9uIHRyYW5zZmVycmVkIHRvbyBmZXcgc2NhbmxpbmVzAFVuc3VwcG9ydGVkIG1hcmtlciB0eXBlIDB4JTAyeABWaXJ0dWFsIGFycmF5IGNvbnRyb2xsZXIgbWVzc2VkIHVwAEltYWdlIHRvbyB3aWRlIGZvciB0aGlzIGltcGxlbWVudGF0aW9uAFJlYWQgZnJvbSBYTVMgZmFpbGVkAFdyaXRlIHRvIFhNUyBmYWlsZWQAQ29weXJpZ2h0IChDKSAyMDE4LCBUaG9tYXMgRy4gTGFuZSwgR3VpZG8gVm9sbGJlZGluZwA5YyAgMTQtSmFuLTIwMTgAQ2F1dGlvbjogcXVhbnRpemF0aW9uIHRhYmxlcyBhcmUgdG9vIGNvYXJzZSBmb3IgYmFzZWxpbmUgSlBFRwBBZG9iZSBBUFAxNCBtYXJrZXI6IHZlcnNpb24gJWQsIGZsYWdzIDB4JTA0eCAweCUwNHgsIHRyYW5zZm9ybSAlZABVbmtub3duIEFQUDAgbWFya2VyIChub3QgSkZJRiksIGxlbmd0aCAldQBVbmtub3duIEFQUDE0IG1hcmtlciAobm90IEFkb2JlKSwgbGVuZ3RoICV1AERlZmluZSBBcml0aG1ldGljIFRhYmxlIDB4JTAyeDogMHglMDJ4AERlZmluZSBIdWZmbWFuIFRhYmxlIDB4JTAyeABEZWZpbmUgUXVhbnRpemF0aW9uIFRhYmxlICVkICBwcmVjaXNpb24gJWQARGVmaW5lIFJlc3RhcnQgSW50ZXJ2YWwgJXUARnJlZWQgRU1TIGhhbmRsZSAldQBPYnRhaW5lZCBFTVMgaGFuZGxlICV1AEVuZCBPZiBJbWFnZQAgICAgICAgICUzZCAlM2QgJTNkICUzZCAlM2QgJTNkICUzZCAlM2QASkZJRiBBUFAwIG1hcmtlcjogdmVyc2lvbiAlZC4lMDJkLCBkZW5zaXR5ICVkeCVkICAlZABXYXJuaW5nOiB0aHVtYm5haWwgaW1hZ2Ugc2l6ZSBkb2VzIG5vdCBtYXRjaCBkYXRhIGxlbmd0aCAldQBKRklGIGV4dGVuc2lvbiBtYXJrZXI6IHR5cGUgMHglMDJ4LCBsZW5ndGggJXUAICAgIHdpdGggJWQgeCAlZCB0aHVtYm5haWwgaW1hZ2UATWlzY2VsbGFuZW91cyBtYXJrZXIgMHglMDJ4LCBsZW5ndGggJXUAVW5leHBlY3RlZCBtYXJrZXIgMHglMDJ4ACAgICAgICAgJTR1ICU0dSAlNHUgJTR1ICU0dSAlNHUgJTR1ICU0dQBRdWFudGl6aW5nIHRvICVkID0gJWQqJWQqJWQgY29sb3JzAFF1YW50aXppbmcgdG8gJWQgY29sb3JzAFNlbGVjdGVkICVkIGNvbG9ycyBmb3IgcXVhbnRpemF0aW9uAEF0IG1hcmtlciAweCUwMngsIHJlY292ZXJ5IGFjdGlvbiAlZABSU1QlZABTbW9vdGhpbmcgbm90IHN1cHBvcnRlZCB3aXRoIG5vbnN0YW5kYXJkIHNhbXBsaW5nIHJhdGlvcwBTdGFydCBPZiBGcmFtZSAweCUwMng6IHdpZHRoPSV1LCBoZWlnaHQ9JXUsIGNvbXBvbmVudHM9JWQAICAgIENvbXBvbmVudCAlZDogJWRoeCVkdiBxPSVkAFN0YXJ0IG9mIEltYWdlAFN0YXJ0IE9mIFNjYW46ICVkIGNvbXBvbmVudHMAICAgIENvbXBvbmVudCAlZDogZGM9JWQgYWM9JWQAICBTcz0lZCwgU2U9JWQsIEFoPSVkLCBBbD0lZABDbG9zZWQgdGVtcG9yYXJ5IGZpbGUgJXMAT3BlbmVkIHRlbXBvcmFyeSBmaWxlICVzAEpGSUYgZXh0ZW5zaW9uIG1hcmtlcjogSlBFRy1jb21wcmVzc2VkIHRodW1ibmFpbCBpbWFnZSwgbGVuZ3RoICV1AEpGSUYgZXh0ZW5zaW9uIG1hcmtlcjogcGFsZXR0ZSB0aHVtYm5haWwgaW1hZ2UsIGxlbmd0aCAldQBKRklGIGV4dGVuc2lvbiBtYXJrZXI6IFJHQiB0aHVtYm5haWwgaW1hZ2UsIGxlbmd0aCAldQBVbnJlY29nbml6ZWQgY29tcG9uZW50IElEcyAlZCAlZCAlZCwgYXNzdW1pbmcgWUNiQ3IARnJlZWQgWE1TIGhhbmRsZSAldQBPYnRhaW5lZCBYTVMgaGFuZGxlICV1AFVua25vd24gQWRvYmUgY29sb3IgdHJhbnNmb3JtIGNvZGUgJWQAQ29ycnVwdCBKUEVHIGRhdGE6IGJhZCBhcml0aG1ldGljIGNvZGUASW5jb25zaXN0ZW50IHByb2dyZXNzaW9uIHNlcXVlbmNlIGZvciBjb21wb25lbnQgJWQgY29lZmZpY2llbnQgJWQAQ29ycnVwdCBKUEVHIGRhdGE6ICV1IGV4dHJhbmVvdXMgYnl0ZXMgYmVmb3JlIG1hcmtlciAweCUwMngAQ29ycnVwdCBKUEVHIGRhdGE6IHByZW1hdHVyZSBlbmQgb2YgZGF0YSBzZWdtZW50AENvcnJ1cHQgSlBFRyBkYXRhOiBiYWQgSHVmZm1hbiBjb2RlAFdhcm5pbmc6IHVua25vd24gSkZJRiByZXZpc2lvbiBudW1iZXIgJWQuJTAyZABQcmVtYXR1cmUgZW5kIG9mIEpQRUcgZmlsZQBDb3JydXB0IEpQRUcgZGF0YTogZm91bmQgbWFya2VyIDB4JTAyeCBpbnN0ZWFkIG9mIFJTVCVkAEludmFsaWQgU09TIHBhcmFtZXRlcnMgZm9yIHNlcXVlbnRpYWwgSlBFRwBBcHBsaWNhdGlvbiB0cmFuc2ZlcnJlZCB0b28gbWFueSBzY2FubGluZXM=");
  base64DecodeToExistingUint8Array(bufferView, 14464, "HiYAADQmAABUJgAAeSYAAJMmAACyJgAAxyYAAOQmAAAOJwAATicAAG0nAACEJwAAmicAAK4nAADrJwAAGygAADcoAABaKAAAkSgAAMgoAADfKAAA/ygAACkpAAB2KQAAkSkAALwpAADYKQAA/SkAACMqAABIKgAAWyoAAHAqAACDKgAAlioAALsqAADQKgAA5CoAAAUrAAAbKwAASisAAHIrAACTKwAAtCsAAOMrAAD0KwAAECwAAE4sAAB1LAAAnCwAALAsAADeLAAABi0AACItAABHLQAAaS0AAJMtAAC+LQAA3C0AAAouAAAyLgAAWS4AAIQuAACxLgAA4S4AAAsvAAA4LwAAWy8AAHkvAACXLwAAzS8AAPcvAAAWMAAAOTAAAGAwAAB1MAAAiTAAAL4wAADOMAAADDEAAE4xAAB4MQAApDEAAMsxAADnMQAAEjIAAC0yAABBMgAAWDIAAGUyAACNMgAAwjIAAP4yAAAsMwAATTMAAHQzAACNMwAAtTMAANgzAADwMwAAFDQAADk0AAA/NAAAeDQAALI0AADRNAAA4DQAAP00AAAbNQAAODUAAFE1AABqNQAArDUAAOY1AAAcNgAAUDYAAGQ2AAB7NgAAoTYAAMg2AAAKNwAARjcAAHc3AACbNwAAyTcAAOQ3AAAcOAAARzgAAAAAAAAlcwo=");
  base64DecodeToExistingUint8Array(bufferView, 14996, "AQAAAAgAAAAQAAAACQAAAAIAAAADAAAACgAAABEAAAAYAAAAIAAAABkAAAASAAAACwAAAAQAAAAFAAAADAAAABMAAAAaAAAAIQAAACgAAAAwAAAAKQAAACIAAAAbAAAAFAAAAA0AAAAGAAAABwAAAA4AAAAVAAAAHAAAACMAAAAqAAAAMQAAADgAAAA5AAAAMgAAACsAAAAkAAAAHQAAABYAAAAPAAAAFwAAAB4AAAAlAAAALAAAADMAAAA6AAAAOwAAADQAAAAtAAAAJgAAAB8AAAAnAAAALgAAADUAAAA8AAAAPQAAADYAAAAvAAAANwAAAD4AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAAAAAAABAAAACAAAABAAAAAJAAAAAgAAAAMAAAAKAAAAEQAAABgAAAAgAAAAGQAAABIAAAALAAAABAAAAAUAAAAMAAAAEwAAABoAAAAhAAAAKAAAADAAAAApAAAAIgAAABsAAAAUAAAADQAAAAYAAAAOAAAAFQAAABwAAAAjAAAAKgAAADEAAAAyAAAAKwAAACQAAAAdAAAAFgAAAB4AAAAlAAAALAAAADMAAAA0AAAALQAAACYAAAAuAAAANQAAADYAAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/");
  base64DecodeToExistingUint8Array(bufferView, 15588, "AQAAAAgAAAAQAAAACQAAAAIAAAADAAAACgAAABEAAAAYAAAAIAAAABkAAAASAAAACwAAAAQAAAAFAAAADAAAABMAAAAaAAAAIQAAACgAAAApAAAAIgAAABsAAAAUAAAADQAAABUAAAAcAAAAIwAAACoAAAArAAAAJAAAAB0AAAAlAAAALAAAAC0AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAAAAAAAEAAAAIAAAAEAAAAAkAAAACAAAAAwAAAAoAAAARAAAAGAAAACAAAAAZAAAAEgAAAAsAAAAEAAAADAAAABMAAAAaAAAAIQAAACIAAAAbAAAAFAAAABwAAAAjAAAAJAAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8=");
  base64DecodeToExistingUint8Array(bufferView, 15972, "AQAAAAgAAAAQAAAACQAAAAIAAAADAAAACgAAABEAAAAYAAAAGQAAABIAAAALAAAAEwAAABoAAAAbAAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAAAAAAABAAAACAAAABAAAAAJAAAAAgAAAAoAAAARAAAAEgAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8=");
  base64DecodeToExistingUint8Array(bufferView, 16212, "AQAAAAgAAAAJAAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAADAMPAMzDz8A8Mz8w/PP/+AQLBwjEy8fINDs3OPT79/IOAQ0CzsHNwj4xPTL+8f36BgkFCsbJxco2OTU69vn18IyDj4BMQ09AvLO/sHxzf3iEi4eIREtHSLS7t7h0e3dyjoGNgk5BTUK+sb2yfnF9eoaJhYpGSUVKtrm1unZ5dXAsIy8g7OPv4BwTHxDc09/YJCsnKOTr5+gUGxcY1NvX0i4hLSLu4e3iHhEdEt7R3domKSUq5unl6hYZFRrW2dXQrKOvoGxjb2Cck5+QXFNfWKSrp6hka2dolJuXmFRbV1Kuoa2ibmFtYp6RnZJeUV1apqmlqmZpZWqWmZWaVllVUBAAAAAAAAAAIAAAAAAAAAAEDFWJ9TQksAQEkyoyKoEcVYIXv8c2JoxVi/RQswfhifU/xzQW1UYp9Ts0FBLRIXQktiaFRiflhCSyE7uijDFABAxVifU0JLAEBJMqMiqBFJMr9Fs0EhO0kygic3G+ANoyILMEEtuiijIjcbvxKOCagRfhgSF8MUqBHgDY4J3wQAAAAAAADwP+9hSLFQMfY/ym9Nka7n9D+qEWzvYtDyPwAAAAAAAPA/O7+nwGkk6T+7IMd7elHhP12rct5VqNE/XwAAAGAAAABhAAAAAAAAAIEBHVoOAoYlEAMUERIECwgUBdgDFwbaARkH5QAcCG8AHgk2ACEKGgAjCw0ACQwGAAoNAwAMDQEAjw9/WiQQJT8mEfIsJxJ8ICgTuRcqFIIRKxXvDC0WoQkuFy8HMBhcBTEZBgQzGgMDNBtAAjYcsQE4HUQBOR71ADsftwA8IIoAPiFoAD8iTgAgIzsAIQksAKUl4VpAJkxIQScNOkMo8S5EKR8mRSozH0YrqBlILBgVSS13EUoudA5LL/sLTTD4CU4xYQhPMgYHMDPNBTI03gQyNQ8EMzZjAzQ31AI1OFwCNjn4ATc6pAE4O2ABOTwlATo99gA7PssAPT+rAD0gjwDBQRJbUEIETVFDLEFSRNg3U0XoL1RGPClWR3kjV0jfHldJqRpISk4XSEskFEpMnBFKTWsPS05RDU1PtgtNMEAK0FEyWFhSHE1ZU45DWlTdO1tV7jRcVq4uXVeaKVZHFiXYWXBVX1qpTGBb2URhXCI+Y10kOGNetDJdVhcu32CoVmVhRk9mYuVHZ2PPQWhkPTxjXV43aWYxUmpnD0xraDlGZ2NeQelqJ1Zsa+dQbWeFS25tl1Vva09Q7m8QWnBtIlXwb+tZcXEdWg==");
  base64DecodeToExistingUint8Array(bufferView, 17236, "AQAAAAIAAAADAAAAAAAAAAEAAAAFAAAAAgAAAAQAAAAGAAAAAwAAAAcAAAAI");
  base64DecodeToExistingUint8Array(bufferView, 17300, "AQAAAAUAAAAGAAAAAgAAAAQAAAAHAAAADAAAAAMAAAAIAAAACwAAAA0AAAAJAAAACgAAAA4AAAAPAAAAAAAAAAEAAAAFAAAABgAAAA4AAAACAAAABAAAAAcAAAANAAAADwAAAAMAAAAIAAAADAAAABAAAAAVAAAACQAAAAsAAAARAAAAFAAAABYAAAAKAAAAEgAAABMAAAAXAAAAGA==");
  base64DecodeToExistingUint8Array(bufferView, 17476, "AQAAAAUAAAAGAAAADgAAAA8AAAACAAAABAAAAAcAAAANAAAAEAAAABkAAAADAAAACAAAAAwAAAARAAAAGAAAABoAAAAJAAAACwAAABIAAAAXAAAAGwAAACAAAAAKAAAAEwAAABYAAAAcAAAAHwAAACEAAAAUAAAAFQAAAB0AAAAeAAAAIgAAACMAAAAAAAAAAQAAAAUAAAAGAAAADgAAAA8AAAAbAAAAAgAAAAQAAAAHAAAADQAAABAAAAAaAAAAHAAAAAMAAAAIAAAADAAAABEAAAAZAAAAHQAAACYAAAAJAAAACwAAABIAAAAYAAAAHgAAACUAAAAnAAAACgAAABMAAAAXAAAAHwAAACQAAAAoAAAALQAAABQAAAAWAAAAIAAAACMAAAApAAAALAAAAC4AAAAVAAAAIQAAACIAAAAqAAAAKwAAAC8AAAAw");
  base64DecodeToExistingUint8Array(bufferView, 17828, "AQAAAAUAAAAGAAAADgAAAA8AAAAbAAAAHAAAAAIAAAAEAAAABwAAAA0AAAAQAAAAGgAAAB0AAAAqAAAAAwAAAAgAAAAMAAAAEQAAABkAAAAeAAAAKQAAACsAAAAJAAAACwAAABIAAAAYAAAAHwAAACgAAAAsAAAANQAAAAoAAAATAAAAFwAAACAAAAAnAAAALQAAADQAAAA2AAAAFAAAABYAAAAhAAAAJgAAAC4AAAAzAAAANwAAADwAAAAVAAAAIgAAACUAAAAvAAAAMgAAADgAAAA7AAAAPQAAACMAAAAkAAAAMAAAADEAAAA5AAAAOgAAAD4AAAA/AAAAAAAAAAEAAAADAAAABwAAAA8AAAAfAAAAPwAAAH8AAAD/AAAA/wEAAP8DAAD/BwAA/w8AAP8fAAD/PwAA/38AAAEAAAADAAAAAwAAAAQAAAAEAAAAAwAAAAMAAABKUEVHTUVNACVsZCVjAAAAQAYAAIA+AAAAAAAAiBMAAHZvaWQAYm9vbABjaGFyAHNpZ25lZCBjaGFyAHVuc2lnbmVkIGNoYXIAc2hvcnQAdW5zaWduZWQgc2hvcnQAaW50AHVuc2lnbmVkIGludABsb25nAHVuc2lnbmVkIGxvbmcAZmxvYXQAZG91YmxlAHN0ZDo6c3RyaW5nAHN0ZDo6YmFzaWNfc3RyaW5nPHVuc2lnbmVkIGNoYXI+AHN0ZDo6d3N0cmluZwBzdGQ6OnUxNnN0cmluZwBzdGQ6OnUzMnN0cmluZwBlbXNjcmlwdGVuOjp2YWwAZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8Y2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2lnbmVkIGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBzaG9ydD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDhfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDhfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MTZfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDE2X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQzMl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxmbG9hdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8ZG91YmxlPgBOU3QzX18yMTJiYXNpY19zdHJpbmdJaE5TXzExY2hhcl90cmFpdHNJaEVFTlNfOWFsbG9jYXRvckloRUVFRQAAAAAEVwAAMkoAAAAAAAABAAAAOCUAAAAAAABOU3QzX18yMTJiYXNpY19zdHJpbmdJd05TXzExY2hhcl90cmFpdHNJd0VFTlNfOWFsbG9jYXRvckl3RUVFRQAABFcAAIxKAAAAAAAAAQAAADglAAAAAAAATlN0M19fMjEyYmFzaWNfc3RyaW5nSURzTlNfMTFjaGFyX3RyYWl0c0lEc0VFTlNfOWFsbG9jYXRvcklEc0VFRUUAAAAEVwAA5EoAAAAAAAABAAAAOCUAAAAAAABOU3QzX18yMTJiYXNpY19zdHJpbmdJRGlOU18xMWNoYXJfdHJhaXRzSURpRUVOU185YWxsb2NhdG9ySURpRUVFRQAAAARXAABASwAAAAAAAAEAAAA4JQAAAAAAAE4xMGVtc2NyaXB0ZW4zdmFsRQAAgFYAAJxLAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0ljRUUAAIBWAAC4SwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJYUVFAACAVgAA4EsAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWhFRQAAgFYAAAhMAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lzRUUAAIBWAAAwTAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJdEVFAACAVgAAWEwAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWlFRQAAgFYAAIBMAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lqRUUAAIBWAACoTAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJbEVFAACAVgAA0EwAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SW1FRQAAgFYAAPhMAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lmRUUAAIBWAAAgTQAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJZEVFAACAVgAASE0AANiCAAByd2EALSsgICAwWDB4AChudWxsKQAAAAAAAAAAEQAKABEREQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAARAA8KERERAwoHAAEACQsLAAAJBgsAAAsABhEAAAARERE=");
  base64DecodeToExistingUint8Array(bufferView, 19937, "CwAAAAAAAAAAEQAKChEREQAKAAACAAkLAAAACQALAAAL");
  base64DecodeToExistingUint8Array(bufferView, 19995, "DA==");
  base64DecodeToExistingUint8Array(bufferView, 20007, "DAAAAAAMAAAAAAkMAAAAAAAMAAAM");
  base64DecodeToExistingUint8Array(bufferView, 20053, "Dg==");
  base64DecodeToExistingUint8Array(bufferView, 20065, "DQAAAAQNAAAAAAkOAAAAAAAOAAAO");
  base64DecodeToExistingUint8Array(bufferView, 20111, "EA==");
  base64DecodeToExistingUint8Array(bufferView, 20123, "DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS");
  base64DecodeToExistingUint8Array(bufferView, 20178, "EgAAABISEgAAAAAAAAk=");
  base64DecodeToExistingUint8Array(bufferView, 20227, "Cw==");
  base64DecodeToExistingUint8Array(bufferView, 20239, "CgAAAAAKAAAAAAkLAAAAAAALAAAL");
  base64DecodeToExistingUint8Array(bufferView, 20285, "DA==");
  base64DecodeToExistingUint8Array(bufferView, 20297, "DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAuAGluZmluaXR5AG5hbg==");
  base64DecodeToExistingUint8Array(bufferView, 20400, "0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAD/////////////////////////////////////////////////////////////////AAECAwQFBgcICf////////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wABAgQHAwYFAAAAaIMAAHJ3YQ==");
  base64DecodeToExistingUint8Array(bufferView, 20796, "pQ==");
  base64DecodeToExistingUint8Array(bufferView, 20835, "//////8=");
  base64DecodeToExistingUint8Array(bufferView, 20912, "");
  base64DecodeToExistingUint8Array(bufferView, 33264, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 33440, "cIQ=");
  base64DecodeToExistingUint8Array(bufferView, 33496, "BQ==");
  base64DecodeToExistingUint8Array(bufferView, 33508, "nA==");
  base64DecodeToExistingUint8Array(bufferView, 33532, "nQAAAJ4AAACQhA==");
  base64DecodeToExistingUint8Array(bufferView, 33556, "Ag==");
  base64DecodeToExistingUint8Array(bufferView, 33571, "//////8=");
  base64DecodeToExistingUint8Array(bufferView, 33640, "BQ==");
  base64DecodeToExistingUint8Array(bufferView, 33652, "og==");
  base64DecodeToExistingUint8Array(bufferView, 33676, "nQAAAKMAAACohAAAAAQ=");
  base64DecodeToExistingUint8Array(bufferView, 33700, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 33715, "Cv////8=");
  base64DecodeToExistingUint8Array(bufferView, 33784, "aIMAAKYAAADAilA=");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var exit = env.exit;
 var invoke_ii = env.invoke_ii;
 var emscripten_longjmp = env.emscripten_longjmp;
 var setTempRet0 = env.setTempRet0;
 var getTempRet0 = env.getTempRet0;
 var invoke_vi = env.invoke_vi;
 var invoke_viii = env.invoke_viii;
 var invoke_vii = env.invoke_vii;
 var invoke_iii = env.invoke_iii;
 var invoke_viiii = env.invoke_viiii;
 var invoke_iiii = env.invoke_iiii;
 var __cxa_allocate_exception = env.__cxa_allocate_exception;
 var __cxa_throw = env.__cxa_throw;
 var abort = env.abort;
 var emscripten_asm_const_int = env.emscripten_asm_const_int;
 var _embind_register_function = env._embind_register_function;
 var _embind_register_value_object = env._embind_register_value_object;
 var _embind_register_value_object_field = env._embind_register_value_object_field;
 var _embind_finalize_value_object = env._embind_finalize_value_object;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var __wasi_fd_close = env.fd_close;
 var __syscall5 = env.__sys_open;
 var __wasi_fd_write = env.fd_write;
 var __syscall221 = env.__sys_fcntl64;
 var __syscall54 = env.__sys_ioctl;
 var __wasi_fd_read = env.fd_read;
 var __wasi_environ_sizes_get = env.environ_sizes_get;
 var __wasi_environ_get = env.environ_get;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var __stack_pointer = 5278400;
 var __stack_end = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 704 | 0;
 __stack_pointer = $1;
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 688 | 0, 23380);
 $5 = HEAP32[$2 >> 2];
 $6 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 328 >> 2] = $5;
 HEAP32[$1 + 332 >> 2] = $6;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 328 | 0), HEAP8[wasm2js_i32$0 + 703 | 0] = wasm2js_i32$1;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0 < 2) {
   break label$1;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               label$15 : {
                label$16 : {
                 label$17 : {
                  label$18 : {
                   label$19 : {
                    label$20 : {
                     label$21 : {
                      label$22 : {
                       label$23 : {
                        $4 = HEAP32[$0 >> 2];
                        $2 = HEAP8[$4 | 0];
                        switch ($2 - 76 | 0) {
                        case 36:
                         break label$10;
                        case 35:
                         break label$11;
                        case 34:
                         break label$12;
                        case 33:
                         break label$13;
                        case 32:
                         break label$14;
                        case 29:
                         break label$15;
                        case 27:
                         break label$16;
                        case 25:
                         break label$17;
                        case 24:
                         break label$18;
                        case 23:
                         break label$19;
                        case 21:
                         break label$20;
                        case 26:
                         break label$21;
                        case 8:
                         break label$22;
                        case 0:
                         break label$23;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 22:
                        case 28:
                        case 30:
                        case 31:
                         break label$4;
                        case 40:
                         break label$6;
                        case 39:
                         break label$7;
                        case 38:
                         break label$8;
                        case 37:
                         break label$9;
                        default:
                         break label$5;
                        }
                       }
                       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                       break label$1;
                      }
                      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                      break label$1;
                     }
                     label$24 : {
                      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
                      if (($3 | 0) != 112) {
                       if (($3 & 255) != 76) {
                        break label$24;
                       }
                       if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 2) - 48 >>> 0 > 9) {
                        break label$24;
                       }
                      }
                      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                      break label$1;
                     }
                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFoldExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                     break label$1;
                    }
                    label$26 : {
                     label$27 : {
                      label$28 : {
                       label$29 : {
                        label$30 : {
                         label$31 : {
                          label$32 : {
                           $2 = HEAP8[$4 + 1 | 0];
                           switch ($2 - 97 | 0) {
                           case 1:
                           case 2:
                            break label$1;
                           case 3:
                            break label$30;
                           case 0:
                            break label$31;
                           default:
                            break label$32;
                           }
                          }
                          if (($2 | 0) == 78) {
                           break label$28;
                          }
                          if (($2 | 0) == 83) {
                           break label$27;
                          }
                          if (($2 | 0) == 110) {
                           break label$29;
                          }
                          if (($2 | 0) == 116) {
                           break label$26;
                          }
                          if (($2 | 0) != 122) {
                           break label$1;
                          }
                          HEAP32[$0 >> 2] = $4 + 2;
                          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                          HEAP32[$1 + 632 >> 2] = $3;
                          if (!$3) {
                           break label$2;
                          }
                          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 23393, $1 + 632 | 0);
                          break label$1;
                         }
                         HEAP32[$0 >> 2] = $4 + 2;
                         $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                         $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 680 | 0, 23383);
                         $6 = HEAP32[$2 >> 2];
                         $5 = HEAP32[$2 + 4 >> 2];
                         HEAP32[$1 + 16 >> 2] = $6;
                         HEAP32[$1 + 20 >> 2] = $5;
                         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0);
                         break label$1;
                        }
                        HEAP32[$0 >> 2] = $4 + 2;
                        $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                        $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 672 | 0, 23386);
                        $5 = HEAP32[$2 >> 2];
                        $6 = HEAP32[$2 + 4 >> 2];
                        HEAP32[$1 + 24 >> 2] = $5;
                        HEAP32[$1 + 28 >> 2] = $6;
                        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 24 | 0);
                        break label$1;
                       }
                       HEAP32[$0 >> 2] = $4 + 2;
                       $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                       $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 664 | 0, 23386);
                       $6 = HEAP32[$2 >> 2];
                       $5 = HEAP32[$2 + 4 >> 2];
                       HEAP32[$1 + 32 >> 2] = $6;
                       HEAP32[$1 + 36 >> 2] = $5;
                       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 32 | 0);
                       break label$1;
                      }
                      HEAP32[$0 >> 2] = $4 + 2;
                      $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                      $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 656 | 0, 23388);
                      $5 = HEAP32[$2 >> 2];
                      $6 = HEAP32[$2 + 4 >> 2];
                      HEAP32[$1 + 40 >> 2] = $5;
                      HEAP32[$1 + 44 >> 2] = $6;
                      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 40 | 0);
                      break label$1;
                     }
                     HEAP32[$0 >> 2] = $4 + 2;
                     $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                     $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 648 | 0, 23391);
                     $6 = HEAP32[$2 >> 2];
                     $5 = HEAP32[$2 + 4 >> 2];
                     HEAP32[$1 + 48 >> 2] = $6;
                     HEAP32[$1 + 52 >> 2] = $5;
                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 48 | 0);
                     break label$1;
                    }
                    HEAP32[$0 >> 2] = $4 + 2;
                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                    HEAP32[$1 + 632 >> 2] = $3;
                    if (!$3) {
                     break label$2;
                    }
                    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 23393, $1 + 632 | 0);
                    break label$1;
                   }
                   label$33 : {
                    label$34 : {
                     label$35 : {
                      label$36 : {
                       label$37 : {
                        $2 = HEAP8[$4 + 1 | 0];
                        switch ($2 - 108 | 0) {
                        case 2:
                         break label$1;
                        case 3:
                         break label$34;
                        case 1:
                         break label$35;
                        case 0:
                         break label$36;
                        default:
                         break label$37;
                        }
                       }
                       if (($2 | 0) == 118) {
                        break label$33;
                       }
                       if (($2 | 0) != 99) {
                        break label$1;
                       }
                       HEAP32[$0 >> 2] = $4 + 2;
                       $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($4);
                       HEAP32[$1 + 632 >> 2] = $3;
                       if (!$3) {
                        break label$2;
                       }
                       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
                       HEAP32[$1 + 644 >> 2] = $3;
                       if (!$3) {
                        break label$2;
                       }
                       $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, $1 + 644 | 0);
                       break label$1;
                      }
                      HEAP32[$0 >> 2] = $4 + 2;
                      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                      $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($2);
                      HEAP32[$1 + 644 >> 2] = $4;
                      if (!$4) {
                       break label$1;
                      }
                      $5 = $0 + 8 | 0;
                      $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($5);
                      while (1) {
                       if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
                        $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($2);
                        HEAP32[$1 + 632 >> 2] = $4;
                        if (!$4) {
                         break label$1;
                        }
                        $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $1 + 632 | 0);
                        continue;
                       }
                       break;
                      }
                      $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 632 | 0, $0, $6);
                      $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CallExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1 + 644 | 0, $1 + 632 | 0);
                      break label$1;
                     }
                     HEAP32[$0 >> 2] = $4 + 2;
                     $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                     $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 624 | 0, 23414);
                     $5 = HEAP32[$2 >> 2];
                     $6 = HEAP32[$2 + 4 >> 2];
                     HEAP32[$1 + 56 >> 2] = $5;
                     HEAP32[$1 + 60 >> 2] = $6;
                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 56 | 0);
                     break label$1;
                    }
                    HEAP32[$0 >> 2] = $4 + 2;
                    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 616 | 0, 23416);
                    $6 = HEAP32[$2 >> 2];
                    $5 = HEAP32[$2 + 4 >> 2];
                    HEAP32[$1 + 64 >> 2] = $6;
                    HEAP32[$1 + 68 >> 2] = $5;
                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 - -64 | 0);
                    break label$1;
                   }
                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseConversionExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                   break label$1;
                  }
                  label$40 : {
                   label$41 : {
                    label$42 : {
                     label$43 : {
                      label$44 : {
                       label$45 : {
                        label$46 : {
                         $2 = HEAP8[$4 + 1 | 0];
                         switch ($2 - 108 | 0) {
                         case 1:
                         case 3:
                         case 4:
                         case 5:
                         case 6:
                         case 9:
                          break label$1;
                         case 10:
                          break label$41;
                         case 8:
                          break label$42;
                         case 7:
                          break label$43;
                         case 2:
                          break label$44;
                         case 0:
                          break label$45;
                         default:
                          break label$46;
                         }
                        }
                        label$47 : {
                         switch ($2 - 97 | 0) {
                         case 0:
                          HEAP32[$0 >> 2] = $4 + 2;
                          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                          HEAP32[$1 + 632 >> 2] = $3;
                          if (!$3) {
                           break label$2;
                          }
                          HEAP8[$1 + 644 | 0] = 1;
                          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $1 + 632 | 0, $1 + 703 | 0, $1 + 644 | 0);
                          break label$1;
                         case 2:
                          HEAP32[$0 >> 2] = $4 + 2;
                          $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($4);
                          HEAP32[$1 + 632 >> 2] = $3;
                          if (!$3) {
                           break label$2;
                          }
                          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
                          HEAP32[$1 + 644 >> 2] = $3;
                          if (!$3) {
                           break label$2;
                          }
                          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b13_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b13_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, $1 + 644 | 0);
                          break label$1;
                         case 1:
                         case 3:
                          break label$1;
                         case 4:
                          break label$47;
                         default:
                          break label$40;
                         }
                        }
                        HEAP32[$0 >> 2] = $4 + 2;
                        $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                        $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 608 | 0, 23431);
                        $5 = HEAP32[$2 >> 2];
                        $6 = HEAP32[$2 + 4 >> 2];
                        HEAP32[$1 + 72 >> 2] = $5;
                        HEAP32[$1 + 76 >> 2] = $6;
                        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 72 | 0);
                        break label$1;
                       }
                       HEAP32[$0 >> 2] = $4 + 2;
                       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                       HEAP32[$1 + 632 >> 2] = $3;
                       if (!$3) {
                        break label$2;
                       }
                       HEAP8[$1 + 644 | 0] = 0;
                       $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $1 + 632 | 0, $1 + 703 | 0, $1 + 644 | 0);
                       break label$1;
                      }
                      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                      break label$1;
                     }
                     HEAP32[$0 >> 2] = $4 + 2;
                     $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
                     HEAP32[$1 + 632 >> 2] = $3;
                     if (!$3) {
                      break label$2;
                     }
                     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
                     HEAP32[$1 + 644 >> 2] = $3;
                     if (!$3) {
                      break label$2;
                     }
                     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, 23433, $1 + 644 | 0);
                     break label$1;
                    }
                    HEAP32[$0 >> 2] = $4 + 2;
                    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
                    HEAP32[$1 + 632 >> 2] = $3;
                    if (!$3) {
                     break label$2;
                    }
                    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
                    HEAP32[$1 + 644 >> 2] = $3;
                    if (!$3) {
                     break label$2;
                    }
                    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, $1 + 644 | 0);
                    break label$1;
                   }
                   HEAP32[$0 >> 2] = $4 + 2;
                   $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 600 | 0, 23438);
                   $6 = HEAP32[$2 >> 2];
                   $5 = HEAP32[$2 + 4 >> 2];
                   HEAP32[$1 + 80 >> 2] = $6;
                   HEAP32[$1 + 84 >> 2] = $5;
                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 80 | 0);
                   break label$1;
                  }
                  if (($2 | 0) != 86) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = $4 + 2;
                  $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 592 | 0, 23440);
                  $5 = HEAP32[$2 >> 2];
                  $6 = HEAP32[$2 + 4 >> 2];
                  HEAP32[$1 + 88 >> 2] = $5;
                  HEAP32[$1 + 92 >> 2] = $6;
                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 88 | 0);
                  break label$1;
                 }
                 label$50 : {
                  label$51 : {
                   label$52 : {
                    $2 = HEAP8[$4 + 1 | 0];
                    switch ($2 - 111 | 0) {
                    case 1:
                     break label$1;
                    case 2:
                     break label$50;
                    case 0:
                     break label$52;
                    default:
                     break label$51;
                    }
                   }
                   HEAP32[$0 >> 2] = $4 + 2;
                   $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 584 | 0, 23443);
                   $6 = HEAP32[$2 >> 2];
                   $5 = HEAP32[$2 + 4 >> 2];
                   HEAP32[$1 + 96 >> 2] = $6;
                   HEAP32[$1 + 100 >> 2] = $5;
                   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 96 | 0);
                   break label$1;
                  }
                  if (($2 | 0) != 79) {
                   break label$1;
                  }
                  HEAP32[$0 >> 2] = $4 + 2;
                  $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 576 | 0, 23445);
                  $5 = HEAP32[$2 >> 2];
                  $6 = HEAP32[$2 + 4 >> 2];
                  HEAP32[$1 + 104 >> 2] = $5;
                  HEAP32[$1 + 108 >> 2] = $6;
                  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 104 | 0);
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = $4 + 2;
                 $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 568 | 0, 23448);
                 $6 = HEAP32[$2 >> 2];
                 $5 = HEAP32[$2 + 4 >> 2];
                 HEAP32[$1 + 112 >> 2] = $6;
                 HEAP32[$1 + 116 >> 2] = $5;
                 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 112 | 0);
                 break label$1;
                }
                $2 = HEAP8[$4 + 1 | 0];
                if (($2 | 0) != 116) {
                 if (($2 | 0) != 101) {
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = $4 + 2;
                 $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 560 | 0, 23451);
                 $5 = HEAP32[$2 >> 2];
                 $6 = HEAP32[$2 + 4 >> 2];
                 HEAP32[$1 + 120 >> 2] = $5;
                 HEAP32[$1 + 124 >> 2] = $6;
                 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 120 | 0);
                 break label$1;
                }
                HEAP32[$0 >> 2] = $4 + 2;
                $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 552 | 0, 23454);
                $6 = HEAP32[$2 >> 2];
                $5 = HEAP32[$2 + 4 >> 2];
                HEAP32[$1 + 128 >> 2] = $6;
                HEAP32[$1 + 132 >> 2] = $5;
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 128 | 0);
                break label$1;
               }
               $2 = HEAP8[$4 + 1 | 0];
               if (($2 | 0) != 108) {
                if (($2 | 0) != 120) {
                 break label$1;
                }
                HEAP32[$0 >> 2] = $4 + 2;
                $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
                HEAP32[$1 + 632 >> 2] = $3;
                if (!$3) {
                 break label$2;
                }
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
                HEAP32[$1 + 644 >> 2] = $3;
                if (!$3) {
                 break label$2;
                }
                $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, $1 + 644 | 0);
                break label$1;
               }
               HEAP32[$0 >> 2] = $4 + 2;
               $2 = $0 + 8 | 0;
               $5 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($2);
               while (1) {
                if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
                 $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                 HEAP32[$1 + 632 >> 2] = $4;
                 if (!$4) {
                  break label$1;
                 }
                 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 632 | 0);
                 continue;
                }
                break;
               }
               HEAP32[$1 + 644 >> 2] = 0;
               $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 632 | 0, $0, $5);
               $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20std__nullptr_t_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28std__nullptr_t___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1 + 644 | 0, $1 + 632 | 0);
               break label$1;
              }
              label$57 : {
               label$58 : {
                label$59 : {
                 label$60 : {
                  $2 = HEAP8[$4 + 1 | 0];
                  switch ($2 - 115 | 0) {
                  case 1:
                   break label$57;
                  case 0:
                   break label$59;
                  default:
                   break label$60;
                  }
                 }
                 if (($2 | 0) == 83) {
                  break label$58;
                 }
                 if (($2 | 0) != 101) {
                  break label$1;
                 }
                 HEAP32[$0 >> 2] = $4 + 2;
                 $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 544 | 0, 23456);
                 $5 = HEAP32[$2 >> 2];
                 $6 = HEAP32[$2 + 4 >> 2];
                 HEAP32[$1 + 136 >> 2] = $5;
                 HEAP32[$1 + 140 >> 2] = $6;
                 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 136 | 0);
                 break label$1;
                }
                HEAP32[$0 >> 2] = $4 + 2;
                $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 536 | 0, 23459);
                $6 = HEAP32[$2 >> 2];
                $5 = HEAP32[$2 + 4 >> 2];
                HEAP32[$1 + 144 >> 2] = $6;
                HEAP32[$1 + 148 >> 2] = $5;
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 144 | 0);
                break label$1;
               }
               HEAP32[$0 >> 2] = $4 + 2;
               $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
               $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 528 | 0, 23462);
               $5 = HEAP32[$2 >> 2];
               $6 = HEAP32[$2 + 4 >> 2];
               HEAP32[$1 + 152 >> 2] = $5;
               HEAP32[$1 + 156 >> 2] = $6;
               $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 152 | 0);
               break label$1;
              }
              HEAP32[$0 >> 2] = $4 + 2;
              $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
              $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 520 | 0, 23466);
              $6 = HEAP32[$2 >> 2];
              $5 = HEAP32[$2 + 4 >> 2];
              HEAP32[$1 + 160 >> 2] = $6;
              HEAP32[$1 + 164 >> 2] = $5;
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 160 | 0);
              break label$1;
             }
             label$61 : {
              label$62 : {
               label$63 : {
                label$64 : {
                 label$65 : {
                  label$66 : {
                   $2 = HEAP8[$4 + 1 | 0];
                   switch ($2 - 105 | 0) {
                   case 1:
                   case 2:
                    break label$1;
                   case 4:
                    break label$61;
                   case 3:
                    break label$63;
                   case 0:
                    break label$65;
                   default:
                    break label$66;
                   }
                  }
                  switch ($2 - 73 | 0) {
                  case 3:
                   break label$62;
                  case 0:
                   break label$64;
                  default:
                   break label$1;
                  }
                 }
                 HEAP32[$0 >> 2] = $4 + 2;
                 $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 512 | 0, 23468);
                 $5 = HEAP32[$2 >> 2];
                 $6 = HEAP32[$2 + 4 >> 2];
                 HEAP32[$1 + 168 >> 2] = $5;
                 HEAP32[$1 + 172 >> 2] = $6;
                 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 168 | 0);
                 break label$1;
                }
                HEAP32[$0 >> 2] = $4 + 2;
                $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
                $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 504 | 0, 23470);
                $6 = HEAP32[$2 >> 2];
                $5 = HEAP32[$2 + 4 >> 2];
                HEAP32[$1 + 176 >> 2] = $6;
                HEAP32[$1 + 180 >> 2] = $5;
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 176 | 0);
                break label$1;
               }
               HEAP32[$0 >> 2] = $4 + 2;
               $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
               $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23431);
               $5 = HEAP32[$2 >> 2];
               $6 = HEAP32[$2 + 4 >> 2];
               HEAP32[$1 + 184 >> 2] = $5;
               HEAP32[$1 + 188 >> 2] = $6;
               $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 184 | 0);
               break label$1;
              }
              HEAP32[$0 >> 2] = $4 + 2;
              $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
              $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 488 | 0, 23473);
              $6 = HEAP32[$2 >> 2];
              $5 = HEAP32[$2 + 4 >> 2];
              HEAP32[$1 + 192 >> 2] = $6;
              HEAP32[$1 + 196 >> 2] = $5;
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 192 | 0);
              break label$1;
             }
             HEAP32[$0 >> 2] = $4 + 2;
             if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
              $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
              $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 480 | 0, 23476);
              $5 = HEAP32[$2 >> 2];
              $6 = HEAP32[$2 + 4 >> 2];
              HEAP32[$1 + 200 >> 2] = $5;
              HEAP32[$1 + 204 >> 2] = $6;
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 200 | 0);
              break label$1;
             }
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
             HEAP32[$1 + 632 >> 2] = $3;
             if (!$3) {
              break label$2;
             }
             $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $1 + 632 | 0, 23476);
             break label$1;
            }
            label$68 : {
             label$69 : {
              label$70 : {
               label$71 : {
                label$72 : {
                 label$73 : {
                  $2 = HEAP8[$4 + 1 | 0];
                  switch ($2 - 97 | 0) {
                  case 1:
                  case 2:
                  case 3:
                  case 5:
                   break label$1;
                  case 6:
                   break label$70;
                  case 4:
                   break label$71;
                  case 0:
                   break label$72;
                  default:
                   break label$73;
                  }
                 }
                 switch ($2 - 116 | 0) {
                 case 4:
                  break label$68;
                 case 0:
                  break label$69;
                 case 3:
                  break label$72;
                 default:
                  break label$1;
                 }
                }
                $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNewExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                break label$1;
               }
               HEAP32[$0 >> 2] = $4 + 2;
               $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
               $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 472 | 0, 23479);
               $6 = HEAP32[$2 >> 2];
               $5 = HEAP32[$2 + 4 >> 2];
               HEAP32[$1 + 208 >> 2] = $6;
               HEAP32[$1 + 212 >> 2] = $5;
               $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 208 | 0);
               break label$1;
              }
              HEAP32[$0 >> 2] = $4 + 2;
              $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
              $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 464 | 0, 23468);
              $5 = HEAP32[$2 >> 2];
              $6 = HEAP32[$2 + 4 >> 2];
              HEAP32[$1 + 216 >> 2] = $5;
              HEAP32[$1 + 220 >> 2] = $6;
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 216 | 0);
              break label$1;
             }
             HEAP32[$0 >> 2] = $4 + 2;
             $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
             $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 456 | 0, 23482);
             $6 = HEAP32[$2 >> 2];
             $5 = HEAP32[$2 + 4 >> 2];
             HEAP32[$1 + 224 >> 2] = $6;
             HEAP32[$1 + 228 >> 2] = $5;
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 224 | 0);
             break label$1;
            }
            HEAP32[$0 >> 2] = $4 + 2;
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
            HEAP32[$1 + 632 >> 2] = $3;
            if (!$3) {
             break label$2;
            }
            $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1 + 632 | 0);
            break label$1;
           }
           label$74 : {
            label$75 : {
             label$76 : {
              label$77 : {
               $2 = HEAP8[$4 + 1 | 0];
               switch ($2 - 110 | 0) {
               case 2:
               case 3:
                break label$1;
               case 4:
                break label$75;
               case 1:
                break label$76;
               case 0:
                break label$77;
               default:
                break label$74;
               }
              }
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
              break label$1;
             }
             HEAP32[$0 >> 2] = $4 + 2;
             $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
             $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 448 | 0, 23495);
             $5 = HEAP32[$2 >> 2];
             $6 = HEAP32[$2 + 4 >> 2];
             HEAP32[$1 + 232 >> 2] = $5;
             HEAP32[$1 + 236 >> 2] = $6;
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 232 | 0);
             break label$1;
            }
            HEAP32[$0 >> 2] = $4 + 2;
            $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
            $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 440 | 0, 23498);
            $6 = HEAP32[$2 >> 2];
            $5 = HEAP32[$2 + 4 >> 2];
            HEAP32[$1 + 240 >> 2] = $6;
            HEAP32[$1 + 244 >> 2] = $5;
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 240 | 0);
            break label$1;
           }
           if (($2 | 0) != 82) {
            break label$1;
           }
           HEAP32[$0 >> 2] = $4 + 2;
           $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
           $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 432 | 0, 23500);
           $5 = HEAP32[$2 >> 2];
           $6 = HEAP32[$2 + 4 >> 2];
           HEAP32[$1 + 248 >> 2] = $5;
           HEAP32[$1 + 252 >> 2] = $6;
           $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 248 | 0);
           break label$1;
          }
          label$78 : {
           label$79 : {
            label$80 : {
             label$81 : {
              label$82 : {
               label$83 : {
                $2 = HEAP8[$4 + 1 | 0];
                switch ($2 - 108 | 0) {
                case 2:
                case 3:
                case 5:
                case 6:
                 break label$1;
                case 8:
                 break label$78;
                case 7:
                 break label$79;
                case 4:
                 break label$80;
                case 0:
                 break label$82;
                case 1:
                 break label$83;
                default:
                 break label$81;
                }
               }
               HEAP32[$0 >> 2] = $4 + 2;
               $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
               $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 424 | 0, 23503);
               $6 = HEAP32[$2 >> 2];
               $5 = HEAP32[$2 + 4 >> 2];
               HEAP32[$1 + 256 >> 2] = $6;
               HEAP32[$1 + 260 >> 2] = $5;
               $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 256 | 0);
               break label$1;
              }
              HEAP32[$0 >> 2] = $4 + 2;
              $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
              $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 416 | 0, 23507);
              $5 = HEAP32[$2 >> 2];
              $6 = HEAP32[$2 + 4 >> 2];
              HEAP32[$1 + 264 >> 2] = $5;
              HEAP32[$1 + 268 >> 2] = $6;
              $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 264 | 0);
              break label$1;
             }
             if (($2 | 0) != 76) {
              break label$1;
             }
             HEAP32[$0 >> 2] = $4 + 2;
             $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
             $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 408 | 0, 23509);
             $6 = HEAP32[$2 >> 2];
             $5 = HEAP32[$2 + 4 >> 2];
             HEAP32[$1 + 272 >> 2] = $6;
             HEAP32[$1 + 276 >> 2] = $5;
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 272 | 0);
             break label$1;
            }
            HEAP32[$0 >> 2] = $4 + 2;
            if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
             $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
             $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 400 | 0, 23512);
             $5 = HEAP32[$2 >> 2];
             $6 = HEAP32[$2 + 4 >> 2];
             HEAP32[$1 + 280 >> 2] = $5;
             HEAP32[$1 + 284 >> 2] = $6;
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 280 | 0);
             break label$1;
            }
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
            HEAP32[$1 + 632 >> 2] = $3;
            if (!$3) {
             break label$2;
            }
            $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $1 + 632 | 0, 23512);
            break label$1;
           }
           HEAP32[$0 >> 2] = $4 + 2;
           $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
           $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 392 | 0, 23507);
           $6 = HEAP32[$2 >> 2];
           $5 = HEAP32[$2 + 4 >> 2];
           HEAP32[$1 + 288 >> 2] = $6;
           HEAP32[$1 + 292 >> 2] = $5;
           $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 288 | 0);
           break label$1;
          }
          HEAP32[$0 >> 2] = $4 + 2;
          $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
          HEAP32[$1 + 632 >> 2] = $3;
          if (!$3) {
           break label$2;
          }
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
          HEAP32[$1 + 644 >> 2] = $3;
          if (!$3) {
           break label$2;
          }
          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, 23515, $1 + 644 | 0);
          break label$1;
         }
         if (HEAPU8[$4 + 1 | 0] != 117) {
          break label$1;
         }
         HEAP32[$0 >> 2] = $4 + 2;
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
         $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($3);
         HEAP32[$1 + 632 >> 2] = $4;
         if (!$4) {
          break label$2;
         }
         $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($3);
         HEAP32[$1 + 644 >> 2] = $4;
         if (!$4) {
          break label$2;
         }
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($3);
         HEAP32[$1 + 388 >> 2] = $3;
         if (!$3) {
          break label$2;
         }
         $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConditionalExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, $1 + 644 | 0, $1 + 388 | 0);
         break label$1;
        }
        label$85 : {
         label$86 : {
          $2 = HEAP8[$4 + 1 | 0];
          if (($2 | 0) != 77) {
           if (($2 | 0) == 83) {
            break label$85;
           }
           if (($2 | 0) == 115) {
            break label$86;
           }
           if (($2 | 0) != 109) {
            if (($2 | 0) != 99) {
             break label$1;
            }
            HEAP32[$0 >> 2] = $4 + 2;
            $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($4);
            HEAP32[$1 + 632 >> 2] = $3;
            if (!$3) {
             break label$2;
            }
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
            HEAP32[$1 + 644 >> 2] = $3;
            if (!$3) {
             break label$2;
            }
            $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b17_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b17_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, $1 + 644 | 0);
            break label$1;
           }
           HEAP32[$0 >> 2] = $4 + 2;
           $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
           $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 376 | 0, 23535);
           $5 = HEAP32[$2 >> 2];
           $6 = HEAP32[$2 + 4 >> 2];
           HEAP32[$1 + 296 >> 2] = $5;
           HEAP32[$1 + 300 >> 2] = $6;
           $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 296 | 0);
           break label$1;
          }
          HEAP32[$0 >> 2] = $4 + 2;
          $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
          $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 368 | 0, 23537);
          $6 = HEAP32[$2 >> 2];
          $5 = HEAP32[$2 + 4 >> 2];
          HEAP32[$1 + 304 >> 2] = $6;
          HEAP32[$1 + 308 >> 2] = $5;
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 304 | 0);
          break label$1;
         }
         HEAP32[$0 >> 2] = $4 + 2;
         $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
         $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 360 | 0, 23540);
         $5 = HEAP32[$2 >> 2];
         $6 = HEAP32[$2 + 4 >> 2];
         HEAP32[$1 + 312 >> 2] = $5;
         HEAP32[$1 + 316 >> 2] = $6;
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 312 | 0);
         break label$1;
        }
        HEAP32[$0 >> 2] = $4 + 2;
        $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
        $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 352 | 0, 23543);
        $6 = HEAP32[$2 >> 2];
        $5 = HEAP32[$2 + 4 >> 2];
        HEAP32[$1 + 320 >> 2] = $6;
        HEAP32[$1 + 324 >> 2] = $5;
        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 320 | 0);
        break label$1;
       }
       label$89 : {
        label$90 : {
         label$91 : {
          label$92 : {
           label$93 : {
            label$94 : {
             label$95 : {
              $2 = HEAP8[$4 + 1 | 0];
              switch ($2 - 112 | 0) {
              case 1:
              case 3:
               break label$1;
              case 4:
               break label$92;
              case 2:
               break label$93;
              case 0:
               break label$94;
              default:
               break label$95;
              }
             }
             if (($2 | 0) == 80) {
              break label$89;
             }
             if (($2 | 0) == 90) {
              break label$90;
             }
             if (($2 | 0) == 122) {
              break label$91;
             }
             if (($2 | 0) != 99) {
              break label$1;
             }
             HEAP32[$0 >> 2] = $4 + 2;
             $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($4);
             HEAP32[$1 + 632 >> 2] = $3;
             if (!$3) {
              break label$2;
             }
             $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
             HEAP32[$1 + 644 >> 2] = $3;
             if (!$3) {
              break label$2;
             }
             $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0, $1 + 644 | 0);
             break label$1;
            }
            HEAP32[$0 >> 2] = $4 + 2;
            $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
            HEAP32[$1 + 632 >> 2] = $3;
            if (!$3) {
             break label$2;
            }
            $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0);
            break label$1;
           }
           $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
           break label$1;
          }
          HEAP32[$0 >> 2] = $4 + 2;
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
          HEAP32[$1 + 632 >> 2] = $3;
          if (!$3) {
           break label$2;
          }
          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 23559, $1 + 632 | 0);
          break label$1;
         }
         HEAP32[$0 >> 2] = $4 + 2;
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
         HEAP32[$1 + 632 >> 2] = $3;
         if (!$3) {
          break label$2;
         }
         $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 23559, $1 + 632 | 0);
         break label$1;
        }
        HEAP32[$0 >> 2] = $4 + 2;
        $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
        if (($4 | 0) != 102) {
         if (($4 & 255) != 84) {
          break label$1;
         }
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
         HEAP32[$1 + 632 >> 2] = $3;
         if (!$3) {
          break label$2;
         }
         $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0);
         break label$1;
        }
        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
        HEAP32[$1 + 632 >> 2] = $3;
        if (!$3) {
         break label$2;
        }
        $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1 + 632 | 0);
        break label$1;
       }
       HEAP32[$0 >> 2] = $4 + 2;
       $2 = $0 + 8 | 0;
       $5 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($2);
       while (1) {
        if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
         $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
         HEAP32[$1 + 632 >> 2] = $4;
         if (!$4) {
          break label$1;
         }
         $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 632 | 0);
         continue;
        }
        break;
       }
       $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 632 | 0, $0, $5);
       wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NodeArrayNode_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1 + 632 | 0), HEAP32[wasm2js_i32$0 + 644 >> 2] = wasm2js_i32$1;
       $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1 + 644 | 0);
       break label$1;
      }
      label$99 : {
       label$100 : {
        label$101 : {
         label$102 : {
          label$103 : {
           $2 = HEAP8[$4 + 1 | 0];
           switch ($2 - 105 | 0) {
           case 1:
           case 2:
            break label$1;
           case 3:
            break label$101;
           case 0:
            break label$102;
           default:
            break label$103;
           }
          }
          if (($2 | 0) == 119) {
           break label$99;
          }
          if (($2 | 0) == 114) {
           break label$100;
          }
          if (($2 | 0) != 101) {
           break label$1;
          }
          HEAP32[$0 >> 2] = $4 + 2;
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
          HEAP32[$1 + 632 >> 2] = $3;
          if (!$3) {
           break label$2;
          }
          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 23580, $1 + 632 | 0);
          break label$1;
         }
         HEAP32[$0 >> 2] = $4 + 2;
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
         HEAP32[$1 + 632 >> 2] = $3;
         if (!$3) {
          break label$2;
         }
         $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 23580, $1 + 632 | 0);
         break label$1;
        }
        HEAP32[$0 >> 2] = $4 + 2;
        $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($4);
        HEAP32[$1 + 644 >> 2] = $3;
        if (!$3) {
         break label$2;
        }
        $2 = $0 + 8 | 0;
        $5 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($2);
        while (1) {
         if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
          $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($4);
          HEAP32[$1 + 632 >> 2] = $3;
          if (!$3) {
           break label$2;
          }
          $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($2, $1 + 632 | 0);
          continue;
         }
         break;
        }
        $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 632 | 0, $0, $5);
        $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1 + 644 | 0, $1 + 632 | 0);
        break label$1;
       }
       HEAP32[$0 >> 2] = $4 + 2;
       $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b6_5d__28char_20const_20_28__29_20_5b6_5d_29($0, 23589);
       break label$1;
      }
      HEAP32[$0 >> 2] = $4 + 2;
      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
      HEAP32[$1 + 632 >> 2] = $3;
      if (!$3) {
       break label$2;
      }
      $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ThrowExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0);
      break label$1;
     }
     if ($2 - 49 >>> 0 < 9) {
      break label$3;
     }
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 344 | 0, 23595);
    $5 = HEAP32[$2 >> 2];
    $6 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = $5;
    HEAP32[$1 + 12 >> 2] = $6;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     HEAP32[$1 + 632 >> 2] = $3;
     if (!$3) {
      break label$2;
     }
     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 336 | 0, 23607);
    $6 = HEAP32[$2 >> 2];
    $5 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 >> 2] = $6;
    HEAP32[$1 + 4 >> 2] = $5;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1)) {
     break label$1;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    HEAP32[$1 + 632 >> 2] = $3;
    if (!$3) {
     break label$2;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 632 | 0);
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   break label$1;
  }
  $3 = 0;
 }
 __stack_pointer = $1 + 704 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = 0;
 $5 = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               label$15 : {
                label$16 : {
                 label$17 : {
                  label$18 : {
                   label$19 : {
                    label$20 : {
                     label$21 : {
                      label$22 : {
                       label$23 : {
                        label$24 : {
                         label$25 : {
                          label$26 : {
                           label$27 : {
                            label$28 : {
                             label$29 : {
                              label$30 : {
                               label$31 : {
                                label$32 : {
                                 label$33 : {
                                  label$34 : {
                                   label$35 : {
                                    label$36 : {
                                     label$37 : {
                                      label$38 : {
                                       label$39 : {
                                        label$40 : {
                                         label$41 : {
                                          label$42 : {
                                           $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
                                           switch ($2 - 65 | 0) {
                                           case 6:
                                            break label$10;
                                           case 2:
                                            break label$11;
                                           case 14:
                                            break label$12;
                                           case 17:
                                            break label$13;
                                           case 15:
                                            break label$14;
                                           case 19:
                                            break label$15;
                                           case 12:
                                            break label$16;
                                           case 0:
                                            break label$17;
                                           case 5:
                                            break label$18;
                                           case 3:
                                            break label$19;
                                           case 52:
                                            break label$20;
                                           case 57:
                                            break label$21;
                                           case 38:
                                            break label$22;
                                           case 36:
                                            break label$23;
                                           case 35:
                                            break label$24;
                                           case 37:
                                            break label$25;
                                           case 46:
                                            break label$26;
                                           case 45:
                                            break label$27;
                                           case 56:
                                            break label$28;
                                           case 55:
                                            break label$29;
                                           case 44:
                                            break label$30;
                                           case 43:
                                            break label$31;
                                           case 41:
                                            break label$32;
                                           case 40:
                                            break label$33;
                                           case 51:
                                            break label$34;
                                           case 50:
                                            break label$35;
                                           case 39:
                                            break label$36;
                                           case 32:
                                            break label$37;
                                           case 34:
                                            break label$38;
                                           case 33:
                                            break label$39;
                                           case 54:
                                            break label$40;
                                           case 53:
                                            break label$41;
                                           case 10:
                                           case 21:
                                           case 49:
                                            break label$42;
                                           case 20:
                                            break label$5;
                                           case 18:
                                            break label$9;
                                           default:
                                            break label$8;
                                           }
                                          }
                                          label$43 : {
                                           $2 = ($2 | 0) == 114;
                                           $2 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $2) | 0) == 86 ? $2 ? 2 : 1 : $2;
                                           $2 = $2 + (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $2) | 0) == 75) | 0;
                                           switch (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $2) & 255) - 68 | 0) {
                                           case 2:
                                            break label$4;
                                           case 0:
                                            break label$43;
                                           default:
                                            break label$5;
                                           }
                                          }
                                          $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $2 + 1 | 0) & 255;
                                          $2 = $4 - 111 | 0;
                                          if ($2 >>> 0 > 9 | !(1 << $2 & 769)) {
                                           break label$6;
                                          }
                                          break label$4;
                                         }
                                         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                         $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 31320);
                                         break label$1;
                                        }
                                        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                        $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b8_5d__28char_20const_20_28__29_20_5b8_5d_29($0, 23619);
                                        break label$1;
                                       }
                                       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                       $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 31325);
                                       break label$1;
                                      }
                                      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                      $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23635);
                                      break label$1;
                                     }
                                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0, 23640);
                                     break label$1;
                                    }
                                    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                    $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b14_5d__28char_20const_20_28__29_20_5b14_5d_29($0, 23652);
                                    break label$1;
                                   }
                                   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                   $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b6_5d__28char_20const_20_28__29_20_5b6_5d_29($0, 23666);
                                   break label$1;
                                  }
                                  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                  $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b15_5d__28char_20const_20_28__29_20_5b15_5d_29($0, 23672);
                                  break label$1;
                                 }
                                 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                 $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0, 31330);
                                 break label$1;
                                }
                                HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                                $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b13_5d__28char_20const_20_28__29_20_5b13_5d_29($0, 31334);
                                break label$1;
                               }
                               HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                               $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 31347);
                               break label$1;
                              }
                              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                              $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b14_5d__28char_20const_20_28__29_20_5b14_5d_29($0, 31352);
                              break label$1;
                             }
                             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                             $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 31366);
                             break label$1;
                            }
                            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                            $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b19_5d__28char_20const_20_28__29_20_5b19_5d_29($0);
                            break label$1;
                           }
                           HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                           $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b9_5d__28char_20const_20_28__29_20_5b9_5d_29($0, 23702);
                           break label$1;
                          }
                          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                          $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b18_5d__28char_20const_20_28__29_20_5b18_5d_29($0, 23711);
                          break label$1;
                         }
                         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                         $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b6_5d__28char_20const_20_28__29_20_5b6_5d_29($0, 31395);
                         break label$1;
                        }
                        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                        $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b7_5d__28char_20const_20_28__29_20_5b7_5d_29($0);
                        break label$1;
                       }
                       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                       $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0, 31408);
                       break label$1;
                      }
                      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                      $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 31420);
                      break label$1;
                     }
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0, 25252);
                     break label$1;
                    }
                    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
                    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($3 + 16 | 0, $0);
                    if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($3 + 16 | 0)) {
                     break label$7;
                    }
                    wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $3 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
                    break label$2;
                   }
                   label$44 : {
                    switch ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) - 79 | 0) {
                    case 21:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 31431);
                     break label$1;
                    case 22:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 31441);
                     break label$1;
                    case 23:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 31452);
                     break label$1;
                    case 25:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 31462);
                     break label$1;
                    case 26:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b9_5d__28char_20const_20_28__29_20_5b9_5d_29($0, 31472);
                     break label$1;
                    case 36:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b9_5d__28char_20const_20_28__29_20_5b9_5d_29($0, 31481);
                     break label$1;
                    case 38:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b8_5d__28char_20const_20_28__29_20_5b8_5d_29($0, 31490);
                     break label$1;
                    case 18:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23243);
                     break label$1;
                    case 20:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b15_5d__28char_20const_20_28__29_20_5b15_5d_29($0, 31498);
                     break label$1;
                    case 31:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b15_5d__28char_20const_20_28__29_20_5b15_5d_29($0, 31513);
                     break label$1;
                    case 5:
                    case 37:
                     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                     break label$3;
                    case 39:
                     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseVectorType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                     break label$3;
                    case 33:
                     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
                     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                     HEAP32[$3 + 16 >> 2] = $2;
                     if (!$2) {
                      break label$1;
                     }
                     wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
                     break label$2;
                    case 0:
                    case 32:
                    case 40:
                    case 41:
                     break label$44;
                    default:
                     break label$1;
                    }
                   }
                   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                   break label$3;
                  }
                  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                  break label$3;
                 }
                 $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseArrayType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                 break label$3;
                }
                $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePointerToMemberType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                break label$3;
               }
               label$58 : {
                label$59 : {
                 label$60 : {
                  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) & 255;
                  switch ($2 - 115 | 0) {
                  case 1:
                   break label$58;
                  case 0:
                  case 2:
                   break label$59;
                  default:
                   break label$60;
                  }
                 }
                 if (($2 | 0) != 101) {
                  break label$58;
                 }
                }
                $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
                break label$3;
               }
               $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
               $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($2);
               HEAP32[$3 + 28 >> 2] = $1;
               if (!$1) {
                break label$7;
               }
               if (!HEAPU8[$0 + 388 | 0]) {
                break label$2;
               }
               if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
                break label$2;
               }
               $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($2, 0);
               HEAP32[$3 + 16 >> 2] = $1;
               if (!$1) {
                break label$7;
               }
               wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 28 | 0, $3 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
               break label$2;
              }
              HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
              $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
              HEAP32[$3 + 16 >> 2] = $1;
              if (!$1) {
               break label$7;
              }
              wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PointerType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
              break label$2;
             }
             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
             $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
             HEAP32[$3 + 16 >> 2] = $1;
             if (!$1) {
              break label$7;
             }
             HEAP32[$3 + 12 >> 2] = 0;
             wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $3 + 16 | 0, $3 + 12 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
             break label$2;
            }
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
            HEAP32[$3 + 16 >> 2] = $1;
            if (!$1) {
             break label$7;
            }
            HEAP32[$3 + 12 >> 2] = 1;
            wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $3 + 16 | 0, $3 + 12 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
            break label$2;
           }
           HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
           $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
           HEAP32[$3 + 16 >> 2] = $2;
           if (!$2) {
            break label$1;
           }
           wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0, $3 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
           break label$2;
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
          HEAP32[$3 + 16 >> 2] = $1;
          if (!$1) {
           break label$7;
          }
          wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b11_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b11_5d_29($0, $3 + 16 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
          break label$2;
         }
         $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
         if (!$2 | ($2 & 255) == 116) {
          break label$8;
         }
         $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
         $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($2);
         HEAP32[$3 + 16 >> 2] = $1;
         if (!$1 | !HEAPU8[$0 + 388 | 0]) {
          break label$1;
         }
         if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
          break label$1;
         }
         $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($2, 0);
         HEAP32[$3 + 12 >> 2] = $1;
         if (!$1) {
          break label$7;
         }
         wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 16 | 0, $3 + 12 | 0), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
         break label$2;
        }
        $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
        break label$3;
       }
       $1 = 0;
       break label$1;
      }
      if (($4 | 0) == 79) {
       break label$4;
      }
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   }
   HEAP32[$5 + 28 >> 2] = $2;
   if (!$2) {
    break label$1;
   }
  }
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $3 + 28 | 0);
  $1 = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return $1;
}
function read_markers($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $10 = __stack_pointer - 288 | 0;
 __stack_pointer = $10;
 $12 = $0;
 $1 = HEAP32[$0 + 440 >> 2];
 while (1) {
  label$2 : {
   label$3 : {
    label$4 : {
     if ($1) {
      break label$4;
     }
     if (!HEAP32[HEAP32[$0 + 464 >> 2] + 12 >> 2]) {
      $2 = HEAP32[$0 + 24 >> 2];
      $1 = HEAP32[$2 + 4 >> 2];
      if (!$1) {
       if (!(FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0)) {
        $1 = 0;
        break label$3;
       }
       $1 = HEAP32[$2 + 4 >> 2];
      }
      $5 = HEAP32[$2 >> 2];
      $3 = HEAPU8[$5 | 0];
      $4 = $1 - 1 | 0;
      $1 = $5 + 1 | 0;
      label$8 : {
       if ($4) {
        break label$8;
       }
       if (!(FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0)) {
        $1 = 0;
        break label$3;
       }
       $4 = HEAP32[$2 + 4 >> 2];
       $1 = HEAP32[$2 >> 2];
      }
      $5 = $1 + 1 | 0;
      $4 = $4 - 1 | 0;
      $1 = HEAPU8[$1 | 0];
      if (!(($1 | 0) == 216 ? ($3 | 0) == 255 : 0)) {
       $6 = HEAP32[$0 >> 2];
       HEAP32[$6 + 24 >> 2] = $3;
       HEAP32[$6 + 20 >> 2] = 55;
       HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
      }
      HEAP32[$0 + 440 >> 2] = $1;
      HEAP32[$2 + 4 >> 2] = $4;
      HEAP32[$2 >> 2] = $5;
      break label$4;
     }
     if (!next_marker($0)) {
      $1 = 0;
      break label$3;
     }
     $1 = HEAP32[$0 + 440 >> 2];
    }
    label$12 : {
     label$13 : {
      switch ($1 - 1 | 0) {
      case 215:
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 20 >> 2] = 104;
       FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, 1);
       $1 = HEAP32[$0 + 464 >> 2];
       if (HEAP32[$1 + 12 >> 2]) {
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 20 >> 2] = 64;
        FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
        $1 = HEAP32[$0 + 464 >> 2];
       }
       HEAP8[$0 + 232 | 0] = 0;
       HEAP8[$0 + 233 | 0] = 0;
       HEAP8[$0 + 234 | 0] = 0;
       HEAP8[$0 + 235 | 0] = 0;
       HEAP8[$0 + 236 | 0] = 0;
       HEAP8[$0 + 237 | 0] = 0;
       HEAP8[$0 + 238 | 0] = 0;
       HEAP8[$0 + 239 | 0] = 0;
       HEAP8[$0 + 240 | 0] = 0;
       HEAP8[$0 + 241 | 0] = 0;
       HEAP8[$0 + 242 | 0] = 0;
       HEAP8[$0 + 243 | 0] = 0;
       HEAP8[$0 + 244 | 0] = 0;
       HEAP8[$0 + 245 | 0] = 0;
       HEAP8[$0 + 246 | 0] = 0;
       HEAP8[$0 + 247 | 0] = 0;
       HEAP8[$0 + 256 | 0] = 1;
       HEAP8[$0 + 257 | 0] = 1;
       HEAP8[$0 + 258 | 0] = 1;
       HEAP8[$0 + 259 | 0] = 1;
       HEAP8[$0 + 260 | 0] = 1;
       HEAP8[$0 + 261 | 0] = 1;
       HEAP8[$0 + 262 | 0] = 1;
       HEAP8[$0 + 263 | 0] = 1;
       HEAP8[$0 + 248 | 0] = 1;
       HEAP8[$0 + 249 | 0] = 1;
       HEAP8[$0 + 250 | 0] = 1;
       HEAP8[$0 + 251 | 0] = 1;
       HEAP8[$0 + 252 | 0] = 1;
       HEAP8[$0 + 253 | 0] = 1;
       HEAP8[$0 + 254 | 0] = 1;
       HEAP8[$0 + 255 | 0] = 1;
       $4 = $12;
       HEAP8[$4 + 272 | 0] = 5;
       HEAP8[$4 + 273 | 0] = 5;
       HEAP8[$4 + 274 | 0] = 5;
       HEAP8[$4 + 275 | 0] = 5;
       HEAP8[$4 + 276 | 0] = 5;
       HEAP8[$4 + 277 | 0] = 5;
       HEAP8[$4 + 278 | 0] = 5;
       HEAP8[$4 + 279 | 0] = 5;
       HEAP8[$4 + 264 | 0] = 5;
       HEAP8[$4 + 265 | 0] = 5;
       HEAP8[$4 + 266 | 0] = 5;
       HEAP8[$4 + 267 | 0] = 5;
       HEAP8[$4 + 268 | 0] = 5;
       HEAP8[$4 + 269 | 0] = 5;
       HEAP8[$4 + 270 | 0] = 5;
       HEAP8[$4 + 271 | 0] = 5;
       HEAP32[$0 + 304 >> 2] = 0;
       HEAP32[$0 + 308 >> 2] = 0;
       HEAP32[$0 + 40 >> 2] = 0;
       HEAP32[$0 + 280 >> 2] = 0;
       HEAP32[$0 + 284 >> 2] = 0;
       HEAP8[$0 + 300 | 0] = 0;
       HEAP32[$0 + 292 >> 2] = 65537;
       HEAP32[$0 + 296 >> 2] = 0;
       HEAP8[$0 + 290 | 0] = 0;
       HEAP16[$0 + 288 >> 1] = 257;
       HEAP32[$1 + 12 >> 2] = 1;
       break label$2;
      case 192:
       $1 = 0;
       if (get_sof($0, 0, 0, 0)) {
        break label$2;
       }
       break label$3;
      case 193:
       $1 = 0;
       if (get_sof($0, 0, 1, 0)) {
        break label$2;
       }
       break label$3;
      case 200:
       $1 = 0;
       if (get_sof($0, 0, 0, 1)) {
        break label$2;
       }
       break label$3;
      case 201:
       $1 = 0;
       if (get_sof($0, 0, 1, 1)) {
        break label$2;
       }
       break label$3;
      case 194:
      case 196:
      case 197:
      case 198:
      case 199:
      case 202:
      case 204:
      case 205:
      case 206:
       $2 = HEAP32[$0 >> 2];
       HEAP32[$2 + 24 >> 2] = $1;
       HEAP32[$2 + 20 >> 2] = 63;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       break label$2;
      case 217:
       $8 = HEAP32[$0 + 24 >> 2];
       $1 = HEAP32[$8 + 4 >> 2];
       $2 = HEAP32[$8 >> 2];
       if (!HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2]) {
        $3 = HEAP32[$0 >> 2];
        HEAP32[$3 + 20 >> 2] = 60;
        memcpy($3 + 24 | 0, 9596, 80);
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       }
       if (!$1) {
        if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$8 >> 2];
        $1 = HEAP32[$8 + 4 >> 2];
       }
       $4 = HEAPU8[$2 | 0];
       $3 = $1 - 1 | 0;
       $1 = $2 + 1 | 0;
       label$36 : {
        if ($3) {
         break label$36;
        }
        if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $3 = HEAP32[$8 + 4 >> 2];
        $1 = HEAP32[$8 >> 2];
       }
       $5 = HEAPU8[$1 | 0];
       $2 = $3 - 1 | 0;
       $1 = $1 + 1 | 0;
       label$38 : {
        if ($2) {
         break label$38;
        }
        if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$8 + 4 >> 2];
        $1 = HEAP32[$8 >> 2];
       }
       $3 = HEAP32[$0 >> 2];
       $9 = HEAPU8[$1 | 0];
       HEAP32[$3 + 24 >> 2] = $9;
       HEAP32[$3 + 20 >> 2] = 105;
       $3 = 1;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
       label$40 : {
        label$41 : {
         label$42 : {
          if ((($9 << 1) + 6 | 0) != ($4 << 8 | $5) | $9 >>> 0 > 4) {
           break label$42;
          }
          if ($9) {
           HEAP32[$0 + 340 >> 2] = $9;
           $7 = $1 + 1 | 0;
           $5 = $2 - 1 | 0;
           break label$41;
          }
          if (!HEAP32[$0 + 224 >> 2]) {
           break label$42;
          }
          HEAP32[$0 + 340 >> 2] = $9;
          $7 = $1 + 1 | 0;
          $5 = $2 - 1 | 0;
          break label$40;
         }
         $4 = HEAP32[$0 >> 2];
         HEAP32[$4 + 20 >> 2] = 12;
         FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
         HEAP32[$0 + 340 >> 2] = $9;
         $7 = $1 + 1 | 0;
         $5 = $2 - 1 | 0;
         if (!$9) {
          break label$40;
         }
        }
        $4 = 0;
        while (1) {
         if (!$5) {
          if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $7 = HEAP32[$8 >> 2];
          $5 = HEAP32[$8 + 4 >> 2];
         }
         $2 = HEAPU8[$7 | 0];
         $1 = 0;
         label$47 : {
          if (!$4) {
           break label$47;
          }
          while (1) {
           if (HEAP32[HEAP32[(($1 << 2) + $0 | 0) + 344 >> 2] >> 2] != ($2 | 0)) {
            $1 = $1 + 1 | 0;
            if (($4 | 0) != ($1 | 0)) {
             continue;
            }
            break label$47;
           }
           break;
          }
          $1 = HEAP32[HEAP32[$0 + 344 >> 2] >> 2];
          $2 = 1;
          if ($4 >>> 0 >= 2) {
           while (1) {
            $3 = HEAP32[HEAP32[(($2 << 2) + $0 | 0) + 344 >> 2] >> 2];
            $1 = ($1 | 0) < ($3 | 0) ? $3 : $1;
            $2 = $2 + 1 | 0;
            if (($4 | 0) != ($2 | 0)) {
             continue;
            }
            break;
           }
          }
          $2 = $1 + 1 | 0;
         }
         $6 = $5 - 1 | 0;
         $1 = HEAP32[$0 + 216 >> 2];
         $5 = HEAP32[$0 + 36 >> 2];
         label$52 : {
          if (($5 | 0) >= 1) {
           $12 = Math_imul($5, 88) + $1 | 0;
           $3 = 0;
           while (1) {
            if (HEAP32[$1 >> 2] == ($2 | 0)) {
             break label$52;
            }
            $1 = $1 + 88 | 0;
            $3 = $3 + 1 | 0;
            if (($5 | 0) != ($3 | 0)) {
             continue;
            }
            break;
           }
           $1 = $12;
          }
          $3 = HEAP32[$0 >> 2];
          HEAP32[$3 + 24 >> 2] = $2;
          HEAP32[$3 + 20 >> 2] = 4;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         }
         HEAP32[(($4 << 2) + $0 | 0) + 344 >> 2] = $1;
         if ($6) {
          $3 = $7 + 1 | 0;
         } else {
          if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $6 = HEAP32[$8 + 4 >> 2];
          $3 = HEAP32[$8 >> 2];
         }
         $2 = HEAPU8[$3 | 0];
         HEAP32[$1 + 24 >> 2] = $2 & 15;
         HEAP32[$1 + 20 >> 2] = $2 >>> 4;
         $2 = HEAP32[$0 >> 2];
         HEAP32[$2 + 24 >> 2] = HEAP32[$1 >> 2];
         HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
         $1 = HEAP32[$1 + 24 >> 2];
         HEAP32[$2 + 20 >> 2] = 106;
         HEAP32[$2 + 32 >> 2] = $1;
         FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 1);
         $7 = $3 + 1 | 0;
         $5 = $6 - 1 | 0;
         $4 = $4 + 1 | 0;
         if (($9 | 0) != ($4 | 0)) {
          continue;
         }
         break;
        }
        $3 = 0;
       }
       if (!$5) {
        if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $7 = HEAP32[$8 >> 2];
        $5 = HEAP32[$8 + 4 >> 2];
       }
       HEAP32[$0 + 412 >> 2] = HEAPU8[$7 | 0];
       $4 = $0;
       $2 = $5 - 1 | 0;
       $1 = $7 + 1 | 0;
       label$60 : {
        if ($2) {
         break label$60;
        }
        if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$8 + 4 >> 2];
        $1 = HEAP32[$8 >> 2];
       }
       HEAP32[$4 + 416 >> 2] = HEAPU8[$1 | 0];
       $12 = $0;
       $5 = $2 - 1 | 0;
       $4 = $1 + 1 | 0;
       label$62 : {
        if ($5) {
         break label$62;
        }
        if (!(FUNCTION_TABLE[HEAP32[$8 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $5 = HEAP32[$8 + 4 >> 2];
        $4 = HEAP32[$8 >> 2];
       }
       $1 = HEAPU8[$4 | 0];
       HEAP32[$12 + 424 >> 2] = $1 & 15;
       HEAP32[$0 + 420 >> 2] = $1 >>> 4;
       $2 = HEAP32[$0 >> 2];
       HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 412 >> 2];
       HEAP32[$2 + 28 >> 2] = HEAP32[$0 + 416 >> 2];
       HEAP32[$2 + 32 >> 2] = HEAP32[$0 + 420 >> 2];
       HEAP32[$2 + 36 >> 2] = HEAP32[$0 + 424 >> 2];
       HEAP32[$2 + 20 >> 2] = 107;
       $1 = 1;
       FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 1);
       HEAP32[HEAP32[$0 + 464 >> 2] + 20 >> 2] = 0;
       $2 = $4 + 1 | 0;
       $4 = $5 - 1 | 0;
       if (!$3) {
        HEAP32[$0 + 144 >> 2] = HEAP32[$0 + 144 >> 2] + 1;
       }
       HEAP32[$8 + 4 >> 2] = $4;
       HEAP32[$8 >> 2] = $2;
       HEAP32[$0 + 440 >> 2] = 0;
       break label$3;
      case 216:
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 20 >> 2] = 87;
       FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, 1);
       HEAP32[$0 + 440 >> 2] = 0;
       $1 = 2;
       break label$3;
      case 203:
       $5 = HEAP32[$0 + 24 >> 2];
       $1 = HEAP32[$5 + 4 >> 2];
       if (!$1) {
        if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $1 = HEAP32[$5 + 4 >> 2];
       }
       $3 = HEAP32[$5 >> 2];
       $4 = HEAPU8[$3 | 0];
       $2 = $1 - 1 | 0;
       $1 = $3 + 1 | 0;
       label$67 : {
        if ($2) {
         break label$67;
        }
        if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$5 + 4 >> 2];
        $1 = HEAP32[$5 >> 2];
       }
       $3 = $1 + 1 | 0;
       $2 = $2 - 1 | 0;
       $4 = HEAPU8[$1 | 0] | $4 << 8;
       $1 = $4 - 2 | 0;
       if ($4 >>> 0 >= 3) {
        while (1) {
         $4 = $1;
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$5 >> 2];
          $2 = HEAP32[$5 + 4 >> 2];
         }
         $1 = HEAPU8[$3 | 0];
         $6 = $2 - 1 | 0;
         $3 = $3 + 1 | 0;
         label$73 : {
          if ($6) {
           break label$73;
          }
          if (!(FUNCTION_TABLE[HEAP32[$5 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $6 = HEAP32[$5 + 4 >> 2];
          $3 = HEAP32[$5 >> 2];
         }
         $2 = HEAPU8[$3 | 0];
         $7 = HEAP32[$0 >> 2];
         HEAP32[$7 + 24 >> 2] = $1;
         HEAP32[$7 + 20 >> 2] = 81;
         HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $2;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
         label$75 : {
          label$76 : {
           label$77 : {
            if ($1 >>> 0 >= 32) {
             $7 = HEAP32[$0 >> 2];
             HEAP32[$7 + 24 >> 2] = $1;
             HEAP32[$7 + 20 >> 2] = 29;
             FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
             break label$77;
            }
            if ($1 >>> 0 < 16) {
             break label$76;
            }
           }
           HEAP8[($0 + $1 | 0) + 248 | 0] = $2;
           break label$75;
          }
          $1 = $0 + $1 | 0;
          $7 = $2 >>> 4 | 0;
          HEAP8[$1 + 248 | 0] = $7;
          $9 = $1;
          $1 = $2 & 15;
          HEAP8[$9 + 232 | 0] = $1;
          if ($1 >>> 0 <= $7 >>> 0) {
           break label$75;
          }
          $1 = HEAP32[$0 >> 2];
          HEAP32[$1 + 24 >> 2] = $2;
          HEAP32[$1 + 20 >> 2] = 30;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         }
         $3 = $3 + 1 | 0;
         $2 = $6 - 1 | 0;
         $1 = $4 - 2 | 0;
         if (($4 | 0) > 2) {
          continue;
         }
         break;
        }
       }
       if ($1) {
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 20 >> 2] = 12;
        FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
       }
       HEAP32[$5 + 4 >> 2] = $2;
       HEAP32[$5 >> 2] = $3;
       break label$2;
      case 195:
       $6 = HEAP32[$0 + 24 >> 2];
       $1 = HEAP32[$6 + 4 >> 2];
       if (!$1) {
        if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
         break label$12;
        }
        $1 = HEAP32[$6 + 4 >> 2];
       }
       $2 = HEAP32[$6 >> 2];
       $4 = HEAPU8[$2 | 0];
       $1 = $1 - 1 | 0;
       $3 = $2 + 1 | 0;
       label$81 : {
        if ($1) {
         break label$81;
        }
        if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
         break label$12;
        }
        $1 = HEAP32[$6 + 4 >> 2];
        $3 = HEAP32[$6 >> 2];
       }
       $2 = $3 + 1 | 0;
       $1 = $1 - 1 | 0;
       $3 = HEAPU8[$3 | 0] | $4 << 8;
       $8 = $3 - 2 | 0;
       if ($3 >>> 0 >= 19) {
        while (1) {
         if (!$1) {
          if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
           break label$12;
          }
          $2 = HEAP32[$6 >> 2];
          $1 = HEAP32[$6 + 4 >> 2];
         }
         $3 = HEAP32[$0 >> 2];
         $7 = HEAPU8[$2 | 0];
         HEAP32[$3 + 24 >> 2] = $7;
         HEAP32[$3 + 20 >> 2] = 82;
         $3 = 1;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
         $4 = 0;
         HEAP8[$10 + 256 | 0] = 0;
         $2 = $2 + 1 | 0;
         $1 = $1 - 1 | 0;
         while (1) {
          if (!$1) {
           if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
            break label$12;
           }
           $2 = HEAP32[$6 >> 2];
           $1 = HEAP32[$6 + 4 >> 2];
          }
          $5 = HEAPU8[$2 | 0];
          HEAP8[($10 + 256 | 0) + $3 | 0] = $5;
          $2 = $2 + 1 | 0;
          $1 = $1 - 1 | 0;
          $4 = $4 + $5 | 0;
          $3 = $3 + 1 | 0;
          if (($3 | 0) != 17) {
           continue;
          }
          break;
         }
         $3 = HEAP32[$0 >> 2];
         HEAP32[$3 + 24 >> 2] = HEAPU8[$10 + 257 | 0];
         HEAP32[$3 + 28 >> 2] = HEAPU8[$10 + 258 | 0];
         HEAP32[$3 + 32 >> 2] = HEAPU8[$10 + 259 | 0];
         HEAP32[$3 + 36 >> 2] = HEAPU8[$10 + 260 | 0];
         HEAP32[$3 + 40 >> 2] = HEAPU8[$10 + 261 | 0];
         HEAP32[$3 + 44 >> 2] = HEAPU8[$10 + 262 | 0];
         HEAP32[$3 + 48 >> 2] = HEAPU8[$10 + 263 | 0];
         $5 = HEAPU8[$10 + 264 | 0];
         HEAP32[$3 + 20 >> 2] = 88;
         HEAP32[$3 + 52 >> 2] = $5;
         FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($0, 2);
         $3 = HEAP32[$0 >> 2];
         HEAP32[$3 + 24 >> 2] = HEAPU8[$10 + 265 | 0];
         HEAP32[$3 + 28 >> 2] = HEAPU8[$10 + 266 | 0];
         HEAP32[$3 + 32 >> 2] = HEAPU8[$10 + 267 | 0];
         HEAP32[$3 + 36 >> 2] = HEAPU8[$10 + 268 | 0];
         HEAP32[$3 + 40 >> 2] = HEAPU8[$10 + 269 | 0];
         HEAP32[$3 + 44 >> 2] = HEAPU8[$10 + 270 | 0];
         HEAP32[$3 + 48 >> 2] = HEAPU8[$10 + 271 | 0];
         $5 = HEAPU8[$10 + 272 | 0];
         HEAP32[$3 + 20 >> 2] = 88;
         HEAP32[$3 + 52 >> 2] = $5;
         FUNCTION_TABLE[HEAP32[$3 + 4 >> 2]]($0, 2);
         $8 = $8 - 17 | 0;
         if (!(($8 | 0) >= ($4 | 0) ? $4 >>> 0 <= 256 : 0)) {
          $3 = HEAP32[$0 >> 2];
          HEAP32[$3 + 20 >> 2] = 9;
          FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
         }
         $3 = 0;
         $5 = memset($10, 0, 256);
         if ($4) {
          while (1) {
           if (!$1) {
            if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
             break label$12;
            }
            $2 = HEAP32[$6 >> 2];
            $1 = HEAP32[$6 + 4 >> 2];
           }
           HEAP8[$3 + $5 | 0] = HEAPU8[$2 | 0];
           $2 = $2 + 1 | 0;
           $1 = $1 - 1 | 0;
           $3 = $3 + 1 | 0;
           if (($4 | 0) != ($3 | 0)) {
            continue;
           }
           break;
          }
         }
         $3 = $7 - 16 | 0;
         $11 = $7 & 16;
         $9 = $11 ? (($3 << 2) + $0 | 0) + 196 | 0 : (($7 << 2) + $0 | 0) + 180 | 0;
         $3 = $11 ? $3 : $7;
         if ($3 >>> 0 >= 4) {
          $7 = HEAP32[$0 >> 2];
          HEAP32[$7 + 24 >> 2] = $3;
          HEAP32[$7 + 20 >> 2] = 31;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         }
         $8 = $8 - $4 | 0;
         $3 = HEAP32[$9 >> 2];
         if (!$3) {
          $3 = jpeg_alloc_huff_table($0);
          HEAP32[$9 >> 2] = $3;
         }
         $4 = HEAP32[$5 + 260 >> 2];
         $11 = HEAP32[$5 + 256 >> 2];
         HEAP32[$3 >> 2] = $11;
         HEAP32[$3 + 4 >> 2] = $4;
         $11 = HEAP32[$5 + 268 >> 2];
         $4 = HEAP32[$5 + 264 >> 2];
         HEAP32[$3 + 8 >> 2] = $4;
         HEAP32[$3 + 12 >> 2] = $11;
         HEAP8[$3 + 16 | 0] = HEAPU8[$5 + 272 | 0];
         memcpy(HEAP32[$9 >> 2] + 17 | 0, $5, 256);
         if (($8 | 0) > 16) {
          continue;
         }
         break;
        }
       }
       if ($8) {
        $3 = HEAP32[$0 >> 2];
        HEAP32[$3 + 20 >> 2] = 12;
        FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
       }
       HEAP32[$6 + 4 >> 2] = $1;
       HEAP32[$6 >> 2] = $2;
       break label$2;
      case 218:
       $6 = HEAP32[$0 + 24 >> 2];
       $1 = HEAP32[$6 + 4 >> 2];
       if (!$1) {
        if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $1 = HEAP32[$6 + 4 >> 2];
       }
       $3 = HEAP32[$6 >> 2];
       $5 = HEAPU8[$3 | 0];
       $2 = $1 - 1 | 0;
       $1 = $3 + 1 | 0;
       label$96 : {
        if ($2) {
         break label$96;
        }
        if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$6 + 4 >> 2];
        $1 = HEAP32[$6 >> 2];
       }
       $3 = $1 + 1 | 0;
       $4 = $2 - 1 | 0;
       $1 = HEAPU8[$1 | 0] | $5 << 8;
       $5 = $1 - 2 | 0;
       if ($1 >>> 0 >= 3) {
        while (1) {
         if (!$4) {
          if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $4 = HEAP32[$6 + 4 >> 2];
          $3 = HEAP32[$6 >> 2];
         }
         $2 = HEAPU8[$3 | 0];
         $7 = HEAP32[$0 >> 2];
         HEAP32[$7 + 20 >> 2] = 83;
         $1 = $2 & 15;
         HEAP32[$7 + 24 >> 2] = $1;
         $8 = $2 >>> 4 | 0;
         HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $8;
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
         if ($1 >>> 0 >= 4) {
          $2 = HEAP32[$0 >> 2];
          HEAP32[$2 + 24 >> 2] = $1;
          HEAP32[$2 + 20 >> 2] = 32;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         }
         $9 = ($1 << 2) + $0 | 0;
         $2 = $9 + 164 | 0;
         $1 = HEAP32[$2 >> 2];
         if (!$1) {
          $1 = jpeg_alloc_quant_table($0);
          HEAP32[$9 + 164 >> 2] = $1;
         }
         $11 = $5 - 1 | 0;
         label$104 : {
          label$105 : {
           label$106 : {
            label$107 : {
             label$108 : {
              if ($8) {
               $2 = 0;
               if (($5 | 0) > 128) {
                break label$107;
               }
               while (1) {
                HEAP16[($2 << 1) + $1 >> 1] = 1;
                $2 = $2 + 1 | 0;
                if (($2 | 0) != 64) {
                 continue;
                }
                break;
               }
               $2 = $11 >> 1;
               break label$108;
              }
              $2 = 0;
              if (($5 | 0) > 64) {
               break label$107;
              }
              while (1) {
               HEAP16[($2 << 1) + $1 >> 1] = 1;
               $2 = $2 + 1 | 0;
               if (($2 | 0) != 64) {
                continue;
               }
               break;
              }
              $2 = $11;
             }
             $7 = 16208;
             label$112 : {
              label$113 : {
               label$114 : {
                label$115 : {
                 label$116 : {
                  label$117 : {
                   $9 = $2;
                   switch ($9 - 4 | 0) {
                   case 0:
                    break label$112;
                   case 45:
                    break label$113;
                   case 32:
                    break label$114;
                   case 21:
                    break label$115;
                   case 12:
                    break label$116;
                   case 5:
                    break label$117;
                   default:
                    break label$106;
                   }
                  }
                  $7 = 16096;
                  break label$112;
                 }
                 $7 = 15968;
                 break label$112;
                }
                $7 = 15792;
                break label$112;
               }
               $7 = 15584;
               break label$112;
              }
              $7 = 15312;
             }
             $3 = $3 + 1 | 0;
             $4 = $4 - 1 | 0;
             break label$105;
            }
            $3 = $3 + 1 | 0;
            $4 = $4 - 1 | 0;
            $9 = 64;
            $7 = 14992;
            break label$105;
           }
           $3 = $3 + 1 | 0;
           $4 = $4 - 1 | 0;
           $7 = 14992;
           if (($9 | 0) < 1) {
            break label$104;
           }
          }
          $2 = 0;
          while (1) {
           label$119 : {
            if ($8) {
             if (!$4) {
              if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
               $1 = 0;
               break label$3;
              }
              $4 = HEAP32[$6 + 4 >> 2];
              $3 = HEAP32[$6 >> 2];
             }
             $5 = HEAPU8[$3 | 0];
             $4 = $4 - 1 | 0;
             $3 = $3 + 1 | 0;
             label$123 : {
              if ($4) {
               break label$123;
              }
              if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
               $1 = 0;
               break label$3;
              }
              $4 = HEAP32[$6 + 4 >> 2];
              $3 = HEAP32[$6 >> 2];
             }
             $5 = HEAPU8[$3 | 0] | $5 << 8;
             break label$119;
            }
            if (!$4) {
             if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
              $1 = 0;
              break label$3;
             }
             $4 = HEAP32[$6 + 4 >> 2];
             $3 = HEAP32[$6 >> 2];
            }
            $5 = HEAPU8[$3 | 0];
           }
           HEAP16[(HEAP32[($2 << 2) + $7 >> 2] << 1) + $1 >> 1] = $5;
           $3 = $3 + 1 | 0;
           $4 = $4 - 1 | 0;
           $2 = $2 + 1 | 0;
           if (($9 | 0) != ($2 | 0)) {
            continue;
           }
           break;
          }
         }
         $7 = 0;
         label$127 : {
          $2 = HEAP32[$0 >> 2];
          if (HEAP32[$2 + 104 >> 2] < 2) {
           break label$127;
          }
          while (1) {
           $5 = $7 << 1;
           HEAP32[$2 + 24 >> 2] = HEAPU16[$5 + $1 >> 1];
           HEAP32[$2 + 28 >> 2] = HEAPU16[($5 | 2) + $1 >> 1];
           HEAP32[$2 + 32 >> 2] = HEAPU16[($5 | 4) + $1 >> 1];
           HEAP32[$2 + 36 >> 2] = HEAPU16[($5 | 6) + $1 >> 1];
           HEAP32[$2 + 40 >> 2] = HEAPU16[($5 | 8) + $1 >> 1];
           HEAP32[$2 + 44 >> 2] = HEAPU16[($5 | 10) + $1 >> 1];
           HEAP32[$2 + 48 >> 2] = HEAPU16[($5 | 12) + $1 >> 1];
           $5 = HEAPU16[($5 | 14) + $1 >> 1];
           HEAP32[$2 + 20 >> 2] = 95;
           HEAP32[$2 + 52 >> 2] = $5;
           FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 2);
           if ($7 >>> 0 > 55) {
            break label$127;
           }
           $7 = $7 + 8 | 0;
           $2 = HEAP32[$0 >> 2];
           continue;
          }
         }
         $5 = ($11 - $9 | 0) - ($8 ? $9 : 0) | 0;
         if (($5 | 0) > 0) {
          continue;
         }
         break;
        }
       }
       if ($5) {
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 20 >> 2] = 12;
        FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
       }
       HEAP32[$6 + 4 >> 2] = $4;
       HEAP32[$6 >> 2] = $3;
       break label$2;
      case 220:
       $1 = HEAP32[$0 + 24 >> 2];
       $2 = HEAP32[$1 + 4 >> 2];
       if (!$2) {
        if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$1 + 4 >> 2];
       }
       $3 = HEAP32[$1 >> 2];
       $4 = HEAPU8[$3 | 0];
       $2 = $2 - 1 | 0;
       $3 = $3 + 1 | 0;
       label$132 : {
        if ($2) {
         break label$132;
        }
        if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        $3 = HEAP32[$1 >> 2];
       }
       $2 = $2 - 1 | 0;
       if ((HEAPU8[$3 | 0] | $4 << 8) != 4) {
        $4 = HEAP32[$0 >> 2];
        HEAP32[$4 + 20 >> 2] = 12;
        FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
       }
       if ($2) {
        $3 = $3 + 1 | 0;
       } else {
        if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        $3 = HEAP32[$1 >> 2];
       }
       $5 = HEAPU8[$3 | 0];
       $4 = $2 - 1 | 0;
       $2 = $3 + 1 | 0;
       label$138 : {
        if ($4) {
         break label$138;
        }
        if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $4 = HEAP32[$1 + 4 >> 2];
        $2 = HEAP32[$1 >> 2];
       }
       $3 = HEAPU8[$2 | 0];
       $6 = HEAP32[$0 >> 2];
       HEAP32[$6 + 20 >> 2] = 84;
       $3 = $5 << 8 | $3;
       HEAP32[$6 + 24 >> 2] = $3;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
       HEAP32[$0 + 280 >> 2] = $3;
       HEAP32[$1 + 4 >> 2] = $4 - 1;
       HEAP32[$1 >> 2] = $2 + 1;
       break label$2;
      case 247:
       $1 = HEAP32[$0 + 24 >> 2];
       $2 = HEAP32[$1 + 4 >> 2];
       $3 = HEAP32[$1 >> 2];
       if (!HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2]) {
        $4 = HEAP32[$0 >> 2];
        HEAP32[$4 + 20 >> 2] = 60;
        memcpy($4 + 24 | 0, 9677, 80);
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       }
       label$141 : {
        label$142 : {
         if (HEAP32[$0 + 36 >> 2] < 3) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $4 = HEAPU8[$3 | 0];
         $2 = $2 - 1 | 0;
         $3 = $3 + 1 | 0;
         label$145 : {
          if ($2) {
           break label$145;
          }
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $3 = HEAP32[$1 >> 2];
         }
         $2 = $2 - 1 | 0;
         if ((HEAPU8[$3 | 0] | $4 << 8) != 24) {
          $4 = HEAP32[$0 >> 2];
          HEAP32[$4 + 20 >> 2] = 12;
          FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
         }
         if ($2) {
          $3 = $3 + 1 | 0;
         } else {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $3 = HEAP32[$1 >> 2];
         }
         $2 = $2 - 1 | 0;
         if (HEAPU8[$3 | 0] != 13) {
          $4 = HEAP32[$0 >> 2];
          HEAP32[$4 + 20 >> 2] = 70;
          HEAP32[$4 + 24 >> 2] = HEAP32[$0 + 440 >> 2];
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         }
         if ($2) {
          $3 = $3 + 1 | 0;
         } else {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $3 = HEAP32[$1 >> 2];
         }
         $5 = HEAPU8[$3 | 0];
         $2 = $2 - 1 | 0;
         $4 = $3 + 1 | 0;
         label$155 : {
          if ($2) {
           break label$155;
          }
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $4 = HEAP32[$1 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         if ((HEAPU8[$4 | 0] | $5 << 8) != 255) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $4 = $3 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAPU8[$3 | 0] != 3) {
          $3 = $4;
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $4 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         $5 = HEAP32[$0 + 216 >> 2];
         if (HEAP32[$5 + 88 >> 2] != HEAPU8[$4 | 0]) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $5 = HEAP32[$0 + 216 >> 2];
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $4 = $3 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAP32[$5 >> 2] != HEAPU8[$3 | 0]) {
          $3 = $4;
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $5 = HEAP32[$0 + 216 >> 2];
          $4 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAP32[$5 + 176 >> 2] != HEAPU8[$4 | 0]) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $4 = $3 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAPU8[$3 | 0] != 128) {
          $3 = $4;
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $4 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $5 = HEAPU8[$4 | 0];
         $2 = $2 - 1 | 0;
         $4 = $4 + 1 | 0;
         label$172 : {
          if ($2) {
           break label$172;
          }
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $4 = HEAP32[$1 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAPU8[$4 | 0] | $5 << 8) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $5 = HEAPU8[$3 | 0];
         $2 = $2 - 1 | 0;
         $4 = $3 + 1 | 0;
         label$176 : {
          if ($2) {
           break label$176;
          }
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $4 = HEAP32[$1 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAPU8[$4 | 0] | $5 << 8) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $4 = $3 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAPU8[$3 | 0]) {
          $3 = $4;
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $4 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $5 = HEAPU8[$4 | 0];
         $2 = $2 - 1 | 0;
         $4 = $4 + 1 | 0;
         label$183 : {
          if ($2) {
           break label$183;
          }
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $4 = HEAP32[$1 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         if ((HEAPU8[$4 | 0] | $5 << 8) != 1) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $5 = HEAPU8[$3 | 0];
         $2 = $2 - 1 | 0;
         $4 = $3 + 1 | 0;
         label$187 : {
          if ($2) {
           break label$187;
          }
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $4 = HEAP32[$1 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAPU8[$4 | 0] | $5 << 8) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $4 = $3 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (HEAPU8[$3 | 0]) {
          $3 = $4;
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $4 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $5 = HEAPU8[$4 | 0];
         $2 = $2 - 1 | 0;
         $4 = $4 + 1 | 0;
         label$194 : {
          if ($2) {
           break label$194;
          }
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $4 = HEAP32[$1 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         if ((HEAPU8[$4 | 0] | $5 << 8) != 1) {
          break label$142;
         }
         if (!$2) {
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $3 = HEAP32[$1 >> 2];
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $5 = HEAPU8[$3 | 0];
         $2 = $2 - 1 | 0;
         $4 = $3 + 1 | 0;
         label$198 : {
          if ($2) {
           break label$198;
          }
          if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
           $1 = 0;
           break label$3;
          }
          $2 = HEAP32[$1 + 4 >> 2];
          $4 = HEAP32[$1 >> 2];
         }
         $3 = $4 + 1 | 0;
         $2 = $2 - 1 | 0;
         if (!(HEAPU8[$4 | 0] | $5 << 8)) {
          break label$141;
         }
        }
        $4 = HEAP32[$0 >> 2];
        HEAP32[$4 + 20 >> 2] = 28;
        FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
       }
       HEAP32[$0 + 304 >> 2] = 1;
       HEAP32[$1 + 4 >> 2] = $2;
       HEAP32[$1 >> 2] = $3;
       break label$2;
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
       if (FUNCTION_TABLE[HEAP32[(HEAP32[$0 + 464 >> 2] + ($1 << 2) | 0) - 864 >> 2]]($0) | 0) {
        break label$2;
       }
       $1 = 0;
       break label$3;
      case 253:
       if (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 464 >> 2] + 28 >> 2]]($0) | 0) {
        break label$2;
       }
       $1 = 0;
       break label$3;
      case 0:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
       $2 = HEAP32[$0 >> 2];
       HEAP32[$2 + 24 >> 2] = $1;
       HEAP32[$2 + 20 >> 2] = 94;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
       break label$2;
      case 219:
       $1 = HEAP32[$0 + 24 >> 2];
       $2 = HEAP32[$1 + 4 >> 2];
       if (!$2) {
        if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $2 = HEAP32[$1 + 4 >> 2];
       }
       $5 = HEAP32[$1 >> 2];
       $4 = HEAPU8[$5 | 0];
       $3 = $2 - 1 | 0;
       $2 = $5 + 1 | 0;
       label$202 : {
        if ($3) {
         break label$202;
        }
        if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
         $1 = 0;
         break label$3;
        }
        $3 = HEAP32[$1 + 4 >> 2];
        $2 = HEAP32[$1 >> 2];
       }
       $5 = HEAPU8[$2 | 0];
       $6 = HEAP32[$0 >> 2];
       HEAP32[$6 + 20 >> 2] = 93;
       HEAP32[$6 + 24 >> 2] = HEAP32[$0 + 440 >> 2];
       $4 = $4 << 8 | $5;
       $5 = $4 - 2 | 0;
       HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $5;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
       HEAP32[$1 + 4 >> 2] = $3 - 1;
       HEAP32[$1 >> 2] = $2 + 1;
       if ($4 >>> 0 < 3) {
        break label$2;
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 16 >> 2]]($0, $5);
       break label$2;
      default:
       $2 = HEAP32[$0 >> 2];
       HEAP32[$2 + 24 >> 2] = $1;
       HEAP32[$2 + 20 >> 2] = 70;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       break label$2;
      case 191:
       break label$13;
      }
     }
     $1 = 0;
     if (get_sof($0, 1, 0, 0)) {
      break label$2;
     }
     break label$3;
    }
    $1 = 0;
   }
   __stack_pointer = $10 + 288 | 0;
   return $1 | 0;
  }
  $1 = 0;
  HEAP32[$0 + 440 >> 2] = 0;
  continue;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     switch ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 97 | 0) {
     case 0:
      label$19 : {
       label$20 : {
        label$21 : {
         label$22 : {
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
          switch ($1 - 97 | 0) {
          case 1:
          case 2:
           break label$1;
          case 3:
           break label$21;
          case 0:
           break label$3;
          default:
           break label$22;
          }
         }
         if (($1 | 0) == 78) {
          break label$20;
         }
         if (($1 | 0) == 83) {
          break label$19;
         }
         if (($1 | 0) != 110) {
          break label$1;
         }
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 26955);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 26965);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 26976);
      break label$1;
     case 2:
      label$23 : {
       label$24 : {
        label$25 : {
         label$26 : {
          $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
          switch ($4 - 108 | 0) {
          case 2:
           break label$1;
          case 3:
           break label$24;
          case 1:
           break label$25;
          case 0:
           break label$26;
          default:
           break label$23;
          }
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 26986);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 26997);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27007);
       break label$1;
      }
      if (($4 | 0) != 118) {
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $4 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($3 + 24 | 0, $0 + 388 | 0, 0);
      $6 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($3 + 16 | 0, $0 + 389 | 0, (HEAPU8[$0 + 389 | 0] | $1) != 0);
      $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
      HEAP32[$3 + 12 >> 2] = $5;
      if ($5) {
       if ($1) {
        HEAP8[$1 | 0] = 1;
       }
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 12 | 0);
      }
      $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($6);
      $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($4);
      break label$1;
     case 3:
      label$29 : {
       label$30 : {
        label$31 : {
         label$32 : {
          label$33 : {
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
           switch ($1 - 97 | 0) {
           case 1:
           case 2:
           case 3:
            break label$1;
           case 4:
            break label$31;
           case 0:
            break label$32;
           default:
            break label$33;
           }
          }
          if (($1 | 0) == 86) {
           break label$29;
          }
          if (($1 | 0) == 108) {
           break label$30;
          }
          if (($1 | 0) != 118) {
           break label$1;
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27061);
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b18_5d__28char_20const_20_28__29_20_5b18_5d_29($0, 27017);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27035);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b16_5d__28char_20const_20_28__29_20_5b16_5d_29($0, 27045);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27071);
      break label$1;
     case 4:
      label$34 : {
       label$35 : {
        label$36 : {
         $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
         switch ($1 - 111 | 0) {
         case 1:
          break label$1;
         case 2:
          break label$34;
         case 0:
          break label$36;
         default:
          break label$35;
         }
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27082);
        break label$1;
       }
       if (($1 | 0) != 79) {
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27092);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27103);
      break label$1;
     case 6:
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
      if (($1 | 0) != 116) {
       if (($1 | 0) != 101) {
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27114);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27125);
      break label$1;
     case 8:
      if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) != 120) {
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27135);
      break label$1;
     case 11:
      label$38 : {
       label$39 : {
        label$40 : {
         label$41 : {
          label$42 : {
           label$43 : {
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
            switch ($1 - 101 | 0) {
            case 1:
            case 2:
            case 3:
             break label$1;
            case 4:
             break label$41;
            case 0:
             break label$42;
            default:
             break label$43;
            }
           }
           switch ($1 - 115 | 0) {
           case 1:
            break label$38;
           case 0:
            break label$40;
           default:
            break label$39;
           }
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27146);
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
         HEAP32[$3 + 24 >> 2] = $2;
         if (!$2) {
          break label$2;
         }
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LiteralOperator_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 24 | 0);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27157);
        break label$1;
       }
       if (($1 | 0) != 83) {
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0, 27168);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27180);
      break label$1;
     case 12:
      label$44 : {
       label$45 : {
        label$46 : {
         label$47 : {
          label$48 : {
           label$49 : {
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
            switch ($1 - 105 | 0) {
            case 1:
            case 2:
             break label$1;
            case 4:
             break label$44;
            case 3:
             break label$46;
            case 0:
             break label$48;
            default:
             break label$49;
            }
           }
           switch ($1 - 73 | 0) {
           case 3:
            break label$45;
           case 0:
            break label$47;
           default:
            break label$1;
           }
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27190);
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27200);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27035);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27211);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27222);
      break label$1;
     case 13:
      label$50 : {
       label$51 : {
        label$52 : {
         label$53 : {
          label$54 : {
           label$55 : {
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
            switch ($1 - 97 | 0) {
            case 1:
            case 2:
            case 3:
            case 5:
             break label$1;
            case 6:
             break label$52;
            case 4:
             break label$53;
            case 0:
             break label$54;
            default:
             break label$55;
            }
           }
           switch ($1 - 116 | 0) {
           case 3:
            break label$50;
           case 0:
            break label$51;
           default:
            break label$1;
           }
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b15_5d__28char_20const_20_28__29_20_5b15_5d_29($0, 27233);
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27248);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27190);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27259);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b13_5d__28char_20const_20_28__29_20_5b13_5d_29($0, 27269);
      break label$1;
     case 14:
      label$56 : {
       label$57 : {
        label$58 : {
         $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
         switch ($1 - 111 | 0) {
         case 1:
         case 2:
          break label$1;
         case 3:
          break label$57;
         case 0:
          break label$58;
         default:
          break label$56;
         }
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27282);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27293);
       break label$1;
      }
      if (($1 | 0) != 82) {
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27303);
      break label$1;
     case 15:
      label$59 : {
       label$60 : {
        label$61 : {
         label$62 : {
          label$63 : {
           label$64 : {
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
            switch ($1 - 108 | 0) {
            case 2:
            case 3:
            case 5:
            case 6:
             break label$1;
            case 8:
             break label$59;
            case 7:
             break label$60;
            case 4:
             break label$61;
            case 0:
             break label$63;
            case 1:
             break label$64;
            default:
             break label$62;
            }
           }
           HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
           $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0, 27314);
           break label$1;
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27326);
          break label$1;
         }
         if (($1 | 0) != 76) {
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27336);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27347);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27326);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27358);
      break label$1;
     case 16:
      if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) != 117) {
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27369);
      break label$1;
     case 17:
      label$65 : {
       label$66 : {
        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
        if (($1 | 0) != 77) {
         if (($1 | 0) == 83) {
          break label$65;
         }
         if (($1 | 0) == 115) {
          break label$66;
         }
         if (($1 | 0) != 109) {
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, 27379);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27389);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 27400);
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0, 27411);
      break label$1;
     case 18:
      if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) != 115) {
       break label$1;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0, 27423);
      break label$1;
     case 21:
      break label$4;
     default:
      break label$1;
     }
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) - 48 >>> 0 > 9) {
     break label$1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    HEAP32[$3 + 24 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 24 | 0);
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, 26944);
   break label$1;
  }
  $2 = 0;
 }
 __stack_pointer = $3 + 32 | 0;
 return $2;
}
function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 $20 = __stack_pointer - 192 | 0;
 __stack_pointer = $20;
 $11 = $7;
 $34 = $11;
 $12 = $8;
 $9 = $12 & 65535;
 $35 = $9;
 $12 = $3;
 $27 = $12;
 $9 = $4;
 $11 = $9 & 65535;
 $28 = $11;
 $11 = $9;
 $9 = $12;
 $12 = $8;
 $12 = $11 ^ $12;
 $10 = $7;
 $9 = $12 & -2147483648;
 $30 = $9;
 $9 = $8;
 $36 = $9 >>> 16 & 32767;
 label$1 : {
  $11 = $4;
  $16 = $11 >>> 16 & 32767;
  label$2 : {
   label$3 : {
    if ($36 - 1 >>> 0 < 32766 ? $16 - 1 >>> 0 <= 32765 : 0) {
     break label$3;
    }
    $12 = $2;
    $14 = !($12 | $1);
    $12 = $4;
    $9 = $12 & 2147483647;
    $17 = $9;
    $13 = $9 >>> 0 < 2147418112;
    $12 = $9;
    $11 = $3;
    $19 = $11;
    $10 = $11;
    if (!(!$10 & ($12 | 0) == 2147418112 ? $14 : $13)) {
     $11 = $3;
     $32 = $11;
     $10 = $4;
     $12 = $10 | 32768;
     $30 = $12;
     break label$2;
    }
    $12 = $6;
    $14 = !($12 | $5);
    $12 = $8;
    $11 = $12 & 2147483647;
    $4 = $11;
    $13 = $11 >>> 0 < 2147418112;
    $12 = $11;
    $10 = $7;
    $3 = $10;
    $9 = $10;
    if (!(!$9 & ($12 | 0) == 2147418112 ? $14 : $13)) {
     $10 = $7;
     $32 = $10;
     $9 = $8;
     $12 = $9 | 32768;
     $30 = $12;
     $1 = $5;
     $12 = $6;
     $2 = $12;
     break label$2;
    }
    $12 = $17;
    $10 = $12 ^ 2147418112;
    $12 = $1;
    $9 = $19;
    $11 = $9;
    $9 = $10;
    $10 = $2;
    $9 = $9 | $10;
    if (!($12 | $11 | $9)) {
     $9 = $4;
     $12 = $9 ^ 2147418112;
     $1 = $12;
     $9 = $5;
     $10 = $3;
     $11 = $10;
     $12 = $6;
     $10 = $1;
     $10 = $12 | $10;
     if (!($9 | $11 | $10)) {
      $1 = 0;
      $2 = 0;
      $30 = 2147450880;
      break label$2;
     }
     $12 = $32;
     $32 = $12;
     $10 = $30;
     $9 = $10 | 2147418112;
     $30 = $9;
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    $9 = $4;
    $12 = $9 ^ 2147418112;
    $7 = $12;
    $9 = $5;
    $10 = $3;
    $11 = $10;
    $12 = $6;
    $10 = $7;
    $10 = $12 | $10;
    if (!($9 | $11 | $10)) {
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    $9 = $17;
    $10 = $2;
    $9 = $9 | $10;
    $12 = $1;
    $11 = $19;
    if (!($9 | ($12 | $11))) {
     break label$1;
    }
    $12 = $6;
    $9 = $4;
    $12 = $12 | $9;
    $11 = $5;
    $10 = $3;
    if (!($12 | ($11 | $10))) {
     $9 = $32;
     $32 = $9;
     $12 = $30;
     $10 = $12 | 2147418112;
     $30 = $10;
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    $10 = $17;
    if (($10 | 0) == 65535 | $10 >>> 0 < 65535) {
     $12 = $28;
     $15 = !($12 | $27);
     $14 = $15;
     $9 = $14 ? $1 : $27;
     $12 = $2;
     $10 = $28;
     $11 = $14 ? $12 : $10;
     $12 = Math_clz32($11);
     $9 = ($12 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $12;
     $12 = $15 << 6;
     $10 = $12 + $9 | 0;
     $13 = $2;
     $9 = $28;
     __ashlti3($20 + 176 | 0, $1, $13, $27, $9, $10 - 15 | 0);
     $15 = 16 - $10 | 0;
     $14 = $20;
     $9 = HEAP32[$14 + 184 >> 2];
     $27 = $9;
     $13 = HEAP32[$14 + 188 >> 2];
     $28 = $13;
     $9 = HEAP32[$14 + 180 >> 2];
     $2 = $9;
     $13 = HEAP32[$14 + 176 >> 2];
     $1 = $13;
    }
    $9 = $4;
    if ($9 >>> 0 > 65535) {
     break label$3;
    }
    $14 = $35;
    $3 = !($14 | $34);
    $11 = $3;
    $13 = $11 ? $5 : $34;
    $14 = $6;
    $9 = $35;
    $12 = $11 ? $14 : $9;
    $14 = Math_clz32($12);
    $13 = ($14 | 0) == 32 ? Math_clz32($13) + 32 | 0 : $14;
    $10 = 0;
    $14 = $3 << 6;
    $9 = $14 + $13 | 0;
    $10 = $6;
    $13 = $35;
    __ashlti3($20 + 160 | 0, $5, $10, $34, $13, $9 - 15 | 0);
    $15 = ($15 + $9 | 0) - 16 | 0;
    $11 = $20;
    $13 = HEAP32[$11 + 168 >> 2];
    $34 = $13;
    $10 = HEAP32[$11 + 172 >> 2];
    $35 = $10;
    $10 = HEAP32[$11 + 160 >> 2];
    $5 = $10;
    $13 = HEAP32[$11 + 164 >> 2];
    $6 = $13;
   }
   $13 = $35;
   $10 = $13 | 65536;
   $38 = $10;
   $11 = $34;
   $39 = $11;
   $13 = $11;
   $11 = $10 << 15 | $13 >>> 17;
   $4 = $11;
   $11 = $6;
   $14 = $11 >>> 17 | 0;
   $11 = $13 << 15;
   $3 = $11 | $14;
   $14 = $3;
   $12 = -102865788 - $14 | 0;
   $7 = $12;
   $13 = 0;
   $10 = $13;
   $13 = $4;
   $10 = $10 | $13;
   $4 = $10;
   $9 = $10 + ($14 >>> 0 > 4192101508) | 0;
   $9 = 1963258675 - $9 | 0;
   $8 = $9;
   $9 = $10;
   $10 = $8;
   __multi3($20 + 144 | 0, $3, $9, 0, 0, $12, $10, 0, 0);
   $13 = $20;
   $14 = HEAP32[$13 + 152 >> 2];
   $9 = $14;
   $11 = 0 - $9 | 0;
   $10 = HEAP32[$13 + 156 >> 2];
   $12 = $10 + (($9 | 0) != 0) | 0;
   $12 = 0 - $12 | 0;
   $10 = $8;
   __multi3($20 + 128 | 0, $11, $12, 0, 0, $7, $10, 0, 0);
   $13 = $20;
   $9 = HEAP32[$13 + 136 >> 2];
   $10 = HEAP32[$13 + 140 >> 2];
   $7 = $9 << 1;
   $9 = $10 << 1 | $9 >>> 31;
   $8 = $9;
   $10 = $20;
   $9 = HEAP32[$10 + 128 >> 2];
   $13 = HEAP32[$10 + 132 >> 2];
   $9 = 0;
   $10 = $9;
   $12 = $13 >>> 31 | 0;
   $13 = $7;
   $7 = $12 | $13;
   $9 = $8;
   $10 = $9 | $10;
   $8 = $10;
   $9 = $4;
   __multi3($20 + 112 | 0, $7, $10, 0, 0, $3, $9, 0, 0);
   $13 = $20;
   $12 = HEAP32[$13 + 120 >> 2];
   $10 = $12;
   $14 = 0 - $10 | 0;
   $9 = HEAP32[$13 + 124 >> 2];
   $11 = $9 + (($10 | 0) != 0) | 0;
   $11 = 0 - $11 | 0;
   $9 = $11;
   $12 = $13 + 96 | 0;
   $11 = $8;
   __multi3($12, $7, $11, 0, 0, $14, $9, 0, 0);
   $13 = $20;
   $10 = HEAP32[$13 + 104 >> 2];
   $9 = HEAP32[$13 + 108 >> 2];
   $7 = $10 << 1;
   $10 = $9 << 1 | $10 >>> 31;
   $8 = $10;
   $9 = $20;
   $10 = HEAP32[$9 + 96 >> 2];
   $13 = HEAP32[$9 + 100 >> 2];
   $11 = $13 >>> 31 | 0;
   $13 = $7;
   $7 = $11 | $13;
   $10 = 0;
   $9 = $10;
   $10 = $8;
   $9 = $9 | $10;
   $8 = $9;
   $10 = $4;
   __multi3($20 + 80 | 0, $7, $9, 0, 0, $3, $10, 0, 0);
   $13 = $20;
   $11 = HEAP32[$13 + 88 >> 2];
   $9 = $11;
   $12 = 0 - $9 | 0;
   $10 = HEAP32[$13 + 92 >> 2];
   $14 = $10 + (($9 | 0) != 0) | 0;
   $14 = 0 - $14 | 0;
   $10 = $14;
   $9 = $13 - -64 | 0;
   $14 = $8;
   __multi3($9, $7, $14, 0, 0, $12, $10, 0, 0);
   $13 = $20;
   $9 = HEAP32[$13 + 72 >> 2];
   $10 = HEAP32[$13 + 76 >> 2];
   $7 = $9 << 1;
   $9 = $10 << 1 | $9 >>> 31;
   $8 = $9;
   $10 = $20;
   $9 = HEAP32[$10 + 64 >> 2];
   $13 = HEAP32[$10 + 68 >> 2];
   $9 = 0;
   $10 = $9;
   $14 = $13 >>> 31 | 0;
   $13 = $7;
   $7 = $14 | $13;
   $9 = $8;
   $10 = $9 | $10;
   $8 = $10;
   $9 = $4;
   __multi3($20 + 48 | 0, $7, $10, 0, 0, $3, $9, 0, 0);
   $13 = $20;
   $14 = HEAP32[$13 + 56 >> 2];
   $10 = $14;
   $11 = 0 - $10 | 0;
   $9 = HEAP32[$13 + 60 >> 2];
   $12 = $9 + (($10 | 0) != 0) | 0;
   $12 = 0 - $12 | 0;
   $9 = $12;
   $10 = $13 + 32 | 0;
   $12 = $8;
   __multi3($10, $7, $12, 0, 0, $11, $9, 0, 0);
   $13 = $20;
   $10 = HEAP32[$13 + 40 >> 2];
   $9 = HEAP32[$13 + 44 >> 2];
   $7 = $10 << 1;
   $10 = $9 << 1 | $10 >>> 31;
   $8 = $10;
   $9 = $20;
   $10 = HEAP32[$9 + 32 >> 2];
   $13 = HEAP32[$9 + 36 >> 2];
   $12 = $13 >>> 31 | 0;
   $13 = $7;
   $7 = $12 | $13;
   $10 = 0;
   $9 = $10;
   $10 = $8;
   $9 = $9 | $10;
   $8 = $9;
   $10 = $4;
   __multi3($20 + 16 | 0, $7, $9, 0, 0, $3, $10, 0, 0);
   $13 = $20;
   $12 = HEAP32[$13 + 24 >> 2];
   $9 = $12;
   $14 = 0 - $9 | 0;
   $10 = HEAP32[$13 + 28 >> 2];
   $11 = $10 + (($9 | 0) != 0) | 0;
   $11 = 0 - $11 | 0;
   $10 = $11;
   $11 = $8;
   __multi3($20, $7, $11, 0, 0, $14, $10, 0, 0);
   $36 = ($16 - $36 | 0) + $15 | 0;
   $13 = $20;
   $9 = HEAP32[$13 + 8 >> 2];
   $10 = HEAP32[$13 + 12 >> 2];
   $8 = $9 << 1;
   $9 = $10 << 1 | $9 >>> 31;
   $7 = $9;
   $10 = $20;
   $9 = HEAP32[$10 >> 2];
   $13 = HEAP32[$10 + 4 >> 2];
   $9 = 0;
   $10 = $9;
   $9 = $7;
   $10 = $9 | $10;
   $11 = $13 >>> 31 | 0;
   $13 = $8;
   $9 = $11 | $13;
   $12 = $9 - 1 | 0;
   $14 = $9 >>> 0 < 1;
   $14 = $10 - $14 | 0;
   $17 = $14;
   $9 = 0;
   $8 = $9;
   $10 = $12;
   $7 = $10;
   $10 = 0;
   $15 = $10;
   $9 = $4;
   $21 = $9;
   $14 = __wasm_i64_mul($12, $8, $9, $10);
   $24 = $14;
   $10 = i64toi32_i32$HIGH_BITS;
   $16 = $10;
   $9 = 0;
   $23 = $9;
   $10 = $17;
   $19 = $10;
   $14 = 0;
   $17 = $14;
   $9 = $14;
   $10 = $3;
   $25 = $10;
   $10 = $23;
   $10 = __wasm_i64_mul($19, $9, $3, $10);
   $11 = $10;
   $9 = i64toi32_i32$HIGH_BITS;
   $10 = $9;
   $9 = $16;
   $12 = $9 + $10 | 0;
   $14 = $24;
   $13 = $11 + $14 | 0;
   $3 = $13;
   $12 = $13 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
   $14 = 0;
   $10 = $14;
   $4 = $12;
   $14 = $12;
   $12 = $13;
   $11 = $24;
   $11 = ($9 | 0) == ($14 | 0) & $12 >>> 0 < $11 >>> 0 | $9 >>> 0 > $14 >>> 0;
   $12 = $14;
   $9 = 0;
   $16 = $12 | $9;
   $14 = $10;
   $11 = $11 | $14;
   $13 = $11;
   $11 = $15;
   $12 = $17;
   $12 = __wasm_i64_mul($21, $11, $19, $12);
   $9 = $12;
   $14 = $16;
   $10 = $9 + $14 | 0;
   $11 = i64toi32_i32$HIGH_BITS;
   $12 = $11;
   $11 = $13;
   $13 = $12 + $11 | 0;
   $16 = $10;
   $13 = $10 >>> 0 < $9 >>> 0 ? $13 + 1 | 0 : $13;
   $15 = $13;
   $11 = $3;
   $21 = 0;
   $14 = $8;
   $11 = $23;
   $11 = __wasm_i64_mul($7, $14, $25, $11);
   $9 = $11;
   $14 = i64toi32_i32$HIGH_BITS;
   $11 = $14;
   $14 = $3;
   $10 = $11 + $14 | 0;
   $13 = $21;
   $12 = $9 + $13 | 0;
   $10 = $12 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
   $3 = $12;
   $4 = $10;
   $13 = $14;
   $9 = $21;
   $13 = ($10 | 0) == ($13 | 0) & $9 >>> 0 > $12 >>> 0 | $10 >>> 0 < $13 >>> 0;
   $14 = $15;
   $12 = $14;
   $9 = $16;
   $11 = $9 + $13 | 0;
   $12 = $11 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
   $29 = $11;
   $31 = $12;
   $12 = $6;
   $14 = $5;
   $12 = ($12 & 131071) << 15 | $14 >>> 17;
   $24 = $12;
   $14 = 0;
   $16 = $14;
   $14 = $8;
   $12 = $16;
   $12 = __wasm_i64_mul($7, $14, $24, $12);
   $25 = $12;
   $14 = i64toi32_i32$HIGH_BITS;
   $23 = $14;
   $14 = $6;
   $9 = $5;
   $14 = $9 << 15;
   $22 = $14 & -32768;
   $9 = 0;
   $18 = $9;
   $9 = $17;
   $14 = $18;
   $14 = __wasm_i64_mul($19, $9, $22, $14);
   $13 = $14;
   $9 = i64toi32_i32$HIGH_BITS;
   $14 = $9;
   $9 = $23;
   $11 = $9 + $14 | 0;
   $12 = $25;
   $10 = $12 + $13 | 0;
   $11 = $10 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
   $21 = $10;
   $15 = $11;
   $9 = $10;
   $12 = $8;
   $9 = $18;
   $9 = __wasm_i64_mul($7, $12, $22, $9);
   $13 = $9;
   $12 = i64toi32_i32$HIGH_BITS;
   $9 = $12;
   $12 = $10;
   $10 = $10 + $9 | 0;
   $11 = $37;
   $14 = $11 + $13 | 0;
   $10 = $14 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
   $11 = $12;
   $12 = $14;
   $13 = $26;
   $18 = ($10 | 0) == ($11 | 0) & $12 >>> 0 < $13 >>> 0 | $10 >>> 0 < $11 >>> 0;
   $12 = $17;
   $10 = $16;
   $10 = __wasm_i64_mul($19, $12, $24, $10);
   $9 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $14 = $12;
   $12 = $15;
   $10 = $23;
   $11 = $25;
   $13 = $21;
   $11 = ($12 | 0) == ($10 | 0) & $11 >>> 0 > $13 >>> 0 | $10 >>> 0 > $12 >>> 0;
   $12 = $11;
   $11 = 0;
   $13 = $11;
   $11 = $12;
   $13 = $11 | $13;
   $11 = $9;
   $12 = 0;
   $10 = $15;
   $10 = $12 | $10;
   $9 = $11 + $10 | 0;
   $12 = $13;
   $13 = $14;
   $14 = $12 + $13 | 0;
   $12 = $9;
   $14 = $10 >>> 0 > $9 >>> 0 ? $14 + 1 | 0 : $14;
   $11 = $14;
   $9 = $11;
   $10 = $12;
   $13 = $18;
   $12 = $10 + $13 | 0;
   $9 = $12 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $12;
   $13 = $9;
   $9 = $4;
   $12 = $9 + $13 | 0;
   $14 = $3;
   $11 = $10 + $14 | 0;
   $12 = $11 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
   $21 = $11;
   $15 = $12;
   $14 = $9;
   $9 = $11;
   $10 = $3;
   $14 = ($12 | 0) == ($14 | 0) & $9 >>> 0 < $10 >>> 0 | $12 >>> 0 < $14 >>> 0;
   $9 = $31;
   $10 = $29;
   $13 = $10 + $14 | 0;
   $4 = $13;
   $11 = $13 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = $11;
   $9 = $21;
   $11 = $15;
   $10 = ($9 | 0) != 0 | ($11 | 0) != 0;
   $9 = $3;
   $14 = $4;
   $12 = $10 + $14 | 0;
   $13 = $12 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $12;
   $11 = 0 - $10 | 0;
   $12 = $13 + (($10 | 0) != 0) | 0;
   $12 = 0 - $12 | 0;
   $9 = 0;
   $16 = $9;
   $13 = $8;
   $13 = __wasm_i64_mul($11, $9, $7, $13);
   $25 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $23 = $9;
   $9 = $17;
   $13 = $16;
   $13 = __wasm_i64_mul($19, $9, $11, $13);
   $22 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $18 = $9;
   $13 = 0;
   $31 = $13;
   $9 = $8;
   $13 = $9;
   $9 = $12;
   $26 = $9;
   $12 = $31;
   $12 = __wasm_i64_mul($7, $13, $9, $12);
   $10 = $12;
   $13 = i64toi32_i32$HIGH_BITS;
   $12 = $13;
   $13 = $18;
   $11 = $12 + $13 | 0;
   $9 = $22;
   $14 = $9 + $10 | 0;
   $11 = $10 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
   $4 = $11;
   $9 = $23;
   $13 = $14;
   $14 = $9 + $13 | 0;
   $11 = $25;
   $10 = 0;
   $12 = $11 + $10 | 0;
   $14 = $12 >>> 0 < $10 >>> 0 ? $14 + 1 | 0 : $14;
   $24 = $12;
   $11 = $9;
   $16 = $14;
   $9 = $12;
   $10 = $25;
   $23 = ($11 | 0) == ($14 | 0) & $9 >>> 0 < $10 >>> 0 | $11 >>> 0 > $14 >>> 0;
   $9 = $17;
   $14 = $31;
   $14 = __wasm_i64_mul($19, $9, $26, $14);
   $12 = $14;
   $9 = i64toi32_i32$HIGH_BITS;
   $3 = $9;
   $9 = $4;
   $14 = $18;
   $11 = $22;
   $10 = $13;
   $11 = ($9 | 0) == ($14 | 0) & $11 >>> 0 > $10 >>> 0 | $9 >>> 0 < $14 >>> 0;
   $9 = $11;
   $11 = 0;
   $10 = $11;
   $11 = $9;
   $10 = $11 | $10;
   $11 = $12;
   $9 = 0;
   $14 = $4;
   $14 = $9 | $14;
   $13 = $11 + $14 | 0;
   $9 = $10;
   $10 = $3;
   $12 = $9 + $10 | 0;
   $3 = $13;
   $12 = $13 >>> 0 < $14 >>> 0 ? $12 + 1 | 0 : $12;
   $11 = $12;
   $10 = $23;
   $14 = $3;
   $9 = $10 + $14 | 0;
   $13 = $9 >>> 0 < $14 >>> 0 ? $11 + 1 | 0 : $11;
   $29 = $9;
   $31 = $13;
   $14 = $21;
   $11 = 0 - $14 | 0;
   $10 = $15;
   $9 = $10 + (($14 | 0) != 0) | 0;
   $9 = 0 - $9 | 0;
   $21 = $9;
   $15 = 0;
   $13 = $8;
   $13 = __wasm_i64_mul($9, $15, $7, $13);
   $25 = $13;
   $12 = i64toi32_i32$HIGH_BITS;
   $23 = $12;
   $9 = $11;
   $22 = $9;
   $13 = 0;
   $18 = $13;
   $9 = $17;
   $9 = __wasm_i64_mul($11, $13, $19, $9);
   $14 = $9;
   $13 = i64toi32_i32$HIGH_BITS;
   $9 = $13;
   $13 = $23;
   $11 = $9 + $13 | 0;
   $12 = $25;
   $10 = $12 + $14 | 0;
   $11 = $10 >>> 0 < $14 >>> 0 ? $11 + 1 | 0 : $11;
   $3 = $10;
   $4 = $11;
   $26 = 0;
   $12 = $8;
   $13 = $18;
   $13 = __wasm_i64_mul($7, $12, $22, $13);
   $14 = $13;
   $12 = i64toi32_i32$HIGH_BITS;
   $13 = $12;
   $12 = $10;
   $10 = $10 + $13 | 0;
   $11 = $26;
   $9 = $11 + $14 | 0;
   $10 = $9 >>> 0 < $14 >>> 0 ? $10 + 1 | 0 : $10;
   $11 = $12;
   $14 = $26;
   $18 = ($10 | 0) == ($11 | 0) & $9 >>> 0 < $14 >>> 0 | $10 >>> 0 < $11 >>> 0;
   $12 = $15;
   $10 = $17;
   $10 = __wasm_i64_mul($21, $12, $19, $10);
   $8 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $7 = $12;
   $12 = $4;
   $10 = $23;
   $11 = $25;
   $14 = $3;
   $11 = ($12 | 0) == ($10 | 0) & $11 >>> 0 > $14 >>> 0 | $10 >>> 0 > $12 >>> 0;
   $3 = $11;
   $11 = 0;
   $14 = $11;
   $11 = $3;
   $14 = $11 | $14;
   $11 = $8;
   $12 = 0;
   $10 = $4;
   $10 = $12 | $10;
   $13 = $11 + $10 | 0;
   $12 = $14;
   $14 = $7;
   $9 = $12 + $14 | 0;
   $3 = $13;
   $9 = $10 >>> 0 > $13 >>> 0 ? $9 + 1 | 0 : $9;
   $11 = $9;
   $10 = $3;
   $14 = $18;
   $12 = $10 + $14 | 0;
   $13 = $12 >>> 0 < $10 >>> 0 ? $11 + 1 | 0 : $11;
   $10 = $12;
   $14 = $13;
   $13 = $16;
   $12 = $14 + $13 | 0;
   $9 = $24;
   $11 = $9 + $10 | 0;
   $12 = $11 >>> 0 < $10 >>> 0 ? $12 + 1 | 0 : $12;
   $3 = $11;
   $4 = $12;
   $9 = $13;
   $10 = $24;
   $9 = ($12 | 0) == ($9 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 > $12 >>> 0;
   $13 = $31;
   $11 = $13;
   $10 = $29;
   $14 = $9 + $10 | 0;
   $8 = $14;
   $11 = $9 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
   $7 = $11;
   $13 = $3;
   $12 = $13 - 2 | 0;
   $25 = $12;
   $11 = $4;
   $14 = $13 >>> 0 < 2;
   $14 = $11 - $14 | 0;
   $23 = $14;
   $13 = $11;
   $9 = $3;
   $11 = $12;
   $13 = ($14 | 0) == ($13 | 0) & $9 >>> 0 > $11 >>> 0 | $13 >>> 0 > $14 >>> 0;
   $11 = $7;
   $9 = $8;
   $10 = $9 + $13 | 0;
   $12 = $10 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
   $14 = $10 - 1 | 0;
   $10 = $10 >>> 0 < 1;
   $10 = $12 - $10 | 0;
   $15 = $10;
   $11 = 0;
   $4 = $11;
   $12 = $14;
   $3 = $12;
   $10 = $27;
   $8 = $10 << 2;
   $11 = $28;
   $12 = $11 << 2 | $10 >>> 30;
   $7 = $12;
   $12 = $2;
   $13 = $12 >>> 30 | 0;
   $10 = 0;
   $11 = $10;
   $10 = $7;
   $12 = $8;
   $10 = $12 | $13;
   $7 = $10;
   $12 = 0;
   $8 = $12;
   $10 = $12;
   $10 = __wasm_i64_mul($14, $40, $7, $10);
   $24 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $16 = $12;
   $12 = $2;
   $11 = $1;
   $12 = ($12 & 1073741823) << 2 | $11 >>> 30;
   $19 = $12;
   $11 = 0;
   $17 = $11;
   $11 = $15;
   $21 = $11;
   $12 = 0;
   $15 = $12;
   $10 = $12;
   $10 = __wasm_i64_mul($19, $41, $11, $10);
   $13 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $10 = $12;
   $12 = $16;
   $14 = $12 + $10 | 0;
   $11 = $24;
   $9 = $11 + $13 | 0;
   $14 = $9 >>> 0 < $13 >>> 0 ? $14 + 1 | 0 : $14;
   $22 = $9;
   $11 = $12;
   $18 = $14;
   $13 = $24;
   $29 = ($11 | 0) == ($14 | 0) & $9 >>> 0 < $13 >>> 0 | $11 >>> 0 > $14 >>> 0;
   $12 = $23;
   $24 = $12;
   $14 = 0;
   $16 = $14;
   $14 = $28;
   $12 = $27;
   $14 = ($14 & 1073741823) << 2 | $12 >>> 30;
   $13 = $14 & -262145;
   $27 = $13 | 262144;
   $12 = 0;
   $28 = $12;
   $14 = $33;
   $13 = __wasm_i64_mul($24, $14, $27, $12);
   $11 = $13;
   $14 = i64toi32_i32$HIGH_BITS;
   $13 = $14;
   $14 = $18;
   $9 = $14 + $13 | 0;
   $12 = $22;
   $10 = $12 + $11 | 0;
   $26 = $10;
   $12 = $14;
   $9 = $10 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $31 = $9;
   $11 = $22;
   $12 = ($12 | 0) == ($9 | 0) & $11 >>> 0 > $10 >>> 0 | $9 >>> 0 < $12 >>> 0;
   $10 = 0;
   $11 = $29;
   $13 = $12 + $11 | 0;
   $10 = $13 >>> 0 < $12 >>> 0 ? 1 : $10;
   $14 = $10;
   $10 = $15;
   $11 = $28;
   $11 = __wasm_i64_mul($21, $10, $27, $11);
   $12 = $11;
   $9 = $11 + $13 | 0;
   $10 = i64toi32_i32$HIGH_BITS;
   $11 = $10;
   $10 = $14;
   $13 = $11 + $10 | 0;
   $37 = $9;
   $13 = $9 >>> 0 < $12 >>> 0 ? $13 + 1 | 0 : $13;
   $23 = $13;
   $13 = $4;
   $14 = $28;
   $14 = __wasm_i64_mul($3, $13, $27, $14);
   $33 = $14;
   $13 = i64toi32_i32$HIGH_BITS;
   $29 = $13;
   $13 = $8;
   $14 = $15;
   $14 = __wasm_i64_mul($7, $13, $21, $14);
   $12 = $14;
   $10 = $33;
   $11 = $12 + $10 | 0;
   $13 = i64toi32_i32$HIGH_BITS;
   $14 = $13;
   $13 = $29;
   $9 = $14 + $13 | 0;
   $22 = $11;
   $9 = $12 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
   $18 = $9;
   $10 = $13;
   $12 = $33;
   $12 = ($9 | 0) == ($10 | 0) & $12 >>> 0 > $11 >>> 0 | $10 >>> 0 > $9 >>> 0;
   $9 = $12;
   $12 = 0;
   $13 = $12;
   $12 = $9;
   $13 = $12 | $13;
   $12 = $37;
   $9 = 0;
   $10 = $18;
   $10 = $9 | $10;
   $14 = $12 + $10 | 0;
   $9 = $13;
   $13 = $23;
   $11 = $9 + $13 | 0;
   $29 = $14;
   $11 = $10 >>> 0 > $14 >>> 0 ? $11 + 1 | 0 : $11;
   $23 = $11;
   $13 = $22;
   $11 = $31;
   $12 = $11;
   $14 = $11 + $13 | 0;
   $11 = $26;
   $10 = 0;
   $9 = $11 + $10 | 0;
   $14 = $9 >>> 0 < $10 >>> 0 ? $14 + 1 | 0 : $14;
   $22 = $9;
   $11 = $12;
   $18 = $14;
   $10 = $26;
   $11 = ($11 | 0) == ($14 | 0) & $9 >>> 0 < $10 >>> 0 | $11 >>> 0 > $14 >>> 0;
   $12 = $23;
   $9 = $12;
   $10 = $29;
   $13 = $11 + $10 | 0;
   $40 = $13;
   $9 = $13 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $41 = $9;
   $9 = $17;
   $10 = $16;
   $10 = __wasm_i64_mul($19, $9, $24, $10);
   $33 = $10;
   $9 = i64toi32_i32$HIGH_BITS;
   $29 = $9;
   $12 = $25;
   $25 = $12;
   $10 = 0;
   $23 = $10;
   $12 = $8;
   $12 = __wasm_i64_mul($25, $10, $7, $12);
   $11 = $12;
   $10 = i64toi32_i32$HIGH_BITS;
   $12 = $10;
   $10 = $29;
   $13 = $12 + $10 | 0;
   $9 = $33;
   $14 = $9 + $11 | 0;
   $26 = $14;
   $9 = $10;
   $13 = $11 >>> 0 > $14 >>> 0 ? $13 + 1 | 0 : $13;
   $31 = $13;
   $11 = $33;
   $10 = $14;
   $42 = ($9 | 0) == ($13 | 0) & $11 >>> 0 > $10 >>> 0 | $9 >>> 0 > $13 >>> 0;
   $10 = $2;
   $11 = $1;
   $10 = $11 << 2;
   $33 = $10 & -4;
   $11 = 0;
   $29 = $11;
   $11 = $4;
   $10 = $29;
   $10 = __wasm_i64_mul($3, $11, $33, $10);
   $9 = $10;
   $11 = i64toi32_i32$HIGH_BITS;
   $10 = $11;
   $11 = $31;
   $14 = $11 + $10 | 0;
   $13 = $26;
   $12 = $9 + $13 | 0;
   $14 = $12 >>> 0 < $9 >>> 0 ? $14 + 1 | 0 : $14;
   $37 = $12;
   $2 = $14;
   $13 = $11;
   $9 = $26;
   $11 = $12;
   $13 = ($14 | 0) == ($13 | 0) & $9 >>> 0 > $11 >>> 0 | $13 >>> 0 > $14 >>> 0;
   $12 = 0;
   $9 = $42;
   $10 = $9 + $13 | 0;
   $12 = $10 >>> 0 < $13 >>> 0 ? 1 : $12;
   $13 = $10;
   $9 = $12;
   $12 = $18;
   $10 = $12 + $9 | 0;
   $11 = $22;
   $14 = $11 + $13 | 0;
   $10 = $14 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
   $26 = $14;
   $11 = $12;
   $31 = $10;
   $12 = $14;
   $13 = $22;
   $11 = ($11 | 0) == ($10 | 0) & $12 >>> 0 < $13 >>> 0 | $10 >>> 0 < $11 >>> 0;
   $12 = $41;
   $13 = $40;
   $9 = $11 + $13 | 0;
   $14 = $9 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
   $40 = $9;
   $41 = $14;
   $14 = $15;
   $13 = $29;
   $13 = __wasm_i64_mul($21, $14, $33, $13);
   $22 = $13;
   $14 = i64toi32_i32$HIGH_BITS;
   $18 = $14;
   $14 = $23;
   $13 = $28;
   $13 = __wasm_i64_mul($25, $14, $27, $13);
   $11 = $13;
   $14 = i64toi32_i32$HIGH_BITS;
   $13 = $14;
   $14 = $18;
   $9 = $14 + $13 | 0;
   $12 = $22;
   $10 = $12 + $11 | 0;
   $21 = $10;
   $9 = $10 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $15 = $9;
   $9 = $8;
   $12 = $16;
   $12 = __wasm_i64_mul($7, $9, $24, $12);
   $11 = $12;
   $13 = $11 + $10 | 0;
   $9 = i64toi32_i32$HIGH_BITS;
   $12 = $9;
   $9 = $15;
   $10 = $12 + $9 | 0;
   $7 = $13;
   $10 = $13 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
   $8 = $10;
   $10 = $4;
   $14 = $17;
   $14 = __wasm_i64_mul($3, $10, $19, $14);
   $11 = $14;
   $10 = i64toi32_i32$HIGH_BITS;
   $14 = $10;
   $10 = $8;
   $13 = $10 + $14 | 0;
   $9 = $7;
   $12 = $9 + $11 | 0;
   $13 = $12 >>> 0 < $11 >>> 0 ? $13 + 1 | 0 : $13;
   $3 = $12;
   $9 = 0;
   $28 = $9;
   $4 = $13;
   $9 = $13;
   $11 = $7;
   $27 = ($9 | 0) == ($10 | 0) & $11 >>> 0 > $12 >>> 0 | $10 >>> 0 > $9 >>> 0;
   $9 = $18;
   $13 = $15;
   $11 = $21;
   $10 = $22;
   $14 = ($9 | 0) == ($13 | 0) & $11 >>> 0 < $10 >>> 0 | $9 >>> 0 > $13 >>> 0;
   $11 = $8;
   $9 = $21;
   $10 = $7;
   $13 = ($13 | 0) == ($11 | 0) & $9 >>> 0 > $10 >>> 0 | $13 >>> 0 > $11 >>> 0;
   $12 = 0;
   $9 = $14;
   $14 = $9 + $13 | 0;
   $12 = $14 >>> 0 < $13 >>> 0 ? 1 : $12;
   $13 = $14;
   $9 = $12;
   $10 = $27;
   $11 = $10 + $13 | 0;
   $10 = $28;
   $12 = $11 | $10;
   $7 = $12;
   $10 = $26;
   $14 = $4;
   $13 = $43;
   $13 = $14 | $13;
   $9 = $10 + $13 | 0;
   $12 = $31;
   $14 = $7;
   $11 = $12 + $14 | 0;
   $21 = $9;
   $11 = $9 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
   $15 = $11;
   $10 = $12;
   $13 = $26;
   $10 = ($11 | 0) == ($10 | 0) & $9 >>> 0 < $13 >>> 0 | $10 >>> 0 > $11 >>> 0;
   $12 = $41;
   $9 = $12;
   $13 = $40;
   $14 = $10 + $13 | 0;
   $22 = $14;
   $9 = $10 >>> 0 > $14 >>> 0 ? $9 + 1 | 0 : $9;
   $18 = $9;
   $9 = $16;
   $13 = $29;
   $13 = __wasm_i64_mul($24, $9, $33, $13);
   $7 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $8 = $9;
   $9 = $17;
   $13 = $23;
   $13 = __wasm_i64_mul($19, $9, $25, $13);
   $10 = $13;
   $9 = i64toi32_i32$HIGH_BITS;
   $13 = $9;
   $9 = $8;
   $14 = $9 + $13 | 0;
   $12 = $7;
   $11 = $12 + $10 | 0;
   $14 = $11 >>> 0 < $10 >>> 0 ? $14 + 1 | 0 : $14;
   $12 = 0;
   $4 = $12;
   $12 = $9;
   $17 = $14;
   $9 = $14;
   $10 = $11;
   $14 = $7;
   $10 = ($12 | 0) == ($9 | 0) & $10 >>> 0 < $14 >>> 0 | $9 >>> 0 < $12 >>> 0;
   $12 = $4;
   $10 = $12 | $10;
   $4 = $10;
   $12 = $37;
   $9 = 0;
   $14 = $17;
   $9 = $9 | $14;
   $13 = $12 + $9 | 0;
   $10 = $2;
   $14 = $4;
   $11 = $10 + $14 | 0;
   $7 = $13;
   $12 = $10;
   $11 = $9 >>> 0 > $13 >>> 0 ? $11 + 1 | 0 : $11;
   $9 = $37;
   $10 = $13;
   $2 = ($12 | 0) == ($11 | 0) & $9 >>> 0 > $10 >>> 0 | $12 >>> 0 > $11 >>> 0;
   $10 = $11;
   $9 = $3;
   $11 = $10;
   $13 = $9 + $10 | 0;
   $12 = 0;
   $10 = $7;
   $14 = $12 + $10 | 0;
   $10 = $11;
   $13 = $12 >>> 0 > $14 >>> 0 ? $13 + 1 | 0 : $13;
   $12 = $7;
   $11 = $14;
   $10 = ($10 | 0) == ($13 | 0) & $12 >>> 0 > $11 >>> 0 | $10 >>> 0 > $13 >>> 0;
   $14 = 0;
   $12 = $2;
   $9 = $12 + $10 | 0;
   $14 = $9 >>> 0 < $10 >>> 0 ? 1 : $14;
   $10 = $9;
   $12 = $14;
   $14 = $15;
   $9 = $12 + $14 | 0;
   $11 = $21;
   $13 = $11 + $10 | 0;
   $7 = $13;
   $9 = $10 >>> 0 > $13 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $11 = $14;
   $10 = $21;
   $11 = ($9 | 0) == ($11 | 0) & $10 >>> 0 > $13 >>> 0 | $9 >>> 0 < $11 >>> 0;
   $14 = $18;
   $13 = $14;
   $10 = $22;
   $12 = $11 + $10 | 0;
   $13 = $12 >>> 0 < $11 >>> 0 ? $13 + 1 | 0 : $13;
   $3 = $12;
   $4 = $13;
   label$12 : {
    if (($13 | 0) == 131071 | $13 >>> 0 < 131071) {
     $11 = $1;
     $13 = $11 << 17;
     $1 = $13;
     $14 = $7;
     $14 = 0;
     $17 = $14;
     $11 = 0;
     $2 = $11;
     $14 = $11;
     $13 = $5;
     $19 = $13;
     $13 = $17;
     $13 = __wasm_i64_mul($7, $14, $19, $13);
     $21 = $13;
     $14 = i64toi32_i32$HIGH_BITS;
     $15 = $14;
     $10 = $44;
     $11 = $13;
     $13 = ($11 | 0) != 0 | ($14 | 0) != 0;
     $9 = $10 - $13 | 0;
     $24 = $9;
     $11 = $1;
     $12 = $10 >>> 0 < $13 >>> 0;
     $12 = $11 - $12 | 0;
     $1 = $12;
     $13 = $21;
     $14 = 0 - $13 | 0;
     $25 = $14;
     $10 = $15;
     $9 = $10 + (($13 | 0) != 0) | 0;
     $9 = 0 - $9 | 0;
     $23 = $9;
     $9 = $8;
     $11 = 0;
     $15 = $11;
     $12 = $17;
     $12 = __wasm_i64_mul($9, $11, $19, $12);
     $22 = $12;
     $11 = i64toi32_i32$HIGH_BITS;
     $18 = $11;
     $12 = 0;
     $16 = $12;
     $11 = $2;
     $12 = $11;
     $11 = $6;
     $9 = $16;
     $9 = __wasm_i64_mul($7, $12, $11, $9);
     $13 = $9;
     $12 = i64toi32_i32$HIGH_BITS;
     $9 = $12;
     $12 = $18;
     $14 = $12 + $9 | 0;
     $11 = $22;
     $10 = $11 + $13 | 0;
     $14 = $10 >>> 0 < $13 >>> 0 ? $14 + 1 | 0 : $14;
     $27 = $10;
     $28 = $14;
     $11 = $23;
     $14 = $25;
     $26 = 0;
     $13 = $26;
     $12 = ($10 | 0) == ($11 | 0) & $14 >>> 0 < $13 >>> 0 | $10 >>> 0 > $11 >>> 0;
     $13 = $24;
     $9 = $13 - $12 | 0;
     $24 = $9;
     $14 = $1;
     $10 = $13 >>> 0 < $12 >>> 0;
     $10 = $14 - $10 | 0;
     $21 = $10;
     $13 = 0;
     $14 = $17;
     $14 = __wasm_i64_mul($3, $13, $19, $14);
     $9 = $14;
     $13 = i64toi32_i32$HIGH_BITS;
     $1 = $13;
     $14 = 0;
     $10 = $14;
     $14 = $2;
     $10 = __wasm_i64_mul($7, $14, $34, $10);
     $12 = $10;
     $13 = $9;
     $11 = $10 + $13 | 0;
     $14 = i64toi32_i32$HIGH_BITS;
     $10 = $14;
     $14 = $1;
     $9 = $10 + $14 | 0;
     $14 = $11;
     $9 = $12 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
     $1 = $9;
     $9 = $15;
     $13 = $16;
     $13 = __wasm_i64_mul($8, $9, $6, $13);
     $12 = $13;
     $9 = i64toi32_i32$HIGH_BITS;
     $13 = $9;
     $9 = $1;
     $11 = $9 + $13 | 0;
     $10 = $12 + $14 | 0;
     $11 = $10 >>> 0 < $12 >>> 0 ? $11 + 1 | 0 : $11;
     $2 = $11;
     $11 = $18;
     $14 = $28;
     $12 = $27;
     $9 = $22;
     $12 = ($11 | 0) == ($14 | 0) & $12 >>> 0 < $9 >>> 0 | $11 >>> 0 > $14 >>> 0;
     $11 = $12;
     $12 = 0;
     $9 = $12;
     $12 = $11;
     $9 = $12 | $9;
     $1 = $9;
     $11 = 0;
     $14 = $11 | $14;
     $13 = $10 + $14 | 0;
     $9 = $2;
     $11 = $1;
     $10 = $9 + $11 | 0;
     $18 = $13;
     $10 = $13 >>> 0 < $14 >>> 0 ? $10 + 1 | 0 : $10;
     $17 = $10;
     $12 = 0;
     $9 = $12;
     $10 = $8;
     $12 = $10;
     $10 = $38;
     $9 = __wasm_i64_mul($7, $12, $10, $9);
     $2 = $9;
     $12 = i64toi32_i32$HIGH_BITS;
     $1 = $12;
     $9 = 0;
     $10 = $9;
     $12 = $6;
     $9 = $12;
     $12 = $4;
     $10 = __wasm_i64_mul($19, $9, $12, $10);
     $14 = $10;
     $9 = i64toi32_i32$HIGH_BITS;
     $10 = $9;
     $9 = $1;
     $13 = $9 + $10 | 0;
     $12 = $2;
     $11 = $12 + $14 | 0;
     $13 = $11 >>> 0 < $14 >>> 0 ? $13 + 1 | 0 : $13;
     $9 = $11;
     $1 = $13;
     $13 = $4;
     $12 = $16;
     $12 = __wasm_i64_mul($3, $13, $6, $12);
     $14 = $12;
     $13 = i64toi32_i32$HIGH_BITS;
     $12 = $13;
     $13 = $1;
     $11 = $12 + $13 | 0;
     $10 = $9 + $14 | 0;
     $11 = $10 >>> 0 < $14 >>> 0 ? $11 + 1 | 0 : $11;
     $13 = $10;
     $1 = $11;
     $11 = $15;
     $9 = $35;
     $9 = __wasm_i64_mul($8, $11, $34, $9);
     $14 = $9;
     $11 = i64toi32_i32$HIGH_BITS;
     $9 = $11;
     $11 = $1;
     $10 = $9 + $11 | 0;
     $12 = $14 + $13 | 0;
     $11 = $12;
     $13 = $17;
     $12 = $11 + $13 | 0;
     $10 = $18;
     $14 = $45;
     $9 = $10 + $14 | 0;
     $12 = $9 >>> 0 < $14 >>> 0 ? $12 + 1 | 0 : $12;
     $10 = $12;
     $13 = $24;
     $11 = $13 - $9 | 0;
     $19 = $11;
     $12 = $21;
     $9 = $10 + ($13 >>> 0 < $9 >>> 0) | 0;
     $9 = $12 - $9 | 0;
     $17 = $9;
     $36 = $36 - 1 | 0;
     $12 = $25;
     $14 = $26;
     $10 = $12 - $14 | 0;
     $1 = $10;
     $9 = $23;
     $13 = $27;
     $11 = $13 + ($12 >>> 0 < $14 >>> 0) | 0;
     $11 = $9 - $11 | 0;
     break label$12;
    }
    $11 = $8;
    $24 = $11 >>> 1 | 0;
    $12 = 0;
    $16 = $12;
    $11 = $1;
    $9 = $11 << 16;
    $10 = $9;
    $12 = $3;
    $11 = $12 << 31;
    $1 = $11;
    $11 = $8;
    $12 = $11 >>> 1 | 0;
    $9 = $7;
    $14 = ($11 & 1) << 31 | $9 >>> 1;
    $9 = $12;
    $12 = $1;
    $9 = $12 | $9;
    $8 = $9;
    $11 = 0;
    $7 = $11 | $14;
    $12 = $7;
    $12 = 0;
    $17 = $12;
    $2 = 0;
    $12 = $2;
    $9 = $5;
    $19 = $9;
    $9 = $17;
    $9 = __wasm_i64_mul($7, $12, $19, $9);
    $21 = $9;
    $12 = i64toi32_i32$HIGH_BITS;
    $15 = $12;
    $14 = $46;
    $9 = ($9 | 0) != 0 | ($12 | 0) != 0;
    $13 = $14 - $9 | 0;
    $26 = $13;
    $11 = $10;
    $10 = $9 >>> 0 > $14 >>> 0;
    $10 = $11 - $10 | 0;
    $29 = $10;
    $9 = $21;
    $12 = 0 - $9 | 0;
    $27 = $12;
    $14 = $15;
    $13 = $14 + (($9 | 0) != 0) | 0;
    $13 = 0 - $13 | 0;
    $28 = $13;
    $11 = 0;
    $15 = $11;
    $13 = $2;
    $11 = $13;
    $13 = $6;
    $10 = $15;
    $10 = __wasm_i64_mul($7, $11, $13, $10);
    $25 = $10;
    $11 = i64toi32_i32$HIGH_BITS;
    $23 = $11;
    $13 = $3;
    $11 = $4;
    $10 = $11 << 31 | $13 >>> 1;
    $1 = $10;
    $9 = $13 << 31;
    $11 = $24;
    $22 = $9 | $11;
    $10 = $16;
    $13 = $1;
    $13 = $10 | $13;
    $18 = $13;
    $10 = $22;
    $11 = 0;
    $31 = $11;
    $10 = $17;
    $10 = __wasm_i64_mul($22, $11, $19, $10);
    $9 = $10;
    $11 = i64toi32_i32$HIGH_BITS;
    $10 = $11;
    $11 = $23;
    $12 = $11 + $10 | 0;
    $13 = $25;
    $14 = $9 + $13 | 0;
    $24 = $14;
    $12 = $9 >>> 0 > $14 >>> 0 ? $12 + 1 | 0 : $12;
    $16 = $12;
    $11 = $14;
    $13 = $28;
    $12 = $27;
    $33 = 0;
    $9 = $33;
    $11 = ($11 | 0) == ($13 | 0) & $12 >>> 0 < $9 >>> 0 | $13 >>> 0 < $11 >>> 0;
    $9 = $26;
    $10 = $9 - $11 | 0;
    $26 = $10;
    $12 = $29;
    $14 = $9 >>> 0 < $11 >>> 0;
    $14 = $12 - $14 | 0;
    $21 = $14;
    $9 = 0;
    $12 = $9;
    $14 = $8;
    $9 = $14;
    $14 = $38;
    $12 = __wasm_i64_mul($7, $9, $14, $12);
    $13 = $12;
    $9 = i64toi32_i32$HIGH_BITS;
    $1 = $9;
    $12 = 0;
    $14 = $12;
    $9 = $6;
    $12 = $9;
    $9 = $4;
    $14 = __wasm_i64_mul($19, $12, $9 >>> 1 | 0, $14);
    $11 = $14;
    $12 = i64toi32_i32$HIGH_BITS;
    $14 = $12;
    $12 = $1;
    $10 = $12 + $14 | 0;
    $9 = $13;
    $13 = $9 + $11 | 0;
    $10 = $13 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
    $1 = $10;
    $10 = $4;
    $9 = $10 >>> 1 | 0;
    $12 = $3;
    $3 = ($10 & 1) << 31 | $12 >>> 1;
    $4 = $9;
    $12 = $15;
    $12 = __wasm_i64_mul($3, $9, $6, $12);
    $11 = $12;
    $10 = $13;
    $14 = $11 + $10 | 0;
    $9 = i64toi32_i32$HIGH_BITS;
    $12 = $9;
    $9 = $1;
    $13 = $12 + $9 | 0;
    $9 = $14;
    $13 = $11 >>> 0 > $14 >>> 0 ? $13 + 1 | 0 : $13;
    $1 = $13;
    $13 = $18;
    $10 = $35;
    $10 = __wasm_i64_mul($22, $13, $34, $10);
    $11 = $10;
    $13 = i64toi32_i32$HIGH_BITS;
    $10 = $13;
    $13 = $1;
    $14 = $10 + $13 | 0;
    $12 = $9 + $11 | 0;
    $9 = $12;
    $18 = $9;
    $9 = $15;
    $13 = $31;
    $13 = __wasm_i64_mul($6, $9, $22, $13);
    $1 = $13;
    $9 = i64toi32_i32$HIGH_BITS;
    $13 = 0;
    $14 = $17;
    $14 = __wasm_i64_mul($3, $13, $19, $14);
    $11 = $14;
    $13 = i64toi32_i32$HIGH_BITS;
    $14 = $13;
    $13 = $9;
    $12 = $14 + $13 | 0;
    $9 = $1;
    $10 = $9 + $11 | 0;
    $1 = $10;
    $12 = $10 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
    $9 = 0;
    $13 = __wasm_i64_mul($7, $2, $34, $9);
    $11 = $13;
    $9 = i64toi32_i32$HIGH_BITS;
    $13 = $9;
    $9 = $12;
    $10 = $9 + $13 | 0;
    $12 = $1;
    $14 = $12 + $11 | 0;
    $10 = $11 >>> 0 > $14 >>> 0 ? $10 + 1 | 0 : $10;
    $2 = $10;
    $12 = $23;
    $10 = $16;
    $9 = $24;
    $11 = $25;
    $11 = ($12 | 0) == ($10 | 0) & $9 >>> 0 < $11 >>> 0 | $10 >>> 0 < $12 >>> 0;
    $10 = $11;
    $11 = 0;
    $9 = $11;
    $9 = $9 | $10;
    $1 = $9;
    $10 = $16;
    $12 = $10;
    $10 = 0;
    $12 = $12 | $10;
    $11 = $14;
    $13 = $12 + $11 | 0;
    $9 = $2;
    $10 = $1;
    $14 = $9 + $10 | 0;
    $14 = $13 >>> 0 < $12 >>> 0 ? $14 + 1 | 0 : $14;
    $12 = $13;
    $9 = $47;
    $10 = $12 + $9 | 0;
    $11 = $14;
    $14 = $18;
    $13 = $11 + $14 | 0;
    $13 = $10 >>> 0 < $12 >>> 0 ? $13 + 1 | 0 : $13;
    $9 = $13;
    $14 = $26;
    $11 = $14 - $10 | 0;
    $19 = $11;
    $13 = $21;
    $10 = $9 + ($10 >>> 0 > $14 >>> 0) | 0;
    $10 = $13 - $10 | 0;
    $17 = $10;
    $13 = $27;
    $12 = $33;
    $9 = $13 - $12 | 0;
    $1 = $9;
    $10 = $28;
    $14 = $24;
    $11 = $14 + ($13 >>> 0 < $12 >>> 0) | 0;
    $11 = $10 - $11 | 0;
   }
   $2 = $11;
   if (($36 | 0) >= 16384) {
    $10 = $32;
    $32 = $10;
    $11 = $30;
    $13 = $11 | 2147418112;
    $30 = $13;
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   $16 = $36 + 16383 | 0;
   if (($36 | 0) <= -16383) {
    label$16 : {
     if ($16) {
      break label$16;
     }
     $13 = $2;
     $11 = $1;
     $10 = $13 << 1 | $11 >>> 31;
     $13 = $11 << 1;
     $11 = $6;
     $12 = $5;
     $6 = ($10 | 0) == ($11 | 0) & $12 >>> 0 < $13 >>> 0 | $10 >>> 0 > $11 >>> 0;
     $12 = $19;
     $5 = $12 << 1;
     $13 = $17;
     $10 = $13 << 1 | $12 >>> 31;
     $1 = $10;
     $10 = $2;
     $12 = 0;
     $13 = $12;
     $12 = $1;
     $13 = $12 | $13;
     $11 = $10 >>> 31 | 0;
     $10 = $5;
     $1 = $11 | $10;
     $12 = $1;
     $10 = $38;
     $11 = $39;
     $2 = ($10 | 0) == ($13 | 0) & $11 >>> 0 < $12 >>> 0 | $10 >>> 0 < $13 >>> 0;
     $12 = $13;
     $13 = $10;
     $11 = $1;
     $10 = $39;
     $13 = ($11 | 0) == ($10 | 0) & ($13 | 0) == ($12 | 0) ? $6 : $2;
     $11 = $8;
     $9 = $11;
     $10 = $7;
     $14 = $10 + $13 | 0;
     $9 = $14 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
     $1 = $14;
     $2 = $9;
     $10 = $11;
     $11 = $14;
     $13 = $7;
     $5 = ($9 | 0) == ($10 | 0) & $11 >>> 0 < $13 >>> 0 | $10 >>> 0 > $9 >>> 0;
     $11 = $4;
     $9 = $11 & 65535;
     $11 = $5;
     $13 = $3;
     $10 = $13;
     $12 = $11 + $10 | 0;
     $13 = $9;
     $5 = $12;
     $14 = $10 >>> 0 > $12 >>> 0 ? $13 + 1 | 0 : $13;
     $6 = $14;
     $11 = $14 & 65536;
     if (!$11) {
      break label$16;
     }
     $14 = $5;
     $32 = $32 | $14;
     $9 = $30;
     $11 = $6;
     $9 = $9 | $11;
     $30 = $9;
     break label$2;
    }
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   $9 = $2;
   $11 = $1;
   $14 = $9 << 1 | $11 >>> 31;
   $9 = $11 << 1;
   $11 = $6;
   $10 = $5;
   $6 = ($14 | 0) == ($11 | 0) & $9 >>> 0 >= $10 >>> 0 | $11 >>> 0 < $14 >>> 0;
   $10 = $19;
   $5 = $10 << 1;
   $9 = $17;
   $14 = $9 << 1 | $10 >>> 31;
   $1 = $14;
   $14 = $2;
   $10 = 0;
   $9 = $10;
   $10 = $1;
   $9 = $9 | $10;
   $11 = $14 >>> 31 | 0;
   $14 = $5;
   $1 = $11 | $14;
   $10 = $1;
   $14 = $38;
   $11 = $39;
   $2 = ($9 | 0) == ($14 | 0) & $10 >>> 0 >= $11 >>> 0 | $9 >>> 0 > $14 >>> 0;
   $10 = $9;
   $9 = $14;
   $11 = $1;
   $14 = $39;
   $9 = ($11 | 0) == ($14 | 0) & ($10 | 0) == ($9 | 0) ? $6 : $2;
   $11 = $8;
   $14 = $7;
   $13 = $9 + $14 | 0;
   $1 = $13;
   $12 = $9 >>> 0 > $13 >>> 0 ? $11 + 1 | 0 : $11;
   $2 = $12;
   $14 = $11;
   $9 = $7;
   $11 = $13;
   $5 = ($12 | 0) == ($14 | 0) & $9 >>> 0 > $11 >>> 0 | $12 >>> 0 < $14 >>> 0;
   $11 = $4;
   $12 = $11 & 65535;
   $11 = $5;
   $9 = $3;
   $14 = $9;
   $10 = $11 + $9 | 0;
   $9 = $12;
   $3 = $10;
   $12 = $16;
   $11 = $12 << 16;
   $12 = $11;
   $13 = $10 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
   $11 = $13;
   $10 = $12 + $11 | 0;
   $14 = 0;
   $13 = $3;
   $9 = $14 + $13 | 0;
   $10 = $9 >>> 0 < $14 >>> 0 ? $10 + 1 | 0 : $10;
   $32 = $9 | $32;
   $13 = $30;
   $13 = $13 | $10;
   $30 = $13;
  }
  $11 = $0;
  HEAP32[$11 >> 2] = $1;
  $13 = $2;
  HEAP32[$11 + 4 >> 2] = $13;
  HEAP32[$11 + 8 >> 2] = $32;
  $13 = $30;
  HEAP32[$11 + 12 >> 2] = $13;
  __stack_pointer = $20 + 192 | 0;
  return;
 }
 $11 = $0;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$11 + 4 >> 2] = 0;
 $11 = $6;
 $13 = $4;
 $11 = $11 | $13;
 $10 = $3;
 $14 = $5;
 $12 = !($11 | ($10 | $14));
 $14 = $12 ? 0 : $32;
 $1 = $14;
 $14 = $0;
 HEAP32[$14 + 8 >> 2] = $1;
 $10 = $30;
 $13 = $12 ? 2147450880 : $10;
 HEAP32[$14 + 12 >> 2] = $13;
 __stack_pointer = $20 + 192 | 0;
}
function dlmalloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $12 = __stack_pointer - 16 | 0;
 __stack_pointer = $12;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             if ($0 >>> 0 <= 244) {
              $6 = HEAP32[8756];
              $4 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
              $1 = $4 >>> 3 | 0;
              $0 = $6 >>> $1 | 0;
              if ($0 & 3) {
               $4 = (($0 ^ -1) & 1) + $1 | 0;
               $3 = $4 << 3;
               $1 = HEAP32[$3 + 35072 >> 2];
               $0 = $1 + 8 | 0;
               $2 = HEAP32[$1 + 8 >> 2];
               $3 = $3 + 35064 | 0;
               label$15 : {
                if (($2 | 0) == ($3 | 0)) {
                 wasm2js_i32$0 = 35024, wasm2js_i32$1 = __wasm_rotl_i32(-2, $4) & $6, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                 break label$15;
                }
                HEAP32[$2 + 12 >> 2] = $3;
                HEAP32[$3 + 8 >> 2] = $2;
               }
               $2 = $4 << 3;
               HEAP32[$1 + 4 >> 2] = $2 | 3;
               $1 = $1 + $2 | 0;
               HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
               break label$1;
              }
              $9 = HEAP32[8758];
              if ($9 >>> 0 >= $4 >>> 0) {
               break label$12;
              }
              if ($0) {
               $2 = $0 << $1;
               $0 = 2 << $1;
               $0 = $2 & ($0 | 0 - $0);
               $0 = ($0 & 0 - $0) - 1 | 0;
               $2 = $0;
               $0 = $0 >>> 12 & 16;
               $1 = $2 >>> $0 | 0;
               $2 = $1 >>> 5 & 8;
               $3 = $0 | $2;
               $0 = $1 >>> $2 | 0;
               $1 = $0 >>> 2 & 4;
               $2 = $3 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 2;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 1;
               $2 = ($2 | $1) + ($0 >>> $1 | 0) | 0;
               $3 = $2 << 3;
               $1 = HEAP32[$3 + 35072 >> 2];
               $0 = HEAP32[$1 + 8 >> 2];
               $3 = $3 + 35064 | 0;
               label$18 : {
                if (($0 | 0) == ($3 | 0)) {
                 $6 = __wasm_rotl_i32(-2, $2) & $6;
                 HEAP32[8756] = $6;
                 break label$18;
                }
                HEAP32[$0 + 12 >> 2] = $3;
                HEAP32[$3 + 8 >> 2] = $0;
               }
               $0 = $1 + 8 | 0;
               HEAP32[$1 + 4 >> 2] = $4 | 3;
               $3 = $1 + $4 | 0;
               $5 = $2 << 3;
               $2 = $5 - $4 | 0;
               HEAP32[$3 + 4 >> 2] = $2 | 1;
               HEAP32[$1 + $5 >> 2] = $2;
               if ($9) {
                $5 = $9 >>> 3 | 0;
                $4 = ($5 << 3) + 35064 | 0;
                $1 = HEAP32[8761];
                $5 = 1 << $5;
                label$21 : {
                 if (!($6 & $5)) {
                  HEAP32[8756] = $5 | $6;
                  $5 = $4;
                  break label$21;
                 }
                 $5 = HEAP32[$4 + 8 >> 2];
                }
                HEAP32[$4 + 8 >> 2] = $1;
                HEAP32[$5 + 12 >> 2] = $1;
                HEAP32[$1 + 12 >> 2] = $4;
                HEAP32[$1 + 8 >> 2] = $5;
               }
               HEAP32[8761] = $3;
               HEAP32[8758] = $2;
               break label$1;
              }
              $8 = HEAP32[8757];
              if (!$8) {
               break label$12;
              }
              $0 = (0 - $8 & $8) - 1 | 0;
              $2 = $0;
              $0 = $0 >>> 12 & 16;
              $1 = $2 >>> $0 | 0;
              $2 = $1 >>> 5 & 8;
              $3 = $0 | $2;
              $0 = $1 >>> $2 | 0;
              $1 = $0 >>> 2 & 4;
              $2 = $3 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 2;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 1;
              $3 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 35328 >> 2];
              $1 = (HEAP32[$3 + 4 >> 2] & -8) - $4 | 0;
              $2 = $3;
              while (1) {
               label$24 : {
                $0 = HEAP32[$2 + 16 >> 2];
                if (!$0) {
                 $0 = HEAP32[$2 + 20 >> 2];
                 if (!$0) {
                  break label$24;
                 }
                }
                $2 = (HEAP32[$0 + 4 >> 2] & -8) - $4 | 0;
                $5 = $2;
                $2 = $1 >>> 0 > $2 >>> 0;
                $1 = $2 ? $5 : $1;
                $3 = $2 ? $0 : $3;
                $2 = $0;
                continue;
               }
               break;
              }
              $10 = $3 + $4 | 0;
              if ($10 >>> 0 <= $3 >>> 0) {
               break label$11;
              }
              $11 = HEAP32[$3 + 24 >> 2];
              $5 = HEAP32[$3 + 12 >> 2];
              if (($5 | 0) != ($3 | 0)) {
               $0 = HEAP32[$3 + 8 >> 2];
               HEAP32[$0 + 12 >> 2] = $5;
               HEAP32[$5 + 8 >> 2] = $0;
               break label$2;
              }
              $2 = $3 + 20 | 0;
              $0 = HEAP32[$2 >> 2];
              if (!$0) {
               $0 = HEAP32[$3 + 16 >> 2];
               if (!$0) {
                break label$10;
               }
               $2 = $3 + 16 | 0;
              }
              while (1) {
               $7 = $2;
               $5 = $0;
               $2 = $0 + 20 | 0;
               $0 = HEAP32[$2 >> 2];
               if ($0) {
                continue;
               }
               $2 = $5 + 16 | 0;
               $0 = HEAP32[$5 + 16 >> 2];
               if ($0) {
                continue;
               }
               break;
              }
              HEAP32[$7 >> 2] = 0;
              break label$2;
             }
             $4 = -1;
             if ($0 >>> 0 > 4294967231) {
              break label$12;
             }
             $0 = $0 + 11 | 0;
             $4 = $0 & -8;
             $9 = HEAP32[8757];
             if (!$9) {
              break label$12;
             }
             $7 = 31;
             if ($4 >>> 0 <= 16777215) {
              $0 = $0 >>> 8 | 0;
              $2 = $0;
              $0 = $0 + 1048320 >>> 16 & 8;
              $1 = $2 << $0;
              $2 = $1;
              $1 = $1 + 520192 >>> 16 & 4;
              $2 = $2 << $1;
              $3 = $2;
              $2 = $2 + 245760 >>> 16 & 2;
              $0 = ($3 << $2 >>> 15 | 0) - ($0 | $1 | $2) | 0;
              $7 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
             }
             $1 = 0 - $4 | 0;
             $2 = HEAP32[($7 << 2) + 35328 >> 2];
             label$31 : {
              label$32 : {
               label$33 : {
                if (!$2) {
                 $0 = 0;
                 break label$33;
                }
                $0 = 0;
                $3 = $4 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1 | 0) | 0);
                while (1) {
                 label$36 : {
                  $6 = (HEAP32[$2 + 4 >> 2] & -8) - $4 | 0;
                  if ($6 >>> 0 >= $1 >>> 0) {
                   break label$36;
                  }
                  $5 = $2;
                  $1 = $6;
                  if ($1) {
                   break label$36;
                  }
                  $1 = 0;
                  $0 = $2;
                  break label$32;
                 }
                 $6 = HEAP32[$2 + 20 >> 2];
                 $2 = HEAP32[(($3 >>> 29 & 4) + $2 | 0) + 16 >> 2];
                 $0 = $6 ? ($6 | 0) == ($2 | 0) ? $0 : $6 : $0;
                 $3 = $3 << 1;
                 if ($2) {
                  continue;
                 }
                 break;
                }
               }
               if (!($0 | $5)) {
                $0 = 2 << $7;
                $0 = ($0 | 0 - $0) & $9;
                if (!$0) {
                 break label$12;
                }
                $0 = (0 - $0 & $0) - 1 | 0;
                $2 = $0;
                $0 = $0 >>> 12 & 16;
                $2 = $2 >>> $0 | 0;
                $3 = $2 >>> 5 & 8;
                $6 = $0 | $3;
                $0 = $2 >>> $3 | 0;
                $2 = $0 >>> 2 & 4;
                $3 = $6 | $2;
                $0 = $0 >>> $2 | 0;
                $2 = $0 >>> 1 & 2;
                $3 = $3 | $2;
                $0 = $0 >>> $2 | 0;
                $2 = $0 >>> 1 & 1;
                $0 = HEAP32[(($3 | $2) + ($0 >>> $2 | 0) << 2) + 35328 >> 2];
               }
               if (!$0) {
                break label$31;
               }
              }
              while (1) {
               $6 = (HEAP32[$0 + 4 >> 2] & -8) - $4 | 0;
               $3 = $6 >>> 0 < $1 >>> 0;
               $1 = $3 ? $6 : $1;
               $5 = $3 ? $0 : $5;
               $2 = HEAP32[$0 + 16 >> 2];
               if (!$2) {
                $2 = HEAP32[$0 + 20 >> 2];
               }
               $0 = $2;
               if ($0) {
                continue;
               }
               break;
              }
             }
             if (!$5 | HEAP32[8758] - $4 >>> 0 <= $1 >>> 0) {
              break label$12;
             }
             $7 = $4 + $5 | 0;
             if ($7 >>> 0 <= $5 >>> 0) {
              break label$11;
             }
             $8 = HEAP32[$5 + 24 >> 2];
             $3 = HEAP32[$5 + 12 >> 2];
             if (($5 | 0) != ($3 | 0)) {
              $0 = HEAP32[$5 + 8 >> 2];
              HEAP32[$0 + 12 >> 2] = $3;
              HEAP32[$3 + 8 >> 2] = $0;
              break label$3;
             }
             $2 = $5 + 20 | 0;
             $0 = HEAP32[$2 >> 2];
             if (!$0) {
              $0 = HEAP32[$5 + 16 >> 2];
              if (!$0) {
               break label$9;
              }
              $2 = $5 + 16 | 0;
             }
             while (1) {
              $6 = $2;
              $3 = $0;
              $2 = $0 + 20 | 0;
              $0 = HEAP32[$2 >> 2];
              if ($0) {
               continue;
              }
              $2 = $3 + 16 | 0;
              $0 = HEAP32[$3 + 16 >> 2];
              if ($0) {
               continue;
              }
              break;
             }
             HEAP32[$6 >> 2] = 0;
             break label$3;
            }
            $0 = HEAP32[8758];
            if ($4 >>> 0 <= $0 >>> 0) {
             $1 = HEAP32[8761];
             $2 = $0 - $4 | 0;
             label$45 : {
              if ($2 >>> 0 >= 16) {
               HEAP32[8758] = $2;
               $3 = $1 + $4 | 0;
               HEAP32[8761] = $3;
               HEAP32[$3 + 4 >> 2] = $2 | 1;
               HEAP32[$0 + $1 >> 2] = $2;
               HEAP32[$1 + 4 >> 2] = $4 | 3;
               break label$45;
              }
              HEAP32[8761] = 0;
              HEAP32[8758] = 0;
              HEAP32[$1 + 4 >> 2] = $0 | 3;
              $0 = $0 + $1 | 0;
              HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
             }
             $0 = $1 + 8 | 0;
             break label$1;
            }
            $3 = HEAP32[8759];
            if ($4 >>> 0 < $3 >>> 0) {
             $1 = $3 - $4 | 0;
             HEAP32[8759] = $1;
             $0 = HEAP32[8762];
             $2 = $4 + $0 | 0;
             HEAP32[8762] = $2;
             HEAP32[$2 + 4 >> 2] = $1 | 1;
             HEAP32[$0 + 4 >> 2] = $4 | 3;
             $0 = $0 + 8 | 0;
             break label$1;
            }
            $0 = 0;
            $9 = $4 + 47 | 0;
            $2 = $9;
            if (HEAP32[8874]) {
             $1 = HEAP32[8876];
            } else {
             HEAP32[8877] = -1;
             HEAP32[8878] = -1;
             HEAP32[8875] = 4096;
             HEAP32[8876] = 4096;
             HEAP32[8874] = $12 + 12 & -16 ^ 1431655768;
             HEAP32[8879] = 0;
             HEAP32[8867] = 0;
             $1 = 4096;
            }
            $6 = $2 + $1 | 0;
            $7 = 0 - $1 | 0;
            $5 = $6 & $7;
            if ($5 >>> 0 <= $4 >>> 0) {
             break label$1;
            }
            $1 = HEAP32[8866];
            if ($1) {
             $2 = HEAP32[8864];
             $8 = $5 + $2 | 0;
             if ($1 >>> 0 < $8 >>> 0 | $2 >>> 0 >= $8 >>> 0) {
              break label$1;
             }
            }
            if (HEAPU8[35468] & 4) {
             break label$6;
            }
            label$51 : {
             label$52 : {
              $1 = HEAP32[8762];
              if ($1) {
               $0 = 35472;
               while (1) {
                $2 = HEAP32[$0 >> 2];
                if (HEAP32[$0 + 4 >> 2] + $2 >>> 0 > $1 >>> 0 ? $2 >>> 0 <= $1 >>> 0 : 0) {
                 break label$52;
                }
                $0 = HEAP32[$0 + 8 >> 2];
                if ($0) {
                 continue;
                }
                break;
               }
              }
              $3 = sbrk(0);
              if (($3 | 0) == -1) {
               break label$7;
              }
              $6 = $5;
              $0 = HEAP32[8875];
              $1 = $0 - 1 | 0;
              if ($3 & $1) {
               $6 = ($5 - $3 | 0) + ($1 + $3 & 0 - $0) | 0;
              }
              if ($6 >>> 0 > 2147483646 | $4 >>> 0 >= $6 >>> 0) {
               break label$7;
              }
              $0 = HEAP32[8866];
              if ($0) {
               $1 = HEAP32[8864];
               $2 = $6 + $1 | 0;
               if ($0 >>> 0 < $2 >>> 0 | $1 >>> 0 >= $2 >>> 0) {
                break label$7;
               }
              }
              $0 = sbrk($6);
              if (($3 | 0) != ($0 | 0)) {
               break label$51;
              }
              break label$5;
             }
             $6 = $6 - $3 & $7;
             if ($6 >>> 0 > 2147483646) {
              break label$7;
             }
             $3 = sbrk($6);
             if (($3 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
              break label$8;
             }
             $0 = $3;
            }
            if (!(($0 | 0) == -1 | $4 + 48 >>> 0 <= $6 >>> 0)) {
             $1 = HEAP32[8876];
             $1 = $1 + ($9 - $6 | 0) & 0 - $1;
             if ($1 >>> 0 > 2147483646) {
              $3 = $0;
              break label$5;
             }
             if ((sbrk($1) | 0) != -1) {
              $6 = $1 + $6 | 0;
              $3 = $0;
              break label$5;
             }
             sbrk(0 - $6 | 0);
             break label$7;
            }
            $3 = $0;
            if (($0 | 0) != -1) {
             break label$5;
            }
            break label$7;
           }
           abort();
          }
          $5 = 0;
          break label$2;
         }
         $3 = 0;
         break label$3;
        }
        if (($3 | 0) != -1) {
         break label$5;
        }
       }
       HEAP32[8867] = HEAP32[8867] | 4;
      }
      if ($5 >>> 0 > 2147483646) {
       break label$4;
      }
      $3 = sbrk($5);
      $2 = ($3 | 0) == -1;
      $0 = sbrk(0);
      if ($2 | $3 >>> 0 >= $0 >>> 0 | ($0 | 0) == -1) {
       break label$4;
      }
      $6 = $0 - $3 | 0;
      if ($6 >>> 0 <= $4 + 40 >>> 0) {
       break label$4;
      }
     }
     $0 = HEAP32[8864] + $6 | 0;
     HEAP32[8864] = $0;
     if (HEAPU32[8865] < $0 >>> 0) {
      HEAP32[8865] = $0;
     }
     label$62 : {
      label$63 : {
       label$64 : {
        $1 = HEAP32[8762];
        if ($1) {
         $0 = 35472;
         while (1) {
          $2 = HEAP32[$0 >> 2];
          $5 = HEAP32[$0 + 4 >> 2];
          if (($2 + $5 | 0) == ($3 | 0)) {
           break label$64;
          }
          $0 = HEAP32[$0 + 8 >> 2];
          if ($0) {
           continue;
          }
          break;
         }
         break label$63;
        }
        $0 = HEAP32[8760];
        if (!($0 >>> 0 <= $3 >>> 0 ? $0 : 0)) {
         HEAP32[8760] = $3;
        }
        $0 = 0;
        HEAP32[8869] = $6;
        HEAP32[8868] = $3;
        HEAP32[8764] = -1;
        HEAP32[8765] = HEAP32[8874];
        HEAP32[8871] = 0;
        while (1) {
         $1 = $0 << 3;
         $2 = $1 + 35064 | 0;
         HEAP32[$1 + 35072 >> 2] = $2;
         HEAP32[$1 + 35076 >> 2] = $2;
         $0 = $0 + 1 | 0;
         if (($0 | 0) != 32) {
          continue;
         }
         break;
        }
        $0 = $6 - 40 | 0;
        $1 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
        $2 = $0 - $1 | 0;
        HEAP32[8759] = $2;
        $1 = $1 + $3 | 0;
        HEAP32[8762] = $1;
        HEAP32[$1 + 4 >> 2] = $2 | 1;
        HEAP32[($0 + $3 | 0) + 4 >> 2] = 40;
        HEAP32[8763] = HEAP32[8878];
        break label$62;
       }
       if (HEAPU8[$0 + 12 | 0] & 8 | $1 >>> 0 >= $3 >>> 0 | $1 >>> 0 < $2 >>> 0) {
        break label$63;
       }
       HEAP32[$0 + 4 >> 2] = $5 + $6;
       $0 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
       $2 = $1 + $0 | 0;
       HEAP32[8762] = $2;
       $3 = HEAP32[8759] + $6 | 0;
       $0 = $3 - $0 | 0;
       HEAP32[8759] = $0;
       HEAP32[$2 + 4 >> 2] = $0 | 1;
       HEAP32[($1 + $3 | 0) + 4 >> 2] = 40;
       HEAP32[8763] = HEAP32[8878];
       break label$62;
      }
      $5 = HEAP32[8760];
      if ($5 >>> 0 > $3 >>> 0) {
       HEAP32[8760] = $3;
      }
      $2 = $3 + $6 | 0;
      $0 = 35472;
      label$70 : {
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            while (1) {
             if (HEAP32[$0 >> 2] != ($2 | 0)) {
              $0 = HEAP32[$0 + 8 >> 2];
              if ($0) {
               continue;
              }
              break label$75;
             }
             break;
            }
            if (!(HEAPU8[$0 + 12 | 0] & 8)) {
             break label$74;
            }
           }
           $0 = 35472;
           while (1) {
            $2 = HEAP32[$0 >> 2];
            if ($2 >>> 0 <= $1 >>> 0) {
             $2 = HEAP32[$0 + 4 >> 2] + $2 | 0;
             if ($2 >>> 0 > $1 >>> 0) {
              break label$73;
             }
            }
            $0 = HEAP32[$0 + 8 >> 2];
            continue;
           }
          }
          HEAP32[$0 >> 2] = $3;
          HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $6;
          $7 = ($3 + 8 & 7 ? -8 - $3 & 7 : 0) + $3 | 0;
          HEAP32[$7 + 4 >> 2] = $4 | 3;
          $3 = ($2 + 8 & 7 ? -8 - $2 & 7 : 0) + $2 | 0;
          $0 = ($3 - $7 | 0) - $4 | 0;
          $2 = $4 + $7 | 0;
          if (($1 | 0) == ($3 | 0)) {
           HEAP32[8762] = $2;
           $0 = HEAP32[8759] + $0 | 0;
           HEAP32[8759] = $0;
           HEAP32[$2 + 4 >> 2] = $0 | 1;
           break label$71;
          }
          if (HEAP32[8761] == ($3 | 0)) {
           HEAP32[8761] = $2;
           $0 = HEAP32[8758] + $0 | 0;
           HEAP32[8758] = $0;
           HEAP32[$2 + 4 >> 2] = $0 | 1;
           HEAP32[$0 + $2 >> 2] = $0;
           break label$71;
          }
          $1 = HEAP32[$3 + 4 >> 2];
          if (($1 & 3) == 1) {
           $9 = $1 & -8;
           label$83 : {
            if ($1 >>> 0 <= 255) {
             $8 = $1 >>> 3 | 0;
             $1 = ($8 << 3) + 35064 | 0;
             $6 = HEAP32[$3 + 8 >> 2];
             $4 = HEAP32[$3 + 12 >> 2];
             if (($6 | 0) == ($4 | 0)) {
              wasm2js_i32$0 = 35024, wasm2js_i32$1 = HEAP32[8756] & __wasm_rotl_i32(-2, $8), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              break label$83;
             }
             HEAP32[$6 + 12 >> 2] = $4;
             HEAP32[$4 + 8 >> 2] = $6;
             break label$83;
            }
            $8 = HEAP32[$3 + 24 >> 2];
            $6 = HEAP32[$3 + 12 >> 2];
            label$86 : {
             if (($6 | 0) != ($3 | 0)) {
              $1 = HEAP32[$3 + 8 >> 2];
              HEAP32[$1 + 12 >> 2] = $6;
              HEAP32[$6 + 8 >> 2] = $1;
              break label$86;
             }
             label$89 : {
              $1 = $3 + 20 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               break label$89;
              }
              $1 = $3 + 16 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               break label$89;
              }
              $6 = 0;
              break label$86;
             }
             while (1) {
              $5 = $1;
              $6 = $4;
              $1 = $4 + 20 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               continue;
              }
              $1 = $6 + 16 | 0;
              $4 = HEAP32[$6 + 16 >> 2];
              if ($4) {
               continue;
              }
              break;
             }
             HEAP32[$5 >> 2] = 0;
            }
            if (!$8) {
             break label$83;
            }
            $4 = HEAP32[$3 + 28 >> 2];
            $1 = ($4 << 2) + 35328 | 0;
            label$91 : {
             if (HEAP32[$1 >> 2] == ($3 | 0)) {
              HEAP32[$1 >> 2] = $6;
              if ($6) {
               break label$91;
              }
              wasm2js_i32$0 = 35028, wasm2js_i32$1 = HEAP32[8757] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
              break label$83;
             }
             HEAP32[(HEAP32[$8 + 16 >> 2] == ($3 | 0) ? 16 : 20) + $8 >> 2] = $6;
             if (!$6) {
              break label$83;
             }
            }
            HEAP32[$6 + 24 >> 2] = $8;
            $1 = HEAP32[$3 + 16 >> 2];
            if ($1) {
             HEAP32[$6 + 16 >> 2] = $1;
             HEAP32[$1 + 24 >> 2] = $6;
            }
            $1 = HEAP32[$3 + 20 >> 2];
            if (!$1) {
             break label$83;
            }
            HEAP32[$6 + 20 >> 2] = $1;
            HEAP32[$1 + 24 >> 2] = $6;
           }
           $3 = $3 + $9 | 0;
           $0 = $0 + $9 | 0;
          }
          HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] & -2;
          HEAP32[$2 + 4 >> 2] = $0 | 1;
          HEAP32[$0 + $2 >> 2] = $0;
          if ($0 >>> 0 <= 255) {
           $1 = $0 >>> 3 | 0;
           $0 = ($1 << 3) + 35064 | 0;
           $1 = 1 << $1;
           $4 = HEAP32[8756];
           label$95 : {
            if (!($1 & $4)) {
             HEAP32[8756] = $1 | $4;
             $1 = $0;
             break label$95;
            }
            $1 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$0 + 8 >> 2] = $2;
           HEAP32[$1 + 12 >> 2] = $2;
           HEAP32[$2 + 12 >> 2] = $0;
           HEAP32[$2 + 8 >> 2] = $1;
           break label$71;
          }
          $1 = 31;
          if ($0 >>> 0 <= 16777215) {
           $1 = $0 >>> 8 | 0;
           $3 = $1;
           $1 = $1 + 1048320 >>> 16 & 8;
           $4 = $3 << $1;
           $3 = $4;
           $4 = $4 + 520192 >>> 16 & 4;
           $3 = $3 << $4;
           $5 = $3;
           $3 = $3 + 245760 >>> 16 & 2;
           $1 = ($5 << $3 >>> 15 | 0) - ($1 | $4 | $3) | 0;
           $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
          }
          HEAP32[$2 + 28 >> 2] = $1;
          HEAP32[$2 + 16 >> 2] = 0;
          HEAP32[$2 + 20 >> 2] = 0;
          $4 = ($1 << 2) + 35328 | 0;
          $3 = HEAP32[8757];
          $5 = 1 << $1;
          label$98 : {
           if (!($3 & $5)) {
            HEAP32[8757] = $3 | $5;
            HEAP32[$4 >> 2] = $2;
            break label$98;
           }
           $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
           $3 = HEAP32[$4 >> 2];
           while (1) {
            $4 = $3;
            if ((HEAP32[$3 + 4 >> 2] & -8) == ($0 | 0)) {
             break label$72;
            }
            $3 = $1 >>> 29 | 0;
            $1 = $1 << 1;
            $6 = ($3 & 4) + $4 | 0;
            $5 = $6 + 16 | 0;
            $3 = HEAP32[$5 >> 2];
            if ($3) {
             continue;
            }
            break;
           }
           HEAP32[$6 + 16 >> 2] = $2;
          }
          HEAP32[$2 + 24 >> 2] = $4;
          HEAP32[$2 + 12 >> 2] = $2;
          HEAP32[$2 + 8 >> 2] = $2;
          break label$71;
         }
         $0 = $6 - 40 | 0;
         $5 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
         $7 = $0 - $5 | 0;
         HEAP32[8759] = $7;
         $5 = $3 + $5 | 0;
         HEAP32[8762] = $5;
         HEAP32[$5 + 4 >> 2] = $7 | 1;
         HEAP32[($0 + $3 | 0) + 4 >> 2] = 40;
         HEAP32[8763] = HEAP32[8878];
         $0 = (($2 - 39 & 7 ? 39 - $2 & 7 : 0) + $2 | 0) - 47 | 0;
         $5 = $1 + 16 >>> 0 > $0 >>> 0 ? $1 : $0;
         HEAP32[$5 + 4 >> 2] = 27;
         $0 = HEAP32[8871];
         $7 = HEAP32[8870];
         HEAP32[$5 + 16 >> 2] = $7;
         HEAP32[$5 + 20 >> 2] = $0;
         $7 = HEAP32[8869];
         $0 = HEAP32[8868];
         HEAP32[$5 + 8 >> 2] = $0;
         HEAP32[$5 + 12 >> 2] = $7;
         HEAP32[8870] = $5 + 8;
         HEAP32[8869] = $6;
         HEAP32[8868] = $3;
         HEAP32[8871] = 0;
         $0 = $5 + 24 | 0;
         while (1) {
          HEAP32[$0 + 4 >> 2] = 7;
          $3 = $0 + 8 | 0;
          $0 = $0 + 4 | 0;
          if ($2 >>> 0 > $3 >>> 0) {
           continue;
          }
          break;
         }
         if (($1 | 0) == ($5 | 0)) {
          break label$62;
         }
         HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] & -2;
         $6 = $5 - $1 | 0;
         HEAP32[$1 + 4 >> 2] = $6 | 1;
         HEAP32[$5 >> 2] = $6;
         if ($6 >>> 0 <= 255) {
          $2 = $6 >>> 3 | 0;
          $0 = ($2 << 3) + 35064 | 0;
          $2 = 1 << $2;
          $3 = HEAP32[8756];
          label$103 : {
           if (!($2 & $3)) {
            HEAP32[8756] = $2 | $3;
            $2 = $0;
            break label$103;
           }
           $2 = HEAP32[$0 + 8 >> 2];
          }
          HEAP32[$0 + 8 >> 2] = $1;
          HEAP32[$2 + 12 >> 2] = $1;
          HEAP32[$1 + 12 >> 2] = $0;
          HEAP32[$1 + 8 >> 2] = $2;
          break label$62;
         }
         $0 = 31;
         HEAP32[$1 + 16 >> 2] = 0;
         HEAP32[$1 + 20 >> 2] = 0;
         if ($6 >>> 0 <= 16777215) {
          $0 = $6 >>> 8 | 0;
          $2 = $0;
          $0 = $0 + 1048320 >>> 16 & 8;
          $2 = $2 << $0;
          $3 = $2;
          $2 = $2 + 520192 >>> 16 & 4;
          $3 = $3 << $2;
          $5 = $3;
          $3 = $3 + 245760 >>> 16 & 2;
          $0 = ($5 << $3 >>> 15 | 0) - ($0 | $2 | $3) | 0;
          $0 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
         }
         HEAP32[$1 + 28 >> 2] = $0;
         $2 = ($0 << 2) + 35328 | 0;
         $3 = HEAP32[8757];
         $5 = 1 << $0;
         label$106 : {
          if (!($3 & $5)) {
           HEAP32[8757] = $3 | $5;
           HEAP32[$2 >> 2] = $1;
           break label$106;
          }
          $0 = $6 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
          $3 = HEAP32[$2 >> 2];
          while (1) {
           $2 = $3;
           if ((HEAP32[$2 + 4 >> 2] & -8) == ($6 | 0)) {
            break label$70;
           }
           $3 = $0 >>> 29 | 0;
           $0 = $0 << 1;
           $7 = ($3 & 4) + $2 | 0;
           $5 = $7 + 16 | 0;
           $3 = HEAP32[$5 >> 2];
           if ($3) {
            continue;
           }
           break;
          }
          HEAP32[$7 + 16 >> 2] = $1;
         }
         HEAP32[$1 + 24 >> 2] = $2;
         HEAP32[$1 + 12 >> 2] = $1;
         HEAP32[$1 + 8 >> 2] = $1;
         break label$62;
        }
        $0 = HEAP32[$4 + 8 >> 2];
        HEAP32[$0 + 12 >> 2] = $2;
        HEAP32[$4 + 8 >> 2] = $2;
        HEAP32[$2 + 24 >> 2] = 0;
        HEAP32[$2 + 12 >> 2] = $4;
        HEAP32[$2 + 8 >> 2] = $0;
       }
       $0 = $7 + 8 | 0;
       break label$1;
      }
      $0 = HEAP32[$2 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = $1;
      HEAP32[$2 + 8 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = $2;
      HEAP32[$1 + 8 >> 2] = $0;
     }
     $0 = HEAP32[8759];
     if ($4 >>> 0 >= $0 >>> 0) {
      break label$4;
     }
     $1 = $0 - $4 | 0;
     HEAP32[8759] = $1;
     $0 = HEAP32[8762];
     $2 = $4 + $0 | 0;
     HEAP32[8762] = $2;
     HEAP32[$2 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + 4 >> 2] = $4 | 3;
     $0 = $0 + 8 | 0;
     break label$1;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $0 = 0;
    break label$1;
   }
   label$109 : {
    if (!$8) {
     break label$109;
    }
    $2 = HEAP32[$5 + 28 >> 2];
    $0 = ($2 << 2) + 35328 | 0;
    label$110 : {
     if (HEAP32[$0 >> 2] == ($5 | 0)) {
      HEAP32[$0 >> 2] = $3;
      if ($3) {
       break label$110;
      }
      $9 = __wasm_rotl_i32(-2, $2) & $9;
      HEAP32[8757] = $9;
      break label$109;
     }
     HEAP32[(HEAP32[$8 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $8 >> 2] = $3;
     if (!$3) {
      break label$109;
     }
    }
    HEAP32[$3 + 24 >> 2] = $8;
    $0 = HEAP32[$5 + 16 >> 2];
    if ($0) {
     HEAP32[$3 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $3;
    }
    $0 = HEAP32[$5 + 20 >> 2];
    if (!$0) {
     break label$109;
    }
    HEAP32[$3 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $3;
   }
   label$113 : {
    if ($1 >>> 0 <= 15) {
     $0 = $1 + $4 | 0;
     HEAP32[$5 + 4 >> 2] = $0 | 3;
     $0 = $0 + $5 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$113;
    }
    HEAP32[$5 + 4 >> 2] = $4 | 3;
    HEAP32[$7 + 4 >> 2] = $1 | 1;
    HEAP32[$1 + $7 >> 2] = $1;
    if ($1 >>> 0 <= 255) {
     $1 = $1 >>> 3 | 0;
     $0 = ($1 << 3) + 35064 | 0;
     $1 = 1 << $1;
     $2 = HEAP32[8756];
     label$116 : {
      if (!($1 & $2)) {
       HEAP32[8756] = $1 | $2;
       $1 = $0;
       break label$116;
      }
      $1 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $7;
     HEAP32[$1 + 12 >> 2] = $7;
     HEAP32[$7 + 12 >> 2] = $0;
     HEAP32[$7 + 8 >> 2] = $1;
     break label$113;
    }
    $0 = 31;
    if ($1 >>> 0 <= 16777215) {
     $0 = $1 >>> 8 | 0;
     $2 = $0;
     $0 = $0 + 1048320 >>> 16 & 8;
     $2 = $2 << $0;
     $3 = $2;
     $2 = $2 + 520192 >>> 16 & 4;
     $4 = $3 << $2;
     $3 = $4;
     $4 = $4 + 245760 >>> 16 & 2;
     $0 = ($3 << $4 >>> 15 | 0) - ($0 | $2 | $4) | 0;
     $0 = ($0 << 1 | $1 >>> $0 + 21 & 1) + 28 | 0;
    }
    HEAP32[$7 + 28 >> 2] = $0;
    HEAP32[$7 + 16 >> 2] = 0;
    HEAP32[$7 + 20 >> 2] = 0;
    $2 = ($0 << 2) + 35328 | 0;
    label$119 : {
     $4 = 1 << $0;
     label$120 : {
      if (!($9 & $4)) {
       HEAP32[8757] = $4 | $9;
       HEAP32[$2 >> 2] = $7;
       break label$120;
      }
      $0 = $1 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
      $4 = HEAP32[$2 >> 2];
      while (1) {
       $2 = $4;
       if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
        break label$119;
       }
       $4 = $0 >>> 29 | 0;
       $0 = $0 << 1;
       $6 = ($4 & 4) + $2 | 0;
       $3 = $6 + 16 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$6 + 16 >> 2] = $7;
     }
     HEAP32[$7 + 24 >> 2] = $2;
     HEAP32[$7 + 12 >> 2] = $7;
     HEAP32[$7 + 8 >> 2] = $7;
     break label$113;
    }
    $0 = HEAP32[$2 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $7;
    HEAP32[$2 + 8 >> 2] = $7;
    HEAP32[$7 + 24 >> 2] = 0;
    HEAP32[$7 + 12 >> 2] = $2;
    HEAP32[$7 + 8 >> 2] = $0;
   }
   $0 = $5 + 8 | 0;
   break label$1;
  }
  label$123 : {
   if (!$11) {
    break label$123;
   }
   $2 = HEAP32[$3 + 28 >> 2];
   $0 = ($2 << 2) + 35328 | 0;
   label$124 : {
    if (HEAP32[$0 >> 2] == ($3 | 0)) {
     HEAP32[$0 >> 2] = $5;
     if ($5) {
      break label$124;
     }
     wasm2js_i32$0 = 35028, wasm2js_i32$1 = __wasm_rotl_i32(-2, $2) & $8, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$123;
    }
    HEAP32[(HEAP32[$11 + 16 >> 2] == ($3 | 0) ? 16 : 20) + $11 >> 2] = $5;
    if (!$5) {
     break label$123;
    }
   }
   HEAP32[$5 + 24 >> 2] = $11;
   $0 = HEAP32[$3 + 16 >> 2];
   if ($0) {
    HEAP32[$5 + 16 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $5;
   }
   $0 = HEAP32[$3 + 20 >> 2];
   if (!$0) {
    break label$123;
   }
   HEAP32[$5 + 20 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = $5;
  }
  label$127 : {
   if ($1 >>> 0 <= 15) {
    $0 = $1 + $4 | 0;
    HEAP32[$3 + 4 >> 2] = $0 | 3;
    $0 = $0 + $3 | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
    break label$127;
   }
   HEAP32[$3 + 4 >> 2] = $4 | 3;
   HEAP32[$10 + 4 >> 2] = $1 | 1;
   HEAP32[$1 + $10 >> 2] = $1;
   if ($9) {
    $4 = $9 >>> 3 | 0;
    $2 = ($4 << 3) + 35064 | 0;
    $0 = HEAP32[8761];
    $4 = 1 << $4;
    label$130 : {
     if (!($6 & $4)) {
      HEAP32[8756] = $4 | $6;
      $4 = $2;
      break label$130;
     }
     $4 = HEAP32[$2 + 8 >> 2];
    }
    HEAP32[$2 + 8 >> 2] = $0;
    HEAP32[$4 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $2;
    HEAP32[$0 + 8 >> 2] = $4;
   }
   HEAP32[8761] = $10;
   HEAP32[8758] = $1;
  }
  $0 = $3 + 8 | 0;
 }
 __stack_pointer = $12 + 16 | 0;
 return $0 | 0;
}
function decfloat($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $7 = __stack_pointer - 8976 | 0;
 __stack_pointer = $7;
 $29 = $3 + $4 | 0;
 $35 = 0 - $29 | 0;
 label$1 : {
  label$2 : {
   while (1) {
    label$4 : {
     if (($2 | 0) != 48) {
      if (($2 | 0) != 46) {
       break label$1;
      }
      $2 = HEAP32[$1 + 4 >> 2];
      if ($2 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
       break label$4;
      }
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$2;
     }
     $2 = HEAP32[$1 + 4 >> 2];
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      $13 = 1;
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      continue;
     }
     $13 = 1;
     $2 = __shgetc($1);
     continue;
    }
    break;
   }
   $2 = __shgetc($1);
  }
  $19 = 1;
  if (($2 | 0) != 48) {
   break label$1;
  }
  while (1) {
   $2 = HEAP32[$1 + 4 >> 2];
   label$8 : {
    if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $2 + 1;
     $2 = HEAPU8[$2 | 0];
     break label$8;
    }
    $2 = __shgetc($1);
   }
   $12 = $16;
   $10 = $12 - 1 | 0;
   $16 = $10;
   $8 = $12 >>> 0 < 1;
   $8 = $15 - $8 | 0;
   $15 = $8;
   if (($2 | 0) == 48) {
    continue;
   }
   break;
  }
  $13 = 1;
 }
 HEAP32[$7 + 784 >> 2] = 0;
 label$10 : {
  label$11 : {
   $17 = ($2 | 0) == 46;
   $20 = $2 - 48 | 0;
   label$12 : {
    label$13 : {
     label$14 : {
      label$15 : {
       if ($17 | $20 >>> 0 <= 9) {
        while (1) {
         label$19 : {
          if ($17 & 1) {
           if (!$19) {
            $16 = $14;
            $8 = $18;
            $15 = $8;
            $19 = 1;
            break label$19;
           }
           $13 = !$13;
           break label$15;
          }
          $8 = $18;
          $9 = $14 + 1 | 0;
          $10 = $9 >>> 0 < 1 ? $8 + 1 | 0 : $8;
          $14 = $9;
          $18 = $10;
          if (($21 | 0) <= 2044) {
           $17 = ($2 | 0) == 48;
           $27 = $17 ? $27 : $14;
           $13 = ($7 + 784 | 0) + ($21 << 2) | 0;
           $20 = $23 ? (Math_imul(HEAP32[$13 >> 2], 10) + $2 | 0) - 48 | 0 : $20;
           HEAP32[$13 >> 2] = $20;
           $13 = 1;
           $2 = $23 + 1 | 0;
           $8 = $2;
           $2 = ($2 | 0) == 9;
           $23 = $2 ? 0 : $8;
           $21 = $2 + $21 | 0;
           break label$19;
          }
          if (($2 | 0) == 48) {
           break label$19;
          }
          HEAP32[$7 + 8960 >> 2] = HEAP32[$7 + 8960 >> 2] | 1;
          $27 = 18396;
         }
         $2 = HEAP32[$1 + 4 >> 2];
         label$25 : {
          if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
           HEAP32[$1 + 4 >> 2] = $2 + 1;
           $2 = HEAPU8[$2 | 0];
           break label$25;
          }
          $2 = __shgetc($1);
         }
         $17 = ($2 | 0) == 46;
         $20 = $2 - 48 | 0;
         if ($17 | $20 >>> 0 < 10) {
          continue;
         }
         break;
        }
       }
       $12 = $19;
       $11 = $12 ? $16 : $14;
       $16 = $11;
       $10 = $15;
       $8 = $12 ? $10 : $18;
       $15 = $8;
       if (!(!$13 | ($2 & -33) != 69)) {
        $8 = scanexp($1, $6);
        $24 = $8;
        $11 = i64toi32_i32$HIGH_BITS;
        $22 = $11;
        $12 = $24;
        label$28 : {
         if ($12 | ($11 | 0) != -2147483648) {
          break label$28;
         }
         if (!$6) {
          break label$12;
         }
         $24 = 0;
         $22 = 0;
         if (!HEAP32[$1 + 104 >> 2]) {
          break label$28;
         }
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
        }
        if (!$13) {
         break label$13;
        }
        $12 = $15;
        $11 = $22;
        $9 = $12 + $11 | 0;
        $10 = $16;
        $8 = $24;
        $22 = $10 + $8 | 0;
        $9 = $8 >>> 0 > $22 >>> 0 ? $9 + 1 | 0 : $9;
        $16 = $22;
        $15 = $9;
        break label$11;
       }
       $13 = !$13;
       if (($2 | 0) < 0) {
        break label$14;
       }
      }
      if (!HEAP32[$1 + 104 >> 2]) {
       break label$14;
      }
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
     }
     if (!$13) {
      break label$11;
     }
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   $14 = 0;
   $18 = 0;
   __shlim($1, 0, 0);
   $9 = 0;
   break label$10;
  }
  $1 = HEAP32[$7 + 784 >> 2];
  if (!$1) {
   __extenddftf2($7, +($5 | 0) * 0);
   $9 = HEAP32[$7 >> 2];
   $14 = $9;
   $10 = HEAP32[$7 + 4 >> 2];
   $18 = $10;
   $9 = HEAP32[$7 + 12 >> 2];
   $28 = $9;
   $10 = HEAP32[$7 + 8 >> 2];
   $9 = $10;
   break label$10;
  }
  $12 = $16;
  $8 = $14;
  $9 = $15;
  $10 = $18;
  $2 = ($12 | 0) != ($8 | 0) | ($9 | 0) != ($10 | 0);
  $12 = $18;
  if (!($2 | (($12 | 0) > 0 ? 1 : ($12 | 0) >= 0 ? $8 >>> 0 > 9 : 0) | ($1 >>> $3 | 0 ? ($3 | 0) <= 30 : 0))) {
   __floatsitf($7 + 48 | 0, $5);
   __floatunsitf($7 + 32 | 0, $1);
   $8 = HEAP32[$7 + 48 >> 2];
   $6 = $8;
   $12 = HEAP32[$7 + 52 >> 2];
   $2 = $12;
   $12 = HEAP32[$7 + 56 >> 2];
   $5 = $12;
   $8 = HEAP32[$7 + 60 >> 2];
   $1 = $8;
   $8 = HEAP32[$7 + 32 >> 2];
   $4 = $8;
   $12 = HEAP32[$7 + 36 >> 2];
   $10 = $12;
   $12 = HEAP32[$7 + 40 >> 2];
   $3 = $12;
   $8 = HEAP32[$7 + 44 >> 2];
   $9 = $8;
   $8 = $2;
   $12 = $1;
   __multf3($7 + 16 | 0, $6, $8, $5, $12, $4, $10, $3, $9);
   $9 = HEAP32[$7 + 16 >> 2];
   $14 = $9;
   $10 = HEAP32[$7 + 20 >> 2];
   $18 = $10;
   $9 = HEAP32[$7 + 28 >> 2];
   $28 = $9;
   $10 = HEAP32[$7 + 24 >> 2];
   $9 = $10;
   break label$10;
  }
  $12 = ($4 | 0) / -2 | 0;
  $8 = $16;
  $10 = $15;
  if (($10 | 0) > 0 ? 1 : ($10 | 0) >= 0 ? $12 >>> 0 < $8 >>> 0 : 0) {
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __floatsitf($7 + 96 | 0, $5);
   $12 = HEAP32[$7 + 96 >> 2];
   $3 = $12;
   $12 = HEAP32[$7 + 108 >> 2];
   $1 = $12;
   $9 = HEAP32[$7 + 100 >> 2];
   $12 = $9;
   $9 = HEAP32[$7 + 104 >> 2];
   $2 = $9;
   $9 = $1;
   __multf3($7 + 80 | 0, $3, $12, $2, $9, -1, -1, -1, 2147418111);
   $10 = HEAP32[$7 + 80 >> 2];
   $3 = $10;
   $10 = HEAP32[$7 + 92 >> 2];
   $1 = $10;
   $8 = HEAP32[$7 + 84 >> 2];
   $10 = $8;
   $8 = HEAP32[$7 + 88 >> 2];
   $2 = $8;
   $8 = $1;
   __multf3($7 - -64 | 0, $3, $10, $2, $8, -1, -1, -1, 2147418111);
   $12 = HEAP32[$7 + 64 >> 2];
   $14 = $12;
   $9 = HEAP32[$7 + 68 >> 2];
   $18 = $9;
   $12 = HEAP32[$7 + 76 >> 2];
   $28 = $12;
   $9 = HEAP32[$7 + 72 >> 2];
   break label$10;
  }
  $9 = $4 - 226 | 0;
  $12 = $9 >> 31;
  $10 = $16;
  $8 = $9;
  $9 = $15;
  if (($12 | 0) > ($9 | 0) ? 1 : ($12 | 0) >= ($9 | 0) ? $10 >>> 0 < $8 >>> 0 : 0) {
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __floatsitf($7 + 144 | 0, $5);
   $8 = HEAP32[$7 + 144 >> 2];
   $3 = $8;
   $8 = HEAP32[$7 + 156 >> 2];
   $1 = $8;
   $12 = HEAP32[$7 + 148 >> 2];
   $8 = $12;
   $12 = HEAP32[$7 + 152 >> 2];
   $2 = $12;
   $12 = $1;
   __multf3($7 + 128 | 0, $3, $8, $2, $12, 0, 0, 0, 65536);
   $9 = HEAP32[$7 + 128 >> 2];
   $3 = $9;
   $9 = HEAP32[$7 + 140 >> 2];
   $1 = $9;
   $10 = HEAP32[$7 + 132 >> 2];
   $9 = $10;
   $10 = HEAP32[$7 + 136 >> 2];
   $2 = $10;
   $10 = $1;
   __multf3($7 + 112 | 0, $3, $9, $2, $10, 0, 0, 0, 65536);
   $8 = HEAP32[$7 + 112 >> 2];
   $14 = $8;
   $12 = HEAP32[$7 + 116 >> 2];
   $18 = $12;
   $8 = HEAP32[$7 + 124 >> 2];
   $28 = $8;
   $12 = HEAP32[$7 + 120 >> 2];
   $9 = $12;
   break label$10;
  }
  if ($23) {
   if (($23 | 0) <= 8) {
    $2 = ($7 + 784 | 0) + ($21 << 2) | 0;
    $1 = HEAP32[$2 >> 2];
    while (1) {
     $1 = Math_imul($1, 10);
     $23 = $23 + 1 | 0;
     if (($23 | 0) != 9) {
      continue;
     }
     break;
    }
    HEAP32[$2 >> 2] = $1;
   }
   $21 = $21 + 1 | 0;
  }
  label$36 : {
   $19 = $16;
   if (($27 | 0) > ($19 | 0) | ($27 | 0) >= 9 | ($19 | 0) > 17) {
    break label$36;
   }
   if (($19 | 0) == 9) {
    __floatsitf($7 + 192 | 0, $5);
    __floatunsitf($7 + 176 | 0, HEAP32[$7 + 784 >> 2]);
    $8 = HEAP32[$7 + 192 >> 2];
    $6 = $8;
    $12 = HEAP32[$7 + 196 >> 2];
    $2 = $12;
    $12 = HEAP32[$7 + 200 >> 2];
    $5 = $12;
    $8 = HEAP32[$7 + 204 >> 2];
    $1 = $8;
    $8 = HEAP32[$7 + 176 >> 2];
    $4 = $8;
    $12 = HEAP32[$7 + 180 >> 2];
    $10 = $12;
    $12 = HEAP32[$7 + 184 >> 2];
    $3 = $12;
    $8 = HEAP32[$7 + 188 >> 2];
    $9 = $8;
    $8 = $2;
    $12 = $1;
    __multf3($7 + 160 | 0, $6, $8, $5, $12, $4, $10, $3, $9);
    $9 = HEAP32[$7 + 160 >> 2];
    $14 = $9;
    $10 = HEAP32[$7 + 164 >> 2];
    $18 = $10;
    $9 = HEAP32[$7 + 172 >> 2];
    $28 = $9;
    $10 = HEAP32[$7 + 168 >> 2];
    $9 = $10;
    break label$10;
   }
   if (($19 | 0) <= 8) {
    __floatsitf($7 + 272 | 0, $5);
    __floatunsitf($7 + 256 | 0, HEAP32[$7 + 784 >> 2]);
    $9 = HEAP32[$7 + 272 >> 2];
    $6 = $9;
    $10 = HEAP32[$7 + 276 >> 2];
    $2 = $10;
    $10 = HEAP32[$7 + 280 >> 2];
    $5 = $10;
    $9 = HEAP32[$7 + 284 >> 2];
    $1 = $9;
    $9 = HEAP32[$7 + 256 >> 2];
    $4 = $9;
    $10 = HEAP32[$7 + 260 >> 2];
    $12 = $10;
    $10 = HEAP32[$7 + 264 >> 2];
    $3 = $10;
    $9 = HEAP32[$7 + 268 >> 2];
    $8 = $9;
    $9 = $2;
    $10 = $1;
    __multf3($7 + 240 | 0, $6, $9, $5, $10, $4, $12, $3, $8);
    __floatsitf($7 + 224 | 0, HEAP32[(0 - $19 << 2) + 20448 >> 2]);
    $8 = HEAP32[$7 + 240 >> 2];
    $6 = $8;
    $12 = HEAP32[$7 + 244 >> 2];
    $2 = $12;
    $12 = HEAP32[$7 + 248 >> 2];
    $5 = $12;
    $8 = HEAP32[$7 + 252 >> 2];
    $1 = $8;
    $8 = HEAP32[$7 + 224 >> 2];
    $4 = $8;
    $12 = HEAP32[$7 + 228 >> 2];
    $10 = $12;
    $12 = HEAP32[$7 + 232 >> 2];
    $3 = $12;
    $8 = HEAP32[$7 + 236 >> 2];
    $9 = $8;
    $8 = $2;
    $12 = $1;
    __divtf3($7 + 208 | 0, $6, $8, $5, $12, $4, $10, $3, $9);
    $9 = HEAP32[$7 + 208 >> 2];
    $14 = $9;
    $10 = HEAP32[$7 + 212 >> 2];
    $18 = $10;
    $9 = HEAP32[$7 + 220 >> 2];
    $28 = $9;
    $10 = HEAP32[$7 + 216 >> 2];
    $9 = $10;
    break label$10;
   }
   $2 = (Math_imul($19, -3) + $3 | 0) + 27 | 0;
   $1 = HEAP32[$7 + 784 >> 2];
   if ($1 >>> $2 | 0 ? ($2 | 0) <= 30 : 0) {
    break label$36;
   }
   __floatsitf($7 + 352 | 0, $5);
   __floatunsitf($7 + 336 | 0, $1);
   $9 = HEAP32[$7 + 352 >> 2];
   $6 = $9;
   $10 = HEAP32[$7 + 356 >> 2];
   $2 = $10;
   $10 = HEAP32[$7 + 360 >> 2];
   $5 = $10;
   $9 = HEAP32[$7 + 364 >> 2];
   $1 = $9;
   $9 = HEAP32[$7 + 336 >> 2];
   $4 = $9;
   $10 = HEAP32[$7 + 340 >> 2];
   $12 = $10;
   $10 = HEAP32[$7 + 344 >> 2];
   $3 = $10;
   $9 = HEAP32[$7 + 348 >> 2];
   $8 = $9;
   $9 = $2;
   $10 = $1;
   __multf3($7 + 320 | 0, $6, $9, $5, $10, $4, $12, $3, $8);
   __floatsitf($7 + 304 | 0, HEAP32[($19 << 2) + 20376 >> 2]);
   $8 = HEAP32[$7 + 320 >> 2];
   $6 = $8;
   $12 = HEAP32[$7 + 324 >> 2];
   $2 = $12;
   $12 = HEAP32[$7 + 328 >> 2];
   $5 = $12;
   $8 = HEAP32[$7 + 332 >> 2];
   $1 = $8;
   $8 = HEAP32[$7 + 304 >> 2];
   $4 = $8;
   $12 = HEAP32[$7 + 308 >> 2];
   $10 = $12;
   $12 = HEAP32[$7 + 312 >> 2];
   $3 = $12;
   $8 = HEAP32[$7 + 316 >> 2];
   $9 = $8;
   $8 = $2;
   $12 = $1;
   __multf3($7 + 288 | 0, $6, $8, $5, $12, $4, $10, $3, $9);
   $9 = HEAP32[$7 + 288 >> 2];
   $14 = $9;
   $10 = HEAP32[$7 + 292 >> 2];
   $18 = $10;
   $9 = HEAP32[$7 + 300 >> 2];
   $28 = $9;
   $10 = HEAP32[$7 + 296 >> 2];
   $9 = $10;
   break label$10;
  }
  while (1) {
   $2 = $21;
   $21 = $2 - 1 | 0;
   if (!HEAP32[($7 + 784 | 0) + ($21 << 2) >> 2]) {
    continue;
   }
   break;
  }
  $23 = 0;
  $1 = ($19 | 0) % 9 | 0;
  label$40 : {
   if (!$1) {
    $13 = 0;
    break label$40;
   }
   $6 = ($19 | 0) > -1 ? $1 : $1 + 9 | 0;
   label$42 : {
    if (!$2) {
     $13 = 0;
     $2 = 0;
     break label$42;
    }
    $20 = HEAP32[(0 - $6 << 2) + 20448 >> 2];
    $14 = 1e9 / ($20 | 0) | 0;
    $17 = 0;
    $1 = 0;
    $13 = 0;
    while (1) {
     $21 = ($7 + 784 | 0) + ($1 << 2) | 0;
     $8 = $21;
     $21 = HEAP32[$21 >> 2];
     $27 = ($21 >>> 0) / ($20 >>> 0) | 0;
     $17 = $27 + $17 | 0;
     HEAP32[$8 >> 2] = $17;
     $17 = !$17 & ($1 | 0) == ($13 | 0);
     $13 = $17 ? $13 + 1 & 2047 : $13;
     $19 = $17 ? $19 - 9 | 0 : $19;
     $17 = Math_imul($21 - Math_imul($20, $27) | 0, $14);
     $1 = $1 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
    if (!$17) {
     break label$42;
    }
    HEAP32[($7 + 784 | 0) + ($2 << 2) >> 2] = $17;
    $2 = $2 + 1 | 0;
   }
   $19 = ($19 - $6 | 0) + 9 | 0;
  }
  while (1) {
   $27 = ($7 + 784 | 0) + ($13 << 2) | 0;
   label$46 : {
    while (1) {
     if (($19 | 0) != 36 | HEAPU32[$27 >> 2] >= 10384593 ? ($19 | 0) >= 36 : 0) {
      break label$46;
     }
     $21 = $2 + 2047 | 0;
     $17 = 0;
     $20 = $2;
     while (1) {
      $2 = $20;
      $1 = $21 & 2047;
      $20 = ($7 + 784 | 0) + ($1 << 2) | 0;
      $12 = $20;
      $9 = HEAP32[$12 >> 2];
      $8 = $9 << 29;
      $9 = $9 >>> 3 | 0;
      $12 = $9;
      $10 = $17;
      $11 = $10 + $8 | 0;
      $22 = $11 >>> 0 < $8 >>> 0 ? $12 + 1 | 0 : $12;
      $16 = $11;
      $15 = $22;
      $9 = $11;
      $14 = 0;
      label$50 : {
       if (!$15 & $9 >>> 0 < 1000000001) {
        break label$50;
       }
       $9 = $15;
       $22 = __wasm_i64_udiv($16, $9, 1e9, 0);
       $14 = $22;
       $9 = i64toi32_i32$HIGH_BITS;
       $18 = $9;
       $22 = __wasm_i64_mul($14, $9, 1e9, 0);
       $9 = i64toi32_i32$HIGH_BITS;
       $6 = $9;
       $8 = $16;
       $10 = $22;
       $12 = $8 - $10 | 0;
       $16 = $12;
       $9 = $15;
       $22 = $6;
       $11 = $22 + ($8 >>> 0 < $10 >>> 0) | 0;
       $11 = $9 - $11 | 0;
       $15 = $11;
      }
      $17 = $14;
      HEAP32[$20 >> 2] = $16;
      $20 = ($2 - 1 & 2047) != ($1 | 0) ? $2 : ($1 | 0) == ($13 | 0) ? $2 : $16 ? $2 : $1;
      $21 = $1 - 1 | 0;
      if (($1 | 0) != ($13 | 0)) {
       continue;
      }
      break;
     }
     $23 = $23 - 29 | 0;
     if (!$17) {
      continue;
     }
     break;
    }
    $13 = $13 - 1 & 2047;
    if (($20 | 0) == ($13 | 0)) {
     $1 = ($7 + 784 | 0) + (($20 + 2046 & 2047) << 2) | 0;
     $2 = $20 - 1 & 2047;
     HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | HEAP32[($7 + 784 | 0) + ($2 << 2) >> 2];
    }
    $19 = $19 + 9 | 0;
    HEAP32[($7 + 784 | 0) + ($13 << 2) >> 2] = $17;
    continue;
   }
   break;
  }
  label$52 : {
   label$53 : while (1) {
    $6 = $2 + 1 & 2047;
    $9 = ($7 + 784 | 0) + (($2 - 1 & 2047) << 2) | 0;
    while (1) {
     $21 = ($19 | 0) > 45 ? 9 : 1;
     label$55 : {
      while (1) {
       $20 = $13;
       $1 = 0;
       label$57 : {
        while (1) {
         label$59 : {
          $13 = $1 + $20 & 2047;
          if (($13 | 0) == ($2 | 0)) {
           break label$59;
          }
          $13 = HEAP32[($7 + 784 | 0) + ($13 << 2) >> 2];
          $17 = HEAP32[($1 << 2) + 20400 >> 2];
          if ($13 >>> 0 < $17 >>> 0) {
           break label$59;
          }
          if ($13 >>> 0 > $17 >>> 0) {
           break label$57;
          }
          $1 = $1 + 1 | 0;
          if (($1 | 0) != 4) {
           continue;
          }
         }
         break;
        }
        if (($19 | 0) != 36) {
         break label$57;
        }
        $16 = 0;
        $15 = 0;
        $1 = 0;
        $14 = 0;
        $18 = 0;
        while (1) {
         $13 = $1 + $20 & 2047;
         if (($13 | 0) == ($2 | 0)) {
          $2 = $2 + 1 & 2047;
          HEAP32[(($2 << 2) + $7 | 0) + 780 >> 2] = 0;
         }
         $11 = $15;
         $8 = $18;
         __multf3($7 + 768 | 0, $16, $11, $14, $8, 0, 0, 1342177280, 1075633366);
         __floatunsitf($7 + 752 | 0, HEAP32[($7 + 784 | 0) + ($13 << 2) >> 2]);
         $10 = HEAP32[$7 + 768 >> 2];
         $14 = $10;
         $9 = HEAP32[$7 + 772 >> 2];
         $12 = $9;
         $9 = HEAP32[$7 + 776 >> 2];
         $16 = $9;
         $10 = HEAP32[$7 + 780 >> 2];
         $6 = $10;
         $10 = HEAP32[$7 + 752 >> 2];
         $18 = $10;
         $9 = HEAP32[$7 + 756 >> 2];
         $8 = $9;
         $9 = HEAP32[$7 + 760 >> 2];
         $15 = $9;
         $10 = HEAP32[$7 + 764 >> 2];
         $11 = $10;
         $10 = $12;
         $9 = $6;
         __addtf3($7 + 736 | 0, $14, $10, $16, $9, $18, $8, $15, $11);
         $11 = HEAP32[$7 + 744 >> 2];
         $14 = $11;
         $8 = HEAP32[$7 + 748 >> 2];
         $18 = $8;
         $8 = HEAP32[$7 + 736 >> 2];
         $16 = $8;
         $11 = HEAP32[$7 + 740 >> 2];
         $15 = $11;
         $1 = $1 + 1 | 0;
         if (($1 | 0) != 4) {
          continue;
         }
         break;
        }
        __floatsitf($7 + 720 | 0, $5);
        $11 = HEAP32[$7 + 720 >> 2];
        $6 = $11;
        $8 = HEAP32[$7 + 724 >> 2];
        $9 = $8;
        $8 = HEAP32[$7 + 728 >> 2];
        $1 = $8;
        $11 = HEAP32[$7 + 732 >> 2];
        $10 = $11;
        $11 = $15;
        $8 = $18;
        __multf3($7 + 704 | 0, $16, $11, $14, $8, $6, $9, $1, $10);
        $10 = HEAP32[$7 + 712 >> 2];
        $14 = $10;
        $9 = HEAP32[$7 + 716 >> 2];
        $18 = $9;
        $16 = 0;
        $15 = 0;
        $9 = HEAP32[$7 + 704 >> 2];
        $24 = $9;
        $10 = HEAP32[$7 + 708 >> 2];
        $22 = $10;
        $17 = $23 + 113 | 0;
        $1 = $17 - $4 | 0;
        $21 = ($3 | 0) > ($1 | 0);
        $13 = $21 ? ($1 | 0) > 0 ? $1 : 0 : $3;
        if (($13 | 0) <= 112) {
         break label$55;
        }
        break label$52;
       }
       $23 = $21 + $23 | 0;
       $13 = $2;
       if (($2 | 0) == ($20 | 0)) {
        continue;
       }
       break;
      }
      $27 = 1e9 >>> $21 | 0;
      $14 = -1 << $21 ^ -1;
      $1 = 0;
      $13 = $20;
      while (1) {
       $17 = ($7 + 784 | 0) + ($20 << 2) | 0;
       $8 = $17;
       $17 = HEAP32[$17 >> 2];
       $1 = ($17 >>> $21 | 0) + $1 | 0;
       HEAP32[$8 >> 2] = $1;
       $1 = !$1 & ($13 | 0) == ($20 | 0);
       $13 = $1 ? $13 + 1 & 2047 : $13;
       $19 = $1 ? $19 - 9 | 0 : $19;
       $1 = Math_imul($17 & $14, $27);
       $20 = $20 + 1 & 2047;
       if (($20 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
      if (!$1) {
       continue;
      }
      if (($6 | 0) != ($13 | 0)) {
       HEAP32[($7 + 784 | 0) + ($2 << 2) >> 2] = $1;
       $2 = $6;
       continue label$53;
      }
      HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 1;
      $13 = $6;
      continue;
     }
     break;
    }
    break;
   }
   __extenddftf2($7 + 656 | 0, scalbn(1, 225 - $13 | 0));
   $10 = HEAP32[$7 + 656 >> 2];
   $6 = $10;
   $10 = HEAP32[$7 + 668 >> 2];
   $3 = $10;
   $9 = HEAP32[$7 + 660 >> 2];
   $10 = $9;
   $9 = HEAP32[$7 + 664 >> 2];
   $4 = $9;
   $9 = $3;
   $8 = $22;
   $11 = $18;
   copysignl($7 + 688 | 0, $6, $10, $4, $9, $24, $8, $14, $11);
   $11 = HEAP32[$7 + 696 >> 2];
   $30 = $11;
   $8 = HEAP32[$7 + 700 >> 2];
   $31 = $8;
   $8 = HEAP32[$7 + 688 >> 2];
   $32 = $8;
   $11 = HEAP32[$7 + 692 >> 2];
   $33 = $11;
   __extenddftf2($7 + 640 | 0, scalbn(1, 113 - $13 | 0));
   $11 = HEAP32[$7 + 640 >> 2];
   $4 = $11;
   $8 = HEAP32[$7 + 644 >> 2];
   $9 = $8;
   $8 = HEAP32[$7 + 648 >> 2];
   $3 = $8;
   $11 = HEAP32[$7 + 652 >> 2];
   $10 = $11;
   $11 = $22;
   $8 = $18;
   fmodl($7 + 672 | 0, $24, $11, $14, $8, $4, $9, $3, $10);
   $10 = HEAP32[$7 + 672 >> 2];
   $16 = $10;
   $9 = HEAP32[$7 + 676 >> 2];
   $15 = $9;
   $9 = HEAP32[$7 + 680 >> 2];
   $25 = $9;
   $10 = HEAP32[$7 + 684 >> 2];
   $26 = $10;
   $10 = $11;
   $9 = $8;
   $8 = $15;
   $11 = $26;
   __subtf3($7 + 624 | 0, $24, $10, $14, $9, $16, $8, $25, $11);
   $11 = HEAP32[$7 + 624 >> 2];
   $4 = $11;
   $8 = HEAP32[$7 + 628 >> 2];
   $9 = $8;
   $8 = HEAP32[$7 + 632 >> 2];
   $3 = $8;
   $11 = HEAP32[$7 + 636 >> 2];
   $10 = $11;
   $11 = $33;
   $8 = $31;
   __addtf3($7 + 608 | 0, $32, $11, $30, $8, $4, $9, $3, $10);
   $10 = HEAP32[$7 + 616 >> 2];
   $14 = $10;
   $9 = HEAP32[$7 + 620 >> 2];
   $18 = $9;
   $9 = HEAP32[$7 + 608 >> 2];
   $24 = $9;
   $10 = HEAP32[$7 + 612 >> 2];
   $22 = $10;
  }
  $19 = $20 + 4 & 2047;
  label$64 : {
   if (($19 | 0) == ($2 | 0)) {
    break label$64;
   }
   $19 = HEAP32[($7 + 784 | 0) + ($19 << 2) >> 2];
   label$65 : {
    if ($19 >>> 0 <= 499999999) {
     if (($20 + 5 & 2047) == ($2 | 0) ? !$19 : 0) {
      break label$65;
     }
     __extenddftf2($7 + 496 | 0, +($5 | 0) * .25);
     $10 = HEAP32[$7 + 496 >> 2];
     $3 = $10;
     $9 = HEAP32[$7 + 500 >> 2];
     $8 = $9;
     $9 = HEAP32[$7 + 504 >> 2];
     $2 = $9;
     $10 = HEAP32[$7 + 508 >> 2];
     $11 = $10;
     $10 = $15;
     $9 = $26;
     __addtf3($7 + 480 | 0, $16, $10, $25, $9, $3, $8, $2, $11);
     $11 = HEAP32[$7 + 488 >> 2];
     $25 = $11;
     $8 = HEAP32[$7 + 492 >> 2];
     $26 = $8;
     $8 = HEAP32[$7 + 480 >> 2];
     $16 = $8;
     $11 = HEAP32[$7 + 484 >> 2];
     $15 = $11;
     break label$65;
    }
    if (($19 | 0) != 5e8) {
     __extenddftf2($7 + 592 | 0, +($5 | 0) * .75);
     $11 = HEAP32[$7 + 592 >> 2];
     $3 = $11;
     $8 = HEAP32[$7 + 596 >> 2];
     $9 = $8;
     $8 = HEAP32[$7 + 600 >> 2];
     $2 = $8;
     $11 = HEAP32[$7 + 604 >> 2];
     $10 = $11;
     $11 = $15;
     $8 = $26;
     __addtf3($7 + 576 | 0, $16, $11, $25, $8, $3, $9, $2, $10);
     $10 = HEAP32[$7 + 584 >> 2];
     $25 = $10;
     $9 = HEAP32[$7 + 588 >> 2];
     $26 = $9;
     $9 = HEAP32[$7 + 576 >> 2];
     $16 = $9;
     $10 = HEAP32[$7 + 580 >> 2];
     $15 = $10;
     break label$65;
    }
    $34 = +($5 | 0);
    if (($20 + 5 & 2047) == ($2 | 0)) {
     __extenddftf2($7 + 528 | 0, $34 * .5);
     $10 = HEAP32[$7 + 528 >> 2];
     $3 = $10;
     $9 = HEAP32[$7 + 532 >> 2];
     $8 = $9;
     $9 = HEAP32[$7 + 536 >> 2];
     $2 = $9;
     $10 = HEAP32[$7 + 540 >> 2];
     $11 = $10;
     $10 = $15;
     $9 = $26;
     __addtf3($7 + 512 | 0, $16, $10, $25, $9, $3, $8, $2, $11);
     $11 = HEAP32[$7 + 520 >> 2];
     $25 = $11;
     $8 = HEAP32[$7 + 524 >> 2];
     $26 = $8;
     $8 = HEAP32[$7 + 512 >> 2];
     $16 = $8;
     $11 = HEAP32[$7 + 516 >> 2];
     $15 = $11;
     break label$65;
    }
    __extenddftf2($7 + 560 | 0, $34 * .75);
    $11 = HEAP32[$7 + 560 >> 2];
    $3 = $11;
    $8 = HEAP32[$7 + 564 >> 2];
    $9 = $8;
    $8 = HEAP32[$7 + 568 >> 2];
    $2 = $8;
    $11 = HEAP32[$7 + 572 >> 2];
    $10 = $11;
    $11 = $15;
    $8 = $26;
    __addtf3($7 + 544 | 0, $16, $11, $25, $8, $3, $9, $2, $10);
    $10 = HEAP32[$7 + 552 >> 2];
    $25 = $10;
    $9 = HEAP32[$7 + 556 >> 2];
    $26 = $9;
    $9 = HEAP32[$7 + 544 >> 2];
    $16 = $9;
    $10 = HEAP32[$7 + 548 >> 2];
    $15 = $10;
   }
   if (($13 | 0) > 111) {
    break label$64;
   }
   $10 = $15;
   $9 = $26;
   fmodl($7 + 464 | 0, $16, $10, $25, $9, 0, 0, 0, 1073676288);
   $11 = HEAP32[$7 + 464 >> 2];
   $4 = $11;
   $11 = HEAP32[$7 + 476 >> 2];
   $2 = $11;
   $8 = HEAP32[$7 + 468 >> 2];
   $11 = $8;
   $8 = HEAP32[$7 + 472 >> 2];
   $3 = $8;
   $8 = $2;
   if (__letf2($4, $11, $3, $8, 0, 0, 0, 0)) {
    break label$64;
   }
   $10 = $15;
   $9 = $26;
   __addtf3($7 + 448 | 0, $16, $10, $25, $9, 0, 0, 0, 1073676288);
   $11 = HEAP32[$7 + 456 >> 2];
   $25 = $11;
   $8 = HEAP32[$7 + 460 >> 2];
   $26 = $8;
   $8 = HEAP32[$7 + 448 >> 2];
   $16 = $8;
   $11 = HEAP32[$7 + 452 >> 2];
   $15 = $11;
  }
  $11 = $22;
  $8 = $18;
  $9 = $15;
  $10 = $26;
  __addtf3($7 + 432 | 0, $24, $11, $14, $8, $16, $9, $25, $10);
  $10 = HEAP32[$7 + 432 >> 2];
  $4 = $10;
  $10 = HEAP32[$7 + 444 >> 2];
  $2 = $10;
  $9 = HEAP32[$7 + 436 >> 2];
  $10 = $9;
  $9 = HEAP32[$7 + 440 >> 2];
  $3 = $9;
  $9 = $2;
  $8 = $33;
  $11 = $31;
  __subtf3($7 + 416 | 0, $4, $10, $3, $9, $32, $8, $30, $11);
  $11 = HEAP32[$7 + 424 >> 2];
  $14 = $11;
  $8 = HEAP32[$7 + 428 >> 2];
  $18 = $8;
  $8 = HEAP32[$7 + 416 >> 2];
  $24 = $8;
  $11 = HEAP32[$7 + 420 >> 2];
  $22 = $11;
  label$69 : {
   if ((-2 - $29 | 0) >= ($17 & 2147483647)) {
    break label$69;
   }
   $11 = $22;
   $8 = $18;
   fabsl($7 + 400 | 0, $24, $11, $14, $8);
   $8 = $11;
   $11 = $18;
   __multf3($7 + 384 | 0, $24, $8, $14, $11, 0, 0, 0, 1073610752);
   $10 = HEAP32[$7 + 400 >> 2];
   $4 = $10;
   $10 = HEAP32[$7 + 412 >> 2];
   $2 = $10;
   $9 = HEAP32[$7 + 404 >> 2];
   $10 = $9;
   $9 = HEAP32[$7 + 408 >> 2];
   $3 = $9;
   $9 = $2;
   $2 = __getf2($4, $10, $3, $9, 0, 0, 0, 1081081856);
   $11 = HEAP32[$7 + 396 >> 2];
   $3 = $11;
   $17 = ($2 | 0) < 0;
   $8 = HEAP32[$7 + 392 >> 2];
   $10 = $17 ? $14 : $8;
   $14 = $10;
   $11 = $18;
   $8 = $3;
   $9 = $17 ? $11 : $8;
   $18 = $9;
   $10 = HEAP32[$7 + 388 >> 2];
   $3 = $10;
   $9 = HEAP32[$7 + 384 >> 2];
   $8 = $17;
   $11 = $8 ? $24 : $9;
   $24 = $11;
   $10 = $22;
   $9 = $3;
   $22 = $8 ? $10 : $9;
   $23 = (($2 | 0) > -1) + $23 | 0;
   $11 = $26;
   if (wasm2js_i32$0 = !(($17 | ($1 | 0) != ($13 | 0)) & $21 & (__letf2($16, $15, $25, $11, 0, 0, 0, 0) | 0) != 0), wasm2js_i32$1 = 0, wasm2js_i32$2 = ($23 + 110 | 0) <= ($35 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
    break label$69;
   }
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
  $10 = $22;
  $8 = $18;
  scalbnl($7 + 368 | 0, $24, $10, $14, $8, $23);
  $8 = HEAP32[$7 + 368 >> 2];
  $14 = $8;
  $10 = HEAP32[$7 + 372 >> 2];
  $18 = $10;
  $8 = HEAP32[$7 + 380 >> 2];
  $28 = $8;
  $10 = HEAP32[$7 + 376 >> 2];
  $9 = $10;
 }
 $8 = $28;
 $15 = $8;
 $10 = $0;
 HEAP32[$10 >> 2] = $14;
 $8 = $18;
 HEAP32[$10 + 4 >> 2] = $8;
 $16 = $9;
 HEAP32[$10 + 8 >> 2] = $16;
 $8 = $15;
 HEAP32[$10 + 12 >> 2] = $8;
 __stack_pointer = $7 + 8976 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFoldExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = __stack_pointer - 528 | 0;
 __stack_pointer = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 102)) {
   break label$1;
  }
  $3 = 1;
  $7 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
  label$2 : {
   if (($7 | 0) == 76) {
    break label$2;
   }
   $6 = $7 & 255;
   if (($6 | 0) != 114) {
    if (($6 | 0) == 108) {
     break label$2;
    }
    if (($6 | 0) != 82) {
     break label$1;
    }
   }
   $3 = 0;
  }
  HEAP8[$1 + 527 | 0] = $3;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  $6 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28_29($1 + 512 | 0);
  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 504 | 0, 25712);
  $3 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 240 >> 2] = $3;
  HEAP32[$1 + 244 >> 2] = $4;
  label$4 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 240 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23383);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 488 | 0, 25715);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 232 >> 2] = $4;
   HEAP32[$1 + 236 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 232 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23386);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 480 | 0, 25718);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 224 >> 2] = $3;
   HEAP32[$1 + 228 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 224 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23388);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 472 | 0, 25721);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 216 >> 2] = $4;
   HEAP32[$1 + 220 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 216 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23391);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 464 | 0, 25724);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 208 >> 2] = $3;
   HEAP32[$1 + 212 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 208 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23414);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 456 | 0, 25727);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 200 >> 2] = $4;
   HEAP32[$1 + 204 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 200 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23433);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 448 | 0, 25730);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 192 >> 2] = $3;
   HEAP32[$1 + 196 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 192 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23438);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 440 | 0, 25733);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 184 >> 2] = $4;
   HEAP32[$1 + 188 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 184 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23440);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 432 | 0, 25736);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 176 >> 2] = $3;
   HEAP32[$1 + 180 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 176 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23443);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 424 | 0, 25739);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 168 >> 2] = $4;
   HEAP32[$1 + 172 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 168 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23445);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 416 | 0, 25742);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 160 >> 2] = $3;
   HEAP32[$1 + 164 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 160 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23448);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 408 | 0, 25745);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 152 >> 2] = $4;
   HEAP32[$1 + 156 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 152 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23451);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 400 | 0, 25748);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 144 >> 2] = $3;
   HEAP32[$1 + 148 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 144 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23454);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 392 | 0, 25751);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 136 >> 2] = $4;
   HEAP32[$1 + 140 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 136 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23456);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 384 | 0, 25754);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 128 >> 2] = $3;
   HEAP32[$1 + 132 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 128 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23459);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 376 | 0, 25757);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 120 >> 2] = $4;
   HEAP32[$1 + 124 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 120 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23462);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 368 | 0, 25760);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 112 >> 2] = $3;
   HEAP32[$1 + 116 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 112 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23466);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 360 | 0, 25763);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 104 >> 2] = $4;
   HEAP32[$1 + 108 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 104 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23468);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 352 | 0, 25766);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 96 >> 2] = $3;
   HEAP32[$1 + 100 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 96 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23470);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 344 | 0, 25769);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 88 >> 2] = $4;
   HEAP32[$1 + 92 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 88 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23431);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 336 | 0, 25772);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 80 >> 2] = $3;
   HEAP32[$1 + 84 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 80 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23473);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 328 | 0, 25775);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 72 >> 2] = $4;
   HEAP32[$1 + 76 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 72 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23479);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 320 | 0, 25778);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 64 >> 2] = $3;
   HEAP32[$1 + 68 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 - -64 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23495);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 312 | 0, 25781);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 56 >> 2] = $4;
   HEAP32[$1 + 60 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 56 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23498);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 304 | 0, 25784);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 48 >> 2] = $3;
   HEAP32[$1 + 52 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 48 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23500);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 296 | 0, 25787);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 40 >> 2] = $4;
   HEAP32[$1 + 44 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 40 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23507);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 288 | 0, 25790);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 32 >> 2] = $3;
   HEAP32[$1 + 36 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 32 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23509);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 280 | 0, 25793);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 24 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23535);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 272 | 0, 25796);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 16 >> 2] = $3;
   HEAP32[$1 + 20 >> 2] = $4;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23537);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 264 | 0, 25799);
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = $3;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23540);
    break label$4;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 256 | 0, 25802);
   $3 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = $3;
   HEAP32[$1 + 4 >> 2] = $4;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1)) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 496 | 0, 23543);
  }
  $3 = HEAP32[$1 + 500 >> 2];
  $4 = HEAP32[$1 + 496 >> 2];
  HEAP32[$1 + 512 >> 2] = $4;
  HEAP32[$1 + 516 >> 2] = $3;
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
  HEAP32[$1 + 496 >> 2] = $3;
  HEAP32[$1 + 252 >> 2] = 0;
  if (!$3) {
   break label$1;
  }
  label$35 : {
   if (($7 & 255) != 76 ? ($7 | 0) != 82 : 0) {
    break label$35;
   }
   $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
   HEAP32[$1 + 252 >> 2] = $5;
   if ($5) {
    break label$35;
   }
   $5 = 0;
   break label$1;
  }
  if (!(!HEAPU8[$1 + 527 | 0] | !$5)) {
   std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($1 + 496 | 0, $1 + 252 | 0);
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FoldExpr_2c_20bool__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28bool__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 527 | 0, $6, $1 + 496 | 0, $1 + 252 | 0);
 }
 __stack_pointer = $1 + 528 | 0;
 return $5;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 304 | 0;
 __stack_pointer = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76)) {
   break label$1;
  }
  label$2 : {
   switch ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 65 | 0) {
   case 54:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 296 | 0, 23619);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 >> 2] = $4;
    HEAP32[$1 + 4 >> 2] = $3;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1);
    break label$1;
   case 33:
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 288 | 0, 23627);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 16 >> 2] = $3;
    HEAP32[$1 + 20 >> 2] = $4;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
     HEAP32[$1 + 144 >> 2] = 0;
     $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1 + 144 | 0);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 280 | 0, 23631);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = $4;
    HEAP32[$1 + 12 >> 2] = $3;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
     break label$1;
    }
    HEAP32[$1 + 144 >> 2] = 1;
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1 + 144 | 0);
    break label$1;
   case 34:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 272 | 0, 23635);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 24 >> 2] = $3;
    HEAP32[$1 + 28 >> 2] = $4;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 24 | 0);
    break label$1;
   case 32:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 264 | 0, 23640);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 32 >> 2] = $4;
    HEAP32[$1 + 36 >> 2] = $3;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 32 | 0);
    break label$1;
   case 39:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 256 | 0, 23652);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 40 >> 2] = $3;
    HEAP32[$1 + 44 >> 2] = $4;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 40 | 0);
    break label$1;
   case 50:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 248 | 0, 23666);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 48 >> 2] = $4;
    HEAP32[$1 + 52 >> 2] = $3;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 48 | 0);
    break label$1;
   case 51:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 240 | 0, 23672);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 56 >> 2] = $3;
    HEAP32[$1 + 60 >> 2] = $4;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 56 | 0);
    break label$1;
   case 40:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 232 | 0, 23687);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 64 >> 2] = $4;
    HEAP32[$1 + 68 >> 2] = $3;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 - -64 | 0);
    break label$1;
   case 41:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 224 | 0, 23688);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 72 >> 2] = $3;
    HEAP32[$1 + 76 >> 2] = $4;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 72 | 0);
    break label$1;
   case 43:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 216 | 0, 23690);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 80 >> 2] = $4;
    HEAP32[$1 + 84 >> 2] = $3;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 80 | 0);
    break label$1;
   case 44:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 208 | 0, 23692);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 88 >> 2] = $3;
    HEAP32[$1 + 92 >> 2] = $4;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 88 | 0);
    break label$1;
   case 55:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 200 | 0, 23695);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 96 >> 2] = $4;
    HEAP32[$1 + 100 >> 2] = $3;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 96 | 0);
    break label$1;
   case 56:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 192 | 0, 23698);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 104 >> 2] = $3;
    HEAP32[$1 + 108 >> 2] = $4;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 104 | 0);
    break label$1;
   case 45:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 184 | 0, 23702);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 112 >> 2] = $4;
    HEAP32[$1 + 116 >> 2] = $3;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 112 | 0);
    break label$1;
   case 46:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 176 | 0, 23711);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 120 >> 2] = $3;
    HEAP32[$1 + 124 >> 2] = $4;
    $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 120 | 0);
    break label$1;
   case 37:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_float__28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    break label$1;
   case 35:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_double__28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    break label$1;
   case 36:
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_long_20double__28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    break label$1;
   case 30:
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 168 | 0, 22360);
    $4 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 128 >> 2] = $4;
    HEAP32[$1 + 132 >> 2] = $3;
    label$26 : {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 128 | 0)) {
      break label$26;
     }
     $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     if (!$5) {
      break label$26;
     }
     if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      break label$1;
     }
    }
    $5 = 0;
    break label$1;
   case 0:
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    HEAP32[$1 + 144 >> 2] = $3;
    if (!$3) {
     break label$1;
    }
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     break label$1;
    }
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__StringLiteral_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 144 | 0);
    break label$1;
   case 3:
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 160 | 0, 23729);
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 136 >> 2] = $3;
    HEAP32[$1 + 140 >> 2] = $4;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 136 | 0)) {
     break label$1;
    }
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b8_5d__28char_20const_20_28__29_20_5b8_5d_29($0, 23733);
    break label$1;
   case 20:
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) != 108) {
     break label$1;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, 0);
    HEAP32[$1 + 144 >> 2] = $3;
    if (!$3) {
     break label$1;
    }
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     break label$1;
    }
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LambdaExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 144 | 0);
    break label$1;
   case 19:
    break label$1;
   default:
    break label$2;
   }
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
  HEAP32[$1 + 156 >> 2] = $3;
  if (!$3) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 144 | 0, $0, 0);
  if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($1 + 144 | 0)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1 + 156 | 0, $1 + 144 | 0);
 }
 __stack_pointer = $1 + 304 | 0;
 return $5;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSpecialName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
    if (($3 | 0) != 71) {
     if (($3 | 0) != 84) {
      break label$1;
     }
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
               switch ($3 - 83 | 0) {
               case 0:
                break label$10;
               case 1:
                break label$12;
               case 3:
                break label$13;
               case 2:
                break label$5;
               case 4:
                break label$8;
               default:
                break label$14;
               }
              }
              switch ($3 - 67 | 0) {
              case 6:
               break label$11;
              case 1:
              case 2:
              case 3:
              case 4:
               break label$5;
              case 5:
               break label$7;
              case 0:
               break label$9;
              default:
               break label$6;
              }
             }
             HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
             $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
             HEAP32[$2 >> 2] = $1;
             if (!$1) {
              break label$2;
             }
             $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
             break label$1;
            }
            HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
            $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
            HEAP32[$2 >> 2] = $1;
            if (!$1) {
             break label$2;
            }
            $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
            break label$1;
           }
           HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
           HEAP32[$2 >> 2] = $1;
           if (!$1) {
            break label$2;
           }
           $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b14_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b14_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
           break label$1;
          }
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
          $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
          HEAP32[$2 >> 2] = $1;
          if (!$1) {
           break label$2;
          }
          $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b19_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b19_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
          break label$1;
         }
         HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
         $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
         $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($4);
         HEAP32[$2 + 12 >> 2] = $3;
         if (!$3) {
          break label$1;
         }
         $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2, $0, 1);
         if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($2)) {
          break label$1;
         }
         if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
          break label$1;
         }
         $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($4);
         HEAP32[$2 >> 2] = $1;
         if (!$1) {
          break label$2;
         }
         $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2, $2 + 12 | 0);
         break label$1;
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
        $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), 0);
        HEAP32[$2 >> 2] = $3;
        if (!$3) {
         break label$1;
        }
        $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, 22521, $2);
        break label$1;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), 0);
       HEAP32[$2 >> 2] = $3;
       if (!$3) {
        break label$1;
       }
       $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b41_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b41_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
       break label$1;
      }
      if (($3 | 0) == 99) {
       break label$3;
      }
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
     if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
      break label$1;
     }
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     HEAP32[$2 >> 2] = $1;
     if (!$1) {
      break label$2;
     }
     if (($3 | 0) == 118) {
      $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b18_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b18_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
      break label$1;
     }
     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b22_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b22_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
     break label$1;
    }
    label$16 : {
     switch ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) - 82 | 0) {
     case 4:
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), 0);
      HEAP32[$2 >> 2] = $3;
      if (!$3) {
       break label$1;
      }
      $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b20_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b20_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
      break label$1;
     case 0:
      break label$16;
     default:
      break label$1;
     }
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), 0);
    HEAP32[$2 >> 2] = $3;
    if (!$3) {
     break label$1;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $2 + 12 | 0);
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95);
    if (!$1) {
     $1 = 0;
     if (!$3) {
      break label$1;
     }
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b25_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b25_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
    break label$1;
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0)) {
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   HEAP32[$2 >> 2] = $1;
   if (!$1) {
    break label$2;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b27_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b27_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2);
   break label$1;
  }
  $1 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $1;
}
function vfscanf($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0;
 $8 = __stack_pointer - 304 | 0;
 __stack_pointer = $8;
 if (HEAP32[$0 + 76 >> 2] >= 0) {
  $23 = __lockfile($0);
 }
 $6 = HEAPU8[$1 | 0];
 label$2 : {
  if (!$6) {
   break label$2;
  }
  label$3 : {
   label$4 : {
    label$5 : {
     while (1) {
      label$7 : {
       label$8 : {
        if (isspace($6 & 255)) {
         while (1) {
          $6 = $1;
          $1 = $1 + 1 | 0;
          if (isspace(HEAPU8[$6 + 1 | 0])) {
           continue;
          }
          break;
         }
         __shlim($0, 0, 0);
         while (1) {
          $1 = HEAP32[$0 + 4 >> 2];
          label$12 : {
           if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $1 + 1;
            $1 = HEAPU8[$1 | 0];
            break label$12;
           }
           $1 = __shgetc($0);
          }
          if (isspace($1)) {
           continue;
          }
          break;
         }
         $1 = HEAP32[$0 + 4 >> 2];
         if (HEAP32[$0 + 104 >> 2]) {
          $1 = $1 - 1 | 0;
          HEAP32[$0 + 4 >> 2] = $1;
         }
         $5 = $1 - HEAP32[$0 + 8 >> 2] | 0;
         $3 = $5 >> 31;
         $14 = $5;
         $12 = $3;
         $3 = HEAP32[$0 + 120 >> 2];
         $10 = $18;
         $7 = $3 + $10 | 0;
         $3 = $19;
         $5 = HEAP32[$0 + 124 >> 2];
         $4 = $3 + $5 | 0;
         $1 = $7;
         $4 = $7 >>> 0 < $10 >>> 0 ? $4 + 1 | 0 : $4;
         $9 = $4;
         $4 = $12;
         $7 = $9 + $4 | 0;
         $5 = $14;
         $10 = $1;
         $3 = $5 + $10 | 0;
         $7 = $3 >>> 0 < $10 >>> 0 ? $7 + 1 | 0 : $7;
         $18 = $3;
         $19 = $7;
         break label$8;
        }
        label$15 : {
         label$16 : {
          label$17 : {
           $6 = HEAPU8[$1 | 0];
           if (($6 | 0) == 37) {
            $3 = HEAPU8[$1 + 1 | 0];
            if (($3 | 0) == 42) {
             break label$17;
            }
            if (($3 | 0) != 37) {
             break label$16;
            }
           }
           __shlim($0, 0, 0);
           $6 = (($6 | 0) == 37) + $1 | 0;
           $1 = HEAP32[$0 + 4 >> 2];
           label$19 : {
            if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $1 + 1;
             $1 = HEAPU8[$1 | 0];
             break label$19;
            }
            $1 = __shgetc($0);
           }
           if (($1 | 0) != HEAPU8[$6 | 0]) {
            if (HEAP32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
            }
            $20 = 0;
            if (($1 | 0) >= 0) {
             break label$2;
            }
            break label$4;
           }
           $7 = $19;
           $3 = $7;
           $4 = $18;
           $9 = $4 + 1 | 0;
           $3 = $9 >>> 0 < 1 ? $3 + 1 | 0 : $3;
           $18 = $9;
           $19 = $3;
           break label$8;
          }
          $6 = $1 + 2 | 0;
          $11 = 0;
          break label$15;
         }
         if (!(!isdigit($3) | HEAPU8[$1 + 2 | 0] != 36)) {
          $6 = $1 + 3 | 0;
          $11 = arg_n($2, HEAPU8[$1 + 1 | 0] - 48 | 0);
          break label$15;
         }
         $6 = $1 + 1 | 0;
         $11 = HEAP32[$2 >> 2];
         $2 = $2 + 4 | 0;
        }
        $20 = 0;
        $1 = 0;
        if (isdigit(HEAPU8[$6 | 0])) {
         while (1) {
          $1 = (HEAPU8[$6 | 0] + Math_imul($1, 10) | 0) - 48 | 0;
          $3 = HEAPU8[$6 + 1 | 0];
          $6 = $6 + 1 | 0;
          if (isdigit($3)) {
           continue;
          }
          break;
         }
        }
        $13 = HEAPU8[$6 | 0];
        $3 = $6;
        label$26 : {
         if (($13 | 0) != 109) {
          break label$26;
         }
         $15 = 0;
         $20 = ($11 | 0) != 0;
         $13 = HEAPU8[$6 + 1 | 0];
         $16 = 0;
         $3 = $6 + 1 | 0;
        }
        $6 = $3 + 1 | 0;
        $5 = 3;
        label$27 : {
         label$28 : {
          switch (($13 & 255) - 65 | 0) {
          case 39:
           $4 = $3 + 2 | 0;
           $3 = HEAPU8[$3 + 1 | 0] == 104;
           $6 = $3 ? $4 : $6;
           $5 = $3 ? -2 : -1;
           break label$27;
          case 43:
           $4 = $3 + 2 | 0;
           $3 = HEAPU8[$3 + 1 | 0] == 108;
           $6 = $3 ? $4 : $6;
           $5 = $3 ? 3 : 1;
           break label$27;
          case 51:
          case 57:
           $5 = 1;
           break label$27;
          case 11:
           $5 = 2;
           break label$27;
          case 41:
           break label$27;
          case 0:
          case 2:
          case 4:
          case 5:
          case 6:
          case 18:
          case 23:
          case 26:
          case 32:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 40:
          case 45:
          case 46:
          case 47:
          case 50:
          case 52:
          case 55:
           break label$28;
          default:
           break label$4;
          }
         }
         $5 = 0;
         $6 = $3;
        }
        $3 = HEAPU8[$6 | 0];
        $13 = ($3 & 47) == 3;
        $21 = $13 ? 1 : $5;
        $17 = $13 ? $3 | 32 : $3;
        label$33 : {
         if (($17 | 0) == 91) {
          break label$33;
         }
         label$34 : {
          if (($17 | 0) != 110) {
           if (($17 | 0) != 99) {
            break label$34;
           }
           $1 = ($1 | 0) > 1 ? $1 : 1;
           break label$33;
          }
          $3 = $19;
          store_int($11, $21, $18, $3);
          break label$8;
         }
         __shlim($0, 0, 0);
         while (1) {
          $3 = HEAP32[$0 + 4 >> 2];
          label$37 : {
           if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $3 + 1;
            $3 = HEAPU8[$3 | 0];
            break label$37;
           }
           $3 = __shgetc($0);
          }
          if (isspace($3)) {
           continue;
          }
          break;
         }
         $3 = HEAP32[$0 + 4 >> 2];
         if (HEAP32[$0 + 104 >> 2]) {
          $3 = $3 - 1 | 0;
          HEAP32[$0 + 4 >> 2] = $3;
         }
         $4 = $3 - HEAP32[$0 + 8 >> 2] | 0;
         $3 = $4 >> 31;
         $14 = $4;
         $12 = $3;
         $10 = $18;
         $3 = HEAP32[$0 + 120 >> 2];
         $5 = $10 + $3 | 0;
         $3 = $19;
         $4 = HEAP32[$0 + 124 >> 2];
         $9 = $3 + $4 | 0;
         $4 = $5;
         $9 = $5 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
         $7 = $9;
         $9 = $12;
         $5 = $9 + $7 | 0;
         $10 = $4;
         $4 = $14;
         $3 = $10 + $4 | 0;
         $5 = $3 >>> 0 < $10 >>> 0 ? $5 + 1 | 0 : $5;
         $18 = $3;
         $19 = $5;
        }
        $5 = $1 >> 31;
        $12 = $5;
        $14 = $1;
        __shlim($0, $1, $5);
        $3 = HEAP32[$0 + 104 >> 2];
        $5 = HEAP32[$0 + 4 >> 2];
        label$40 : {
         if ($3 >>> 0 > $5 >>> 0) {
          HEAP32[$0 + 4 >> 2] = $5 + 1;
          break label$40;
         }
         if ((__shgetc($0) | 0) < 0) {
          break label$4;
         }
         $3 = HEAP32[$0 + 104 >> 2];
        }
        if ($3) {
         HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
        }
        $3 = 16;
        label$43 : {
         label$44 : {
          label$45 : {
           label$46 : {
            label$47 : {
             label$48 : {
              label$49 : {
               switch ($17 - 88 | 0) {
               default:
                $1 = $17 - 65 | 0;
                if ($1 >>> 0 > 6 | !(1 << $1 & 113)) {
                 break label$43;
                }
               case 9:
               case 13:
               case 14:
               case 15:
                __floatscan($8, $0, $21, 0);
                $5 = HEAP32[$0 + 120 >> 2];
                $12 = $5;
                $4 = HEAP32[$0 + 124 >> 2];
                $1 = $4;
                $5 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
                $4 = $5 >> 31;
                $10 = $5;
                $7 = 0 - $5 | 0;
                $3 = $4 + (($10 | 0) != 0) | 0;
                $3 = 0 - $3 | 0;
                $9 = $3;
                $4 = $12;
                $3 = $1;
                if (($7 | 0) == ($4 | 0) & ($3 | 0) == ($9 | 0)) {
                 break label$3;
                }
                if (!$11) {
                 break label$43;
                }
                $4 = HEAP32[$8 + 8 >> 2];
                $14 = $4;
                $3 = HEAP32[$8 + 12 >> 2];
                $12 = $3;
                $3 = HEAP32[$8 >> 2];
                $4 = HEAP32[$8 + 4 >> 2];
                switch ($21 | 0) {
                case 2:
                 break label$45;
                case 1:
                 break label$46;
                case 0:
                 break label$47;
                default:
                 break label$43;
                }
               case 3:
               case 11:
               case 27:
                if (($17 & 239) == 99) {
                 memset($8 + 32 | 0, -1, 257);
                 HEAP8[$8 + 32 | 0] = 0;
                 if (($17 | 0) != 115) {
                  break label$44;
                 }
                 HEAP8[$8 + 65 | 0] = 0;
                 HEAP8[$8 + 46 | 0] = 0;
                 HEAP16[$8 + 42 >> 1] = 0;
                 HEAP16[$8 + 44 >> 1] = 0;
                 break label$44;
                }
                $5 = HEAPU8[$6 + 1 | 0];
                $3 = ($5 | 0) == 94;
                memset($8 + 32 | 0, $3, 257);
                HEAP8[$8 + 32 | 0] = 0;
                $13 = $3 ? $6 + 2 | 0 : $6 + 1 | 0;
                label$56 : {
                 label$57 : {
                  label$58 : {
                   $6 = HEAPU8[($3 ? 2 : 1) + $6 | 0];
                   if (($6 | 0) != 45) {
                    if (($6 | 0) == 93) {
                     break label$58;
                    }
                    $5 = ($5 | 0) != 94;
                    $6 = $13;
                    break label$56;
                   }
                   $5 = ($5 | 0) != 94;
                   HEAP8[$8 + 78 | 0] = $5;
                   break label$57;
                  }
                  $5 = ($5 | 0) != 94;
                  HEAP8[$8 + 126 | 0] = $5;
                 }
                 $6 = $13 + 1 | 0;
                }
                while (1) {
                 $3 = HEAPU8[$6 | 0];
                 label$61 : {
                  if (($3 | 0) != 45) {
                   if (!$3) {
                    break label$4;
                   }
                   if (($3 | 0) != 93) {
                    break label$61;
                   }
                   break label$44;
                  }
                  $3 = 45;
                  $4 = HEAPU8[$6 + 1 | 0];
                  if (!$4 | ($4 | 0) == 93) {
                   break label$61;
                  }
                  $13 = $6 + 1 | 0;
                  $6 = HEAPU8[$6 - 1 | 0];
                  label$63 : {
                   if ($4 >>> 0 <= $6 >>> 0) {
                    $3 = $4;
                    break label$63;
                   }
                   while (1) {
                    $6 = $6 + 1 | 0;
                    HEAP8[$6 + ($8 + 32 | 0) | 0] = $5;
                    $3 = HEAPU8[$13 | 0];
                    if ($6 >>> 0 < $3 >>> 0) {
                     continue;
                    }
                    break;
                   }
                  }
                  $6 = $13;
                 }
                 HEAP8[($3 + $8 | 0) + 33 | 0] = $5;
                 $6 = $6 + 1 | 0;
                 continue;
                }
               case 23:
                $3 = 8;
                break label$48;
               case 12:
               case 29:
                $3 = 10;
                break label$48;
               case 1:
               case 2:
               case 4:
               case 5:
               case 6:
               case 7:
               case 8:
               case 10:
               case 16:
               case 18:
               case 19:
               case 20:
               case 21:
               case 22:
               case 25:
               case 26:
               case 28:
               case 30:
               case 31:
                break label$43;
               case 0:
               case 24:
               case 32:
                break label$48;
               case 17:
                break label$49;
               }
              }
              $3 = 0;
             }
             $4 = __intscan($0, $3, 0, -1, -1);
             $14 = $4;
             $3 = i64toi32_i32$HIGH_BITS;
             $12 = $3;
             $3 = HEAP32[$0 + 120 >> 2];
             $10 = $3;
             $4 = HEAP32[$0 + 124 >> 2];
             $1 = $4;
             $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
             $4 = $3 >> 31;
             $9 = $3;
             $5 = 0 - $3 | 0;
             $7 = $4 + (($9 | 0) != 0) | 0;
             $7 = 0 - $7 | 0;
             $4 = $10;
             $10 = $7;
             $7 = $1;
             if (($5 | 0) == ($4 | 0) & ($10 | 0) == ($7 | 0)) {
              break label$3;
             }
             if (!(!$11 | ($17 | 0) != 112)) {
              HEAP32[$11 >> 2] = $14;
              break label$43;
             }
             $4 = $12;
             store_int($11, $21, $14, $4);
             break label$43;
            }
            $7 = $12;
            wasm2js_i32$0 = $11, wasm2js_f32$0 = __trunctfsf2($3, $4, $14, $7), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
            break label$43;
           }
           $7 = $4;
           $4 = $12;
           wasm2js_i32$0 = $11, wasm2js_f64$0 = __trunctfdf2($3, $7, $14, $4), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
           break label$43;
          }
          $7 = $11;
          HEAP32[$7 >> 2] = $3;
          HEAP32[$7 + 4 >> 2] = $4;
          HEAP32[$7 + 8 >> 2] = $14;
          $4 = $12;
          HEAP32[$7 + 12 >> 2] = $4;
          break label$43;
         }
         $13 = ($17 | 0) == 99;
         $5 = $13 ? $1 + 1 | 0 : 31;
         $17 = ($21 | 0) != 1;
         label$67 : {
          if (!$17) {
           $3 = $11;
           if ($20) {
            $3 = dlmalloc($5 << 2);
            if (!$3) {
             break label$5;
            }
           }
           HEAP32[$8 + 296 >> 2] = 0;
           HEAP32[$8 + 300 >> 2] = 0;
           $1 = 0;
           $4 = $20;
           while (1) {
            $16 = $3;
            label$71 : {
             while (1) {
              $7 = $8;
              $3 = HEAP32[$0 + 4 >> 2];
              label$73 : {
               if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                HEAP32[$0 + 4 >> 2] = $3 + 1;
                $3 = HEAPU8[$3 | 0];
                break label$73;
               }
               $3 = __shgetc($0);
              }
              if (!HEAPU8[($7 + $3 | 0) + 33 | 0]) {
               break label$71;
              }
              HEAP8[$8 + 27 | 0] = $3;
              $3 = mbrtowc($8 + 28 | 0, $8 + 27 | 0, 1, $8 + 296 | 0);
              if (($3 | 0) == -2) {
               continue;
              }
              if (($3 | 0) == -1) {
               break label$7;
              }
              if ($16) {
               HEAP32[($1 << 2) + $16 >> 2] = HEAP32[$8 + 28 >> 2];
               $1 = $1 + 1 | 0;
              }
              if ($4 ^ 1 | ($1 | 0) != ($5 | 0)) {
               continue;
              }
              break;
             }
             $5 = $5 << 1 | 1;
             $3 = dlrealloc($16, $5 << 2);
             if ($3) {
              continue;
             }
             break label$7;
            }
            break;
           }
           if (!mbsinit($8 + 296 | 0)) {
            break label$7;
           }
           $15 = 0;
           break label$67;
          }
          if ($20) {
           $1 = 0;
           $3 = dlmalloc($5);
           if (!$3) {
            break label$5;
           }
           while (1) {
            $15 = $3;
            while (1) {
             $4 = $8;
             $3 = HEAP32[$0 + 4 >> 2];
             label$79 : {
              if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
               HEAP32[$0 + 4 >> 2] = $3 + 1;
               $3 = HEAPU8[$3 | 0];
               break label$79;
              }
              $3 = __shgetc($0);
             }
             if (!HEAPU8[($4 + $3 | 0) + 33 | 0]) {
              $16 = 0;
              break label$67;
             }
             HEAP8[$1 + $15 | 0] = $3;
             $1 = $1 + 1 | 0;
             if (($5 | 0) != ($1 | 0)) {
              continue;
             }
             break;
            }
            $16 = 0;
            $5 = $5 << 1 | 1;
            $3 = dlrealloc($15, $5);
            if ($3) {
             continue;
            }
            break;
           }
           break label$4;
          }
          $1 = 0;
          if ($11) {
           while (1) {
            $4 = $8;
            $3 = HEAP32[$0 + 4 >> 2];
            label$84 : {
             if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
              HEAP32[$0 + 4 >> 2] = $3 + 1;
              $3 = HEAPU8[$3 | 0];
              break label$84;
             }
             $3 = __shgetc($0);
            }
            if (HEAPU8[($4 + $3 | 0) + 33 | 0]) {
             HEAP8[$1 + $11 | 0] = $3;
             $1 = $1 + 1 | 0;
             continue;
            } else {
             $16 = 0;
             $15 = $11;
             break label$67;
            }
           }
          }
          while (1) {
           $4 = $8;
           $1 = HEAP32[$0 + 4 >> 2];
           label$89 : {
            if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $1 + 1;
             $1 = HEAPU8[$1 | 0];
             break label$89;
            }
            $1 = __shgetc($0);
           }
           if (HEAPU8[($4 + $1 | 0) + 33 | 0]) {
            continue;
           }
           break;
          }
          $15 = 0;
          $16 = 0;
          $1 = 0;
         }
         $3 = HEAP32[$0 + 4 >> 2];
         if (HEAP32[$0 + 104 >> 2]) {
          $3 = $3 - 1 | 0;
          HEAP32[$0 + 4 >> 2] = $3;
         }
         $4 = HEAP32[$0 + 120 >> 2];
         $9 = $4;
         $7 = HEAP32[$0 + 124 >> 2];
         $5 = $7;
         $4 = $3 - HEAP32[$0 + 8 >> 2] | 0;
         $7 = $4 >> 31;
         $10 = $4;
         $4 = $7;
         $7 = $5;
         $5 = $7 + $4 | 0;
         $3 = $9 + $10 | 0;
         $5 = $3 >>> 0 < $10 >>> 0 ? $5 + 1 | 0 : $5;
         $10 = !($5 | $3);
         $4 = $5;
         $7 = $14;
         $5 = $12;
         $9 = $4;
         if ($10 | ($13 ? ($3 | 0) != ($7 | 0) | ($5 | 0) != ($9 | 0) : 0)) {
          break label$3;
         }
         label$92 : {
          if (!$20) {
           break label$92;
          }
          if (!$17) {
           HEAP32[$11 >> 2] = $16;
           break label$92;
          }
          HEAP32[$11 >> 2] = $15;
         }
         if ($13) {
          break label$43;
         }
         if ($16) {
          HEAP32[($1 << 2) + $16 >> 2] = 0;
         }
         if (!$15) {
          $15 = 0;
          break label$43;
         }
         HEAP8[$1 + $15 | 0] = 0;
        }
        $5 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
        $7 = $5 >> 31;
        $14 = $5;
        $12 = $7;
        $9 = $18;
        $7 = HEAP32[$0 + 120 >> 2];
        $4 = $9 + $7 | 0;
        $5 = HEAP32[$0 + 124 >> 2];
        $7 = $19;
        $3 = $5 + $7 | 0;
        $1 = $4;
        $3 = $4 >>> 0 < $9 >>> 0 ? $3 + 1 | 0 : $3;
        $10 = $3;
        $3 = $12;
        $4 = $3 + $10 | 0;
        $5 = $14;
        $9 = $1;
        $7 = $5 + $9 | 0;
        $18 = $7;
        $4 = $7 >>> 0 < $9 >>> 0 ? $4 + 1 | 0 : $4;
        $19 = $4;
        $22 = (($11 | 0) != 0) + $22 | 0;
       }
       $1 = $6 + 1 | 0;
       $6 = HEAPU8[$6 + 1 | 0];
       if ($6) {
        continue;
       }
       break label$2;
      }
      break;
     }
     $15 = 0;
     break label$4;
    }
    $15 = 0;
    $16 = 0;
   }
   $22 = $22 ? $22 : -1;
  }
  if (!$20) {
   break label$2;
  }
  dlfree($15);
  dlfree($16);
 }
 if ($23) {
  __unlockfile($0);
 }
 __stack_pointer = $8 + 304 | 0;
 return $22;
}
function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 $16 = __stack_pointer - 96 | 0;
 __stack_pointer = $16;
 $10 = $3;
 $13 = 0;
 $11 = $2;
 $25 = $13 | $11;
 $10 = 0;
 $9 = $10;
 $10 = $3;
 $9 = $9 | $10;
 $26 = $9;
 $10 = $7;
 $13 = $10 << 15;
 $12 = $13;
 $13 = $6;
 $10 = $13 >>> 17 | 0;
 $9 = $5;
 $11 = ($13 & 131071) << 15 | $9 >>> 17;
 $13 = 0;
 $23 = $13 | $11;
 $9 = $10;
 $10 = $12;
 $9 = $9 | $10;
 $9 = $8;
 $13 = $9 & 65535;
 $27 = $13;
 $10 = $7;
 $21 = $10;
 $9 = $10;
 $14 = $9 << 15;
 $10 = $13 << 15 | $9 >>> 17;
 $12 = $10;
 $10 = $6;
 $11 = $10 >>> 17 | 0;
 $9 = 0;
 $13 = $9;
 $10 = $14;
 $33 = $10 | $11;
 $9 = $12;
 $13 = $9 | $13;
 $30 = $13;
 $13 = $4;
 $10 = $8;
 $10 = $13 ^ $10;
 $9 = $3;
 $11 = $7;
 $9 = $10 & -2147483648;
 $15 = $9;
 $9 = $4;
 $13 = $9 & 65535;
 $20 = $13;
 $10 = $3;
 $22 = $10;
 $31 = $13;
 $10 = 0;
 $34 = $10;
 $10 = $27;
 $9 = $10 >>> 17 | 0;
 $37 = ($10 & 131071) << 15 | $11 >>> 17;
 $9 = $8;
 $18 = $9 >>> 16 & 32767;
 $13 = $4;
 $32 = $13 >>> 16 & 32767;
 label$1 : {
  label$2 : {
   if ($32 - 1 >>> 0 <= 32765) {
    $9 = 0;
    if ($18 - 1 >>> 0 < 32766) {
     break label$2;
    }
   }
   $10 = $2;
   $14 = !($10 | $1);
   $10 = $4;
   $9 = $10 & 2147483647;
   $28 = $9;
   $12 = $9 >>> 0 < 2147418112;
   $10 = $9;
   $13 = $3;
   $24 = $13;
   $11 = $13;
   if (!(!$11 & ($10 | 0) == 2147418112 ? $14 : $12)) {
    $13 = $3;
    $19 = $13;
    $11 = $4;
    $10 = $11 | 32768;
    $15 = $10;
    break label$1;
   }
   $10 = $6;
   $14 = !($10 | $5);
   $10 = $8;
   $13 = $10 & 2147483647;
   $4 = $13;
   $12 = $13 >>> 0 < 2147418112;
   $10 = $13;
   $11 = $7;
   $3 = $11;
   $9 = $11;
   if (!(!$9 & ($10 | 0) == 2147418112 ? $14 : $12)) {
    $11 = $7;
    $19 = $11;
    $9 = $8;
    $10 = $9 | 32768;
    $15 = $10;
    $1 = $5;
    $10 = $6;
    $2 = $10;
    break label$1;
   }
   $10 = $28;
   $11 = $10 ^ 2147418112;
   $9 = $24;
   $13 = $9;
   $10 = $1;
   $9 = $11;
   $11 = $2;
   $9 = $9 | $11;
   if (!($13 | $10 | $9)) {
    $9 = $4;
    $10 = $6;
    $10 = $9 | $10;
    $13 = $5;
    $11 = $3;
    if (!($10 | ($13 | $11))) {
     $15 = 2147450880;
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    $9 = $19;
    $19 = $9;
    $10 = $15;
    $11 = $10 | 2147418112;
    $15 = $11;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $11 = $4;
   $9 = $11 ^ 2147418112;
   $7 = $9;
   $10 = $3;
   $13 = $10;
   $11 = $5;
   $9 = $6;
   $10 = $7;
   $10 = $9 | $10;
   if (!($13 | $11 | $10)) {
    $9 = $1;
    $13 = $24;
    $3 = $9 | $13;
    $10 = $2;
    $11 = $28;
    $11 = $10 | $11;
    $1 = 0;
    $2 = 0;
    if (!($11 | $3)) {
     $15 = 2147450880;
     break label$1;
    }
    $10 = $19;
    $19 = $10;
    $11 = $15;
    $9 = $11 | 2147418112;
    $15 = $9;
    break label$1;
   }
   $9 = $2;
   $10 = $28;
   $10 = $9 | $10;
   $13 = $24;
   $11 = $1;
   if (!($10 | ($13 | $11))) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $10 = $4;
   $11 = $6;
   $11 = $10 | $11;
   $9 = $3;
   $13 = $5;
   if (!($11 | ($9 | $13))) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $11 = $28;
   if (($11 | 0) == 65535 | $11 >>> 0 < 65535) {
    $10 = $20;
    $17 = !($10 | $22);
    $14 = $17;
    $9 = $14 ? $1 : $22;
    $10 = $2;
    $11 = $20;
    $13 = $14 ? $10 : $11;
    $10 = Math_clz32($13);
    $9 = ($10 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $10;
    $10 = $17 << 6;
    $11 = $9 + $10 | 0;
    $12 = $2;
    $9 = $20;
    __ashlti3($16 + 80 | 0, $1, $12, $22, $9, $11 - 15 | 0);
    $14 = $16;
    $9 = HEAP32[$14 + 88 >> 2];
    $22 = $9;
    $12 = HEAP32[$14 + 92 >> 2];
    $20 = $12;
    $12 = $14;
    $9 = HEAP32[$12 + 80 >> 2];
    $1 = $9;
    $14 = HEAP32[$12 + 84 >> 2];
    $2 = $14;
    $9 = 0;
    $12 = $9;
    $10 = $14;
    $14 = 0;
    $25 = $10 | $14;
    $9 = $22;
    $12 = $9 | $12;
    $26 = $12;
    $12 = $20;
    $31 = $12;
    $34 = 0;
    $17 = 16 - $11 | 0;
   }
   $14 = $4;
   $9 = $17;
   if ($14 >>> 0 > 65535) {
    break label$2;
   }
   $12 = $27;
   $3 = !($12 | $21);
   $13 = $3;
   $9 = $13 ? $5 : $21;
   $12 = $6;
   $14 = $27;
   $10 = $13 ? $12 : $14;
   $12 = Math_clz32($10);
   $11 = 0;
   $9 = ($12 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $12;
   $12 = $3 << 6;
   $14 = $9 + $12 | 0;
   $11 = $6;
   $9 = $27;
   __ashlti3($16 - -64 | 0, $5, $11, $21, $9, $14 - 15 | 0);
   $13 = $16;
   $9 = HEAP32[$13 + 72 >> 2];
   $3 = $9;
   $11 = HEAP32[$13 + 76 >> 2];
   $4 = $11;
   $13 = $9;
   $9 = $11 << 15 | $9 >>> 17;
   $8 = $13 << 15;
   $7 = $9;
   $11 = $16;
   $9 = HEAP32[$11 + 64 >> 2];
   $5 = $9;
   $13 = HEAP32[$11 + 68 >> 2];
   $6 = $13;
   $12 = $13 >>> 17 | 0;
   $9 = 0;
   $11 = $9;
   $13 = $8;
   $33 = $13 | $12;
   $9 = $7;
   $11 = $9 | $11;
   $30 = $11;
   $9 = $3;
   $13 = $9 << 15;
   $7 = $13;
   $13 = $6;
   $9 = $13 >>> 17 | 0;
   $11 = $5;
   $12 = ($13 & 131071) << 15 | $11 >>> 17;
   $11 = $9;
   $13 = 0;
   $23 = $13 | $12;
   $9 = $7;
   $11 = $9 | $11;
   $11 = $4;
   $13 = $11 >>> 17 | 0;
   $9 = $3;
   $37 = ($11 & 131071) << 15 | $9 >>> 17;
   $9 = ($17 - $14 | 0) + 16 | 0;
  }
  $17 = $9;
  $11 = $23;
  $3 = $11;
  $11 = 0;
  $8 = $11;
  $9 = 0;
  $4 = $9;
  $11 = $9;
  $13 = $1;
  $7 = $13;
  $13 = $8;
  $13 = __wasm_i64_mul($3, $11, $1, $13);
  $35 = $13;
  $11 = i64toi32_i32$HIGH_BITS;
  $36 = $11;
  $11 = $6;
  $9 = $5;
  $11 = $9 << 15;
  $1 = $11 & -32768;
  $11 = 0;
  $6 = $11;
  $9 = 0;
  $2 = $9;
  $11 = $9;
  $13 = $25;
  $5 = $13;
  $13 = $6;
  $13 = __wasm_i64_mul($1, $11, $5, $13);
  $12 = $13;
  $11 = i64toi32_i32$HIGH_BITS;
  $13 = $11;
  $11 = $36;
  $14 = $13 + $11 | 0;
  $9 = $35;
  $10 = $9 + $12 | 0;
  $14 = $10 >>> 0 < $12 >>> 0 ? $14 + 1 | 0 : $14;
  $25 = $10;
  $26 = $14;
  $11 = $10;
  $9 = $11;
  $21 = 0;
  $9 = $2;
  $11 = $8;
  $11 = __wasm_i64_mul($1, $9, $7, $11);
  $12 = $11;
  $9 = i64toi32_i32$HIGH_BITS;
  $11 = $9;
  $9 = $10;
  $10 = $9 + $11 | 0;
  $14 = $21;
  $13 = $14 + $12 | 0;
  $10 = $13 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $23 = $13;
  $29 = $10;
  $14 = $9;
  $9 = $13;
  $12 = $21;
  $38 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $12 >>> 0 | $10 >>> 0 < $14 >>> 0;
  $9 = $4;
  $10 = $6;
  $10 = __wasm_i64_mul($3, $9, $5, $10);
  $41 = $10;
  $9 = i64toi32_i32$HIGH_BITS;
  $42 = $9;
  $10 = 0;
  $27 = $10;
  $10 = $2;
  $12 = $22;
  $21 = $12;
  $12 = $27;
  $12 = __wasm_i64_mul($1, $10, $21, $12);
  $14 = $12;
  $10 = i64toi32_i32$HIGH_BITS;
  $12 = $10;
  $10 = $42;
  $13 = $10 + $12 | 0;
  $9 = $41;
  $11 = $9 + $14 | 0;
  $13 = $11 >>> 0 < $14 >>> 0 ? $13 + 1 | 0 : $13;
  $24 = $11;
  $28 = $13;
  $10 = $33;
  $22 = $10;
  $9 = 0;
  $20 = $9;
  $10 = $8;
  $10 = __wasm_i64_mul($22, $9, $7, $10);
  $14 = $10;
  $9 = i64toi32_i32$HIGH_BITS;
  $10 = $9;
  $9 = $28;
  $11 = $9 + $10 | 0;
  $13 = $24;
  $12 = $13 + $14 | 0;
  $33 = $12;
  $11 = $12 >>> 0 < $14 >>> 0 ? $11 + 1 | 0 : $11;
  $30 = $11;
  $13 = $36;
  $11 = $26;
  $9 = $25;
  $14 = $35;
  $14 = ($13 | 0) == ($11 | 0) & $9 >>> 0 < $14 >>> 0 | $11 >>> 0 < $13 >>> 0;
  $11 = $14;
  $14 = 0;
  $9 = $14;
  $9 = $9 | $11;
  $14 = $9;
  $11 = $26;
  $13 = $11;
  $11 = 0;
  $13 = $13 | $11;
  $10 = $13 + $12 | 0;
  $9 = $30;
  $11 = $14;
  $12 = $9 + $11 | 0;
  $35 = $10;
  $12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
  $36 = $12;
  $12 = $4;
  $14 = $27;
  $14 = __wasm_i64_mul($3, $12, $21, $14);
  $43 = $14;
  $12 = i64toi32_i32$HIGH_BITS;
  $44 = $12;
  $12 = $34;
  $26 = $12;
  $14 = $2;
  $9 = $31;
  $25 = $9 | 65536;
  $9 = $12;
  $9 = __wasm_i64_mul($1, $14, $25, $9);
  $13 = $9;
  $12 = $43;
  $11 = $9 + $12 | 0;
  $14 = i64toi32_i32$HIGH_BITS;
  $9 = $14;
  $14 = $44;
  $10 = $9 + $14 | 0;
  $31 = $11;
  $10 = $11 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
  $34 = $10;
  $10 = $6;
  $12 = $20;
  $12 = __wasm_i64_mul($5, $10, $22, $12);
  $13 = $12;
  $10 = i64toi32_i32$HIGH_BITS;
  $12 = $10;
  $10 = $34;
  $11 = $10 + $12 | 0;
  $14 = $31;
  $9 = $13 + $14 | 0;
  $11 = $9 >>> 0 < $13 >>> 0 ? $11 + 1 | 0 : $11;
  $39 = $9;
  $40 = $11;
  $10 = $37;
  $11 = $10 & 2147483647;
  $1 = $11 | -2147483648;
  $14 = 0;
  $10 = $14;
  $2 = $10;
  $11 = $8;
  $11 = __wasm_i64_mul($1, $10, $7, $11);
  $13 = $11;
  $10 = i64toi32_i32$HIGH_BITS;
  $11 = $10;
  $10 = $40;
  $9 = $10 + $11 | 0;
  $14 = $39;
  $12 = $13 + $14 | 0;
  $37 = $12;
  $9 = $13 >>> 0 > $12 >>> 0 ? $9 + 1 | 0 : $9;
  $45 = $9;
  $10 = $12;
  $14 = $36;
  $12 = $10 + $14 | 0;
  $9 = $35;
  $13 = 0;
  $11 = $9 + $13 | 0;
  $46 = $11;
  $12 = $11 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
  $47 = $12;
  $9 = $12;
  $13 = $46;
  $14 = $38;
  $10 = $13 + $14 | 0;
  $7 = $10;
  $11 = $10 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
  $8 = $11;
  $18 = (($18 + $32 | 0) + $17 | 0) - 16383 | 0;
  $11 = $27;
  $14 = $20;
  $14 = __wasm_i64_mul($21, $11, $22, $14);
  $17 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $9 = $11;
  $11 = $4;
  $14 = $26;
  $14 = __wasm_i64_mul($3, $11, $25, $14);
  $13 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $14 = $11;
  $11 = $9;
  $10 = $11 + $14 | 0;
  $12 = $17;
  $9 = $13 + $12 | 0;
  $10 = $9 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
  $3 = $9;
  $4 = $10;
  $12 = $11;
  $13 = $17;
  $17 = ($10 | 0) == ($12 | 0) & $13 >>> 0 > $9 >>> 0 | $10 >>> 0 < $12 >>> 0;
  $11 = $2;
  $10 = $6;
  $10 = __wasm_i64_mul($1, $11, $5, $10);
  $12 = $10;
  $11 = i64toi32_i32$HIGH_BITS;
  $10 = $11;
  $11 = $4;
  $9 = $10 + $11 | 0;
  $13 = $3;
  $14 = $13 + $12 | 0;
  $9 = $14 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
  $5 = $14;
  $6 = $9;
  $13 = $11;
  $11 = $14;
  $12 = $3;
  $13 = ($9 | 0) == ($13 | 0) & $11 >>> 0 < $12 >>> 0 | $9 >>> 0 < $13 >>> 0;
  $14 = 0;
  $12 = $17;
  $10 = $13 + $12 | 0;
  $38 = $10;
  $14 = $10 >>> 0 < $13 >>> 0 ? 1 : $14;
  $17 = $14;
  $14 = $28;
  $12 = $42;
  $13 = $41;
  $11 = $24;
  $3 = ($14 | 0) == ($12 | 0) & $13 >>> 0 > $11 >>> 0 | $12 >>> 0 > $14 >>> 0;
  $11 = $14;
  $14 = $30;
  $13 = $24;
  $12 = $33;
  $14 = ($11 | 0) == ($14 | 0) & $13 >>> 0 > $12 >>> 0 | $11 >>> 0 > $14 >>> 0;
  $10 = 0;
  $12 = $3;
  $9 = $14 + $12 | 0;
  $10 = $9 >>> 0 < $14 >>> 0 ? 1 : $10;
  $14 = $9;
  $12 = $10;
  $10 = $6;
  $9 = $10 + $12 | 0;
  $13 = $5;
  $11 = $13 + $14 | 0;
  $9 = $11 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
  $3 = $11;
  $4 = $9;
  $13 = $10;
  $10 = $11;
  $14 = $5;
  $13 = ($9 | 0) == ($13 | 0) & $10 >>> 0 < $14 >>> 0 | $9 >>> 0 < $13 >>> 0;
  $10 = $17;
  $14 = $38;
  $12 = $13 + $14 | 0;
  $6 = $12;
  $11 = $13 >>> 0 > $12 >>> 0 ? $10 + 1 | 0 : $10;
  $5 = $11;
  $11 = $2;
  $14 = $26;
  $14 = __wasm_i64_mul($1, $11, $25, $14);
  $13 = $14;
  $11 = i64toi32_i32$HIGH_BITS;
  $14 = $11;
  $11 = $5;
  $12 = $11 + $14 | 0;
  $10 = $6;
  $9 = $13 + $10 | 0;
  $12 = $9 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
  $28 = $9;
  $24 = $12;
  $12 = $2;
  $10 = $27;
  $10 = __wasm_i64_mul($1, $12, $21, $10);
  $5 = $10;
  $12 = i64toi32_i32$HIGH_BITS;
  $6 = $12;
  $12 = $20;
  $10 = $26;
  $10 = __wasm_i64_mul($22, $12, $25, $10);
  $13 = $10;
  $11 = $5;
  $14 = $10 + $11 | 0;
  $12 = i64toi32_i32$HIGH_BITS;
  $10 = $12;
  $12 = $6;
  $9 = $10 + $12 | 0;
  $1 = $14;
  $9 = $13 >>> 0 > $14 >>> 0 ? $9 + 1 | 0 : $9;
  $2 = $9;
  $11 = $12;
  $13 = $5;
  $12 = $14;
  $13 = ($9 | 0) == ($11 | 0) & $13 >>> 0 > $12 >>> 0 | $9 >>> 0 < $11 >>> 0;
  $9 = $13;
  $13 = 0;
  $12 = $13;
  $13 = $9;
  $12 = $13 | $12;
  $13 = $28;
  $9 = 0;
  $11 = $2;
  $11 = $9 | $11;
  $10 = $13 + $11 | 0;
  $9 = $12;
  $12 = $24;
  $14 = $9 + $12 | 0;
  $6 = $10;
  $14 = $10 >>> 0 < $11 >>> 0 ? $14 + 1 | 0 : $14;
  $5 = $14;
  $12 = $1;
  $14 = $4;
  $13 = $14;
  $10 = $13 + $12 | 0;
  $11 = 0;
  $14 = $3;
  $9 = $11 + $14 | 0;
  $10 = $9 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
  $1 = $9;
  $2 = $10;
  $14 = $13;
  $11 = $3;
  $14 = ($10 | 0) == ($14 | 0) & $9 >>> 0 < $11 >>> 0 | $10 >>> 0 < $14 >>> 0;
  $13 = $5;
  $9 = $13;
  $11 = $6;
  $12 = $11 + $14 | 0;
  $20 = $12;
  $9 = $12 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
  $4 = $9;
  $9 = $45;
  $11 = $40;
  $13 = $37;
  $14 = $39;
  $5 = ($9 | 0) == ($11 | 0) & $13 >>> 0 < $14 >>> 0 | $9 >>> 0 < $11 >>> 0;
  $9 = $44;
  $13 = $34;
  $11 = $43;
  $14 = $31;
  $3 = ($9 | 0) == ($13 | 0) & $11 >>> 0 > $14 >>> 0 | $9 >>> 0 > $13 >>> 0;
  $14 = $13;
  $11 = $31;
  $13 = $40;
  $9 = $39;
  $13 = ($14 | 0) == ($13 | 0) & $11 >>> 0 > $9 >>> 0 | $13 >>> 0 < $14 >>> 0;
  $12 = 0;
  $9 = $3;
  $10 = $9 + $13 | 0;
  $12 = $10 >>> 0 < $13 >>> 0 ? 1 : $12;
  $9 = $12;
  $11 = $5;
  $14 = $10 + $11 | 0;
  $12 = $14;
  $11 = $12;
  $12 = 0;
  $10 = $12;
  $10 = $10 | $11;
  $3 = $10;
  $11 = $45;
  $13 = $11;
  $11 = $48;
  $13 = $13 | $11;
  $12 = $1;
  $9 = $13 + $12 | 0;
  $10 = $2;
  $11 = $3;
  $14 = $10 + $11 | 0;
  $5 = $9;
  $14 = $9 >>> 0 < $13 >>> 0 ? $14 + 1 | 0 : $14;
  $6 = $14;
  $12 = $10;
  $13 = $1;
  $12 = ($14 | 0) == ($12 | 0) & $13 >>> 0 > $9 >>> 0 | $12 >>> 0 > $14 >>> 0;
  $10 = $4;
  $9 = $10;
  $13 = $20;
  $11 = $13 + $12 | 0;
  $9 = $11 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
  $2 = $11;
  $1 = $9;
  $9 = $30;
  $13 = $36;
  $10 = $33;
  $12 = $35;
  $3 = ($9 | 0) == ($13 | 0) & $10 >>> 0 > $12 >>> 0 | $9 >>> 0 > $13 >>> 0;
  $9 = $47;
  $10 = $13;
  $13 = $46;
  $9 = ($9 | 0) == ($10 | 0) & $12 >>> 0 > $13 >>> 0 | $9 >>> 0 < $10 >>> 0;
  $13 = $3;
  $14 = $9 + $13 | 0;
  $11 = 0;
  $11 = $9 >>> 0 > $14 >>> 0 ? 1 : $11;
  $9 = $14;
  $12 = $5;
  $10 = $9 + $12 | 0;
  $13 = $11;
  $11 = $6;
  $14 = $13 + $11 | 0;
  $3 = $10;
  $14 = $9 >>> 0 > $10 >>> 0 ? $14 + 1 | 0 : $14;
  $4 = $14;
  $12 = $11;
  $9 = $5;
  $12 = ($14 | 0) == ($12 | 0) & $9 >>> 0 > $10 >>> 0 | $12 >>> 0 > $14 >>> 0;
  $11 = $1;
  $10 = $11;
  $9 = $2;
  $13 = $9 + $12 | 0;
  $10 = $13 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $1 = $13;
  $2 = $10;
  $9 = $10 & 65536;
  label$13 : {
   if ($9) {
    $18 = $18 + 1 | 0;
    break label$13;
   }
   $9 = $29;
   $5 = $9 >>> 31 | 0;
   $11 = 0;
   $6 = $11;
   $9 = $1;
   $1 = $9 << 1;
   $11 = $2;
   $10 = $11 << 1 | $9 >>> 31;
   $2 = $10;
   $10 = $4;
   $12 = $10 >>> 31 | 0;
   $9 = 0;
   $11 = $9;
   $10 = $1;
   $1 = $10 | $12;
   $9 = $2;
   $11 = $9 | $11;
   $2 = $11;
   $9 = $3;
   $3 = $9 << 1;
   $11 = $4;
   $10 = $11 << 1 | $9 >>> 31;
   $4 = $10;
   $10 = $8;
   $12 = $10 >>> 31 | 0;
   $9 = 0;
   $11 = $9;
   $10 = $3;
   $3 = $10 | $12;
   $9 = $4;
   $11 = $9 | $11;
   $4 = $11;
   $9 = $23;
   $23 = $9 << 1;
   $11 = $29;
   $10 = $11 << 1 | $9 >>> 31;
   $29 = $10;
   $11 = $7;
   $10 = $8;
   $9 = $10 << 1 | $11 >>> 31;
   $8 = $9;
   $10 = $5;
   $12 = $11 << 1;
   $7 = $10 | $12;
   $9 = $6;
   $11 = $8;
   $11 = $9 | $11;
   $8 = $11;
  }
  if (($18 | 0) >= 32767) {
   $9 = $19;
   $19 = $9;
   $11 = $15;
   $10 = $11 | 2147418112;
   $15 = $10;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  $10 = $15;
  $5 = $10;
  label$16 : {
   if (($18 | 0) <= 0) {
    $32 = 1 - $18 | 0;
    if ($32 >>> 0 >= 128) {
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    $10 = $29;
    $9 = $8;
    $18 = $18 + 127 | 0;
    __ashlti3($16 + 48 | 0, $23, $10, $7, $9, $18);
    $9 = $4;
    $10 = $2;
    __ashlti3($16 + 32 | 0, $3, $9, $1, $10, $18);
    $10 = $29;
    $9 = $8;
    __lshrti3($16 + 16 | 0, $23, $10, $7, $9, $32);
    $9 = $4;
    $10 = $2;
    __lshrti3($16, $3, $9, $1, $10, $32);
    $11 = $16;
    $10 = HEAP32[$11 + 48 >> 2];
    $2 = $10;
    $9 = HEAP32[$11 + 52 >> 2];
    $1 = $9;
    $9 = HEAP32[$11 + 56 >> 2];
    $12 = $9;
    $10 = HEAP32[$11 + 60 >> 2];
    $9 = $10;
    $10 = $1;
    $9 = $9 | $10;
    $11 = $2;
    $10 = $11 | $12;
    $3 = ($10 | 0) != 0 | ($9 | 0) != 0;
    $12 = $16;
    $10 = HEAP32[$12 + 32 >> 2];
    $2 = $10;
    $9 = HEAP32[$12 + 36 >> 2];
    $1 = $9;
    $9 = HEAP32[$12 + 16 >> 2];
    $11 = $9;
    $10 = HEAP32[$12 + 20 >> 2];
    $9 = $10;
    $10 = $1;
    $9 = $9 | $10;
    $10 = $3;
    $12 = $2;
    $11 = $11 | $12;
    $23 = $10 | $11;
    $29 = $9;
    $9 = $16;
    $12 = HEAP32[$9 + 40 >> 2];
    $2 = $12;
    $10 = HEAP32[$9 + 44 >> 2];
    $1 = $10;
    $10 = HEAP32[$9 + 24 >> 2];
    $12 = HEAP32[$9 + 28 >> 2];
    $9 = $2;
    $7 = $9 | $10;
    $10 = $12;
    $12 = $1;
    $10 = $10 | $12;
    $8 = $10;
    $12 = $16;
    $10 = HEAP32[$12 >> 2];
    $3 = $10;
    $9 = HEAP32[$12 + 4 >> 2];
    $4 = $9;
    $10 = HEAP32[$12 + 12 >> 2];
    $9 = HEAP32[$12 + 8 >> 2];
    $1 = $9;
    break label$16;
   }
   $10 = $2;
   $9 = $10 & 65535;
   $10 = $18;
   $12 = $10 << 16;
   $10 = $12;
   $10 = $10 | $9;
   $9 = $1;
   $11 = 0;
   $1 = $9 | $11;
  }
  $11 = $1;
  $12 = $49;
  $19 = $11 | $12;
  $9 = $10;
  $10 = $5;
  $9 = $9 | $10;
  $15 = $9;
  $9 = $29;
  $2 = !($9 | $23);
  $9 = $8;
  $1 = ($9 | 0) > -1;
  $11 = $7;
  $10 = $8;
  if (!(!$11 & ($10 | 0) == -2147483648 ? $2 : $1)) {
   $11 = $4;
   $12 = $3;
   $14 = $12 + 1 | 0;
   $13 = $14 >>> 0 < 1 ? $11 + 1 | 0 : $11;
   $1 = $14;
   $2 = $13;
   $12 = $11;
   $9 = $3;
   $11 = $14;
   $12 = ($13 | 0) == ($12 | 0) & $9 >>> 0 > $11 >>> 0 | $13 >>> 0 < $12 >>> 0;
   $11 = $15;
   $9 = $19;
   $10 = $9 + $12 | 0;
   $14 = $10 >>> 0 < $12 >>> 0 ? $11 + 1 | 0 : $11;
   $19 = $10;
   $15 = $14;
   break label$1;
  }
  $14 = $8;
  $9 = $14 ^ -2147483648;
  $11 = $9;
  $14 = $23;
  $12 = $7;
  $9 = $29;
  $11 = $9 | $11;
  if ($14 | $12 | $11) {
   $1 = $3;
   $11 = $4;
   $2 = $11;
   break label$1;
  }
  $14 = 0;
  $1 = $14;
  $11 = $4;
  $14 = $11;
  $11 = $3;
  $9 = $11;
  $12 = $9 & 1;
  $13 = $9 + $12 | 0;
  $9 = $1;
  $10 = $14 + $9 | 0;
  $1 = $13;
  $10 = $13 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
  $2 = $10;
  $11 = $14;
  $12 = $3;
  $11 = ($10 | 0) == ($11 | 0) & $13 >>> 0 < $12 >>> 0 | $10 >>> 0 < $11 >>> 0;
  $14 = $15;
  $13 = $14;
  $12 = $19;
  $9 = $11 + $12 | 0;
  $13 = $9 >>> 0 < $11 >>> 0 ? $13 + 1 | 0 : $13;
  $19 = $9;
  $15 = $13;
 }
 $12 = $0;
 HEAP32[$12 >> 2] = $1;
 $13 = $2;
 HEAP32[$12 + 4 >> 2] = $13;
 HEAP32[$12 + 8 >> 2] = $19;
 $13 = $15;
 HEAP32[$12 + 12 >> 2] = $13;
 __stack_pointer = $16 + 96 | 0;
}
function start_pass($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 if (HEAP32[$0 + 36 >> 2] >= 1) {
  $11 = HEAP32[$0 + 472 >> 2];
  $7 = HEAP32[$0 + 216 >> 2];
  while (1) {
   $6 = $3;
   $5 = $2;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               label$15 : {
                label$16 : {
                 label$17 : {
                  label$18 : {
                   label$19 : {
                    label$20 : {
                     label$21 : {
                      label$22 : {
                       label$23 : {
                        label$24 : {
                         label$25 : {
                          label$26 : {
                           label$27 : {
                            label$28 : {
                             label$29 : {
                              label$30 : {
                               label$31 : {
                                label$32 : {
                                 label$33 : {
                                  label$34 : {
                                   label$35 : {
                                    label$36 : {
                                     label$37 : {
                                      label$38 : {
                                       $8 = HEAP32[$7 + 36 >> 2];
                                       $1 = HEAP32[$7 + 40 >> 2] + ($8 << 8) | 0;
                                       if (($1 | 0) <= 2051) {
                                        if (($1 | 0) <= 1025) {
                                         label$41 : {
                                          switch ($1 - 513 | 0) {
                                          case 3:
                                           break label$11;
                                          case 0:
                                           break label$18;
                                          case 1:
                                           break label$38;
                                          case 2:
                                           break label$7;
                                          default:
                                           break label$41;
                                          }
                                         }
                                         $3 = 64;
                                         $2 = 0;
                                         label$42 : {
                                          switch ($1 - 257 | 0) {
                                          case 1:
                                           break label$10;
                                          case 0:
                                           break label$3;
                                          default:
                                           break label$42;
                                          }
                                         }
                                         switch ($1 - 771 | 0) {
                                         case 3:
                                          break label$12;
                                         case 0:
                                          break label$37;
                                         default:
                                          break label$7;
                                         }
                                        }
                                        if (($1 | 0) <= 1538) {
                                         label$44 : {
                                          switch ($1 - 1026 | 0) {
                                          case 6:
                                           break label$13;
                                          case 0:
                                           break label$19;
                                          case 2:
                                           break label$36;
                                          case 1:
                                          case 3:
                                          case 4:
                                          case 5:
                                           break label$7;
                                          default:
                                           break label$44;
                                          }
                                         }
                                         switch ($1 - 1285 | 0) {
                                         case 5:
                                          break label$14;
                                         case 0:
                                          break label$35;
                                         default:
                                          break label$7;
                                         }
                                        }
                                        label$45 : {
                                         switch ($1 - 1539 | 0) {
                                         case 9:
                                          break label$15;
                                         case 0:
                                          break label$20;
                                         case 3:
                                          break label$34;
                                         case 1:
                                         case 2:
                                         case 4:
                                         case 5:
                                         case 6:
                                         case 7:
                                         case 8:
                                          break label$7;
                                         default:
                                          break label$45;
                                         }
                                        }
                                        switch ($1 - 1799 | 0) {
                                        case 7:
                                         break label$16;
                                        case 0:
                                         break label$33;
                                        default:
                                         break label$7;
                                        }
                                       }
                                       if (($1 | 0) <= 3077) {
                                        if (($1 | 0) <= 2564) {
                                         switch ($1 - 2052 | 0) {
                                         case 12:
                                          break label$17;
                                         case 0:
                                          break label$21;
                                         case 1:
                                         case 2:
                                         case 3:
                                         case 5:
                                         case 6:
                                         case 7:
                                         case 8:
                                         case 9:
                                         case 10:
                                         case 11:
                                          break label$7;
                                         case 4:
                                          break label$9;
                                         default:
                                          break label$8;
                                         }
                                        }
                                        switch ($1 - 2565 | 0) {
                                        case 0:
                                         break label$22;
                                        case 5:
                                         break label$32;
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                         break label$7;
                                        default:
                                         break label$31;
                                        }
                                       }
                                       if (($1 | 0) <= 3590) {
                                        switch ($1 - 3078 | 0) {
                                        case 0:
                                         break label$23;
                                        case 6:
                                         break label$30;
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                        case 5:
                                         break label$7;
                                        default:
                                         break label$29;
                                        }
                                       }
                                       label$49 : {
                                        switch ($1 - 3591 | 0) {
                                        case 0:
                                         break label$24;
                                        case 7:
                                         break label$28;
                                        case 1:
                                        case 2:
                                        case 3:
                                        case 4:
                                        case 5:
                                        case 6:
                                         break label$7;
                                        default:
                                         break label$49;
                                        }
                                       }
                                       switch ($1 - 4104 | 0) {
                                       case 0:
                                        break label$25;
                                       case 8:
                                        break label$26;
                                       case 1:
                                       case 2:
                                       case 3:
                                       case 4:
                                       case 5:
                                       case 6:
                                       case 7:
                                        break label$7;
                                       default:
                                        break label$27;
                                       }
                                      }
                                      $3 = 65;
                                      $2 = 0;
                                      break label$3;
                                     }
                                     $3 = 66;
                                     break label$3;
                                    }
                                    $3 = 67;
                                    $2 = 0;
                                    break label$3;
                                   }
                                   $3 = 68;
                                   $2 = 0;
                                   break label$3;
                                  }
                                  $3 = 69;
                                  $2 = 0;
                                  break label$3;
                                 }
                                 $3 = 70;
                                 $2 = 0;
                                 break label$3;
                                }
                                $3 = 71;
                                $2 = 0;
                                break label$3;
                               }
                               if (($1 | 0) != 2827) {
                                break label$7;
                               }
                               $3 = 72;
                               $2 = 0;
                               break label$3;
                              }
                              $3 = 73;
                              $2 = 0;
                              break label$3;
                             }
                             if (($1 | 0) != 3341) {
                              break label$7;
                             }
                             $3 = 74;
                             $2 = 0;
                             break label$3;
                            }
                            $3 = 75;
                            $2 = 0;
                            break label$3;
                           }
                           if (($1 | 0) != 3855) {
                            break label$7;
                           }
                           $3 = 76;
                           $2 = 0;
                           break label$3;
                          }
                          $3 = 77;
                          $2 = 0;
                          break label$3;
                         }
                         $3 = 78;
                         $2 = 0;
                         break label$3;
                        }
                        $3 = 79;
                        $2 = 0;
                        break label$3;
                       }
                       $3 = 80;
                       $2 = 0;
                       break label$3;
                      }
                      $3 = 81;
                      $2 = 0;
                      break label$3;
                     }
                     $3 = 82;
                     $2 = 0;
                     break label$3;
                    }
                    $3 = 83;
                    $2 = 0;
                    break label$3;
                   }
                   $3 = 84;
                   $2 = 0;
                   break label$3;
                  }
                  $3 = 85;
                  $2 = 0;
                  break label$3;
                 }
                 $3 = 86;
                 $2 = 0;
                 break label$3;
                }
                $3 = 87;
                $2 = 0;
                break label$3;
               }
               $3 = 88;
               $2 = 0;
               break label$3;
              }
              $3 = 89;
              $2 = 0;
              break label$3;
             }
             $3 = 90;
             $2 = 0;
             break label$3;
            }
            $3 = 91;
            break label$3;
           }
           $3 = 92;
           $2 = 0;
           break label$3;
          }
          $3 = 93;
          break label$3;
         }
         $2 = HEAP32[$0 + 72 >> 2];
         if ($2 >>> 0 < 3) {
          break label$6;
         }
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 49;
         FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
         break label$5;
        }
        if (($1 | 0) == 2313) {
         break label$4;
        }
       }
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 24 >> 2] = $8;
       HEAP32[$1 + 20 >> 2] = 7;
       HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAP32[$7 + 40 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       break label$5;
      }
      $3 = HEAP32[($2 << 2) + 16752 >> 2];
      break label$3;
     }
     $3 = $6;
     $2 = $5;
     break label$3;
    }
    $3 = 94;
    $2 = 0;
   }
   $1 = ($10 << 2) + $11 | 0;
   HEAP32[$1 + 4 >> 2] = $3;
   label$50 : {
    if (!HEAP32[$7 + 52 >> 2]) {
     break label$50;
    }
    $5 = $1;
    $1 = $1 + 44 | 0;
    if (HEAP32[$1 >> 2] == ($2 | 0)) {
     break label$50;
    }
    $6 = HEAP32[$7 + 80 >> 2];
    if (!$6) {
     break label$50;
    }
    HEAP32[$5 + 44 >> 2] = $2;
    label$51 : {
     switch ($2 | 0) {
     case 0:
      $5 = HEAP32[$7 + 84 >> 2];
      $1 = 0;
      while (1) {
       HEAP32[($1 << 2) + $5 >> 2] = HEAPU16[($1 << 1) + $6 >> 1];
       $1 = $1 + 1 | 0;
       if (($1 | 0) != 64) {
        continue;
       }
       break;
      }
      break label$50;
     case 1:
      $8 = HEAP32[$7 + 84 >> 2];
      $1 = 0;
      while (1) {
       $5 = $1 << 1;
       HEAP32[($1 << 2) + $8 >> 2] = Math_imul(HEAP16[$5 + 16560 >> 1], HEAPU16[$5 + $6 >> 1]) + 2048 >> 12;
       $1 = $1 + 1 | 0;
       if (($1 | 0) != 64) {
        continue;
       }
       break;
      }
      break label$50;
     case 2:
      $5 = HEAP32[$7 + 84 >> 2];
      $8 = 0;
      $1 = 0;
      while (1) {
       $9 = HEAPF64[($8 << 3) + 16688 >> 3];
       HEAPF32[($1 << 2) + $5 >> 2] = $9 * +HEAPU16[($1 << 1) + $6 >> 1] * .125;
       $4 = $1 | 1;
       HEAPF32[($4 << 2) + $5 >> 2] = $9 * +HEAPU16[($4 << 1) + $6 >> 1] * 1.387039845 * .125;
       $4 = $1 | 2;
       HEAPF32[($4 << 2) + $5 >> 2] = $9 * +HEAPU16[($4 << 1) + $6 >> 1] * 1.306562965 * .125;
       $4 = $1 | 3;
       HEAPF32[($4 << 2) + $5 >> 2] = $9 * +HEAPU16[($4 << 1) + $6 >> 1] * 1.175875602 * .125;
       $4 = $1 | 4;
       HEAPF32[($4 << 2) + $5 >> 2] = $9 * +HEAPU16[($4 << 1) + $6 >> 1] * .125;
       $4 = $1 | 5;
       HEAPF32[($4 << 2) + $5 >> 2] = $9 * +HEAPU16[($4 << 1) + $6 >> 1] * .785694958 * .125;
       $4 = $1 | 6;
       HEAPF32[($4 << 2) + $5 >> 2] = $9 * +HEAPU16[($4 << 1) + $6 >> 1] * .5411961 * .125;
       $4 = $1 | 7;
       HEAPF32[($4 << 2) + $5 >> 2] = $9 * +HEAPU16[($4 << 1) + $6 >> 1] * .275899379 * .125;
       $1 = $1 + 8 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != 8) {
        continue;
       }
       break;
      }
      break label$50;
     default:
      break label$51;
     }
    }
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 49;
    FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
   }
   $7 = $7 + 88 | 0;
   $10 = $10 + 1 | 0;
   if (($10 | 0) < HEAP32[$0 + 36 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function printf_core($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $7 = __stack_pointer - 80 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 76 >> 2] = $1;
 $22 = $7 + 55 | 0;
 $20 = $7 + 56 | 0;
 $1 = 0;
 label$1 : {
  label$2 : while (1) {
   label$3 : {
    if (($17 | 0) < 0) {
     break label$3;
    }
    if ((2147483647 - $17 | 0) < ($1 | 0)) {
     wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 61, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $17 = -1;
     break label$3;
    }
    $17 = $1 + $17 | 0;
   }
   label$5 : {
    label$7 : {
     label$8 : {
      $14 = HEAP32[$7 + 76 >> 2];
      $1 = $14;
      $8 = HEAPU8[$1 | 0];
      if ($8) {
       while (1) {
        label$11 : {
         $8 = $8 & 255;
         label$12 : {
          if (!$8) {
           $8 = $1;
           break label$12;
          }
          if (($8 | 0) != 37) {
           break label$11;
          }
          $8 = $1;
          while (1) {
           if (HEAPU8[$1 + 1 | 0] != 37) {
            break label$12;
           }
           $9 = $1 + 2 | 0;
           HEAP32[$7 + 76 >> 2] = $9;
           $8 = $8 + 1 | 0;
           $12 = HEAPU8[$1 + 2 | 0];
           $1 = $9;
           if (($12 | 0) == 37) {
            continue;
           }
           break;
          }
         }
         $1 = $8 - $14 | 0;
         if ($0) {
          out($0, $14, $1);
         }
         if ($1) {
          continue label$2;
         }
         $1 = isdigit(HEAP8[HEAP32[$7 + 76 >> 2] + 1 | 0]);
         $10 = $7;
         $8 = HEAP32[$7 + 76 >> 2];
         label$16 : {
          if (!(!$1 | HEAPU8[$8 + 2 | 0] != 36)) {
           $21 = 1;
           $1 = $8 + 3 | 0;
           $19 = HEAP8[$8 + 1 | 0] - 48 | 0;
           break label$16;
          }
          $1 = $8 + 1 | 0;
          $19 = -1;
         }
         HEAP32[$10 + 76 >> 2] = $1;
         $18 = 0;
         $12 = HEAP8[$1 | 0];
         $9 = $12 - 32 | 0;
         label$18 : {
          if ($9 >>> 0 > 31) {
           $8 = $1;
           break label$18;
          }
          $8 = $1;
          $9 = 1 << $9;
          if (!($9 & 75913)) {
           break label$18;
          }
          while (1) {
           $8 = $1 + 1 | 0;
           HEAP32[$7 + 76 >> 2] = $8;
           $18 = $9 | $18;
           $12 = HEAP8[$1 + 1 | 0];
           $9 = $12 - 32 | 0;
           if ($9 >>> 0 >= 32) {
            break label$18;
           }
           $1 = $8;
           $9 = 1 << $9;
           if ($9 & 75913) {
            continue;
           }
           break;
          }
         }
         label$21 : {
          if (($12 | 0) == 42) {
           $10 = $7;
           label$23 : {
            label$24 : {
             if (!isdigit(HEAP8[$8 + 1 | 0])) {
              break label$24;
             }
             $8 = HEAP32[$7 + 76 >> 2];
             if (HEAPU8[$8 + 2 | 0] != 36) {
              break label$24;
             }
             HEAP32[((HEAP8[$8 + 1 | 0] << 2) + $4 | 0) - 192 >> 2] = 10;
             $15 = HEAP32[((HEAP8[$8 + 1 | 0] << 3) + $3 | 0) - 384 >> 2];
             $21 = 1;
             $1 = $8 + 3 | 0;
             break label$23;
            }
            if ($21) {
             break label$8;
            }
            $21 = 0;
            $15 = 0;
            if ($0) {
             $1 = HEAP32[$2 >> 2];
             HEAP32[$2 >> 2] = $1 + 4;
             $15 = HEAP32[$1 >> 2];
            }
            $1 = HEAP32[$7 + 76 >> 2] + 1 | 0;
           }
           HEAP32[$10 + 76 >> 2] = $1;
           if (($15 | 0) > -1) {
            break label$21;
           }
           $15 = 0 - $15 | 0;
           $18 = $18 | 8192;
           break label$21;
          }
          $15 = getint($7 + 76 | 0);
          if (($15 | 0) < 0) {
           break label$8;
          }
          $1 = HEAP32[$7 + 76 >> 2];
         }
         $13 = -1;
         label$26 : {
          if (HEAPU8[$1 | 0] != 46) {
           break label$26;
          }
          if (HEAPU8[$1 + 1 | 0] == 42) {
           label$28 : {
            if (!isdigit(HEAP8[$1 + 2 | 0])) {
             break label$28;
            }
            $1 = HEAP32[$7 + 76 >> 2];
            if (HEAPU8[$1 + 3 | 0] != 36) {
             break label$28;
            }
            HEAP32[((HEAP8[$1 + 2 | 0] << 2) + $4 | 0) - 192 >> 2] = 10;
            $13 = HEAP32[((HEAP8[$1 + 2 | 0] << 3) + $3 | 0) - 384 >> 2];
            $1 = $1 + 4 | 0;
            HEAP32[$7 + 76 >> 2] = $1;
            break label$26;
           }
           if ($21) {
            break label$8;
           }
           if ($0) {
            $1 = HEAP32[$2 >> 2];
            HEAP32[$2 >> 2] = $1 + 4;
            $13 = HEAP32[$1 >> 2];
           } else {
            $13 = 0;
           }
           $1 = HEAP32[$7 + 76 >> 2] + 2 | 0;
           HEAP32[$7 + 76 >> 2] = $1;
           break label$26;
          }
          HEAP32[$7 + 76 >> 2] = $1 + 1;
          $13 = getint($7 + 76 | 0);
          $1 = HEAP32[$7 + 76 >> 2];
         }
         $8 = 0;
         while (1) {
          $9 = $8;
          $16 = -1;
          if (HEAP8[$1 | 0] - 65 >>> 0 > 57) {
           break label$1;
          }
          $12 = $1 + 1 | 0;
          HEAP32[$7 + 76 >> 2] = $12;
          $8 = HEAP8[$1 | 0];
          $1 = $12;
          $8 = HEAPU8[(Math_imul($9, 58) + $8 | 0) + 19791 | 0];
          if ($8 - 1 >>> 0 < 8) {
           continue;
          }
          break;
         }
         label$32 : {
          label$33 : {
           if (($8 | 0) != 19) {
            if (!$8) {
             break label$1;
            }
            if (($19 | 0) >= 0) {
             HEAP32[($19 << 2) + $4 >> 2] = $8;
             $10 = ($19 << 3) + $3 | 0;
             $11 = HEAP32[$10 >> 2];
             $10 = HEAP32[$10 + 4 >> 2];
             HEAP32[$7 + 64 >> 2] = $11;
             HEAP32[$7 + 68 >> 2] = $10;
             break label$33;
            }
            if (!$0) {
             break label$5;
            }
            pop_arg($7 - -64 | 0, $8, $2, $6);
            $12 = HEAP32[$7 + 76 >> 2];
            break label$32;
           }
           if (($19 | 0) > -1) {
            break label$1;
           }
          }
          $1 = 0;
          if (!$0) {
           continue label$2;
          }
         }
         $11 = $18 & -65537;
         $8 = $18 & 8192 ? $11 : $18;
         $16 = 0;
         $19 = 19832;
         $18 = $20;
         label$36 : {
          label$37 : {
           label$38 : {
            label$39 : {
             label$40 : {
              label$41 : {
               label$42 : {
                label$43 : {
                 label$44 : {
                  label$45 : {
                   label$46 : {
                    label$47 : {
                     label$48 : {
                      label$49 : {
                       label$50 : {
                        label$51 : {
                         $1 = HEAP8[$12 - 1 | 0];
                         $1 = $9 ? ($1 & 15) == 3 ? $1 & -33 : $1 : $1;
                         switch ($1 - 88 | 0) {
                         case 11:
                          break label$36;
                         case 9:
                         case 13:
                         case 14:
                         case 15:
                          break label$37;
                         case 27:
                          break label$42;
                         case 12:
                         case 17:
                          break label$45;
                         case 23:
                          break label$46;
                         case 0:
                         case 32:
                          break label$47;
                         case 24:
                          break label$48;
                         case 22:
                          break label$49;
                         case 29:
                          break label$50;
                         case 1:
                         case 2:
                         case 3:
                         case 4:
                         case 5:
                         case 6:
                         case 7:
                         case 8:
                         case 10:
                         case 16:
                         case 18:
                         case 19:
                         case 20:
                         case 21:
                         case 25:
                         case 26:
                         case 28:
                         case 30:
                         case 31:
                          break label$7;
                         default:
                          break label$51;
                         }
                        }
                        label$52 : {
                         switch ($1 - 65 | 0) {
                         case 0:
                         case 4:
                         case 5:
                         case 6:
                          break label$37;
                         case 2:
                          break label$40;
                         case 1:
                         case 3:
                          break label$7;
                         default:
                          break label$52;
                         }
                        }
                        if (($1 | 0) == 83) {
                         break label$41;
                        }
                        break label$7;
                       }
                       $10 = HEAP32[$7 + 64 >> 2];
                       $9 = $10;
                       $11 = HEAP32[$7 + 68 >> 2];
                       $1 = $11;
                       $19 = 19832;
                       break label$44;
                      }
                      $1 = 0;
                      label$53 : {
                       switch ($9 & 255) {
                       case 0:
                        HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $17;
                        continue label$2;
                       case 1:
                        HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $17;
                        continue label$2;
                       case 2:
                        $10 = $17;
                        $11 = $10 >> 31;
                        $10 = HEAP32[$7 + 64 >> 2];
                        HEAP32[$10 >> 2] = $17;
                        HEAP32[$10 + 4 >> 2] = $11;
                        continue label$2;
                       case 3:
                        HEAP16[HEAP32[$7 + 64 >> 2] >> 1] = $17;
                        continue label$2;
                       case 4:
                        HEAP8[HEAP32[$7 + 64 >> 2]] = $17;
                        continue label$2;
                       case 6:
                        HEAP32[HEAP32[$7 + 64 >> 2] >> 2] = $17;
                        continue label$2;
                       case 7:
                        break label$53;
                       default:
                        continue label$2;
                       }
                      }
                      $10 = $17;
                      $11 = $10 >> 31;
                      $10 = HEAP32[$7 + 64 >> 2];
                      HEAP32[$10 >> 2] = $17;
                      HEAP32[$10 + 4 >> 2] = $11;
                      continue label$2;
                     }
                     $13 = $13 >>> 0 > 8 ? $13 : 8;
                     $8 = $8 | 8;
                     $1 = 120;
                    }
                    $11 = HEAP32[$7 + 64 >> 2];
                    $10 = HEAP32[$7 + 68 >> 2];
                    $14 = fmt_x($11, $10, $20, $1 & 32);
                    if (!($8 & 8)) {
                     break label$43;
                    }
                    $10 = HEAP32[$7 + 64 >> 2];
                    $11 = HEAP32[$7 + 68 >> 2];
                    if (!($10 | $11)) {
                     break label$43;
                    }
                    $19 = ($1 >>> 4 | 0) + 19832 | 0;
                    $16 = 2;
                    break label$43;
                   }
                   $11 = HEAP32[$7 + 64 >> 2];
                   $10 = HEAP32[$7 + 68 >> 2];
                   $14 = fmt_o($11, $10, $20);
                   if (!($8 & 8)) {
                    break label$43;
                   }
                   $1 = $20 - $14 | 0;
                   $13 = ($1 | 0) < ($13 | 0) ? $13 : $1 + 1 | 0;
                   break label$43;
                  }
                  $11 = HEAP32[$7 + 68 >> 2];
                  $1 = $11;
                  $10 = HEAP32[$7 + 64 >> 2];
                  $9 = $10;
                  if (($11 | 0) < -1 ? 1 : ($11 | 0) <= -1) {
                   $10 = $9;
                   $9 = 0 - $10 | 0;
                   $11 = $1;
                   $10 = $11 + (($10 | 0) != 0) | 0;
                   $10 = 0 - $10 | 0;
                   $1 = $10;
                   HEAP32[$7 + 64 >> 2] = $9;
                   HEAP32[$7 + 68 >> 2] = $10;
                   $16 = 1;
                   $19 = 19832;
                   break label$44;
                  }
                  if ($8 & 2048) {
                   $16 = 1;
                   $19 = 19833;
                   break label$44;
                  }
                  $16 = $8 & 1;
                  $19 = $16 ? 19834 : 19832;
                 }
                 $10 = $1;
                 $14 = fmt_u($9, $10, $20);
                }
                $8 = ($13 | 0) > -1 ? $8 & -65537 : $8;
                $11 = HEAP32[$7 + 68 >> 2];
                $1 = $11;
                $10 = HEAP32[$7 + 64 >> 2];
                $9 = $10;
                if (!(!!($11 | $10) | $13)) {
                 $13 = 0;
                 $14 = $20;
                 break label$7;
                }
                $11 = $1;
                $1 = !($11 | $9) + ($20 - $14 | 0) | 0;
                $13 = ($1 | 0) < ($13 | 0) ? $13 : $1;
                break label$7;
               }
               $1 = HEAP32[$7 + 64 >> 2];
               $14 = $1 ? $1 : 19842;
               $1 = memchr($14, 0, $13);
               $18 = $1 ? $1 : $13 + $14 | 0;
               $8 = $11;
               $13 = $1 ? $1 - $14 | 0 : $13;
               break label$7;
              }
              $9 = HEAP32[$7 + 64 >> 2];
              if ($13) {
               break label$39;
              }
              $1 = 0;
              pad($0, 32, $15, 0, $8);
              break label$38;
             }
             HEAP32[$7 + 12 >> 2] = 0;
             $11 = HEAP32[$7 + 64 >> 2];
             HEAP32[$7 + 8 >> 2] = $11;
             HEAP32[$7 + 64 >> 2] = $7 + 8;
             $13 = -1;
             $9 = $7 + 8 | 0;
            }
            $1 = 0;
            label$64 : {
             while (1) {
              $12 = HEAP32[$9 >> 2];
              if (!$12) {
               break label$64;
              }
              $12 = wctomb($7 + 4 | 0, $12);
              $14 = ($12 | 0) < 0;
              if (!($14 | $13 - $1 >>> 0 < $12 >>> 0)) {
               $9 = $9 + 4 | 0;
               $1 = $1 + $12 | 0;
               if ($13 >>> 0 > $1 >>> 0) {
                continue;
               }
               break label$64;
              }
              break;
             }
             $16 = -1;
             if ($14) {
              break label$1;
             }
            }
            pad($0, 32, $15, $1, $8);
            if (!$1) {
             $1 = 0;
             break label$38;
            }
            $12 = 0;
            $9 = HEAP32[$7 + 64 >> 2];
            while (1) {
             $14 = HEAP32[$9 >> 2];
             if (!$14) {
              break label$38;
             }
             $14 = wctomb($7 + 4 | 0, $14);
             $12 = $12 + $14 | 0;
             if (($12 | 0) > ($1 | 0)) {
              break label$38;
             }
             out($0, $7 + 4 | 0, $14);
             $9 = $9 + 4 | 0;
             if ($1 >>> 0 > $12 >>> 0) {
              continue;
             }
             break;
            }
           }
           pad($0, 32, $15, $1, $8 ^ 8192);
           $1 = ($1 | 0) < ($15 | 0) ? $15 : $1;
           continue label$2;
          }
          $1 = FUNCTION_TABLE[$5 | 0]($0, HEAPF64[$7 + 64 >> 3], $15, $13, $8, $1) | 0;
          continue label$2;
         }
         $10 = HEAP32[$7 + 64 >> 2];
         HEAP8[$7 + 55 | 0] = $10;
         $13 = 1;
         $14 = $22;
         $8 = $11;
         break label$7;
        }
        $9 = $1 + 1 | 0;
        HEAP32[$7 + 76 >> 2] = $9;
        $8 = HEAPU8[$1 + 1 | 0];
        $1 = $9;
        continue;
       }
      }
      $16 = $17;
      if ($0) {
       break label$1;
      }
      if (!$21) {
       break label$5;
      }
      $1 = 1;
      while (1) {
       $8 = HEAP32[($1 << 2) + $4 >> 2];
       if ($8) {
        pop_arg(($1 << 3) + $3 | 0, $8, $2, $6);
        $16 = 1;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 10) {
         continue;
        }
        break label$1;
       }
       break;
      }
      $16 = 1;
      if ($1 >>> 0 >= 10) {
       break label$1;
      }
      while (1) {
       if (HEAP32[($1 << 2) + $4 >> 2]) {
        break label$8;
       }
       $1 = $1 + 1 | 0;
       if (($1 | 0) != 10) {
        continue;
       }
       break;
      }
      break label$1;
     }
     $16 = -1;
     break label$1;
    }
    $12 = $18 - $14 | 0;
    $18 = ($13 | 0) < ($12 | 0) ? $12 : $13;
    $9 = $18 + $16 | 0;
    $1 = ($9 | 0) > ($15 | 0) ? $9 : $15;
    pad($0, 32, $1, $9, $8);
    out($0, $19, $16);
    pad($0, 48, $1, $9, $8 ^ 65536);
    pad($0, 48, $18, $12, 0);
    out($0, $14, $12);
    pad($0, 32, $1, $9, $8 ^ 8192);
    continue;
   }
   break;
  }
  $16 = 0;
 }
 __stack_pointer = $7 + 80 | 0;
 return $16;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 78)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
  if ($1) {
   HEAP32[$1 + 4 >> 2] = $3;
  }
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 79)) {
    if (!$1) {
     break label$3;
    }
    HEAP8[$1 + 8 | 0] = 2;
    break label$3;
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 82)) {
    if (!$1) {
     break label$3;
    }
    HEAP8[$1 + 8 | 0] = 1;
    break label$3;
   }
   if (!$1) {
    break label$3;
   }
   HEAP8[$1 + 8 | 0] = 0;
  }
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 32 >> 2] = $2 + 44;
  HEAP32[$2 + 24 >> 2] = $2 + 40;
  $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 23026);
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2)) {
   wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0, 23029), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
  }
  $3 = $0 + 148 | 0;
  label$7 : {
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76);
     if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 77)) {
      if (HEAP32[$2 + 40 >> 2]) {
       continue;
      }
      break label$7;
     }
     label$11 : {
      label$12 : {
       label$13 : {
        label$14 : {
         label$15 : {
          label$16 : {
           $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) & 255;
           switch ($1 - 67 | 0) {
           case 2:
           case 3:
           case 4:
           case 5:
            break label$11;
           case 0:
            break label$12;
           case 1:
            break label$14;
           case 6:
            break label$15;
           default:
            break label$16;
           }
          }
          label$17 : {
           switch ($1 - 83 | 0) {
           case 0:
            break label$13;
           case 1:
            break label$17;
           default:
            break label$11;
           }
          }
          if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0)))) {
           break label$7;
          }
          $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $2 + 40 | 0);
          continue;
         }
         $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), HEAP32[$2 + 44 >> 2] != 0);
         HEAP32[$2 + 12 >> 2] = $1;
         if (!$1 | !HEAP32[$2 + 40 >> 2]) {
          break label$7;
         }
         wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 40 | 0, $2 + 12 | 0), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
         $1 = HEAP32[$2 + 44 >> 2];
         if ($1) {
          HEAP8[$1 + 1 | 0] = 1;
         }
         $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $2 + 40 | 0);
         continue;
        }
        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
        if (($1 | 0) == 67) {
         break label$11;
        }
        $1 = $1 & 255;
        if (($1 | 0) != 84 ? ($1 | 0) != 116 : 0) {
         break label$12;
        }
        if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0)))) {
         break label$7;
        }
        $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $2 + 40 | 0);
        continue;
       }
       if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) == 116) {
        break label$11;
       }
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
       HEAP32[$2 + 12 >> 2] = $1;
       if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $1)) {
        break label$7;
       }
       if (HEAP32[$2 + 40 >> 2] == ($1 | 0)) {
        continue;
       }
       $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $2 + 12 | 0);
       continue;
      }
      if (!HEAP32[$2 + 40 >> 2]) {
       break label$1;
      }
      $4 = $2 + 24 | 0;
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($4, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($1, $2 + 40 | 0, HEAP32[$2 + 44 >> 2]))) {
       break label$1;
      }
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($1, HEAP32[$2 + 40 >> 2]);
      HEAP32[$2 + 40 >> 2] = $1;
      if (!$1) {
       break label$1;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $2 + 40 | 0);
      continue;
     }
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($2 + 24 | 0, $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), HEAP32[$2 + 44 >> 2]))) {
      break label$7;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $2 + 40 | 0);
     continue;
    }
    break;
   }
   if (!HEAP32[$2 + 40 >> 2]) {
    break label$1;
   }
   if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___empty_28_29_20const($3)) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___pop_back_28_29($3);
   $5 = HEAP32[$2 + 40 >> 2];
  }
 }
 __stack_pointer = $2 + 48 | 0;
 return $5;
}
function std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20bool__20std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____emplace_unique_key_args_int_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28int_20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $7 = __stack_pointer - 32 | 0;
 __stack_pointer = $7;
 $9 = std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true___operator_28_29_28int_20const__29_20const(std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___hash_function_28_29($1), $2);
 $8 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___bucket_count_28_29_20const($1);
 HEAP8[$7 + 31 | 0] = 0;
 label$1 : {
  label$2 : {
   if (!$8) {
    break label$2;
   }
   $10 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($9, $8);
   $6 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($1, $10) >> 2];
   if (!$6) {
    break label$2;
   }
   while (1) {
    $6 = HEAP32[$6 >> 2];
    if (!$6) {
     break label$2;
    }
    if ((std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const($6) | 0) != ($9 | 0)) {
     if ((std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const($6), $8) | 0) != ($10 | 0)) {
      break label$2;
     }
    }
    if (!std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arIset__20const__2c_20int_20const__29_20const(std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___key_eq_28_29($1), std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________upcast_28_29($6) + 8 | 0, $2)) {
     continue;
    }
    break;
   }
   break label$1;
  }
  std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__20std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____construct_node_hash_std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28unsigned_20long_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($7 + 16 | 0, $1, $9, std____2__piecewise_construct_t_20const__20std____2__forward_std____2__piecewise_construct_t_20const___28std____2__remove_reference_std____2__piecewise_construct_t_20const____type__29($3), std____2__tuple_int_20const_____20std____2__forward_std____2__tuple_int_20const___20__28std____2__remove_reference_std____2__tuple_int_20const___20___type__29($4), std____2__tuple_____20std____2__forward_std____2__tuple___20__28std____2__remove_reference_std____2__tuple___20___type__29($5));
  $3 = $1;
  $6 = HEAP32[std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___size_28_29($1) >> 2];
  $11 = Math_fround($6 + 1 >>> 0);
  $2 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___max_load_factor_28_29($1);
  if (!($11 > Math_fround(HEAPF32[$2 >> 2] * Math_fround($8 >>> 0)) ^ 1 ? $8 : 0)) {
   wasm2js_i32$0 = $7, wasm2js_i32$1 = std____2____is_hash_power2_28unsigned_20long_29($8) ^ 1 | $8 << 1, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   $2 = $7;
   $11 = ceil_28float_29(Math_fround(Math_fround(HEAP32[std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___size_28_29($1) >> 2] + 1 >>> 0) / HEAPF32[std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___max_load_factor_28_29($1) >> 2]));
   label$7 : {
    if ($11 < Math_fround(4294967296) & $11 >= Math_fround(0)) {
     $6 = ~~$11 >>> 0;
     break label$7;
    }
    $6 = 0;
   }
   HEAP32[$2 + 8 >> 2] = $6;
   std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___rehash_28unsigned_20long_29($1, HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($7 + 12 | 0, $7 + 8 | 0) >> 2]);
   $8 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___bucket_count_28_29_20const($1);
   $10 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($9, $8);
  }
  $6 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($3, $10) >> 2];
  label$9 : {
   if (!$6) {
    $6 = std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________ptr_28_29(std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___first_28_29($1 + 8 | 0));
    $9 = HEAP32[$6 >> 2];
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___operator___28_29_20const($7 + 16 | 0), wasm2js_i32$1 = $9, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    wasm2js_i32$0 = $6, wasm2js_i32$1 = std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________ptr_28_29(std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___get_28_29_20const($7 + 16 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($1, $10), wasm2js_i32$1 = $6, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    if (!HEAP32[std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___operator___28_29_20const($7 + 16 | 0) >> 2]) {
     break label$9;
    }
    $6 = std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________ptr_28_29(std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___get_28_29_20const($7 + 16 | 0));
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($1, std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const(HEAP32[std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___operator___28_29_20const($7 + 16 | 0) >> 2]), $8)), wasm2js_i32$1 = $6, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$9;
   }
   $8 = HEAP32[$6 >> 2];
   wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___operator___28_29_20const($7 + 16 | 0), wasm2js_i32$1 = $8, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $6, wasm2js_i32$1 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___get_28_29_20const($7 + 16 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  }
  $6 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___release_28_29($7 + 16 | 0);
  $1 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___size_28_29($1);
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
  HEAP8[$7 + 31 | 0] = 1;
  std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20____unique_ptr_28_29($7 + 16 | 0);
 }
 std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20bool___pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20bool__2c_20false__28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20bool__29($0, std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_iterator_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($7 + 16 | 0, $6), $7 + 31 | 0);
 __stack_pointer = $7 + 32 | 0;
}
function hexfloat($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = __stack_pointer - 432 | 0;
 __stack_pointer = $6;
 $13 = HEAP32[$1 + 4 >> 2];
 label$1 : {
  if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $13 + 1;
   $13 = HEAPU8[$13 | 0];
   break label$1;
  }
  $13 = __shgetc($1);
 }
 label$3 : {
  label$4 : {
   while (1) {
    label$6 : {
     if (($13 | 0) != 48) {
      if (($13 | 0) != 46) {
       break label$3;
      }
      $13 = HEAP32[$1 + 4 >> 2];
      if ($13 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
       break label$6;
      }
      HEAP32[$1 + 4 >> 2] = $13 + 1;
      $13 = HEAPU8[$13 | 0];
      break label$4;
     }
     $13 = HEAP32[$1 + 4 >> 2];
     if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      $8 = 1;
      HEAP32[$1 + 4 >> 2] = $13 + 1;
      $13 = HEAPU8[$13 | 0];
      continue;
     }
     $8 = 1;
     $13 = __shgetc($1);
     continue;
    }
    break;
   }
   $13 = __shgetc($1);
  }
  $28 = 1;
  if (($13 | 0) != 48) {
   break label$3;
  }
  while (1) {
   $13 = HEAP32[$1 + 4 >> 2];
   label$10 : {
    if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $13 + 1;
     $13 = HEAPU8[$13 | 0];
     break label$10;
    }
    $13 = __shgetc($1);
   }
   $11 = $23;
   $12 = $11 - 1 | 0;
   $23 = $12;
   $8 = $24;
   $7 = $11 >>> 0 < 1;
   $7 = $8 - $7 | 0;
   $24 = $7;
   if (($13 | 0) == 48) {
    continue;
   }
   break;
  }
  $8 = 1;
 }
 $17 = 1073676288;
 while (1) {
  label$13 : {
   $7 = $13 | 32;
   label$14 : {
    label$15 : {
     $9 = $13 - 48 | 0;
     if ($9 >>> 0 < 10) {
      break label$15;
     }
     if ($7 - 97 >>> 0 > 5 ? ($13 | 0) != 46 : 0) {
      break label$13;
     }
     if (($13 | 0) != 46) {
      break label$15;
     }
     if ($28) {
      break label$13;
     }
     $28 = 1;
     $23 = $14;
     $7 = $18;
     $24 = $7;
     break label$14;
    }
    $13 = ($13 | 0) > 57 ? $7 - 87 | 0 : $9;
    $8 = $14;
    $7 = $18;
    label$16 : {
     if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? $8 >>> 0 <= 7 : 0) {
      $22 = ($22 << 4) + $13 | 0;
      break label$16;
     }
     $10 = $14;
     $8 = $18;
     if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $10 >>> 0 <= 28 : 0) {
      __floatsitf($6 + 48 | 0, $13);
      $10 = $25;
      $8 = $17;
      __multf3($6 + 32 | 0, $26, $10, $19, $8, 0, 0, 0, 1073414144);
      $7 = HEAP32[$6 + 32 >> 2];
      $26 = $7;
      $11 = HEAP32[$6 + 36 >> 2];
      $25 = $11;
      $11 = HEAP32[$6 + 40 >> 2];
      $19 = $11;
      $7 = HEAP32[$6 + 44 >> 2];
      $17 = $7;
      $7 = HEAP32[$6 + 48 >> 2];
      $9 = $7;
      $11 = HEAP32[$6 + 52 >> 2];
      $8 = $11;
      $11 = HEAP32[$6 + 56 >> 2];
      $12 = $11;
      $7 = HEAP32[$6 + 60 >> 2];
      $10 = $7;
      $7 = $25;
      $11 = $17;
      __multf3($6 + 16 | 0, $26, $7, $19, $11, $9, $8, $12, $10);
      $10 = HEAP32[$6 + 16 >> 2];
      $9 = $10;
      $8 = HEAP32[$6 + 20 >> 2];
      $11 = $8;
      $8 = HEAP32[$6 + 24 >> 2];
      $12 = $8;
      $10 = HEAP32[$6 + 28 >> 2];
      $7 = $10;
      $10 = $16;
      $8 = $21;
      __addtf3($6, $15, $10, $20, $8, $9, $11, $12, $7);
      $7 = HEAP32[$6 + 8 >> 2];
      $20 = $7;
      $11 = HEAP32[$6 + 12 >> 2];
      $21 = $11;
      $11 = HEAP32[$6 >> 2];
      $15 = $11;
      $7 = HEAP32[$6 + 4 >> 2];
      $16 = $7;
      break label$16;
     }
     if (!$13 | $31) {
      break label$16;
     }
     $7 = $25;
     $11 = $17;
     __multf3($6 + 80 | 0, $26, $7, $19, $11, 0, 0, 0, 1073610752);
     $10 = HEAP32[$6 + 80 >> 2];
     $9 = $10;
     $8 = HEAP32[$6 + 84 >> 2];
     $11 = $8;
     $8 = HEAP32[$6 + 88 >> 2];
     $12 = $8;
     $10 = HEAP32[$6 + 92 >> 2];
     $7 = $10;
     $10 = $16;
     $8 = $21;
     __addtf3($6 - -64 | 0, $15, $10, $20, $8, $9, $11, $12, $7);
     $7 = HEAP32[$6 + 72 >> 2];
     $20 = $7;
     $11 = HEAP32[$6 + 76 >> 2];
     $21 = $11;
     $31 = 1;
     $11 = HEAP32[$6 + 64 >> 2];
     $15 = $11;
     $7 = HEAP32[$6 + 68 >> 2];
     $16 = $7;
    }
    $7 = $18;
    $8 = $14;
    $9 = $8 + 1 | 0;
    $12 = $9 >>> 0 < 1 ? $7 + 1 | 0 : $7;
    $14 = $9;
    $18 = $12;
    $8 = 1;
   }
   $13 = HEAP32[$1 + 4 >> 2];
   if ($13 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
    HEAP32[$1 + 4 >> 2] = $13 + 1;
    $13 = HEAPU8[$13 | 0];
    continue;
   }
   $13 = __shgetc($1);
   continue;
  }
  break;
 }
 label$20 : {
  label$21 : {
   label$22 : {
    if (!$8) {
     if (!HEAP32[$1 + 104 >> 2]) {
      if ($5) {
       break label$21;
      }
      break label$22;
     }
     $13 = HEAP32[$1 + 4 >> 2];
     HEAP32[$1 + 4 >> 2] = $13 - 1;
     if (!$5) {
      break label$22;
     }
     HEAP32[$1 + 4 >> 2] = $13 - 2;
     if (!$28) {
      break label$21;
     }
     HEAP32[$1 + 4 >> 2] = $13 - 3;
     break label$21;
    }
    $7 = $14;
    $12 = $18;
    if (($12 | 0) < 0 ? 1 : ($12 | 0) <= 0 ? $7 >>> 0 <= 7 : 0) {
     $19 = $14;
     $7 = $18;
     $17 = $7;
     while (1) {
      $22 = $22 << 4;
      $7 = $17;
      $10 = $19;
      $11 = $10 + 1 | 0;
      $9 = $11 >>> 0 < 1 ? $7 + 1 | 0 : $7;
      $19 = $11;
      $17 = $9;
      $7 = $11;
      if (($7 | 0) != 8 | $9) {
       continue;
      }
      break;
     }
    }
    label$27 : {
     if (($13 & -33) == 80) {
      $7 = scanexp($1, $5);
      $19 = $7;
      $9 = i64toi32_i32$HIGH_BITS;
      $17 = $9;
      $8 = $19;
      if ($8 | ($9 | 0) != -2147483648) {
       break label$27;
      }
      if ($5) {
       $19 = 0;
       $17 = 0;
       if (!HEAP32[$1 + 104 >> 2]) {
        break label$27;
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
       break label$27;
      }
      $15 = 0;
      $16 = 0;
      __shlim($1, 0, 0);
      $14 = 0;
      break label$20;
     }
     $19 = 0;
     $17 = 0;
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$27;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
    }
    if (!$22) {
     __extenddftf2($6 + 112 | 0, +($4 | 0) * 0);
     $8 = HEAP32[$6 + 112 >> 2];
     $15 = $8;
     $9 = HEAP32[$6 + 116 >> 2];
     $16 = $9;
     $8 = HEAP32[$6 + 124 >> 2];
     $27 = $8;
     $9 = HEAP32[$6 + 120 >> 2];
     $14 = $9;
     break label$20;
    }
    $12 = $28;
    $7 = $12 ? $23 : $14;
    $8 = $24;
    $9 = $18;
    $10 = $12 ? $8 : $9;
    $12 = $7;
    $7 = $10 << 2 | $7 >>> 30;
    $10 = $12 << 2;
    $12 = $17;
    $11 = $7 + $12 | 0;
    $8 = $19;
    $9 = $8 + $10 | 0;
    $7 = $9;
    $12 = $7 - 32 | 0;
    $14 = $12;
    $11 = $7 >>> 0 < $8 >>> 0 ? $11 + 1 | 0 : $11;
    $9 = $7 >>> 0 < 32;
    $9 = $11 - $9 | 0;
    $18 = $9;
    $8 = 0 - $3 | 0;
    $11 = $12;
    if (($9 | 0) > 0 ? 1 : ($9 | 0) >= 0 ? $8 >>> 0 < $11 >>> 0 : 0) {
     wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     __floatsitf($6 + 160 | 0, $4);
     $11 = HEAP32[$6 + 160 >> 2];
     $2 = $11;
     $11 = HEAP32[$6 + 172 >> 2];
     $1 = $11;
     $9 = HEAP32[$6 + 164 >> 2];
     $11 = $9;
     $9 = HEAP32[$6 + 168 >> 2];
     $3 = $9;
     $9 = $1;
     __multf3($6 + 144 | 0, $2, $11, $3, $9, -1, -1, -1, 2147418111);
     $7 = HEAP32[$6 + 144 >> 2];
     $2 = $7;
     $7 = HEAP32[$6 + 156 >> 2];
     $1 = $7;
     $8 = HEAP32[$6 + 148 >> 2];
     $7 = $8;
     $8 = HEAP32[$6 + 152 >> 2];
     $3 = $8;
     $8 = $1;
     __multf3($6 + 128 | 0, $2, $7, $3, $8, -1, -1, -1, 2147418111);
     $11 = HEAP32[$6 + 128 >> 2];
     $15 = $11;
     $9 = HEAP32[$6 + 132 >> 2];
     $16 = $9;
     $11 = HEAP32[$6 + 140 >> 2];
     $27 = $11;
     $9 = HEAP32[$6 + 136 >> 2];
     $14 = $9;
     break label$20;
    }
    $9 = $3 - 226 | 0;
    $11 = $9 >> 31;
    $8 = $9;
    $7 = $14;
    $9 = $18;
    if (($11 | 0) < ($9 | 0) ? 1 : ($11 | 0) <= ($9 | 0) ? $8 >>> 0 <= $7 >>> 0 : 0) {
     if (($22 | 0) > -1) {
      while (1) {
       $8 = $16;
       $11 = $21;
       __addtf3($6 + 416 | 0, $15, $8, $20, $11, 0, 0, 0, -1073807360);
       $9 = $8;
       $7 = $11;
       $13 = __getf2($15, $9, $20, $7, 0, 0, 0, 1073610752);
       $11 = HEAP32[$6 + 420 >> 2];
       $5 = $11;
       $11 = $9;
       $8 = HEAP32[$6 + 416 >> 2];
       $1 = ($13 | 0) < 0;
       $10 = $1;
       $9 = $10 ? $15 : $8;
       $12 = $9;
       $8 = $5;
       $7 = $10 ? $11 : $8;
       $5 = $7;
       $9 = HEAP32[$6 + 428 >> 2];
       $10 = $9;
       $7 = HEAP32[$6 + 424 >> 2];
       $8 = $1;
       $11 = $8 ? $20 : $7;
       $17 = $11;
       $9 = $21;
       $7 = $10;
       $10 = $8 ? $9 : $7;
       $1 = $10;
       $10 = $16;
       $11 = $9;
       $8 = $5;
       $9 = $1;
       __addtf3($6 + 400 | 0, $15, $10, $20, $11, $12, $8, $17, $9);
       $11 = $14;
       $7 = $11 - 1 | 0;
       $14 = $7;
       $9 = $18;
       $12 = $11 >>> 0 < 1;
       $12 = $9 - $12 | 0;
       $18 = $12;
       $12 = HEAP32[$6 + 408 >> 2];
       $20 = $12;
       $11 = HEAP32[$6 + 412 >> 2];
       $21 = $11;
       $11 = HEAP32[$6 + 400 >> 2];
       $15 = $11;
       $12 = HEAP32[$6 + 404 >> 2];
       $16 = $12;
       $22 = $22 << 1 | ($13 | 0) > -1;
       if (($22 | 0) > -1) {
        continue;
       }
       break;
      }
     }
     $11 = $3;
     $12 = $11 >> 31;
     $1 = $12;
     $9 = $14;
     $10 = $11;
     $8 = $9 - $10 | 0;
     $12 = $18;
     $11 = $1;
     $7 = $11 + ($9 >>> 0 < $10 >>> 0) | 0;
     $7 = $12 - $7 | 0;
     $12 = $8;
     $11 = $12 + 32 | 0;
     $8 = $11 >>> 0 < 32 ? $7 + 1 | 0 : $7;
     $10 = $2;
     $7 = $11;
     $13 = (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $10 >>> 0 > $7 >>> 0 : 0) ? ($7 | 0) > 0 ? $7 : 0 : $10;
     label$35 : {
      if (($13 | 0) >= 113) {
       __floatsitf($6 + 384 | 0, $4);
       $7 = HEAP32[$6 + 392 >> 2];
       $23 = $7;
       $8 = HEAP32[$6 + 396 >> 2];
       $24 = $8;
       $8 = HEAP32[$6 + 384 >> 2];
       $26 = $8;
       $7 = HEAP32[$6 + 388 >> 2];
       $25 = $7;
       $10 = 0;
       break label$35;
      }
      __extenddftf2($6 + 352 | 0, scalbn(1, 144 - $13 | 0));
      __floatsitf($6 + 336 | 0, $4);
      $7 = HEAP32[$6 + 352 >> 2];
      $3 = $7;
      $8 = HEAP32[$6 + 356 >> 2];
      $1 = $8;
      $8 = HEAP32[$6 + 360 >> 2];
      $4 = $8;
      $7 = HEAP32[$6 + 364 >> 2];
      $2 = $7;
      $7 = HEAP32[$6 + 336 >> 2];
      $26 = $7;
      $8 = HEAP32[$6 + 340 >> 2];
      $25 = $8;
      $8 = HEAP32[$6 + 344 >> 2];
      $23 = $8;
      $7 = HEAP32[$6 + 348 >> 2];
      $24 = $7;
      $7 = $1;
      $8 = $2;
      $10 = $25;
      $12 = $24;
      copysignl($6 + 368 | 0, $3, $7, $4, $8, $26, $10, $23, $12);
      $12 = HEAP32[$6 + 376 >> 2];
      $29 = $12;
      $10 = HEAP32[$6 + 380 >> 2];
      $30 = $10;
      $12 = HEAP32[$6 + 372 >> 2];
      $32 = $12;
      $10 = HEAP32[$6 + 368 >> 2];
     }
     $19 = $10;
     $12 = $32;
     $17 = $12;
     $1 = $6 + 320 | 0;
     $12 = $16;
     $10 = $21;
     $13 = !($22 & 1) & ((__letf2($15, $12, $20, $10, 0, 0, 0, 0) | 0) != 0 & ($13 | 0) < 32);
     __floatunsitf($1, $22 + $13 | 0);
     $7 = HEAP32[$6 + 320 >> 2];
     $1 = $7;
     $8 = HEAP32[$6 + 324 >> 2];
     $10 = $8;
     $8 = HEAP32[$6 + 328 >> 2];
     $2 = $8;
     $7 = HEAP32[$6 + 332 >> 2];
     $12 = $7;
     $7 = $25;
     $8 = $24;
     __multf3($6 + 304 | 0, $26, $7, $23, $8, $1, $10, $2, $12);
     $12 = HEAP32[$6 + 304 >> 2];
     $2 = $12;
     $12 = HEAP32[$6 + 316 >> 2];
     $1 = $12;
     $10 = HEAP32[$6 + 308 >> 2];
     $12 = $10;
     $10 = HEAP32[$6 + 312 >> 2];
     $3 = $10;
     $10 = $1;
     $8 = $17;
     $7 = $30;
     __addtf3($6 + 272 | 0, $2, $12, $3, $10, $19, $8, $29, $7);
     $9 = $13;
     $12 = $9 ? 0 : $15;
     $2 = $12;
     $12 = $21;
     $9 = $9 ? 0 : $12;
     $1 = $9;
     $8 = $16;
     $10 = $13 ? 0 : $8;
     $9 = $10;
     $8 = $13;
     $7 = $8 ? 0 : $20;
     $3 = $7;
     $7 = $1;
     $8 = $25;
     $10 = $24;
     __multf3($6 + 288 | 0, $2, $9, $3, $7, $26, $8, $23, $10);
     $10 = HEAP32[$6 + 288 >> 2];
     $3 = $10;
     $8 = HEAP32[$6 + 292 >> 2];
     $1 = $8;
     $8 = HEAP32[$6 + 296 >> 2];
     $4 = $8;
     $10 = HEAP32[$6 + 300 >> 2];
     $2 = $10;
     $10 = HEAP32[$6 + 272 >> 2];
     $5 = $10;
     $8 = HEAP32[$6 + 276 >> 2];
     $7 = $8;
     $8 = HEAP32[$6 + 280 >> 2];
     $11 = $8;
     $10 = HEAP32[$6 + 284 >> 2];
     $9 = $10;
     $10 = $1;
     $8 = $2;
     __addtf3($6 + 256 | 0, $3, $10, $4, $8, $5, $7, $11, $9);
     $9 = HEAP32[$6 + 256 >> 2];
     $2 = $9;
     $9 = HEAP32[$6 + 268 >> 2];
     $1 = $9;
     $7 = HEAP32[$6 + 260 >> 2];
     $9 = $7;
     $7 = HEAP32[$6 + 264 >> 2];
     $3 = $7;
     $7 = $1;
     $8 = $17;
     $10 = $30;
     __subtf3($6 + 240 | 0, $2, $9, $3, $7, $19, $8, $29, $10);
     $10 = HEAP32[$6 + 240 >> 2];
     $15 = $10;
     $10 = HEAP32[$6 + 252 >> 2];
     $21 = $10;
     $8 = HEAP32[$6 + 244 >> 2];
     $16 = $8;
     $10 = $8;
     $8 = HEAP32[$6 + 248 >> 2];
     $20 = $8;
     $8 = $21;
     if (!__letf2($15, $10, $20, $8, 0, 0, 0, 0)) {
      wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     }
     $9 = $16;
     $7 = $21;
     scalbnl($6 + 224 | 0, $15, $9, $20, $7, $14);
     $7 = HEAP32[$6 + 224 >> 2];
     $15 = $7;
     $9 = HEAP32[$6 + 228 >> 2];
     $16 = $9;
     $7 = HEAP32[$6 + 236 >> 2];
     $27 = $7;
     $9 = HEAP32[$6 + 232 >> 2];
     $14 = $9;
     break label$20;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($6 + 208 | 0, $4);
    $7 = HEAP32[$6 + 208 >> 2];
    $2 = $7;
    $7 = HEAP32[$6 + 220 >> 2];
    $1 = $7;
    $9 = HEAP32[$6 + 212 >> 2];
    $7 = $9;
    $9 = HEAP32[$6 + 216 >> 2];
    $3 = $9;
    $9 = $1;
    __multf3($6 + 192 | 0, $2, $7, $3, $9, 0, 0, 0, 65536);
    $10 = HEAP32[$6 + 192 >> 2];
    $2 = $10;
    $10 = HEAP32[$6 + 204 >> 2];
    $1 = $10;
    $8 = HEAP32[$6 + 196 >> 2];
    $10 = $8;
    $8 = HEAP32[$6 + 200 >> 2];
    $3 = $8;
    $8 = $1;
    __multf3($6 + 176 | 0, $2, $10, $3, $8, 0, 0, 0, 65536);
    $7 = HEAP32[$6 + 176 >> 2];
    $15 = $7;
    $9 = HEAP32[$6 + 180 >> 2];
    $16 = $9;
    $7 = HEAP32[$6 + 188 >> 2];
    $27 = $7;
    $9 = HEAP32[$6 + 184 >> 2];
    $14 = $9;
    break label$20;
   }
   __shlim($1, 0, 0);
  }
  __extenddftf2($6 + 96 | 0, +($4 | 0) * 0);
  $7 = HEAP32[$6 + 96 >> 2];
  $15 = $7;
  $9 = HEAP32[$6 + 100 >> 2];
  $16 = $9;
  $7 = HEAP32[$6 + 108 >> 2];
  $27 = $7;
  $9 = HEAP32[$6 + 104 >> 2];
  $14 = $9;
 }
 $7 = $27;
 $18 = $7;
 $9 = $0;
 HEAP32[$9 >> 2] = $15;
 $7 = $16;
 HEAP32[$9 + 4 >> 2] = $7;
 HEAP32[$9 + 8 >> 2] = $14;
 $7 = $18;
 HEAP32[$9 + 12 >> 2] = $7;
 __stack_pointer = $6 + 432 | 0;
}
function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $17 = __stack_pointer - 112 | 0;
 __stack_pointer = $17;
 $13 = $7;
 $19 = $13;
 $14 = $8;
 $11 = $14 & 2147483647;
 $18 = $11;
 $11 = $2;
 $10 = $1 >>> 0 < 1;
 $10 = $11 - $10 | 0;
 $20 = $10;
 $14 = $1;
 $9 = $14 - 1 | 0;
 $15 = ($9 | 0) == -1 & ($10 | 0) == -1;
 $12 = $3;
 $21 = $12;
 $11 = $4;
 $10 = $11 & 2147483647;
 $22 = $10;
 $12 = $20;
 $10 = $2;
 $11 = $1;
 $12 = ($12 | 0) == ($10 | 0) & $9 >>> 0 < $11 >>> 0 | $10 >>> 0 > $12 >>> 0;
 $11 = $22;
 $9 = $11;
 $14 = $3;
 $13 = $14 + $12 | 0;
 $9 = $13 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
 $11 = $13;
 $10 = $11 - 1 | 0;
 $13 = $11 >>> 0 < 1;
 $13 = $9 - $13 | 0;
 label$1 : {
  label$2 : {
   $11 = $13 >>> 0 > 2147418111;
   $9 = $13;
   if (!(($10 | 0) == -1 & ($9 | 0) == 2147418111 ? $15 : $11)) {
    $12 = $6;
    $10 = $5 >>> 0 < 1;
    $10 = $12 - $10 | 0;
    $11 = $5;
    $14 = $11 - 1 | 0;
    $12 = $14;
    $20 = ($12 | 0) != -1 | ($10 | 0) != -1;
    $12 = $6;
    $11 = $14;
    $13 = $5;
    $10 = ($10 | 0) == ($12 | 0) & $11 >>> 0 < $13 >>> 0 | $12 >>> 0 > $10 >>> 0;
    $13 = $18;
    $11 = $19;
    $9 = $11 + $10 | 0;
    $14 = $9 >>> 0 < $10 >>> 0 ? $13 + 1 | 0 : $13;
    $12 = $9 - 1 | 0;
    $9 = $9 >>> 0 < 1;
    $9 = $14 - $9 | 0;
    $11 = ($9 | 0) == 2147418111 & ($12 | 0) != -1 | $9 >>> 0 < 2147418111;
    $14 = $9;
    $10 = $12;
    if (($10 | 0) == -1 & ($14 | 0) == 2147418111 ? $20 : $11) {
     break label$2;
    }
   }
   $10 = $2;
   $11 = !($10 | $1);
   $10 = $22;
   $14 = $10 >>> 0 < 2147418112;
   $13 = $10;
   $9 = $21;
   if (!(!$9 & ($13 | 0) == 2147418112 ? $11 : $14)) {
    $14 = $3;
    $7 = $14;
    $9 = $4;
    $13 = $9 | 32768;
    $8 = $13;
    $5 = $1;
    $13 = $2;
    $6 = $13;
    break label$1;
   }
   $13 = $6;
   $11 = !($13 | $5);
   $13 = $18;
   $14 = $13 >>> 0 < 2147418112;
   $9 = $13;
   $10 = $19;
   if (!(!$10 & ($9 | 0) == 2147418112 ? $11 : $14)) {
    $14 = $7;
    $7 = $14;
    $10 = $8;
    $9 = $10 | 32768;
    $8 = $9;
    break label$1;
   }
   $9 = $22;
   $14 = $9 ^ 2147418112;
   $11 = $14;
   $10 = $21;
   $13 = $10;
   $9 = $1;
   $14 = $2;
   $10 = $11;
   $10 = $14 | $10;
   if (!($13 | $9 | $10)) {
    $14 = $1;
    $13 = $5;
    $11 = $14 ^ $13;
    $9 = $6;
    $10 = $2;
    $9 = $9 ^ $10;
    $5 = $9;
    $14 = $8;
    $9 = $4;
    $14 = $14 ^ $9;
    $13 = $7;
    $10 = $3;
    $9 = $13 ^ $10;
    $13 = $9;
    $10 = $14 ^ -2147483648;
    $9 = $10;
    $10 = $5;
    $9 = $9 | $10;
    $14 = $11;
    $16 = !($9 | ($14 | $13));
    $11 = $16;
    $13 = $11 ? 0 : $3;
    $7 = $13;
    $14 = $4;
    $10 = $11 ? 2147450880 : $14;
    $8 = $10;
    $9 = $11 ? 0 : $1;
    $5 = $9;
    $13 = $2;
    $11 = $11 ? 0 : $13;
    $6 = $11;
    break label$1;
   }
   $11 = $18;
   $9 = $11 ^ 2147418112;
   $11 = $5;
   $14 = $19;
   $10 = $14;
   $14 = $9;
   $9 = $6;
   $14 = $14 | $9;
   if (!($11 | $10 | $14)) {
    break label$1;
   }
   $14 = $2;
   $11 = $22;
   $11 = $14 | $11;
   $9 = $1;
   $10 = $21;
   if (!($11 | ($9 | $10))) {
    $11 = $6;
    $9 = $18;
    $9 = $11 | $9;
    $14 = $5;
    $10 = $19;
    $11 = $14 | $10;
    if ($11 | $9) {
     break label$1;
    }
    $14 = $5;
    $10 = $1;
    $5 = $14 & $10;
    $11 = $2;
    $9 = $6;
    $9 = $11 & $9;
    $6 = $9;
    $14 = $7;
    $11 = $3;
    $7 = $14 & $11;
    $9 = $4;
    $10 = $8;
    $10 = $9 & $10;
    $8 = $10;
    break label$1;
   }
   $11 = $18;
   $10 = $6;
   $11 = $11 | $10;
   $14 = $19;
   $9 = $5;
   if ($11 | ($14 | $9)) {
    break label$2;
   }
   $5 = $1;
   $11 = $2;
   $6 = $11;
   $7 = $3;
   $11 = $4;
   $8 = $11;
   break label$1;
  }
  $11 = $2;
  $9 = $6;
  $14 = $5;
  $10 = $1;
  $13 = ($11 | 0) == ($9 | 0) & $14 >>> 0 > $10 >>> 0 | $11 >>> 0 < $9 >>> 0;
  $11 = $22;
  $10 = $18;
  $14 = $19;
  $9 = $21;
  $12 = ($11 | 0) == ($10 | 0) & $14 >>> 0 > $9 >>> 0 | $10 >>> 0 > $11 >>> 0;
  $14 = $10;
  $9 = $19;
  $10 = $11;
  $11 = $21;
  $15 = ($9 | 0) == ($11 | 0) & ($10 | 0) == ($14 | 0) ? $13 : $12;
  $13 = $15;
  $10 = $13 ? $5 : $1;
  $19 = $10;
  $9 = $6;
  $14 = $2;
  $11 = $13 ? $9 : $14;
  $18 = $11;
  $9 = $13 ? $7 : $3;
  $21 = $9;
  $11 = $8;
  $10 = $4;
  $13 = $13 ? $11 : $10;
  $22 = $13;
  $23 = $9;
  $9 = $13 & 65535;
  $20 = $9;
  $10 = $15;
  $11 = $10 ? $3 : $7;
  $3 = $11;
  $9 = $4;
  $14 = $8;
  $13 = $10 ? $9 : $14;
  $4 = $13;
  $24 = $13 >>> 16 & 32767;
  $11 = $22;
  $16 = $11 >>> 16 & 32767;
  if (!$16) {
   $10 = $20;
   $16 = !($10 | $23);
   $14 = $16;
   $9 = $14 ? $19 : $23;
   $10 = $18;
   $13 = $20;
   $11 = $14 ? $10 : $13;
   $10 = Math_clz32($11);
   $12 = 0;
   $9 = ($10 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $10;
   $10 = $16 << 6;
   $13 = $9 + $10 | 0;
   $12 = $18;
   $9 = $20;
   __ashlti3($17 + 96 | 0, $19, $12, $23, $9, $13 - 15 | 0);
   $14 = $17;
   $9 = HEAP32[$14 + 104 >> 2];
   $23 = $9;
   $12 = HEAP32[$14 + 108 >> 2];
   $20 = $12;
   $12 = HEAP32[$14 + 96 >> 2];
   $19 = $12;
   $9 = HEAP32[$14 + 100 >> 2];
   $18 = $9;
   $16 = 16 - $13 | 0;
  }
  $11 = $15;
  $10 = $11 ? $1 : $5;
  $5 = $10;
  $9 = $2;
  $12 = $6;
  $14 = $11 ? $9 : $12;
  $6 = $14;
  $11 = $3;
  $7 = $11;
  $14 = $4;
  $10 = $14 & 65535;
  $8 = $10;
  if (!$24) {
   $10 = $8;
   $15 = !($7 | $10);
   $12 = $15;
   $9 = $12 ? $5 : $7;
   $10 = $6;
   $11 = $8;
   $14 = $12 ? $10 : $11;
   $10 = Math_clz32($14);
   $13 = 0;
   $9 = ($10 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $10;
   $10 = $15 << 6;
   $11 = $9 + $10 | 0;
   $13 = $6;
   $9 = $8;
   __ashlti3($17 + 80 | 0, $5, $13, $7, $9, $11 - 15 | 0);
   $24 = 16 - $11 | 0;
   $12 = $17;
   $9 = HEAP32[$12 + 88 >> 2];
   $7 = $9;
   $13 = HEAP32[$12 + 92 >> 2];
   $8 = $13;
   $9 = HEAP32[$12 + 84 >> 2];
   $6 = $9;
   $13 = HEAP32[$12 + 80 >> 2];
   $5 = $13;
  }
  $12 = $7;
  $2 = $12 << 3;
  $9 = $8;
  $13 = $9 << 3 | $12 >>> 29;
  $1 = $13;
  $13 = $6;
  $10 = $13 >>> 29 | 0;
  $12 = 0;
  $9 = $12;
  $12 = $1;
  $9 = $12 | $9;
  $13 = $2;
  $12 = $13 | $10;
  $7 = $12;
  $13 = $9 | 524288;
  $8 = $13;
  $9 = $23;
  $13 = $20;
  $12 = $13 << 3 | $9 >>> 29;
  $2 = $12;
  $12 = $18;
  $10 = $12 >>> 29 | 0;
  $12 = $9 << 3;
  $1 = $12 | $10;
  $9 = 0;
  $13 = $9;
  $9 = $2;
  $13 = $13 | $9;
  $2 = $13;
  $9 = $3;
  $10 = $21;
  $23 = $9 ^ $10;
  $13 = $4;
  $12 = $22;
  $12 = $13 ^ $12;
  $20 = $12;
  $13 = $5;
  $5 = $13 << 3;
  $4 = $5;
  $12 = $6;
  $9 = $12 << 3 | $13 >>> 29;
  $6 = $9;
  $3 = $9;
  $15 = $16 - $24 | 0;
  label$10 : {
   if (!$15) {
    break label$10;
   }
   if ($15 >>> 0 > 127) {
    $7 = 0;
    $8 = 0;
    $4 = 1;
    $9 = 0;
    break label$10;
   }
   $9 = $6;
   $13 = $8;
   __ashlti3($17 - -64 | 0, $5, $9, $7, $13, 128 - $15 | 0);
   $13 = $9;
   $9 = $8;
   __lshrti3($17 + 48 | 0, $5, $13, $7, $9, $15);
   $12 = $17;
   $9 = HEAP32[$12 + 56 >> 2];
   $7 = $9;
   $13 = HEAP32[$12 + 60 >> 2];
   $8 = $13;
   $13 = HEAP32[$12 + 48 >> 2];
   $3 = $13;
   $9 = HEAP32[$12 + 52 >> 2];
   $5 = $9;
   $9 = HEAP32[$12 + 64 >> 2];
   $4 = $9;
   $13 = HEAP32[$12 + 68 >> 2];
   $6 = $13;
   $13 = HEAP32[$12 + 72 >> 2];
   $10 = $13;
   $9 = HEAP32[$12 + 76 >> 2];
   $13 = $9;
   $9 = $6;
   $13 = $13 | $9;
   $12 = $4;
   $9 = $12 | $10;
   $12 = ($9 | 0) != 0 | ($13 | 0) != 0;
   $10 = $3;
   $4 = $12 | $10;
   $9 = $5;
  }
  $5 = $4;
  $13 = $9;
  $6 = $13;
  $9 = $1;
  $15 = $9;
  $13 = $2;
  $10 = $13 | 524288;
  $24 = $10;
  $13 = $19;
  $3 = $13 << 3;
  $10 = $18;
  $9 = $10 << 3 | $13 >>> 29;
  $4 = $9;
  $9 = $20;
  label$12 : {
   if (($9 | 0) < -1 ? 1 : ($9 | 0) <= -1) {
    $12 = $3;
    $13 = $5;
    $14 = $12 - $13 | 0;
    $1 = $14;
    $10 = $4;
    $9 = $6;
    $11 = $9 + ($13 >>> 0 > $12 >>> 0) | 0;
    $11 = $10 - $11 | 0;
    $2 = $11;
    $10 = $15;
    $13 = $7;
    $9 = $10 - $13 | 0;
    $11 = $24;
    $12 = $8;
    $14 = $12 + ($10 >>> 0 < $13 >>> 0) | 0;
    $14 = $11 - $14 | 0;
    $8 = $14;
    $14 = $4;
    $10 = $6;
    $11 = $3;
    $13 = $5;
    $10 = ($14 | 0) == ($10 | 0) & $11 >>> 0 < $13 >>> 0 | $10 >>> 0 > $14 >>> 0;
    $12 = $9 - $10 | 0;
    $7 = $12;
    $11 = $8;
    $9 = $10 >>> 0 > $9 >>> 0;
    $9 = $11 - $9 | 0;
    $8 = $9;
    $13 = $9;
    $9 = $2;
    $13 = $13 | $9;
    $11 = $1;
    $10 = $12;
    if (!($13 | ($11 | $10))) {
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = 0;
     break label$1;
    }
    $13 = $8;
    if ($13 >>> 0 > 524287) {
     break label$12;
    }
    $9 = $8;
    $15 = !($7 | $9);
    $14 = $15;
    $11 = $14 ? $1 : $7;
    $9 = $2;
    $10 = $14 ? $9 : $8;
    $9 = Math_clz32($10);
    $12 = 0;
    $11 = ($9 | 0) == 32 ? Math_clz32($11) + 32 | 0 : $9;
    $9 = $15 << 6;
    $13 = $11 + $9 | 0;
    $15 = $13 - 12 | 0;
    $12 = $2;
    $11 = $8;
    __ashlti3($17 + 32 | 0, $1, $12, $7, $11, $15);
    $16 = $16 - $15 | 0;
    $14 = $17;
    $11 = HEAP32[$14 + 40 >> 2];
    $7 = $11;
    $12 = HEAP32[$14 + 44 >> 2];
    $8 = $12;
    $12 = HEAP32[$14 + 32 >> 2];
    $1 = $12;
    $11 = HEAP32[$14 + 36 >> 2];
    $2 = $11;
    break label$12;
   }
   $11 = $4;
   $12 = $6;
   $13 = $11 + $12 | 0;
   $14 = $3;
   $9 = $5;
   $10 = $14 + $9 | 0;
   $1 = $10;
   $13 = $9 >>> 0 > $10 >>> 0 ? $13 + 1 | 0 : $13;
   $2 = $13;
   $4 = ($12 | 0) == ($13 | 0) & $10 >>> 0 < $9 >>> 0 | $12 >>> 0 > $13 >>> 0;
   $11 = $8;
   $13 = $24;
   $10 = $11 + $13 | 0;
   $14 = $15;
   $9 = $7;
   $12 = $14 + $9 | 0;
   $3 = $12;
   $10 = $14 >>> 0 > $12 >>> 0 ? $10 + 1 | 0 : $10;
   $9 = $10;
   $14 = $3;
   $11 = $4;
   $13 = $14 + $11 | 0;
   $7 = $13;
   $12 = $13 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $12;
   $11 = $12 & 1048576;
   if (!$11) {
    break label$12;
   }
   $12 = $1;
   $5 = $12 & 1;
   $10 = 0;
   $3 = $10;
   $11 = $7;
   $12 = $11 << 31;
   $4 = $12;
   $12 = $2;
   $11 = $12 >>> 1 | 0;
   $10 = $1;
   $14 = ($12 & 1) << 31 | $10 >>> 1;
   $10 = $11;
   $11 = $4;
   $10 = $11 | $10;
   $12 = 0;
   $14 = $14 | $12;
   $11 = $5;
   $1 = $14 | $11;
   $12 = $10;
   $10 = $3;
   $12 = $12 | $10;
   $2 = $12;
   $16 = $16 + 1 | 0;
   $12 = $8;
   $11 = $12 >>> 1 | 0;
   $10 = $7;
   $7 = ($12 & 1) << 31 | $10 >>> 1;
   $8 = $11;
  }
  $3 = 0;
  $11 = $22;
  $10 = $11 & -2147483648;
  $4 = $10;
  if (($16 | 0) >= 32767) {
   $11 = $3;
   $7 = $11;
   $10 = $4;
   $12 = $10 | 2147418112;
   $8 = $12;
   $5 = 0;
   $6 = 0;
   break label$1;
  }
  $15 = 0;
  label$16 : {
   if (($16 | 0) > 0) {
    $15 = $16;
    break label$16;
   }
   $12 = $2;
   $11 = $8;
   __ashlti3($17 + 16 | 0, $1, $12, $7, $11, $16 + 127 | 0);
   $11 = $12;
   $12 = $8;
   __lshrti3($17, $1, $11, $7, $12, 1 - $16 | 0);
   $10 = $17;
   $12 = HEAP32[$10 >> 2];
   $1 = $12;
   $11 = HEAP32[$10 + 4 >> 2];
   $2 = $11;
   $11 = HEAP32[$10 + 16 >> 2];
   $5 = $11;
   $12 = HEAP32[$10 + 20 >> 2];
   $6 = $12;
   $12 = HEAP32[$10 + 24 >> 2];
   $14 = $12;
   $11 = HEAP32[$10 + 28 >> 2];
   $12 = $11;
   $11 = $6;
   $12 = $11 | $12;
   $10 = $5;
   $11 = $14 | $10;
   $14 = $1;
   $10 = ($11 | 0) != 0 | ($12 | 0) != 0;
   $1 = $14 | $10;
   $11 = $2;
   $2 = $11;
   $11 = $17;
   $12 = HEAP32[$11 + 8 >> 2];
   $7 = $12;
   $14 = HEAP32[$11 + 12 >> 2];
   $8 = $14;
  }
  $11 = $7;
  $12 = $11 << 29;
  $6 = $12;
  $12 = $2;
  $11 = $12 >>> 3 | 0;
  $14 = $1;
  $10 = ($12 & 7) << 29 | $14 >>> 3;
  $12 = 0;
  $5 = $12 | $10;
  $14 = $11;
  $11 = $6;
  $14 = $14 | $11;
  $6 = $14;
  $14 = $8;
  $12 = $14 >>> 3 | 0;
  $11 = $7;
  $14 = ($14 & 7) << 29 | $11 >>> 3;
  $7 = $14;
  $14 = $4;
  $11 = $12 & 65535;
  $14 = $14 | $11;
  $8 = $14;
  $12 = $7;
  $10 = $3;
  $14 = $12 | $10;
  $7 = $14 | 0;
  $11 = $15;
  $12 = $11 << 16;
  $11 = $12;
  $12 = $8;
  $11 = $11 | $12;
  $8 = $11;
  $16 = $1 & 7;
  label$18 : {
   label$19 : {
    label$20 : {
     switch (__fe_getround() | 0) {
     case 0:
      $11 = $6;
      $12 = $5;
      $10 = $16 >>> 0 > 4;
      $9 = $12 + $10 | 0;
      $13 = $9 >>> 0 < $10 >>> 0 ? $11 + 1 | 0 : $11;
      $1 = $9;
      $2 = $13;
      $12 = $11;
      $10 = $5;
      $12 = ($13 | 0) == ($12 | 0) & $9 >>> 0 < $10 >>> 0 | $12 >>> 0 > $13 >>> 0;
      $11 = $8;
      $9 = $11;
      $10 = $7;
      $14 = $12 + $10 | 0;
      $9 = $14 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
      $7 = $14;
      $8 = $9;
      if (($16 | 0) != 4) {
       $5 = $1;
       $9 = $2;
       $6 = $9;
       break label$19;
      }
      $11 = $1;
      $3 = $11 & 1;
      $11 = $2;
      $10 = 0;
      $14 = $11 + $10 | 0;
      $12 = $1;
      $9 = $3;
      $13 = $12 + $9 | 0;
      $14 = $12 >>> 0 > $13 >>> 0 ? $14 + 1 | 0 : $14;
      $5 = $13;
      $6 = $14;
      $9 = $10;
      $12 = $3;
      $10 = $13;
      $9 = ($14 | 0) == ($9 | 0) & $12 >>> 0 > $10 >>> 0 | $14 >>> 0 < $9 >>> 0;
      $10 = $8;
      $12 = $7;
      $11 = $12 + $9 | 0;
      $13 = $11 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
      $7 = $11;
      $8 = $13;
      break label$18;
     case 1:
      $13 = $4;
      $12 = (($3 | 0) != 0 | ($13 | 0) != 0) & ($16 | 0) != 0;
      $10 = $6;
      $9 = $5;
      $14 = $12 + $9 | 0;
      $11 = $14 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
      $1 = $14;
      $2 = $11;
      $9 = $10;
      $12 = $5;
      $10 = $14;
      $9 = ($11 | 0) == ($9 | 0) & $12 >>> 0 > $10 >>> 0 | $11 >>> 0 < $9 >>> 0;
      $10 = $8;
      $12 = $7;
      $13 = $12 + $9 | 0;
      $14 = $13 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
      $7 = $13;
      $8 = $14;
      $5 = $1;
      $14 = $2;
      $6 = $14;
      break label$19;
     case 2:
      break label$20;
     default:
      break label$19;
     }
    }
    $14 = $4;
    $9 = !($14 | $3) & ($16 | 0) != 0;
    $10 = $5;
    $11 = $9 + $10 | 0;
    $14 = $6;
    $13 = $14;
    $1 = $11;
    $13 = $9 >>> 0 > $11 >>> 0 ? $13 + 1 | 0 : $13;
    $2 = $13;
    $10 = $14;
    $9 = $5;
    $10 = ($13 | 0) == ($10 | 0) & $11 >>> 0 < $9 >>> 0 | $10 >>> 0 > $13 >>> 0;
    $14 = $8;
    $11 = $14;
    $9 = $7;
    $12 = $9 + $10 | 0;
    $11 = $12 >>> 0 < $10 >>> 0 ? $11 + 1 | 0 : $11;
    $7 = $12;
    $8 = $11;
    $5 = $1;
    $11 = $2;
    $6 = $11;
   }
   if (!$16) {
    break label$1;
   }
  }
  __fe_raise_inexact();
 }
 $9 = $0;
 HEAP32[$9 >> 2] = $5;
 $11 = $6;
 HEAP32[$9 + 4 >> 2] = $11;
 HEAP32[$9 + 8 >> 2] = $7;
 $11 = $8;
 HEAP32[$9 + 12 >> 2] = $11;
 __stack_pointer = $17 + 112 | 0;
}
function fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 $11 = __stack_pointer - 560 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 44 >> 2] = 0;
 $9 = __DOUBLE_BITS($1);
 $14 = i64toi32_i32$HIGH_BITS;
 $22 = $14;
 label$1 : {
  if (($14 | 0) < -1 ? 1 : ($14 | 0) <= -1) {
   $24 = 1;
   $23 = 20336;
   $1 = -$1;
   $10 = __DOUBLE_BITS($1);
   $14 = i64toi32_i32$HIGH_BITS;
   $22 = $14;
   break label$1;
  }
  $24 = 1;
  if ($4 & 2048) {
   $23 = 20339;
   break label$1;
  }
  $23 = 20342;
  if ($4 & 1) {
   break label$1;
  }
  $24 = 0;
  $27 = 1;
  $23 = 20337;
 }
 $14 = $22;
 $10 = $14 & 2146435072;
 $14 = 0;
 label$4 : {
  if (!$14 & ($10 | 0) == 2146435072) {
   $12 = $24 + 3 | 0;
   pad($0, 32, $2, $12, $4 & -65537);
   out($0, $23, $24);
   $6 = $5 & 32;
   out($0, $1 != $1 ? $6 ? 20363 : 20367 : $6 ? 20355 : 20359, 3);
   break label$4;
  }
  $19 = $11 + 16 | 0;
  label$6 : {
   label$7 : {
    label$8 : {
     $1 = frexp($1, $11 + 44 | 0);
     $1 = $1 + $1;
     if ($1 != 0) {
      $6 = HEAP32[$11 + 44 >> 2];
      HEAP32[$11 + 44 >> 2] = $6 - 1;
      $25 = $5 | 32;
      if (($25 | 0) != 97) {
       break label$8;
      }
      break label$6;
     }
     $25 = $5 | 32;
     if (($25 | 0) == 97) {
      break label$6;
     }
     $26 = HEAP32[$11 + 44 >> 2];
     $13 = ($3 | 0) < 0 ? 6 : $3;
     break label$7;
    }
    $26 = $6 - 29 | 0;
    HEAP32[$11 + 44 >> 2] = $26;
    $1 = $1 * 268435456;
    $13 = ($3 | 0) < 0 ? 6 : $3;
   }
   $18 = ($26 | 0) < 0 ? $11 + 48 | 0 : $11 + 336 | 0;
   $8 = $18;
   while (1) {
    $3 = $8;
    if ($1 < 4294967296 & $1 >= 0) {
     $6 = ~~$1 >>> 0;
    } else {
     $6 = 0;
    }
    HEAP32[$3 >> 2] = $6;
    $8 = $8 + 4 | 0;
    $1 = ($1 - +($6 >>> 0)) * 1e9;
    if ($1 != 0) {
     continue;
    }
    break;
   }
   label$13 : {
    if (($26 | 0) < 1) {
     $3 = $26;
     $6 = $8;
     $7 = $18;
     break label$13;
    }
    $7 = $18;
    $3 = $26;
    while (1) {
     $3 = ($3 | 0) < 29 ? $3 : 29;
     $6 = $8 - 4 | 0;
     label$16 : {
      if ($7 >>> 0 > $6 >>> 0) {
       break label$16;
      }
      $12 = $3;
      $9 = 0;
      while (1) {
       $28 = $6;
       $10 = 0;
       $22 = $10;
       $10 = HEAP32[$6 >> 2];
       $14 = $10;
       $15 = $12;
       $16 = $15 & 31;
       if (($15 & 63) >>> 0 >= 32) {
        $10 = $14 << $16;
        $15 = 0;
       } else {
        $10 = (1 << $16) - 1 & $14 >>> 32 - $16;
        $15 = $14 << $16;
       }
       $16 = $15 + $9 | 0;
       $14 = $10;
       $10 = $22;
       $10 = $14 + $10 | 0;
       $10 = $16 >>> 0 < $15 >>> 0 ? $10 + 1 | 0 : $10;
       $17 = $10;
       $9 = __wasm_i64_udiv($16, $10, 1e9, 0);
       $10 = i64toi32_i32$HIGH_BITS;
       $22 = $10;
       $15 = __wasm_i64_mul($9, $10, 1e9, 0);
       $10 = i64toi32_i32$HIGH_BITS;
       $29 = $10;
       $14 = $16 - $15 | 0;
       $10 = $17;
       $16 = ($16 >>> 0 < $15 >>> 0) + $29 | 0;
       HEAP32[$28 >> 2] = $14;
       $6 = $6 - 4 | 0;
       if ($7 >>> 0 <= $6 >>> 0) {
        continue;
       }
       break;
      }
      $6 = $9;
      if (!$6) {
       break label$16;
      }
      $7 = $7 - 4 | 0;
      HEAP32[$7 >> 2] = $6;
     }
     while (1) {
      $6 = $8;
      if ($7 >>> 0 < $6 >>> 0) {
       $8 = $6 - 4 | 0;
       if (!HEAP32[$8 >> 2]) {
        continue;
       }
      }
      break;
     }
     $3 = HEAP32[$11 + 44 >> 2] - $3 | 0;
     HEAP32[$11 + 44 >> 2] = $3;
     $8 = $6;
     if (($3 | 0) > 0) {
      continue;
     }
     break;
    }
   }
   if (($3 | 0) <= -1) {
    $20 = (($13 + 25 | 0) / 9 | 0) + 1 | 0;
    $15 = ($25 | 0) == 102;
    while (1) {
     $12 = ($3 | 0) < -9 ? 9 : 0 - $3 | 0;
     label$22 : {
      if ($6 >>> 0 <= $7 >>> 0) {
       $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
       break label$22;
      }
      $10 = 1e9 >>> $12 | 0;
      $17 = -1 << $12 ^ -1;
      $3 = 0;
      $8 = $7;
      while (1) {
       $9 = HEAP32[$8 >> 2];
       HEAP32[$8 >> 2] = ($9 >>> $12 | 0) + $3;
       $3 = Math_imul($9 & $17, $10);
       $8 = $8 + 4 | 0;
       if ($8 >>> 0 < $6 >>> 0) {
        continue;
       }
       break;
      }
      $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
      if (!$3) {
       break label$22;
      }
      HEAP32[$6 >> 2] = $3;
      $6 = $6 + 4 | 0;
     }
     $3 = HEAP32[$11 + 44 >> 2] + $12 | 0;
     HEAP32[$11 + 44 >> 2] = $3;
     $8 = $15 ? $18 : $7;
     $6 = $6 - $8 >> 2 > ($20 | 0) ? $8 + ($20 << 2) | 0 : $6;
     if (($3 | 0) < 0) {
      continue;
     }
     break;
    }
   }
   $8 = 0;
   label$25 : {
    if ($6 >>> 0 <= $7 >>> 0) {
     break label$25;
    }
    $8 = Math_imul($18 - $7 >> 2, 9);
    $3 = 10;
    $9 = HEAP32[$7 >> 2];
    if ($9 >>> 0 < 10) {
     break label$25;
    }
    while (1) {
     $8 = $8 + 1 | 0;
     $3 = Math_imul($3, 10);
     if ($9 >>> 0 >= $3 >>> 0) {
      continue;
     }
     break;
    }
   }
   $3 = ($13 - (($25 | 0) == 102 ? 0 : $8) | 0) - (($25 | 0) == 103 & ($13 | 0) != 0) | 0;
   if (($3 | 0) < (Math_imul($6 - $18 >> 2, 9) - 9 | 0)) {
    $9 = $3 + 9216 | 0;
    $10 = ($9 | 0) / 9 | 0;
    $12 = (($10 << 2) + (($26 | 0) < 0 ? $11 + 48 | 4 : $11 + 340 | 0) | 0) - 4096 | 0;
    $3 = 10;
    $9 = $9 - Math_imul($10, 9) | 0;
    if (($9 | 0) <= 7) {
     while (1) {
      $3 = Math_imul($3, 10);
      $9 = $9 + 1 | 0;
      if (($9 | 0) != 8) {
       continue;
      }
      break;
     }
    }
    $10 = HEAP32[$12 >> 2];
    $17 = ($10 >>> 0) / ($3 >>> 0) | 0;
    $20 = $12 + 4 | 0;
    $9 = $10 - Math_imul($3, $17) | 0;
    label$30 : {
     if ($9 ? 0 : ($20 | 0) == ($6 | 0)) {
      break label$30;
     }
     $15 = $3 >>> 1 | 0;
     $21 = $9 >>> 0 < $15 >>> 0 ? .5 : ($6 | 0) == ($20 | 0) ? ($15 | 0) == ($9 | 0) ? 1 : 1.5 : 1.5;
     $1 = $17 & 1 ? 9007199254740994 : 9007199254740992;
     if (!(HEAPU8[$23 | 0] != 45 | $27)) {
      $21 = -$21;
      $1 = -$1;
     }
     $9 = $10 - $9 | 0;
     HEAP32[$12 >> 2] = $9;
     if ($1 + $21 == $1) {
      break label$30;
     }
     $8 = $3 + $9 | 0;
     HEAP32[$12 >> 2] = $8;
     if ($8 >>> 0 >= 1e9) {
      while (1) {
       HEAP32[$12 >> 2] = 0;
       $12 = $12 - 4 | 0;
       if ($12 >>> 0 < $7 >>> 0) {
        $7 = $7 - 4 | 0;
        HEAP32[$7 >> 2] = 0;
       }
       $8 = HEAP32[$12 >> 2] + 1 | 0;
       HEAP32[$12 >> 2] = $8;
       if ($8 >>> 0 > 999999999) {
        continue;
       }
       break;
      }
     }
     $8 = Math_imul($18 - $7 >> 2, 9);
     $3 = 10;
     $9 = HEAP32[$7 >> 2];
     if ($9 >>> 0 < 10) {
      break label$30;
     }
     while (1) {
      $8 = $8 + 1 | 0;
      $3 = Math_imul($3, 10);
      if ($9 >>> 0 >= $3 >>> 0) {
       continue;
      }
      break;
     }
    }
    $3 = $12 + 4 | 0;
    $6 = $3 >>> 0 < $6 >>> 0 ? $3 : $6;
   }
   while (1) {
    $3 = $6;
    $9 = $6 >>> 0 <= $7 >>> 0;
    if (!$9) {
     $6 = $3 - 4 | 0;
     if (!HEAP32[$6 >> 2]) {
      continue;
     }
    }
    break;
   }
   label$38 : {
    if (($25 | 0) != 103) {
     $17 = $4 & 8;
     break label$38;
    }
    $6 = $13 ? $13 : 1;
    $12 = ($8 | 0) < ($6 | 0) & ($8 | 0) > -5;
    $13 = ($12 ? $8 ^ -1 : -1) + $6 | 0;
    $5 = ($12 ? -1 : -2) + $5 | 0;
    $17 = $4 & 8;
    if ($17) {
     break label$38;
    }
    $6 = -9;
    label$40 : {
     if ($9) {
      break label$40;
     }
     $12 = HEAP32[$3 - 4 >> 2];
     if (!$12) {
      break label$40;
     }
     $9 = 10;
     $6 = 0;
     if (($12 >>> 0) % 10 | 0) {
      break label$40;
     }
     while (1) {
      $10 = $6;
      $6 = $6 + 1 | 0;
      $9 = Math_imul($9, 10);
      if (!(($12 >>> 0) % ($9 >>> 0) | 0)) {
       continue;
      }
      break;
     }
     $6 = $10 ^ -1;
    }
    $9 = Math_imul($3 - $18 >> 2, 9);
    if (($5 & -33) == 70) {
     $17 = 0;
     $6 = ($6 + $9 | 0) - 9 | 0;
     $6 = ($6 | 0) > 0 ? $6 : 0;
     $13 = ($6 | 0) > ($13 | 0) ? $13 : $6;
     break label$38;
    }
    $17 = 0;
    $6 = (($8 + $9 | 0) + $6 | 0) - 9 | 0;
    $6 = ($6 | 0) > 0 ? $6 : 0;
    $13 = ($6 | 0) > ($13 | 0) ? $13 : $6;
   }
   $15 = $13 | $17;
   $9 = ($15 | 0) != 0;
   $14 = $0;
   $22 = $2;
   $10 = $5 & -33;
   $6 = ($8 | 0) > 0 ? $8 : 0;
   label$43 : {
    if (($10 | 0) == 70) {
     break label$43;
    }
    $6 = $8 >> 31;
    $6 = fmt_u($6 ^ $6 + $8, 0, $19);
    if (($19 - $6 | 0) <= 1) {
     while (1) {
      $6 = $6 - 1 | 0;
      HEAP8[$6 | 0] = 48;
      if (($19 - $6 | 0) < 2) {
       continue;
      }
      break;
     }
    }
    $20 = $6 - 2 | 0;
    HEAP8[$20 | 0] = $5;
    HEAP8[$6 - 1 | 0] = ($8 | 0) < 0 ? 45 : 43;
    $6 = $19 - $20 | 0;
   }
   $12 = ($6 + (($13 + $24 | 0) + $9 | 0) | 0) + 1 | 0;
   pad($14, 32, $22, $12, $4);
   out($0, $23, $24);
   pad($0, 48, $2, $12, $4 ^ 65536);
   label$46 : {
    label$47 : {
     label$48 : {
      if (($10 | 0) == 70) {
       $10 = $11 + 16 | 8;
       $8 = $11 + 16 | 9;
       $9 = $7 >>> 0 > $18 >>> 0 ? $18 : $7;
       $7 = $9;
       while (1) {
        $16 = HEAP32[$7 >> 2];
        $6 = fmt_u($16, 0, $8);
        label$51 : {
         if (($7 | 0) != ($9 | 0)) {
          if ($11 + 16 >>> 0 >= $6 >>> 0) {
           break label$51;
          }
          while (1) {
           $6 = $6 - 1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($11 + 16 >>> 0 < $6 >>> 0) {
            continue;
           }
           break;
          }
          break label$51;
         }
         if (($6 | 0) != ($8 | 0)) {
          break label$51;
         }
         HEAP8[$11 + 24 | 0] = 48;
         $6 = $10;
        }
        out($0, $6, $8 - $6 | 0);
        $7 = $7 + 4 | 0;
        if ($18 >>> 0 >= $7 >>> 0) {
         continue;
        }
        break;
       }
       if ($15) {
        out($0, 20371, 1);
       }
       if (($13 | 0) < 1 | $3 >>> 0 <= $7 >>> 0) {
        break label$48;
       }
       while (1) {
        $10 = HEAP32[$7 >> 2];
        $6 = fmt_u($10, 0, $8);
        if ($6 >>> 0 > $11 + 16 >>> 0) {
         while (1) {
          $6 = $6 - 1 | 0;
          HEAP8[$6 | 0] = 48;
          if ($11 + 16 >>> 0 < $6 >>> 0) {
           continue;
          }
          break;
         }
        }
        out($0, $6, ($13 | 0) < 9 ? $13 : 9);
        $6 = $13 - 9 | 0;
        $7 = $7 + 4 | 0;
        if ($7 >>> 0 >= $3 >>> 0) {
         break label$47;
        }
        $9 = ($13 | 0) > 9;
        $13 = $6;
        if ($9) {
         continue;
        }
        break;
       }
       break label$47;
      }
      label$58 : {
       if (($13 | 0) < 0) {
        break label$58;
       }
       $10 = $3 >>> 0 > $7 >>> 0 ? $3 : $7 + 4 | 0;
       $18 = $11 + 16 | 8;
       $3 = $11 + 16 | 9;
       $8 = $7;
       while (1) {
        $16 = HEAP32[$8 >> 2];
        $6 = fmt_u($16, 0, $3);
        if (($6 | 0) == ($3 | 0)) {
         HEAP8[$11 + 24 | 0] = 48;
         $6 = $18;
        }
        label$61 : {
         if (($7 | 0) != ($8 | 0)) {
          if ($11 + 16 >>> 0 >= $6 >>> 0) {
           break label$61;
          }
          while (1) {
           $6 = $6 - 1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($11 + 16 >>> 0 < $6 >>> 0) {
            continue;
           }
           break;
          }
          break label$61;
         }
         out($0, $6, 1);
         $6 = $6 + 1 | 0;
         if (($13 | 0) < 1 ? !$17 : 0) {
          break label$61;
         }
         out($0, 20371, 1);
        }
        $9 = $3 - $6 | 0;
        out($0, $6, ($9 | 0) < ($13 | 0) ? $9 : $13);
        $13 = $13 - $9 | 0;
        $8 = $8 + 4 | 0;
        if ($10 >>> 0 <= $8 >>> 0) {
         break label$58;
        }
        if (($13 | 0) > -1) {
         continue;
        }
        break;
       }
      }
      pad($0, 48, $13 + 18 | 0, 18, 0);
      out($0, $20, $19 - $20 | 0);
      break label$46;
     }
     $6 = $13;
    }
    pad($0, 48, $6 + 9 | 0, 9, 0);
   }
   break label$4;
  }
  $8 = $5 & 32;
  $13 = $8 ? $23 + 9 | 0 : $23;
  label$64 : {
   if ($3 >>> 0 > 11) {
    break label$64;
   }
   $6 = 12 - $3 | 0;
   if (!$6) {
    break label$64;
   }
   $21 = 8;
   while (1) {
    $21 = $21 * 16;
    $6 = $6 - 1 | 0;
    if ($6) {
     continue;
    }
    break;
   }
   if (HEAPU8[$13 | 0] == 45) {
    $1 = -($21 + (-$1 - $21));
    break label$64;
   }
   $1 = $1 + $21 - $21;
  }
  $6 = HEAP32[$11 + 44 >> 2];
  $7 = $6;
  $6 = $6 >> 31;
  $6 = fmt_u($6 ^ $6 + $7, 0, $19);
  if (($19 | 0) == ($6 | 0)) {
   HEAP8[$11 + 15 | 0] = 48;
   $6 = $11 + 15 | 0;
  }
  $17 = $24 | 2;
  $7 = HEAP32[$11 + 44 >> 2];
  $10 = $6 - 2 | 0;
  HEAP8[$10 | 0] = $5 + 15;
  HEAP8[$6 - 1 | 0] = ($7 | 0) < 0 ? 45 : 43;
  $9 = $4 & 8;
  $7 = $11 + 16 | 0;
  while (1) {
   $6 = $7;
   $5 = $6;
   if (Math_abs($1) < 2147483648) {
    $7 = ~~$1;
   } else {
    $7 = -2147483648;
   }
   HEAP8[$5 | 0] = HEAPU8[$7 + 20320 | 0] | $8;
   $1 = ($1 - +($7 | 0)) * 16;
   $7 = $6 + 1 | 0;
   if (!(($7 - ($11 + 16 | 0) | 0) != 1 | ($1 == 0 ? !(($3 | 0) > 0 | $9) : 0))) {
    HEAP8[$6 + 1 | 0] = 46;
    $7 = $6 + 2 | 0;
   }
   if ($1 != 0) {
    continue;
   }
   break;
  }
  $6 = !$3 | (($7 - $11 | 0) - 18 | 0) >= ($3 | 0) ? (($19 - ($11 + 16 | 0) | 0) - $10 | 0) + $7 | 0 : (($3 + $19 | 0) - $10 | 0) + 2 | 0;
  $12 = $17 + $6 | 0;
  pad($0, 32, $2, $12, $4);
  out($0, $13, $17);
  pad($0, 48, $2, $12, $4 ^ 65536);
  $7 = $7 - ($11 + 16 | 0) | 0;
  out($0, $11 + 16 | 0, $7);
  $8 = $19 - $10 | 0;
  pad($0, 48, $6 - ($8 + $7 | 0) | 0, 0, 0);
  out($0, $10, $8);
 }
 pad($0, 32, $2, $12, $4 ^ 8192);
 __stack_pointer = $11 + 560 | 0;
 return (($2 | 0) > ($12 | 0) ? $2 : $12) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = 0;
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 48 | 0, 26687);
 $2 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = $3;
 label$2 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($3);
   HEAP32[$1 + 60 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) == 73) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($3, 0);
    HEAP32[$1 + 44 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
   }
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($3);
     HEAP32[$1 + 44 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
     continue;
    }
    break;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($3);
   HEAP32[$1 + 44 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
   break label$2;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 32 | 0, 23380);
  $3 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $2;
  $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0);
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 24 | 0, 26691);
  $2 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1)) {
   $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   HEAP32[$1 + 60 >> 2] = $5;
   if (!$5 | $6 ^ 1) {
    break label$2;
   }
   $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0);
   break label$2;
  }
  label$8 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 48 >>> 0 <= 9) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    while (1) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($3);
     HEAP32[$1 + 44 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     label$11 : {
      if (HEAP32[$1 + 60 >> 2]) {
       wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
       break label$11;
      }
      if ($6) {
       wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[$1 + 60 >> 2] = $2;
     }
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      continue;
     }
     break;
    }
    break label$8;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($3);
   HEAP32[$1 + 60 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
    break label$8;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($3, 0);
   HEAP32[$1 + 44 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($3);
  HEAP32[$1 + 44 >> 2] = $2;
  if (!$2) {
   break label$2;
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 60 | 0, $1 + 44 | 0);
 }
 __stack_pointer = $1 - -64 | 0;
 return $5;
}
function std____2____next_prime_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 label$1 : {
  if ($0 >>> 0 <= 211) {
   $0 = HEAP32[unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29(21120, 21312, $4 + 12 | 0) >> 2];
   break label$1;
  }
  std____2__enable_if__284ul_29_20___20_284_29_2c_20void___type_20std____2____check_for_overflow_4ul__28unsigned_20long_29($0);
  $5 = ($0 >>> 0) / 210 | 0;
  $3 = Math_imul($5, 210);
  HEAP32[$4 + 8 >> 2] = $0 - $3;
  $6 = unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29(21312, 21504, $4 + 8 | 0) - 21312 >> 2;
  label$3 : {
   while (1) {
    $0 = HEAP32[($6 << 2) + 21312 >> 2] + $3 | 0;
    $3 = 5;
    $1 = $7;
    label$5 : {
     label$6 : {
      while (1) {
       $7 = $1;
       if (($3 | 0) == 47) {
        $3 = 211;
        while (1) {
         $1 = ($0 >>> 0) / ($3 >>> 0) | 0;
         if ($3 >>> 0 > $1 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $3) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 10 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 12 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 16 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 18 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 22 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 28 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 30 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 36 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 40 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 42 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 46 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 52 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 58 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 60 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 66 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 70 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 72 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 78 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 82 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 88 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 96 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 100 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 102 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 106 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 108 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 112 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 120 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 126 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 130 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 136 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 138 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 142 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 148 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 150 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 156 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 162 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 166 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 168 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 172 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 178 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 180 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 186 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 190 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 192 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 196 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 198 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         if ((Math_imul($1, $2) | 0) == ($0 | 0)) {
          break label$6;
         }
         $1 = $3 + 208 | 0;
         $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
         if ($1 >>> 0 > $2 >>> 0) {
          break label$5;
         }
         $3 = $3 + 210 | 0;
         if ((Math_imul($1, $2) | 0) != ($0 | 0)) {
          continue;
         }
         break;
        }
        break label$6;
       }
       $1 = HEAP32[($3 << 2) + 21120 >> 2];
       $2 = ($0 >>> 0) / ($1 >>> 0) | 0;
       $8 = Math_imul($1, $2);
       $2 = $1 >>> 0 > $2 >>> 0;
       if (!$2) {
        $1 = $2 ? $0 : $7;
        $3 = $3 + 1 | 0;
        if (($0 | 0) != ($8 | 0)) {
         continue;
        }
       }
       break;
      }
      if (($0 | 0) != ($8 | 0) | $2) {
       break label$3;
      }
     }
     $0 = $6 + 1 | 0;
     $1 = $0;
     $0 = ($0 | 0) == 48;
     $6 = $0 ? 0 : $1;
     $5 = $0 + $5 | 0;
     $3 = Math_imul($5, 210);
     continue;
    }
    break;
   }
   HEAP32[$4 + 12 >> 2] = $0;
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = $0;
  $0 = $2 ? $0 : $7;
 }
 __stack_pointer = $4 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0), HEAP32[wasm2js_i32$0 + 124 >> 2] = wasm2js_i32$1;
 HEAP32[$1 + 120 >> 2] = 0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 112 | 0, 31548);
 $4 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 48 >> 2] = $4;
 HEAP32[$1 + 52 >> 2] = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 48 | 0)) {
     wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b9_5d__28char_20const_20_28__29_20_5b9_5d_29($0, 31551), HEAP32[wasm2js_i32$0 + 120 >> 2] = wasm2js_i32$1;
     break label$3;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 104 | 0, 31560);
    $2 = HEAP32[$3 >> 2];
    $4 = HEAP32[$3 + 4 >> 2];
    HEAP32[$1 + 40 >> 2] = $2;
    HEAP32[$1 + 44 >> 2] = $4;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 40 | 0)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     HEAP32[$1 + 88 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      break label$2;
     }
     wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NoexceptSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 88 | 0), HEAP32[wasm2js_i32$0 + 120 >> 2] = wasm2js_i32$1;
     break label$3;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 96 | 0, 31563);
    $4 = HEAP32[$3 >> 2];
    $2 = HEAP32[$3 + 4 >> 2];
    HEAP32[$1 + 32 >> 2] = $4;
    HEAP32[$1 + 36 >> 2] = $2;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 32 | 0)) {
     break label$3;
    }
    $5 = $0 + 8 | 0;
    $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($5);
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
      HEAP32[$1 + 88 >> 2] = $2;
      if (!$2) {
       break label$2;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $1 + 88 | 0);
      continue;
     }
     break;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 88 | 0, $0, $6);
    wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1 + 88 | 0), HEAP32[wasm2js_i32$0 + 120 >> 2] = wasm2js_i32$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 80 | 0, 31566);
   $2 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 24 >> 2] = $2;
   HEAP32[$1 + 28 >> 2] = $4;
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 24 | 0);
   $2 = 0;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 70)) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 89);
   $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($5);
   HEAP32[$1 + 76 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   HEAP8[$1 + 75 | 0] = 0;
   $6 = $0 + 8 | 0;
   $7 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($6);
   while (1) {
    label$9 : {
     label$10 : {
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       break label$10;
      }
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 118)) {
       continue;
      }
      $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 - -64 | 0, 31569);
      $4 = HEAP32[$3 >> 2];
      $2 = HEAP32[$3 + 4 >> 2];
      HEAP32[$1 + 16 >> 2] = $4;
      HEAP32[$1 + 20 >> 2] = $2;
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
       HEAP8[$1 + 75 | 0] = 1;
       break label$10;
      }
      $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 56 | 0, 31572);
      $2 = HEAP32[$3 >> 2];
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$1 + 8 >> 2] = $2;
      HEAP32[$1 + 12 >> 2] = $4;
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
       break label$9;
      }
      HEAP8[$1 + 75 | 0] = 2;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 88 | 0, $0, $7);
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 76 | 0, $1 + 88 | 0, $1 + 124 | 0, $1 + 75 | 0, $1 + 120 | 0);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($5);
    HEAP32[$1 + 88 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($6, $1 + 88 | 0);
    continue;
   }
  }
  $2 = 0;
 }
 __stack_pointer = $1 + 128 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 if ($1) {
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clear_28_29($0 + 332 | 0);
 }
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 152 | 0, 24434);
 $3 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $3;
 HEAP32[$2 + 28 >> 2] = $1;
 label$2 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2 + 24 | 0)) {
   $1 = 0;
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2 + 72 | 0, $0, 0);
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$2;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $2 + 72 | 0);
   break label$2;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 144 | 0, 24437);
  $1 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2 + 16 | 0)) {
   $3 = $0 + 332 | 0;
   $7 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20long___SwapAndRestore_28unsigned_20long__2c_20unsigned_20long_29($2 + 128 | 0, $0 + 392 | 0, $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___size_28_29_20const($3));
   $8 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___ScopedTemplateParamList__ScopedTemplateParamList_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___29($2 + 72 | 0, $0);
   $5 = $0 + 8 | 0;
   $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($5);
   label$5 : {
    label$6 : {
     while (1) {
      label$8 : {
       if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 84) {
        break label$8;
       }
       if (($28anonymous_20namespace_29__itanium_demangle__StringView__find_28char_2c_20unsigned_20long_29_20const($28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 - -64 | 0, 24440), $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1)) | 0) == -1) {
        break label$8;
       }
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParamDecl_28_29($0);
       HEAP32[$2 + 64 >> 2] = $1;
       if (!$1) {
        break label$6;
       }
       $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $2 - -64 | 0);
       continue;
      }
      break;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 - -64 | 0, $0, $6);
     if ($28anonymous_20namespace_29__itanium_demangle__NodeArray__empty_28_29_20const($2 - -64 | 0)) {
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___pop_back_28_29($3);
     }
     $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 56 | 0, 24445);
     $3 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 >> 2] = $3;
     HEAP32[$2 + 4 >> 2] = $1;
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2)) {
      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
      while (1) {
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($3);
       HEAP32[$2 + 48 >> 2] = $1;
       if (!$1) {
        break label$6;
       }
       $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $2 + 48 | 0);
       if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
        continue;
       }
       break;
      }
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 48 | 0, $0, $6);
     $1 = 0;
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2 + 40 | 0, $0, 0);
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
      break label$5;
     }
     $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ClosureTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $2 - -64 | 0, $2 + 48 | 0, $2 + 40 | 0);
     break label$5;
    }
    $1 = 0;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___ScopedTemplateParamList___ScopedTemplateParamList_28_29($8);
   $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20long____SwapAndRestore_28_29($7);
   break label$2;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 24448);
  $1 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $3;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2 + 8 | 0)) {
   break label$2;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2 + 72 | 0, $0, 0);
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   break label$2;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b16_5d__28char_20const_20_28__29_20_5b16_5d_29($0, 24451);
 }
 __stack_pointer = $2 + 160 | 0;
 return $1;
}
function consume_markers($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = 2;
 label$1 : {
  $5 = HEAP32[$0 + 460 >> 2];
  if (HEAP32[$5 + 20 >> 2]) {
   break label$1;
  }
  while (1) {
   $9 = $0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 464 >> 2] + 4 >> 2]]($0) | 0;
       if (($1 | 0) != 1) {
        if (($1 | 0) != 2) {
         break label$1;
        }
        HEAP32[$5 + 20 >> 2] = 1;
        if (!HEAP32[$5 + 24 >> 2]) {
         break label$6;
        }
        $1 = 2;
        if (!HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2]) {
         break label$1;
        }
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 20 >> 2] = 62;
        FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
        return 2;
       }
       label$8 : {
        switch (HEAP32[$5 + 24 >> 2]) {
        default:
         $1 = HEAP32[$0 + 340 >> 2];
         break label$3;
        case 1:
         if (!(HEAP32[$0 + 28 >> 2] < 65501 ? HEAP32[$0 + 32 >> 2] <= 65500 : 0)) {
          $2 = HEAP32[$0 >> 2];
          HEAP32[$2 + 20 >> 2] = 42;
          HEAP32[$2 + 24 >> 2] = 65500;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         }
         $1 = HEAP32[$0 + 212 >> 2];
         if ($1 - 8 >>> 0 >= 5) {
          $2 = HEAP32[$0 >> 2];
          HEAP32[$2 + 24 >> 2] = $1;
          HEAP32[$2 + 20 >> 2] = 16;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         }
         $4 = HEAP32[$0 + 36 >> 2];
         if (($4 | 0) >= 11) {
          $1 = HEAP32[$0 >> 2];
          HEAP32[$1 + 24 >> 2] = $4;
          HEAP32[$1 + 20 >> 2] = 27;
          HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 10;
          FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
          $4 = HEAP32[$0 + 36 >> 2];
         }
         HEAP32[$0 + 316 >> 2] = 1;
         HEAP32[$0 + 320 >> 2] = 1;
         if (($4 | 0) >= 1) {
          $1 = HEAP32[$0 + 216 >> 2];
          $8 = 0;
          $2 = 1;
          $3 = 1;
          while (1) {
           $6 = HEAP32[$1 + 8 >> 2];
           label$17 : {
            if ($6 - 1 >>> 0 <= 3) {
             $7 = HEAP32[$1 + 12 >> 2];
             if ($7 - 1 >>> 0 < 4) {
              break label$17;
             }
            }
            $2 = HEAP32[$0 >> 2];
            HEAP32[$2 + 20 >> 2] = 19;
            FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
            $4 = HEAP32[$0 + 36 >> 2];
            $7 = HEAP32[$1 + 12 >> 2];
            $2 = HEAP32[$0 + 320 >> 2];
            $6 = HEAP32[$1 + 8 >> 2];
            $3 = HEAP32[$0 + 316 >> 2];
           }
           $2 = ($2 | 0) > ($7 | 0) ? $2 : $7;
           HEAP32[$0 + 320 >> 2] = $2;
           $3 = ($3 | 0) > ($6 | 0) ? $3 : $6;
           HEAP32[$0 + 316 >> 2] = $3;
           $1 = $1 + 88 | 0;
           $8 = $8 + 1 | 0;
           if (($8 | 0) < ($4 | 0)) {
            continue;
           }
           break;
          }
         }
         if (HEAP32[$0 + 220 >> 2] | (HEAP32[$0 + 340 >> 2] ? HEAP32[$0 + 224 >> 2] : 0)) {
          break label$5;
         }
         label$20 : {
          label$21 : {
           label$22 : {
            label$23 : {
             label$24 : {
              label$25 : {
               label$26 : {
                label$27 : {
                 label$28 : {
                  label$29 : {
                   label$30 : {
                    label$31 : {
                     label$32 : {
                      label$33 : {
                       $1 = HEAP32[$0 + 416 >> 2];
                       if (($1 | 0) <= 119) {
                        switch ($1 | 0) {
                        case 99:
                         break label$25;
                        case 80:
                         break label$26;
                        case 48:
                         break label$27;
                        case 35:
                         break label$28;
                        case 24:
                         break label$29;
                        case 15:
                         break label$30;
                        case 8:
                         break label$31;
                        case 3:
                         break label$32;
                        case 0:
                         break label$33;
                        case 63:
                         break label$5;
                        default:
                         break label$20;
                        }
                       }
                       if (($1 | 0) <= 194) {
                        if (($1 | 0) == 120) {
                         break label$24;
                        }
                        if (($1 | 0) == 143) {
                         break label$23;
                        }
                        if (($1 | 0) != 168) {
                         break label$20;
                        }
                        HEAP32[$0 + 436 >> 2] = 63;
                        HEAP32[$0 + 432 >> 2] = 14992;
                        HEAP32[$0 + 428 >> 2] = 13;
                        $2 = 13;
                        break label$4;
                       }
                       if (($1 | 0) == 195) {
                        break label$22;
                       }
                       if (($1 | 0) == 224) {
                        break label$21;
                       }
                       if (($1 | 0) != 255) {
                        break label$20;
                       }
                       HEAP32[$0 + 436 >> 2] = 63;
                       HEAP32[$0 + 432 >> 2] = 14992;
                       HEAP32[$0 + 428 >> 2] = 16;
                       $2 = 16;
                       break label$4;
                      }
                      HEAP32[$0 + 436 >> 2] = 0;
                      HEAP32[$0 + 432 >> 2] = 14992;
                      HEAP32[$0 + 428 >> 2] = 1;
                      $2 = 1;
                      break label$4;
                     }
                     HEAP32[$0 + 436 >> 2] = 3;
                     HEAP32[$0 + 432 >> 2] = 16208;
                     HEAP32[$0 + 428 >> 2] = 2;
                     $2 = 2;
                     break label$4;
                    }
                    HEAP32[$0 + 436 >> 2] = 8;
                    HEAP32[$0 + 432 >> 2] = 16096;
                    HEAP32[$0 + 428 >> 2] = 3;
                    $2 = 3;
                    break label$4;
                   }
                   HEAP32[$0 + 436 >> 2] = 15;
                   HEAP32[$0 + 432 >> 2] = 15968;
                   HEAP32[$0 + 428 >> 2] = 4;
                   $2 = 4;
                   break label$4;
                  }
                  HEAP32[$0 + 436 >> 2] = 24;
                  HEAP32[$0 + 432 >> 2] = 15792;
                  HEAP32[$0 + 428 >> 2] = 5;
                  $2 = 5;
                  break label$4;
                 }
                 HEAP32[$0 + 436 >> 2] = 35;
                 HEAP32[$0 + 432 >> 2] = 15584;
                 HEAP32[$0 + 428 >> 2] = 6;
                 $2 = 6;
                 break label$4;
                }
                HEAP32[$0 + 436 >> 2] = 48;
                HEAP32[$0 + 432 >> 2] = 15312;
                HEAP32[$0 + 428 >> 2] = 7;
                $2 = 7;
                break label$4;
               }
               HEAP32[$0 + 436 >> 2] = 63;
               HEAP32[$0 + 432 >> 2] = 14992;
               HEAP32[$0 + 428 >> 2] = 9;
               $2 = 9;
               break label$4;
              }
              HEAP32[$0 + 436 >> 2] = 63;
              HEAP32[$0 + 432 >> 2] = 14992;
              HEAP32[$0 + 428 >> 2] = 10;
              $2 = 10;
              break label$4;
             }
             HEAP32[$0 + 436 >> 2] = 63;
             HEAP32[$0 + 432 >> 2] = 14992;
             HEAP32[$0 + 428 >> 2] = 11;
             $2 = 11;
             break label$4;
            }
            HEAP32[$0 + 436 >> 2] = 63;
            HEAP32[$0 + 432 >> 2] = 14992;
            HEAP32[$0 + 428 >> 2] = 12;
            $2 = 12;
            break label$4;
           }
           HEAP32[$0 + 436 >> 2] = 63;
           HEAP32[$0 + 432 >> 2] = 14992;
           HEAP32[$0 + 428 >> 2] = 14;
           $2 = 14;
           break label$4;
          }
          HEAP32[$0 + 436 >> 2] = 63;
          HEAP32[$0 + 432 >> 2] = 14992;
          HEAP32[$0 + 428 >> 2] = 15;
          $2 = 15;
          break label$4;
         }
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 17;
         HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 412 >> 2];
         HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAP32[$0 + 416 >> 2];
         HEAP32[HEAP32[$0 >> 2] + 32 >> 2] = HEAP32[$0 + 420 >> 2];
         HEAP32[HEAP32[$0 >> 2] + 36 >> 2] = HEAP32[$0 + 424 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
         $4 = HEAP32[$0 + 36 >> 2];
         $2 = HEAP32[$0 + 428 >> 2];
         break label$4;
        case 0:
         break label$8;
        }
       }
       if (!HEAP32[$5 + 16 >> 2]) {
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 20 >> 2] = 36;
        FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
       }
       if (!HEAP32[$0 + 340 >> 2]) {
        continue;
       }
       start_input_pass($0);
       return 1;
      }
      $1 = 2;
      $2 = HEAP32[$0 + 144 >> 2];
      if (($2 | 0) >= HEAP32[$0 + 152 >> 2]) {
       break label$1;
      }
      HEAP32[$0 + 152 >> 2] = $2;
      break label$1;
     }
     HEAP32[$0 + 436 >> 2] = 63;
     HEAP32[$0 + 432 >> 2] = 14992;
     HEAP32[$0 + 428 >> 2] = 8;
     $2 = 8;
    }
    HEAP32[$9 + 328 >> 2] = $2;
    HEAP32[$0 + 324 >> 2] = $2;
    if (($4 | 0) >= 1) {
     $1 = HEAP32[$0 + 216 >> 2];
     $3 = 0;
     while (1) {
      HEAP32[$1 + 40 >> 2] = $2;
      HEAP32[$1 + 36 >> 2] = $2;
      wasm2js_i32$0 = $1, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$1 + 8 >> 2], HEAP32[$0 + 28 >> 2]), Math_imul(HEAP32[$0 + 316 >> 2], $2)), HEAP32[wasm2js_i32$0 + 28 >> 2] = wasm2js_i32$1;
      wasm2js_i32$0 = $1, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$1 + 12 >> 2], HEAP32[$0 + 32 >> 2]), Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 320 >> 2])), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
      wasm2js_i32$0 = $1, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$1 + 8 >> 2], HEAP32[$0 + 28 >> 2]), HEAP32[$0 + 316 >> 2]), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
      $2 = jdiv_round_up(Math_imul(HEAP32[$1 + 12 >> 2], HEAP32[$0 + 32 >> 2]), HEAP32[$0 + 320 >> 2]);
      HEAP32[$1 + 80 >> 2] = 0;
      HEAP32[$1 + 52 >> 2] = 1;
      HEAP32[$1 + 48 >> 2] = $2;
      $3 = $3 + 1 | 0;
      if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
       $1 = $1 + 88 | 0;
       $2 = HEAP32[$0 + 428 >> 2];
       continue;
      }
      break;
     }
     $2 = HEAP32[$0 + 428 >> 2];
    }
    wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 32 >> 2], Math_imul(HEAP32[$0 + 320 >> 2], $2)), HEAP32[wasm2js_i32$0 + 332 >> 2] = wasm2js_i32$1;
    $1 = HEAP32[$0 + 340 >> 2];
    if (!(HEAP32[$0 + 224 >> 2] ? 0 : ($1 | 0) >= HEAP32[$0 + 36 >> 2])) {
     HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2] = 1;
     break label$3;
    }
    HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2] = 0;
   }
   if (!$1) {
    HEAP32[$5 + 24 >> 2] = 2;
    continue;
   }
   break;
  }
  HEAP32[$5 + 24 >> 2] = 0;
  return 1;
 }
 return $1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
 label$1 : {
  if (!(($2 & 255) != 71 ? ($2 | 0) != 84 : 0)) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSpecialName_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   break label$1;
  }
  HEAP32[$1 + 56 >> 2] = $0;
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__NameState_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___29($1 + 40 | 0, $0);
  $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($5, $4);
  HEAP32[$1 + 36 >> 2] = $3;
  $2 = 0;
  if (!$3) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___resolveForwardTemplateRefs_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $4)) {
   break label$1;
  }
  $2 = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($1 + 56 | 0)) {
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = 0;
  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 24 | 0, 22426);
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1)) {
    $3 = $0 + 8 | 0;
    $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($3);
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($5);
      HEAP32[$1 + 16 >> 2] = $2;
      if (!$2) {
       break label$3;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $1 + 16 | 0);
      continue;
     }
     break;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 16 | 0, $0, $6);
    wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnableIfAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1 + 16 | 0), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
   }
   HEAP32[$1 + 12 >> 2] = 0;
   if (!(HEAPU8[$1 + 40 | 0] | !HEAPU8[$4 + 1 | 0])) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($5);
    HEAP32[$1 + 12 >> 2] = $2;
    if (!$2) {
     break label$3;
    }
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 118)) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0, $1 + 12 | 0, $1 + 36 | 0, $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 16 | 0), $1 + 32 | 0, $4 + 4 | 0, $4 + 8 | 0);
    break label$1;
   }
   $3 = $0 + 8 | 0;
   $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($3);
   while (1) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($5);
    HEAP32[$1 + 16 >> 2] = $2;
    if (!$2) {
     break label$3;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $1 + 16 | 0);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($1 + 56 | 0)) {
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 16 | 0, $0, $6);
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0, $1 + 12 | 0, $1 + 36 | 0, $1 + 16 | 0, $1 + 32 | 0, $4 + 4 | 0, $4 + 8 | 0);
   break label$1;
  }
  $2 = 0;
 }
 __stack_pointer = $1 - -64 | 0;
 return $2;
}
function __intscan($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $16 = __stack_pointer - 16 | 0;
 __stack_pointer = $16;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if ($1 >>> 0 <= 36) {
        while (1) {
         $5 = HEAP32[$0 + 4 >> 2];
         label$9 : {
          if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $5 + 1;
           $5 = HEAPU8[$5 | 0];
           break label$9;
          }
          $5 = __shgetc($0);
         }
         if (isspace($5)) {
          continue;
         }
         break;
        }
        label$11 : {
         label$12 : {
          switch ($5 - 43 | 0) {
          case 0:
          case 2:
           break label$12;
          default:
           break label$11;
          }
         }
         $15 = ($5 | 0) == 45 ? -1 : 0;
         $5 = HEAP32[$0 + 4 >> 2];
         if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $5 + 1;
          $5 = HEAPU8[$5 | 0];
          break label$11;
         }
         $5 = __shgetc($0);
        }
        label$14 : {
         if (!($1 & -17 | ($5 | 0) != 48)) {
          $5 = HEAP32[$0 + 4 >> 2];
          label$16 : {
           if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $5 + 1;
            $5 = HEAPU8[$5 | 0];
            break label$16;
           }
           $5 = __shgetc($0);
          }
          if (($5 & -33) == 88) {
           $5 = HEAP32[$0 + 4 >> 2];
           label$19 : {
            if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $5 + 1;
             $5 = HEAPU8[$5 | 0];
             break label$19;
            }
            $5 = __shgetc($0);
           }
           $1 = 16;
           if (HEAPU8[$5 + 20481 | 0] < 16) {
            break label$5;
           }
           if (!HEAP32[$0 + 104 >> 2]) {
            $3 = 0;
            $4 = 0;
            if ($2) {
             break label$1;
            }
            break label$2;
           }
           $5 = HEAP32[$0 + 4 >> 2];
           HEAP32[$0 + 4 >> 2] = $5 - 1;
           if (!$2) {
            break label$2;
           }
           HEAP32[$0 + 4 >> 2] = $5 - 2;
           $3 = 0;
           $4 = 0;
           break label$1;
          }
          if ($1) {
           break label$14;
          }
          $1 = 8;
          break label$5;
         }
         $1 = $1 ? $1 : 10;
         if ($1 >>> 0 > HEAPU8[$5 + 20481 | 0]) {
          break label$14;
         }
         if (HEAP32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
         }
         $3 = 0;
         $4 = 0;
         __shlim($0, 0, 0);
         wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break label$1;
        }
        if (($1 | 0) != 10) {
         break label$5;
        }
        $2 = $5 - 48 | 0;
        if ($2 >>> 0 <= 9) {
         $1 = 0;
         while (1) {
          $1 = Math_imul($1, 10);
          $5 = HEAP32[$0 + 4 >> 2];
          label$25 : {
           if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $5 + 1;
            $5 = HEAPU8[$5 | 0];
            break label$25;
           }
           $5 = __shgetc($0);
          }
          $1 = $1 + $2 | 0;
          $2 = $5 - 48 | 0;
          if ($1 >>> 0 < 429496729 ? $2 >>> 0 <= 9 : 0) {
           continue;
          }
          break;
         }
         $12 = $1;
        }
        if ($2 >>> 0 > 9) {
         break label$6;
        }
        $11 = __wasm_i64_mul($12, 0, 10, 0);
        $14 = $11;
        $6 = i64toi32_i32$HIGH_BITS;
        $1 = $6;
        $11 = $2;
        while (1) {
         $5 = HEAP32[$0 + 4 >> 2];
         label$28 : {
          if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $5 + 1;
           $5 = HEAPU8[$5 | 0];
           break label$28;
          }
          $5 = __shgetc($0);
         }
         $2 = $5 - 48 | 0;
         $10 = $14;
         $9 = $11;
         $8 = $10 + $9 | 0;
         $6 = $1;
         $7 = $8 >>> 0 < $9 >>> 0 ? $6 + 1 | 0 : $6;
         $12 = $8;
         $13 = $7;
         $6 = $8;
         if (($7 | 0) == 429496729 & $6 >>> 0 >= 2576980378 | $7 >>> 0 > 429496729 | $2 >>> 0 > 9) {
          break label$6;
         }
         $6 = $13;
         $7 = __wasm_i64_mul($12, $6, 10, 0);
         $14 = $7;
         $11 = $2;
         $6 = i64toi32_i32$HIGH_BITS;
         $1 = $6;
         $7 = $6;
         $6 = $14;
         $10 = $2 ^ -1;
         if (($7 | 0) == -1 & $6 >>> 0 <= $10 >>> 0 | ($7 | 0) != -1) {
          continue;
         }
         break;
        }
        $1 = 10;
        break label$4;
       }
       wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $3 = 0;
       $4 = 0;
       break label$1;
      }
      $1 = 10;
      if ($2 >>> 0 <= 9) {
       break label$4;
      }
      break label$3;
     }
     if ($1 - 1 & $1) {
      $2 = HEAPU8[$5 + 20481 | 0];
      if ($2 >>> 0 < $1 >>> 0) {
       while (1) {
        $8 = Math_imul($1, $8) + $2 | 0;
        $6 = $8 >>> 0 <= 119304646;
        $5 = HEAP32[$0 + 4 >> 2];
        label$33 : {
         if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $5 + 1;
          $5 = HEAPU8[$5 | 0];
          break label$33;
         }
         $5 = __shgetc($0);
        }
        $2 = HEAPU8[$5 + 20481 | 0];
        if ($2 >>> 0 < $1 >>> 0 ? $6 : 0) {
         continue;
        }
        break;
       }
       $12 = $8;
      }
      if ($1 >>> 0 <= $2 >>> 0) {
       break label$4;
      }
      $14 = $1;
      while (1) {
       $6 = $13;
       $7 = __wasm_i64_mul($12, $6, $14, 0);
       $11 = $7;
       $6 = i64toi32_i32$HIGH_BITS;
       $17 = $6;
       $2 = $2 & 255;
       $6 = $2;
       $9 = $6 ^ -1;
       $10 = $17;
       if (($10 | 0) == -1 & $9 >>> 0 < $7 >>> 0) {
        break label$4;
       }
       $5 = HEAP32[$0 + 4 >> 2];
       label$36 : {
        if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $5 + 1;
         $5 = HEAPU8[$5 | 0];
         break label$36;
        }
        $5 = __shgetc($0);
       }
       $7 = $17;
       $6 = $2;
       $9 = $11;
       $11 = $6 + $9 | 0;
       $12 = $11;
       $8 = $6 >>> 0 > $12 >>> 0 ? $7 + 1 | 0 : $7;
       $13 = $8;
       $2 = HEAPU8[$5 + 20481 | 0];
       if ($2 >>> 0 >= $1 >>> 0) {
        break label$4;
       }
       $7 = $13;
       __multi3($16, $14, 0, 0, 0, $12, $7, 0, 0);
       $9 = $16;
       $6 = HEAP32[$9 + 8 >> 2];
       $7 = HEAP32[$9 + 12 >> 2];
       if (!($6 | $7)) {
        continue;
       }
       break;
      }
      break label$4;
     }
     $14 = HEAP8[(Math_imul($1, 23) >>> 5 & 7) + 20737 | 0];
     $2 = HEAPU8[$5 + 20481 | 0];
     if ($2 >>> 0 < $1 >>> 0) {
      while (1) {
       $8 = $8 << $14 | $2;
       $7 = $8 >>> 0 <= 134217727;
       $5 = HEAP32[$0 + 4 >> 2];
       label$40 : {
        if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $5 + 1;
         $5 = HEAPU8[$5 | 0];
         break label$40;
        }
        $5 = __shgetc($0);
       }
       $2 = HEAPU8[$5 + 20481 | 0];
       if ($2 >>> 0 < $1 >>> 0 ? $7 : 0) {
        continue;
       }
       break;
      }
      $12 = $8;
     }
     $9 = $1 >>> 0 <= $2 >>> 0;
     $8 = $14;
     $10 = $8 & 31;
     if (($8 & 63) >>> 0 >= 32) {
      $11 = -1 >>> $10 | 0;
     } else {
      $6 = -1 >>> $10 | 0;
      $11 = (1 << $10) - 1 << 32 - $10 | -1 >>> $10;
     }
     $17 = $6;
     $8 = $12;
     $7 = $11;
     if (!$6 & $8 >>> 0 > $7 >>> 0 | $9) {
      break label$4;
     }
     while (1) {
      $2 = $2 & 255;
      $6 = $13;
      $7 = $12;
      $9 = $14;
      $10 = $9 & 31;
      if (($9 & 63) >>> 0 >= 32) {
       $8 = $7 << $10;
       $9 = 0;
      } else {
       $8 = (1 << $10) - 1 & $7 >>> 32 - $10 | $6 << $10;
       $9 = $7 << $10;
      }
      $6 = $2;
      $12 = $6 | $9;
      $7 = $8;
      $13 = $7;
      $5 = HEAP32[$0 + 4 >> 2];
      label$43 : {
       if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $5 + 1;
        $5 = HEAPU8[$5 | 0];
        break label$43;
       }
       $5 = __shgetc($0);
      }
      $6 = $17;
      $7 = $13;
      $9 = $11;
      $8 = $12;
      if (($6 | 0) == ($7 | 0) & $9 >>> 0 < $8 >>> 0 | $6 >>> 0 < $7 >>> 0) {
       break label$4;
      }
      $2 = HEAPU8[$5 + 20481 | 0];
      if ($2 >>> 0 < $1 >>> 0) {
       continue;
      }
      break;
     }
    }
    if (HEAPU8[$5 + 20481 | 0] >= $1 >>> 0) {
     break label$3;
    }
    while (1) {
     $5 = HEAP32[$0 + 4 >> 2];
     label$46 : {
      if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $5 + 1;
       $5 = HEAPU8[$5 | 0];
       break label$46;
      }
      $5 = __shgetc($0);
     }
     if (HEAPU8[$5 + 20481 | 0] < $1 >>> 0) {
      continue;
     }
     break;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $7 = 0;
    $9 = $3;
    $15 = !($7 | $9 & 1) ? $15 : 0;
    $12 = $9;
    $8 = $4;
    $7 = $8;
    $13 = $7;
   }
   if (HEAP32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
   }
   label$49 : {
    $9 = $13;
    $7 = $4;
    $6 = $12;
    $8 = $3;
    if (($9 | 0) == ($7 | 0) & $6 >>> 0 < $8 >>> 0 | $7 >>> 0 > $9 >>> 0) {
     break label$49;
    }
    if (!($3 & 1 | $15)) {
     wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $6 = $3;
     $10 = $6 - 1 | 0;
     $3 = $10;
     $11 = $6 >>> 0 < 1;
     $11 = $4 - $11 | 0;
     $4 = $11;
     break label$1;
    }
    $6 = $13;
    $9 = $12;
    $8 = $3;
    if (($6 | 0) == ($4 | 0) & $9 >>> 0 <= $8 >>> 0 | $4 >>> 0 > $6 >>> 0) {
     break label$49;
    }
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 68, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$1;
   }
   $11 = $15;
   $8 = $11 >> 31;
   $4 = $8;
   $8 = $13;
   $11 = $4 ^ $8;
   $3 = $15;
   $6 = $3;
   $9 = $12;
   $8 = $6 ^ $9;
   $7 = $8 - $6 | 0;
   $3 = $7;
   $9 = $4;
   $10 = $9 + ($6 >>> 0 > $8 >>> 0) | 0;
   $10 = $11 - $10 | 0;
   $4 = $10;
   break label$1;
  }
  $3 = 0;
  $4 = 0;
  __shlim($0, 0, 0);
 }
 __stack_pointer = $16 + 16 | 0;
 $10 = $4;
 i64toi32_i32$HIGH_BITS = $10;
 $8 = $3;
 return $8;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParamDecl_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = __stack_pointer - 160 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 152 >> 2] = $0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 144 | 0, 24587);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 40 >> 2] = $4;
 HEAP32[$1 + 44 >> 2] = $5;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 40 | 0)) {
   $6 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParamDecl_28_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_29_20const($1 + 152 | 0, 0);
   HEAP32[$1 + 72 >> 2] = $6;
   if (!$6) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 72 | 0);
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 136 | 0, 24590);
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 + 32 >> 2] = $5;
  HEAP32[$1 + 36 >> 2] = $4;
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 32 | 0)) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParamDecl_28_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_29_20const($1 + 152 | 0, 1);
    HEAP32[$1 + 72 >> 2] = $2;
    if (!$2) {
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($0);
    HEAP32[$1 + 56 >> 2] = $2;
    if (!$2) {
     break label$3;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 72 | 0, $1 + 56 | 0);
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 128 | 0, 24593);
   $4 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = $5;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 24 | 0)) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParamDecl_28_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_29_20const($1 + 152 | 0, 2);
    HEAP32[$1 + 124 >> 2] = $2;
    if (!$2) {
     break label$3;
    }
    $6 = $0 + 8 | 0;
    $7 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($6);
    $8 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___ScopedTemplateParamList__ScopedTemplateParamList_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___29($1 + 72 | 0, $0);
    label$6 : {
     label$7 : {
      while (1) {
       label$9 : {
        $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 - -64 | 0, 24596);
        $5 = HEAP32[$3 >> 2];
        $4 = HEAP32[$3 + 4 >> 2];
        HEAP32[$1 + 8 >> 2] = $5;
        HEAP32[$1 + 12 >> 2] = $4;
        if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
         break label$9;
        }
        $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParamDecl_28_29($0);
        HEAP32[$1 + 56 >> 2] = $2;
        if (!$2) {
         break label$7;
        }
        $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($6, $1 + 56 | 0);
        continue;
       }
       break;
      }
      $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 56 | 0, $0, $7);
      $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1 + 124 | 0, $1 + 56 | 0);
      break label$6;
     }
     $2 = 0;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___ScopedTemplateParamList___ScopedTemplateParamList_28_29($8);
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 48 | 0, 24598);
   $4 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 16 >> 2] = $4;
   HEAP32[$1 + 20 >> 2] = $5;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParamDecl_28_29($0);
   HEAP32[$1 + 72 >> 2] = $2;
   if (!$2) {
    break label$3;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 72 | 0);
   break label$1;
  }
  $2 = 0;
 }
 __stack_pointer = $1 + 160 | 0;
 return $2;
}
function jpgread($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $7 = __stack_pointer - 800 | 0;
 __stack_pointer = $7;
 $9 = dlmalloc(40);
 HEAP32[$9 >> 2] = 0;
 memset($7 + 312 | 0, 0, 488);
 HEAP32[8753] = 0;
 $8 = jpeg_std_error($7 + 24 | 0);
 $5 = HEAP32[8753];
 HEAP32[8753] = 0;
 $6 = -1;
 $11 = 4;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!$5) {
     break label$3;
    }
    $10 = HEAP32[8754];
    if (!$10) {
     break label$3;
    }
    $6 = testSetjmp(HEAP32[$5 >> 2], $9, 4);
    if (!$6) {
     break label$2;
    }
    setTempRet0($10 | 0);
   }
   $5 = getTempRet0() | 0;
   if (($6 | 0) != 1) {
    HEAP32[$7 + 24 >> 2] = 2;
    HEAP32[$7 + 312 >> 2] = $8;
    $5 = 0;
    $9 = saveSetjmp($7 + 156 | 0, 1, $9, 4);
    $11 = getTempRet0() | 0;
   }
   label$6 : {
    label$7 : while (1) {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           if ($5) {
            HEAP32[8753] = 0;
            invoke_vi(3, $7 + 312 | 0);
            $5 = HEAP32[8753];
            HEAP32[8753] = 0;
            $6 = -1;
            if (!$5) {
             break label$12;
            }
            $8 = HEAP32[8754];
            if (!$8) {
             break label$12;
            }
            $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
            if ($6) {
             break label$13;
            }
            break label$1;
           }
           HEAP32[8753] = 0;
           invoke_viii(4, $7 + 312 | 0, 90, 488);
           $5 = HEAP32[8753];
           HEAP32[8753] = 0;
           $6 = -1;
           if (!$5) {
            break label$10;
           }
           $8 = HEAP32[8754];
           if (!$8) {
            break label$10;
           }
           $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
           if ($6) {
            break label$11;
           }
           break label$1;
          }
          setTempRet0($8 | 0);
         }
         $5 = getTempRet0() | 0;
         if (($6 | 0) != 1) {
          break label$9;
         }
         continue;
        }
        setTempRet0($8 | 0);
       }
       $5 = getTempRet0() | 0;
       if (($6 | 0) == 1) {
        continue;
       }
       HEAP32[8753] = 0;
       invoke_vii(5, $7 + 312 | 0, $0 | 0);
       $5 = HEAP32[8753];
       HEAP32[8753] = 0;
       $6 = -1;
       label$15 : {
        if (!$5) {
         break label$15;
        }
        $8 = HEAP32[8754];
        if (!$8) {
         break label$15;
        }
        $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
        if (!$6) {
         break label$1;
        }
        setTempRet0($8 | 0);
       }
       $5 = getTempRet0() | 0;
       if (($6 | 0) == 1) {
        continue;
       }
       HEAP32[8753] = 0;
       $8 = invoke_iii(6, $7 + 312 | 0, 1) | 0;
       $5 = HEAP32[8753];
       HEAP32[8753] = 0;
       $6 = -1;
       label$17 : {
        if (!$5) {
         break label$17;
        }
        $10 = HEAP32[8754];
        if (!$10) {
         break label$17;
        }
        $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
        if (!$6) {
         break label$2;
        }
        setTempRet0($10 | 0);
       }
       $5 = getTempRet0() | 0;
       if (($6 | 0) == 1) {
        continue;
       }
       label$19 : {
        label$20 : {
         label$21 : {
          label$22 : {
           label$23 : {
            if (($8 | 0) != 1) {
             HEAP32[8753] = 0;
             invoke_viiii(7, 0, 3, 7735, 0);
             $5 = HEAP32[8753];
             HEAP32[8753] = 0;
             $6 = -1;
             if (!$5) {
              break label$22;
             }
             $8 = HEAP32[8754];
             if (!$8) {
              break label$22;
             }
             $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
             if ($6) {
              break label$23;
             }
             break label$1;
            }
            HEAP32[8753] = 0;
            invoke_ii(8, $7 + 312 | 0) | 0;
            $5 = HEAP32[8753];
            HEAP32[8753] = 0;
            $6 = -1;
            if (!$5) {
             break label$20;
            }
            $8 = HEAP32[8754];
            if (!$8) {
             break label$20;
            }
            $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
            if ($6) {
             break label$21;
            }
            break label$1;
           }
           setTempRet0($8 | 0);
          }
          $5 = getTempRet0() | 0;
          if (($6 | 0) != 1) {
           break label$19;
          }
          continue;
         }
         setTempRet0($8 | 0);
        }
        $5 = getTempRet0() | 0;
        if (($6 | 0) == 1) {
         continue;
        }
        $10 = Math_imul(HEAP32[$7 + 340 >> 2], HEAP32[$7 + 348 >> 2]);
        $8 = dlmalloc(Math_imul($10, HEAP32[$7 + 344 >> 2]));
        if ($8) {
         $6 = 0;
         label$26 : {
          while (1) {
           label$28 : {
            $5 = 0;
            if (HEAPU32[$7 + 452 >> 2] >= HEAPU32[$7 + 428 >> 2]) {
             HEAP32[8753] = 0;
             invoke_ii(9, $7 + 312 | 0) | 0;
             $5 = HEAP32[8753];
             HEAP32[8753] = 0;
             $6 = -1;
             if (!$5) {
              break label$26;
             }
             $10 = HEAP32[8754];
             if (!$10) {
              break label$26;
             }
             $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
             if ($6) {
              break label$28;
             }
             break label$2;
            }
            while (1) {
             if (($5 | 0) != 5) {
              HEAP32[($5 << 2) + $7 >> 2] = Math_imul($5 + $6 | 0, $10) + $8;
              $5 = $5 + 1 | 0;
              continue;
             }
             break;
            }
            HEAP32[8753] = 0;
            $14 = invoke_iiii(10, $7 + 312 | 0, $7 | 0, 5) | 0;
            $5 = HEAP32[8753];
            HEAP32[8753] = 0;
            $12 = -1;
            label$32 : {
             if (!$5) {
              break label$32;
             }
             $13 = HEAP32[8754];
             if (!$13) {
              break label$32;
             }
             $12 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
             if (!$12) {
              emscripten_longjmp($5 | 0, $13 | 0);
              abort();
             }
             setTempRet0($13 | 0);
            }
            $5 = getTempRet0() | 0;
            if (($12 | 0) == 1) {
             continue label$7;
            }
            $6 = $6 + $14 | 0;
            continue;
           }
           break;
          }
          setTempRet0($10 | 0);
         }
         $5 = getTempRet0() | 0;
         if (($6 | 0) == 1) {
          continue;
         }
         HEAP32[8753] = 0;
         invoke_vi(3, $7 + 312 | 0);
         $5 = HEAP32[8753];
         HEAP32[8753] = 0;
         $6 = -1;
         label$34 : {
          if (!$5) {
           break label$34;
          }
          $10 = HEAP32[8754];
          if (!$10) {
           break label$34;
          }
          $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
          if (!$6) {
           break label$2;
          }
          setTempRet0($10 | 0);
         }
         $5 = getTempRet0() | 0;
         if (($6 | 0) == 1) {
          continue;
         }
         if ($1) {
          HEAP32[$1 >> 2] = HEAP32[$7 + 340 >> 2];
         }
         if ($2) {
          HEAP32[$2 >> 2] = HEAP32[$7 + 344 >> 2];
         }
         if ($3) {
          HEAP32[$3 >> 2] = HEAP32[$7 + 348 >> 2];
         }
         if (!$4) {
          break label$6;
         }
         label$39 : {
          label$40 : {
           label$41 : {
            label$42 : {
             $5 = HEAPU8[$7 + 602 | 0];
             switch ($5 - 1 | 0) {
             case 1:
              break label$41;
             case 0:
              break label$42;
             default:
              break label$40;
             }
            }
            $5 = HEAPU16[$7 + 604 >> 1];
            if (($5 | 0) != HEAPU16[$7 + 606 >> 1]) {
             break label$39;
            }
            HEAPF32[$4 >> 2] = $5 >>> 0;
            break label$6;
           }
           $5 = HEAPU16[$7 + 604 >> 1];
           if (($5 | 0) != HEAPU16[$7 + 606 >> 1]) {
            break label$39;
           }
           HEAPF32[$4 >> 2] = Math_fround($5 >>> 0) * Math_fround(2.5399999618530273);
           break label$6;
          }
          if (HEAPU16[$7 + 606 >> 1] | (HEAPU16[$7 + 604 >> 1] | $5 >>> 0 < 3)) {
           break label$39;
          }
          HEAPF32[$4 >> 2] = $5 >>> 0;
          break label$6;
         }
         HEAP32[$4 >> 2] = 0;
         break label$6;
        }
        HEAP32[8753] = 0;
        invoke_viiii(7, 0, 3, 1854, 0);
        $5 = HEAP32[8753];
        HEAP32[8753] = 0;
        $6 = -1;
        label$43 : {
         if (!$5) {
          break label$43;
         }
         $8 = HEAP32[8754];
         if (!$8) {
          break label$43;
         }
         $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
         if (!$6) {
          break label$1;
         }
         setTempRet0($8 | 0);
        }
        $5 = getTempRet0() | 0;
        if (($6 | 0) == 1) {
         continue;
        }
        HEAP32[8753] = 0;
        invoke_vi(3, $7 + 312 | 0);
        break label$8;
       }
       HEAP32[8753] = 0;
       invoke_vi(3, $7 + 312 | 0);
       break label$8;
      }
      HEAP32[8753] = 0;
      invoke_viiii(7, 0, 3, 7014, 0);
     }
     $5 = HEAP32[8753];
     HEAP32[8753] = 0;
     $6 = -1;
     label$45 : {
      if (!$5) {
       break label$45;
      }
      $8 = HEAP32[8754];
      if (!$8) {
       break label$45;
      }
      $6 = testSetjmp(HEAP32[$5 >> 2], $9, $11);
      if (!$6) {
       break label$1;
      }
      setTempRet0($8 | 0);
     }
     $5 = getTempRet0() | 0;
     if (($6 | 0) == 1) {
      continue;
     }
     break;
    }
    $8 = 0;
   }
   dlfree($9);
   __stack_pointer = $7 + 800 | 0;
   return $8;
  }
  emscripten_longjmp($5 | 0, $10 | 0);
  abort();
 }
 emscripten_longjmp($5 | 0, $8 | 0);
 abort();
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____rehash_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20_____alloc_28_29(std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___get_deleter_28_29($0));
 label$1 : {
  if ($1) {
   std____2__enable_if__CheckArrayPointerConversion_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________value_2c_20void___type_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___reset_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______29($0, std____2__allocator_traits_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___allocate_28std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________2c_20unsigned_20long_29($2, $1));
   wasm2js_i32$0 = std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___size_28_29(std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___get_deleter_28_29($0)), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $2 = 0;
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     $2 = std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________ptr_28_29(std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___first_28_29($0 + 8 | 0));
     $3 = HEAP32[$2 >> 2];
     if (!$3) {
      break label$1;
     }
     $7 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const($3), $1);
     wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $7), wasm2js_i32$1 = $2, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     while (1) {
      $4 = HEAP32[$3 >> 2];
      if (!$4) {
       break label$1;
      }
      label$6 : {
       $5 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const($4), $1);
       if (($7 | 0) == ($5 | 0)) {
        break label$6;
       }
       $6 = $4;
       if (!HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $5) >> 2]) {
        wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $5), wasm2js_i32$1 = $3, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $7 = $5;
        break label$6;
       }
       while (1) {
        label$9 : {
         $2 = $6;
         if (!HEAP32[$2 >> 2]) {
          $6 = 0;
          break label$9;
         }
         $8 = std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arIset__20const__2c_20std____2____hash_value_type_int_2c_20arIset__20const__29_20const(std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___key_eq_28_29($0), std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________upcast_28_29($4) + 8 | 0, std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________upcast_28_29(HEAP32[$2 >> 2]) + 8 | 0);
         $6 = HEAP32[$2 >> 2];
         if ($8) {
          continue;
         }
        }
        break;
       }
       HEAP32[$3 >> 2] = $6;
       wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAP32[HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $5) >> 2] >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       wasm2js_i32$0 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $5) >> 2], wasm2js_i32$1 = $4, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       continue;
      }
      $3 = $4;
      continue;
     }
    }
    wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $2), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2 = $2 + 1 | 0;
    continue;
   }
  }
  std____2__enable_if__CheckArrayPointerConversion_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________value_2c_20void___type_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___reset_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______29($0, 0);
  wasm2js_i32$0 = std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___size_28_29(std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___get_deleter_28_29($0)), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
}
function fill_inverse_cmap($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 $16 = __stack_pointer - 1408 | 0;
 __stack_pointer = $16;
 $5 = $3 << 3;
 $21 = $5 & -32 | 4;
 $6 = $2 << 2;
 $22 = $6 & -32 | 2;
 $8 = $1 << 3;
 $23 = $8 & -32 | 4;
 $24 = HEAP32[$0 + 484 >> 2];
 $14 = HEAP32[$0 + 132 >> 2];
 if (($14 | 0) >= 1) {
  $15 = $5 | 28;
  $17 = $21 + $15 >> 1;
  $13 = $6 | 30;
  $19 = $22 + $13 >> 1;
  $10 = $8 | 28;
  $18 = $23 + $10 >> 1;
  $5 = HEAP32[$0 + 136 >> 2];
  $9 = HEAP32[$5 + 8 >> 2];
  $7 = HEAP32[$5 + 4 >> 2];
  $20 = HEAP32[$5 >> 2];
  $5 = 0;
  $8 = 2147483647;
  while (1) {
   $6 = HEAPU8[$5 + $20 | 0];
   label$4 : {
    if (($23 | 0) > ($6 | 0)) {
     $4 = $6 - $10 << 1;
     $11 = Math_imul($4, $4);
     $6 = $6 - $23 << 1;
     $6 = Math_imul($6, $6);
     break label$4;
    }
    if (($6 | 0) > ($10 | 0)) {
     $4 = $6 - $23 << 1;
     $11 = Math_imul($4, $4);
     $6 = $6 - $10 << 1;
     $6 = Math_imul($6, $6);
     break label$4;
    }
    label$7 : {
     if (($6 | 0) <= ($18 | 0)) {
      $6 = $6 - $10 << 1;
      $11 = Math_imul($6, $6);
      break label$7;
     }
     $6 = $6 - $23 << 1;
     $11 = Math_imul($6, $6);
    }
    $6 = 0;
   }
   $4 = HEAPU8[$5 + $7 | 0];
   label$9 : {
    if (($22 | 0) > ($4 | 0)) {
     $12 = Math_imul($4 - $22 | 0, 3);
     $6 = Math_imul($12, $12) + $6 | 0;
     $4 = Math_imul($4 - $13 | 0, 3);
     $4 = Math_imul($4, $4);
     break label$9;
    }
    if (($4 | 0) > ($13 | 0)) {
     $12 = Math_imul($4 - $13 | 0, 3);
     $6 = Math_imul($12, $12) + $6 | 0;
     $4 = Math_imul($4 - $22 | 0, 3);
     $4 = Math_imul($4, $4);
     break label$9;
    }
    if (($4 | 0) <= ($19 | 0)) {
     $4 = Math_imul($4 - $13 | 0, 3);
     $4 = Math_imul($4, $4);
     break label$9;
    }
    $4 = Math_imul($4 - $22 | 0, 3);
    $4 = Math_imul($4, $4);
   }
   $11 = $11 + $4 | 0;
   $4 = HEAPU8[$5 + $9 | 0];
   label$13 : {
    if (($21 | 0) > ($4 | 0)) {
     $12 = $4 - $21 | 0;
     $6 = Math_imul($12, $12) + $6 | 0;
     $4 = $4 - $15 | 0;
     $4 = Math_imul($4, $4);
     break label$13;
    }
    if (($4 | 0) > ($15 | 0)) {
     $12 = $4 - $15 | 0;
     $6 = Math_imul($12, $12) + $6 | 0;
     $4 = $4 - $21 | 0;
     $4 = Math_imul($4, $4);
     break label$13;
    }
    if (($4 | 0) <= ($17 | 0)) {
     $4 = $4 - $15 | 0;
     $4 = Math_imul($4, $4);
     break label$13;
    }
    $4 = $4 - $21 | 0;
    $4 = Math_imul($4, $4);
   }
   HEAP32[($16 + 384 | 0) + ($5 << 2) >> 2] = $6;
   $6 = $11 + $4 | 0;
   $8 = ($6 | 0) < ($8 | 0) ? $6 : $8;
   $5 = $5 + 1 | 0;
   if (($14 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
  $19 = 0;
  $5 = 0;
  while (1) {
   if (HEAP32[($16 + 384 | 0) + ($5 << 2) >> 2] <= ($8 | 0)) {
    HEAP8[($16 + 128 | 0) + $19 | 0] = $5;
    $19 = $19 + 1 | 0;
   }
   $5 = $5 + 1 | 0;
   if (($14 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 $25 = HEAP32[$24 + 24 >> 2];
 $6 = 127;
 $5 = $16 + 384 | 0;
 while (1) {
  HEAP32[$5 >> 2] = 2147483647;
  $8 = $6;
  $6 = $6 - 1 | 0;
  $5 = $5 + 4 | 0;
  if ($8) {
   continue;
  }
  break;
 }
 if (($19 | 0) >= 1) {
  $20 = HEAP32[$0 + 136 >> 2];
  $12 = 0;
  while (1) {
   $8 = HEAPU8[($16 + 128 | 0) + $12 | 0];
   $4 = $21 - HEAPU8[$8 + HEAP32[$20 + 8 >> 2] | 0] | 0;
   $5 = $4 << 4;
   $14 = $5 + 320 | 0;
   $11 = $5 + 192 | 0;
   $15 = $5 - -64 | 0;
   $9 = $23 - HEAPU8[HEAP32[$20 >> 2] + $8 | 0] | 0;
   $17 = $9 << 6;
   $18 = $17 + 256 | 0;
   $7 = 7;
   $6 = $16;
   $5 = $6 + 384 | 0;
   $0 = $22 - HEAPU8[HEAP32[$20 + 4 >> 2] + $8 | 0] | 0;
   $13 = Math_imul($0, 72) + 144 | 0;
   $10 = $13;
   $0 = Math_imul($0, 3);
   $9 = $9 << 1;
   $0 = (Math_imul($0, $0) + Math_imul($9, $9) | 0) + Math_imul($4, $4) | 0;
   $4 = $0;
   while (1) {
    $9 = $7;
    if (HEAP32[$5 >> 2] > ($4 | 0)) {
     HEAP32[$5 >> 2] = $4;
     HEAP8[$6 | 0] = $8;
    }
    $7 = $4 + $15 | 0;
    if (($7 | 0) < HEAP32[$5 + 4 >> 2]) {
     HEAP32[$5 + 4 >> 2] = $7;
     HEAP8[$6 + 1 | 0] = $8;
    }
    $7 = $7 + $11 | 0;
    if (($7 | 0) < HEAP32[$5 + 8 >> 2]) {
     HEAP32[$5 + 8 >> 2] = $7;
     HEAP8[$6 + 2 | 0] = $8;
    }
    $7 = $7 + $14 | 0;
    if (($7 | 0) < HEAP32[$5 + 12 >> 2]) {
     HEAP32[$5 + 12 >> 2] = $7;
     HEAP8[$6 + 3 | 0] = $8;
    }
    $7 = $9 - 1 | 0;
    $4 = $4 + $10 | 0;
    $6 = $6 + 4 | 0;
    $5 = $5 + 16 | 0;
    $10 = $10 + 288 | 0;
    if ($9) {
     continue;
    }
    break;
   }
   $24 = $17 + 768 | 0;
   $7 = 7;
   $10 = $13;
   $18 = $0 + $18 | 0;
   $4 = $18;
   while (1) {
    $9 = $7;
    if (HEAP32[$5 >> 2] > ($4 | 0)) {
     HEAP32[$5 >> 2] = $4;
     HEAP8[$6 | 0] = $8;
    }
    $7 = $4 + $15 | 0;
    if (($7 | 0) < HEAP32[$5 + 4 >> 2]) {
     HEAP32[$5 + 4 >> 2] = $7;
     HEAP8[$6 + 1 | 0] = $8;
    }
    $7 = $7 + $11 | 0;
    if (($7 | 0) < HEAP32[$5 + 8 >> 2]) {
     HEAP32[$5 + 8 >> 2] = $7;
     HEAP8[$6 + 2 | 0] = $8;
    }
    $7 = $7 + $14 | 0;
    if (($7 | 0) < HEAP32[$5 + 12 >> 2]) {
     HEAP32[$5 + 12 >> 2] = $7;
     HEAP8[$6 + 3 | 0] = $8;
    }
    $7 = $9 - 1 | 0;
    $4 = $4 + $10 | 0;
    $6 = $6 + 4 | 0;
    $5 = $5 + 16 | 0;
    $10 = $10 + 288 | 0;
    if ($9) {
     continue;
    }
    break;
   }
   $17 = $17 + 1280 | 0;
   $7 = 7;
   $10 = $13;
   $18 = $18 + $24 | 0;
   $4 = $18;
   while (1) {
    $9 = $7;
    if (HEAP32[$5 >> 2] > ($4 | 0)) {
     HEAP32[$5 >> 2] = $4;
     HEAP8[$6 | 0] = $8;
    }
    $7 = $4 + $15 | 0;
    if (($7 | 0) < HEAP32[$5 + 4 >> 2]) {
     HEAP32[$5 + 4 >> 2] = $7;
     HEAP8[$6 + 1 | 0] = $8;
    }
    $7 = $7 + $11 | 0;
    if (($7 | 0) < HEAP32[$5 + 8 >> 2]) {
     HEAP32[$5 + 8 >> 2] = $7;
     HEAP8[$6 + 2 | 0] = $8;
    }
    $7 = $7 + $14 | 0;
    if (($7 | 0) < HEAP32[$5 + 12 >> 2]) {
     HEAP32[$5 + 12 >> 2] = $7;
     HEAP8[$6 + 3 | 0] = $8;
    }
    $7 = $9 - 1 | 0;
    $4 = $4 + $10 | 0;
    $6 = $6 + 4 | 0;
    $5 = $5 + 16 | 0;
    $10 = $10 + 288 | 0;
    if ($9) {
     continue;
    }
    break;
   }
   $4 = $17 + $18 | 0;
   $9 = 7;
   while (1) {
    $10 = $9;
    if (HEAP32[$5 >> 2] > ($4 | 0)) {
     HEAP32[$5 >> 2] = $4;
     HEAP8[$6 | 0] = $8;
    }
    $9 = $4 + $15 | 0;
    if (($9 | 0) < HEAP32[$5 + 4 >> 2]) {
     HEAP32[$5 + 4 >> 2] = $9;
     HEAP8[$6 + 1 | 0] = $8;
    }
    $9 = $9 + $11 | 0;
    if (($9 | 0) < HEAP32[$5 + 8 >> 2]) {
     HEAP32[$5 + 8 >> 2] = $9;
     HEAP8[$6 + 2 | 0] = $8;
    }
    $9 = $9 + $14 | 0;
    if (($9 | 0) < HEAP32[$5 + 12 >> 2]) {
     HEAP32[$5 + 12 >> 2] = $9;
     HEAP8[$6 + 3 | 0] = $8;
    }
    $9 = $10 - 1 | 0;
    $4 = $4 + $13 | 0;
    $6 = $6 + 4 | 0;
    $5 = $5 + 16 | 0;
    $13 = $13 + 288 | 0;
    if ($10) {
     continue;
    }
    break;
   }
   $12 = $12 + 1 | 0;
   if (($19 | 0) != ($12 | 0)) {
    continue;
   }
   break;
  }
 }
 $15 = $1 & -4;
 $14 = 0;
 $5 = $16;
 $6 = ($3 & -4) << 1;
 $11 = $2 & -8;
 $13 = ($11 | 1) << 6;
 $10 = ($11 | 2) << 6;
 $9 = ($11 | 3) << 6;
 $7 = ($11 | 4) << 6;
 $20 = ($11 | 5) << 6;
 $12 = ($11 | 6) << 6;
 $17 = ($2 | 7) << 6;
 while (1) {
  $8 = HEAP32[($14 + $15 << 2) + $25 >> 2];
  $4 = ($8 + ($11 << 6) | 0) + $6 | 0;
  HEAP16[$4 >> 1] = HEAPU8[$5 | 0] + 1;
  HEAP16[$4 + 2 >> 1] = HEAPU8[$5 + 1 | 0] + 1;
  HEAP16[$4 + 4 >> 1] = HEAPU8[$5 + 2 | 0] + 1;
  HEAP16[$4 + 6 >> 1] = HEAPU8[$5 + 3 | 0] + 1;
  $4 = ($8 + $13 | 0) + $6 | 0;
  HEAP16[$4 >> 1] = HEAPU8[$5 + 4 | 0] + 1;
  HEAP16[$4 + 2 >> 1] = HEAPU8[$5 + 5 | 0] + 1;
  HEAP16[$4 + 4 >> 1] = HEAPU8[$5 + 6 | 0] + 1;
  HEAP16[$4 + 6 >> 1] = HEAPU8[$5 + 7 | 0] + 1;
  $4 = ($8 + $10 | 0) + $6 | 0;
  HEAP16[$4 >> 1] = HEAPU8[$5 + 8 | 0] + 1;
  HEAP16[$4 + 2 >> 1] = HEAPU8[$5 + 9 | 0] + 1;
  HEAP16[$4 + 4 >> 1] = HEAPU8[$5 + 10 | 0] + 1;
  HEAP16[$4 + 6 >> 1] = HEAPU8[$5 + 11 | 0] + 1;
  $4 = ($8 + $9 | 0) + $6 | 0;
  HEAP16[$4 >> 1] = HEAPU8[$5 + 12 | 0] + 1;
  HEAP16[$4 + 2 >> 1] = HEAPU8[$5 + 13 | 0] + 1;
  HEAP16[$4 + 4 >> 1] = HEAPU8[$5 + 14 | 0] + 1;
  HEAP16[$4 + 6 >> 1] = HEAPU8[$5 + 15 | 0] + 1;
  $4 = ($8 + $7 | 0) + $6 | 0;
  HEAP16[$4 >> 1] = HEAPU8[$5 + 16 | 0] + 1;
  HEAP16[$4 + 2 >> 1] = HEAPU8[$5 + 17 | 0] + 1;
  HEAP16[$4 + 4 >> 1] = HEAPU8[$5 + 18 | 0] + 1;
  HEAP16[$4 + 6 >> 1] = HEAPU8[$5 + 19 | 0] + 1;
  $4 = ($8 + $20 | 0) + $6 | 0;
  HEAP16[$4 >> 1] = HEAPU8[$5 + 20 | 0] + 1;
  HEAP16[$4 + 2 >> 1] = HEAPU8[$5 + 21 | 0] + 1;
  HEAP16[$4 + 4 >> 1] = HEAPU8[$5 + 22 | 0] + 1;
  HEAP16[$4 + 6 >> 1] = HEAPU8[$5 + 23 | 0] + 1;
  $4 = ($8 + $12 | 0) + $6 | 0;
  HEAP16[$4 >> 1] = HEAPU8[$5 + 24 | 0] + 1;
  HEAP16[$4 + 2 >> 1] = HEAPU8[$5 + 25 | 0] + 1;
  HEAP16[$4 + 4 >> 1] = HEAPU8[$5 + 26 | 0] + 1;
  HEAP16[$4 + 6 >> 1] = HEAPU8[$5 + 27 | 0] + 1;
  $8 = ($8 + $17 | 0) + $6 | 0;
  HEAP16[$8 >> 1] = HEAPU8[$5 + 28 | 0] + 1;
  HEAP16[$8 + 2 >> 1] = HEAPU8[$5 + 29 | 0] + 1;
  HEAP16[$8 + 4 >> 1] = HEAPU8[$5 + 30 | 0] + 1;
  HEAP16[$8 + 6 >> 1] = HEAPU8[$5 + 31 | 0] + 1;
  $5 = $5 + 32 | 0;
  $14 = $14 + 1 | 0;
  if (($14 | 0) != 4) {
   continue;
  }
  break;
 }
 __stack_pointer = $16 + 1408 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNewExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 96 | 0, 23380);
 $2 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 32 >> 2] = $2;
 HEAP32[$1 + 36 >> 2] = $4;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 32 | 0), HEAP8[wasm2js_i32$0 + 111 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) == 97, HEAP8[wasm2js_i32$0 + 95 | 0] = wasm2js_i32$1;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 80 | 0, 28456);
 $4 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 24 >> 2] = $4;
 HEAP32[$1 + 28 >> 2] = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 24 | 0)) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 72 | 0, 28459);
   $2 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $4;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
    break label$1;
   }
  }
  $6 = $0 + 8 | 0;
  $5 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($6);
  label$3 : {
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     HEAP32[$1 + 64 >> 2] = $2;
     if (!$2) {
      break label$3;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($6, $1 - -64 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 - -64 | 0, $0, $5);
   $7 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($7);
   HEAP32[$1 + 60 >> 2] = $2;
   $5 = 0;
   if (!$2) {
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 48 | 0, 28462);
   $4 = HEAP32[$3 >> 2];
   $2 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1 + 8 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = $2;
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
    $4 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($6);
    while (1) {
     if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($7);
      HEAP32[$1 + 40 >> 2] = $2;
      if (!$2) {
       break label$1;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($6, $1 + 40 | 0);
      continue;
     }
     break;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 40 | 0, $0, $4);
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1 - -64 | 0, $1 + 60 | 0, $1 + 40 | 0, $1 + 111 | 0, $1 + 95 | 0);
    break label$1;
   }
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
    break label$1;
   }
   $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20bool__2c_20bool__29($0, $1 - -64 | 0, $1 + 60 | 0, $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($1 + 40 | 0), $1 + 111 | 0, $1 + 95 | 0);
   break label$1;
  }
  $5 = 0;
 }
 __stack_pointer = $1 + 112 | 0;
 return $5;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parse_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 88 | 0, 22360);
 $3 = HEAP32[$2 >> 2];
 $5 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 32 >> 2] = $3;
 HEAP32[$1 + 36 >> 2] = $5;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 32 | 0)) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 80 | 0, 22363);
    $5 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 24 >> 2] = $5;
    HEAP32[$1 + 28 >> 2] = $3;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 24 | 0)) {
     break label$2;
    }
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   HEAP32[$1 + 76 >> 2] = $4;
   if (!$4) {
    $4 = 0;
    break label$1;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) == 46) {
    $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DotSuffix_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___29($0, $1 + 76 | 0, $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($1 - -64 | 0, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]));
    HEAP32[$1 + 76 >> 2] = $4;
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) ? 0 : $4;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 56 | 0, 22367);
  $3 = HEAP32[$2 >> 2];
  $5 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 16 >> 2] = $3;
  HEAP32[$1 + 20 >> 2] = $5;
  label$6 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
    $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 48 | 0, 22372);
    $5 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 + 8 >> 2] = $5;
    HEAP32[$1 + 12 >> 2] = $3;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
     break label$6;
    }
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   HEAP32[$1 + 76 >> 2] = $3;
   if (!$3) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 40 | 0, 22378);
   $3 = HEAP32[$2 >> 2];
   $5 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = $3;
   HEAP32[$1 + 4 >> 2] = $5;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1)) {
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95);
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 - -64 | 0, $0, 0);
   if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($1 - -64 | 0) ? $3 : 0) {
    break label$1;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) == 46) {
    HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0)) {
    break label$1;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, 22392, $1 + 76 | 0);
   break label$1;
  }
  $4 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0)), wasm2js_i32$2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
 }
 __stack_pointer = $1 + 96 | 0;
 return $4;
}
function dlfree($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 label$1 : {
  label$2 : {
   if (!$0) {
    break label$2;
   }
   $3 = $0 - 8 | 0;
   $1 = HEAP32[$0 - 4 >> 2];
   $0 = $1 & -8;
   $5 = $3 + $0 | 0;
   label$3 : {
    if ($1 & 1) {
     break label$3;
    }
    if (!($1 & 3)) {
     break label$2;
    }
    $1 = HEAP32[$3 >> 2];
    $3 = $3 - $1 | 0;
    $4 = HEAP32[8760];
    if ($3 >>> 0 < $4 >>> 0) {
     break label$2;
    }
    $0 = $0 + $1 | 0;
    if (HEAP32[8761] != ($3 | 0)) {
     if ($1 >>> 0 <= 255) {
      $7 = $1 >>> 3 | 0;
      $1 = ($7 << 3) + 35064 | 0;
      $6 = HEAP32[$3 + 8 >> 2];
      $2 = HEAP32[$3 + 12 >> 2];
      if (($6 | 0) == ($2 | 0)) {
       wasm2js_i32$0 = 35024, wasm2js_i32$1 = HEAP32[8756] & __wasm_rotl_i32(-2, $7), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$3;
      }
      HEAP32[$6 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $6;
      break label$3;
     }
     $7 = HEAP32[$3 + 24 >> 2];
     $2 = HEAP32[$3 + 12 >> 2];
     label$7 : {
      if (($2 | 0) != ($3 | 0)) {
       $1 = HEAP32[$3 + 8 >> 2];
       HEAP32[$1 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $1;
       break label$7;
      }
      label$10 : {
       $1 = $3 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$10;
       }
       $1 = $3 + 16 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$10;
       }
       $2 = 0;
       break label$7;
      }
      while (1) {
       $6 = $1;
       $2 = $4;
       $1 = $2 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        continue;
       }
       $1 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$3;
     }
     $4 = HEAP32[$3 + 28 >> 2];
     $1 = ($4 << 2) + 35328 | 0;
     label$12 : {
      if (HEAP32[$1 >> 2] == ($3 | 0)) {
       HEAP32[$1 >> 2] = $2;
       if ($2) {
        break label$12;
       }
       wasm2js_i32$0 = 35028, wasm2js_i32$1 = HEAP32[8757] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$3;
      }
      HEAP32[(HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) + $7 >> 2] = $2;
      if (!$2) {
       break label$3;
      }
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $1 = HEAP32[$3 + 16 >> 2];
     if ($1) {
      HEAP32[$2 + 16 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     $1 = HEAP32[$3 + 20 >> 2];
     if (!$1) {
      break label$3;
     }
     HEAP32[$2 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $2;
     break label$3;
    }
    $1 = HEAP32[$5 + 4 >> 2];
    if (($1 & 3) != 3) {
     break label$3;
    }
    HEAP32[8758] = $0;
    HEAP32[$5 + 4 >> 2] = $1 & -2;
    break label$1;
   }
   if ($3 >>> 0 >= $5 >>> 0) {
    break label$2;
   }
   $1 = HEAP32[$5 + 4 >> 2];
   if (!($1 & 1)) {
    break label$2;
   }
   label$15 : {
    if (!($1 & 2)) {
     if (HEAP32[8762] == ($5 | 0)) {
      HEAP32[8762] = $3;
      $0 = HEAP32[8759] + $0 | 0;
      HEAP32[8759] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      if (HEAP32[8761] != ($3 | 0)) {
       break label$2;
      }
      HEAP32[8758] = 0;
      HEAP32[8761] = 0;
      return;
     }
     if (HEAP32[8761] == ($5 | 0)) {
      HEAP32[8761] = $3;
      $0 = HEAP32[8758] + $0 | 0;
      HEAP32[8758] = $0;
      break label$1;
     }
     $0 = ($1 & -8) + $0 | 0;
     label$19 : {
      if ($1 >>> 0 <= 255) {
       $4 = HEAP32[$5 + 12 >> 2];
       $2 = HEAP32[$5 + 8 >> 2];
       $5 = $1 >>> 3 | 0;
       if (($2 | 0) == ($4 | 0)) {
        wasm2js_i32$0 = 35024, wasm2js_i32$1 = HEAP32[8756] & __wasm_rotl_i32(-2, $5), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$19;
       }
       HEAP32[$2 + 12 >> 2] = $4;
       HEAP32[$4 + 8 >> 2] = $2;
       break label$19;
      }
      $7 = HEAP32[$5 + 24 >> 2];
      $2 = HEAP32[$5 + 12 >> 2];
      label$24 : {
       if (($5 | 0) != ($2 | 0)) {
        $1 = HEAP32[$5 + 8 >> 2];
        HEAP32[$1 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $1;
        break label$24;
       }
       label$27 : {
        $1 = $5 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $1 = $5 + 16 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $2 = 0;
        break label$24;
       }
       while (1) {
        $6 = $1;
        $2 = $4;
        $1 = $2 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         continue;
        }
        $1 = $2 + 16 | 0;
        $4 = HEAP32[$2 + 16 >> 2];
        if ($4) {
         continue;
        }
        break;
       }
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$19;
      }
      $4 = HEAP32[$5 + 28 >> 2];
      $1 = ($4 << 2) + 35328 | 0;
      label$29 : {
       if (HEAP32[$1 >> 2] == ($5 | 0)) {
        HEAP32[$1 >> 2] = $2;
        if ($2) {
         break label$29;
        }
        wasm2js_i32$0 = 35028, wasm2js_i32$1 = HEAP32[8757] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$19;
       }
       HEAP32[(HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $7 >> 2] = $2;
       if (!$2) {
        break label$19;
       }
      }
      HEAP32[$2 + 24 >> 2] = $7;
      $1 = HEAP32[$5 + 16 >> 2];
      if ($1) {
       HEAP32[$2 + 16 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $2;
      }
      $1 = HEAP32[$5 + 20 >> 2];
      if (!$1) {
       break label$19;
      }
      HEAP32[$2 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
     if (HEAP32[8761] != ($3 | 0)) {
      break label$15;
     }
     HEAP32[8758] = $0;
     return;
    }
    HEAP32[$5 + 4 >> 2] = $1 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
   }
   if ($0 >>> 0 <= 255) {
    $1 = $0 >>> 3 | 0;
    $0 = ($1 << 3) + 35064 | 0;
    $1 = 1 << $1;
    $4 = HEAP32[8756];
    label$33 : {
     if (!($1 & $4)) {
      HEAP32[8756] = $1 | $4;
      $1 = $0;
      break label$33;
     }
     $1 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$0 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$3 + 8 >> 2] = $1;
    return;
   }
   $1 = 31;
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   if ($0 >>> 0 <= 16777215) {
    $1 = $0 >>> 8 | 0;
    $2 = $1;
    $1 = $1 + 1048320 >>> 16 & 8;
    $4 = $2 << $1;
    $2 = $4;
    $4 = $4 + 520192 >>> 16 & 4;
    $2 = $2 << $4;
    $6 = $2;
    $2 = $2 + 245760 >>> 16 & 2;
    $1 = ($6 << $2 >>> 15 | 0) - ($1 | $4 | $2) | 0;
    $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$3 + 28 >> 2] = $1;
   $4 = ($1 << 2) + 35328 | 0;
   label$36 : {
    label$37 : {
     $2 = HEAP32[8757];
     $5 = 1 << $1;
     label$38 : {
      if (!($2 & $5)) {
       HEAP32[8757] = $2 | $5;
       HEAP32[$4 >> 2] = $3;
       break label$38;
      }
      $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
      $2 = HEAP32[$4 >> 2];
      while (1) {
       $4 = $2;
       if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
        break label$37;
       }
       $2 = $1 >>> 29 | 0;
       $1 = $1 << 1;
       $6 = ($2 & 4) + $4 | 0;
       $5 = $6 + 16 | 0;
       $2 = HEAP32[$5 >> 2];
       if ($2) {
        continue;
       }
       break;
      }
      HEAP32[$6 + 16 >> 2] = $3;
     }
     HEAP32[$3 + 24 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$36;
    }
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$4 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = $0;
   }
   $3 = HEAP32[8764] - 1 | 0;
   HEAP32[8764] = $3;
   if ($3) {
    break label$2;
   }
   $3 = 35480;
   while (1) {
    $0 = HEAP32[$3 >> 2];
    $3 = $0 + 8 | 0;
    if ($0) {
     continue;
    }
    break;
   }
   HEAP32[8764] = -1;
  }
  return;
 }
 HEAP32[$3 + 4 >> 2] = $0 | 1;
 HEAP32[$0 + $3 >> 2] = $0;
}
function decode_mcu_sub($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 $8 = HEAP32[$0 + 468 >> 2];
 label$1 : {
  label$2 : {
   if (HEAP32[$8 + 44 >> 2] | !HEAP32[$0 + 280 >> 2]) {
    break label$2;
   }
   $3 = HEAP32[$0 + 464 >> 2];
   $7 = $8 + 16 | 0;
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + (HEAP32[$7 >> 2] / 8 | 0);
   HEAP32[$8 + 16 >> 2] = 0;
   if (!(FUNCTION_TABLE[HEAP32[$3 + 8 >> 2]]($0) | 0)) {
    break label$1;
   }
   if (HEAP32[$0 + 340 >> 2] >= 1) {
    $3 = 0;
    while (1) {
     HEAP32[(($3 << 2) + $8 | 0) + 24 >> 2] = 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) < HEAP32[$0 + 340 >> 2]) {
      continue;
     }
     break;
    }
   }
   HEAP32[$8 + 20 >> 2] = 0;
   HEAP32[$8 + 44 >> 2] = HEAP32[$0 + 280 >> 2];
   if (HEAP32[$0 + 440 >> 2]) {
    break label$2;
   }
   HEAP32[$8 + 40 >> 2] = 0;
  }
  if (!HEAP32[$8 + 40 >> 2]) {
   $13 = HEAP32[$0 + 436 >> 2];
   $15 = HEAP32[$0 + 432 >> 2];
   HEAP32[$4 + 40 >> 2] = $0;
   $6 = HEAP32[$0 + 24 >> 2];
   $10 = HEAP32[$6 >> 2];
   HEAP32[$4 + 24 >> 2] = $10;
   $2 = HEAP32[$6 + 4 >> 2];
   HEAP32[$4 + 28 >> 2] = $2;
   $3 = HEAP32[$8 + 16 >> 2];
   $7 = HEAP32[$8 + 12 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$8 + 36 >> 2];
   $5 = HEAP32[$8 + 32 >> 2];
   $9 = HEAP32[$8 + 28 >> 2];
   HEAP32[$4 + 8 >> 2] = $9;
   HEAP32[$4 + 12 >> 2] = $5;
   $9 = HEAP32[$8 + 24 >> 2];
   $5 = HEAP32[$8 + 20 >> 2];
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = $9;
   if (HEAP32[$0 + 368 >> 2] >= 1) {
    while (1) {
     $9 = $11 << 2;
     $14 = HEAP32[$9 + $1 >> 2];
     $6 = $8 + $9 | 0;
     $10 = HEAP32[$6 + 100 >> 2];
     label$8 : {
      label$9 : {
       label$10 : {
        if (($3 | 0) <= 7) {
         $5 = 0;
         if (!jpeg_fill_bit_buffer($4 + 24 | 0, $7, $3, 0)) {
          break label$1;
         }
         $7 = HEAP32[$4 + 32 >> 2];
         $3 = HEAP32[$4 + 36 >> 2];
         $2 = 1;
         if (($3 | 0) < 8) {
          break label$10;
         }
        }
        $2 = $7 >> $3 - 8 & 255;
        $5 = HEAP32[(($2 << 2) + $10 | 0) + 144 >> 2];
        if ($5) {
         break label$9;
        }
        $2 = 9;
       }
       $5 = 0;
       $2 = jpeg_huff_decode($4 + 24 | 0, $7, $3, $10, $2);
       if (($2 | 0) < 0) {
        break label$1;
       }
       $7 = HEAP32[$4 + 32 >> 2];
       $3 = HEAP32[$4 + 36 >> 2];
       break label$8;
      }
      $2 = HEAPU8[($2 + $10 | 0) + 1168 | 0];
      $3 = $3 - $5 | 0;
     }
     $10 = HEAP32[$6 + 140 >> 2];
     $12 = HEAP32[$6 + 180 >> 2];
     label$12 : {
      label$13 : {
       if ($12) {
        if ($2) {
         if (($3 | 0) < ($2 | 0)) {
          if (!jpeg_fill_bit_buffer($4 + 24 | 0, $7, $3, $2)) {
           $5 = 0;
           break label$1;
          }
          $7 = HEAP32[$4 + 32 >> 2];
          $3 = HEAP32[$4 + 36 >> 2];
         }
         $3 = $3 - $2 | 0;
         $6 = $2 << 2;
         $2 = HEAP32[$6 + 18080 >> 2];
         $5 = $2 & $7 >> $3;
         $2 = $5 - (HEAP32[$6 + 18076 >> 2] < ($5 | 0) ? 0 : $2) | 0;
        } else {
         $2 = 0;
        }
        $9 = (HEAP32[($0 + $9 | 0) + 372 >> 2] << 2) + $4 | 0;
        $6 = $9 + 4 | 0;
        $5 = $6;
        $6 = $2 + HEAP32[$9 + 4 >> 2] | 0;
        HEAP32[$5 >> 2] = $6;
        HEAP16[$14 >> 1] = $6;
        $6 = 1;
        if (($12 | 0) < 2) {
         break label$13;
        }
        while (1) {
         label$20 : {
          label$21 : {
           label$22 : {
            if (($3 | 0) <= 7) {
             $5 = 0;
             if (!jpeg_fill_bit_buffer($4 + 24 | 0, $7, $3, 0)) {
              break label$1;
             }
             $7 = HEAP32[$4 + 32 >> 2];
             $3 = HEAP32[$4 + 36 >> 2];
             $2 = 1;
             if (($3 | 0) < 8) {
              break label$22;
             }
            }
            $2 = $7 >> $3 - 8 & 255;
            $5 = HEAP32[(($2 << 2) + $10 | 0) + 144 >> 2];
            if ($5) {
             break label$21;
            }
            $2 = 9;
           }
           $5 = 0;
           $2 = jpeg_huff_decode($4 + 24 | 0, $7, $3, $10, $2);
           if (($2 | 0) < 0) {
            break label$1;
           }
           $7 = HEAP32[$4 + 32 >> 2];
           $3 = HEAP32[$4 + 36 >> 2];
           break label$20;
          }
          $2 = HEAPU8[($2 + $10 | 0) + 1168 | 0];
          $3 = $3 - $5 | 0;
         }
         $5 = $2 >>> 4 | 0;
         $2 = $2 & 15;
         label$24 : {
          if ($2) {
           if (($3 | 0) < ($2 | 0)) {
            if (!jpeg_fill_bit_buffer($4 + 24 | 0, $7, $3, $2)) {
             $5 = 0;
             break label$1;
            }
            $7 = HEAP32[$4 + 32 >> 2];
            $3 = HEAP32[$4 + 36 >> 2];
           }
           $3 = $3 - $2 | 0;
           $6 = $5 + $6 | 0;
           $2 = $2 << 2;
           $5 = HEAP32[$2 + 18080 >> 2];
           $9 = $5 & $7 >> $3;
           HEAP16[(HEAP32[($6 << 2) + $15 >> 2] << 1) + $14 >> 1] = $9 - (HEAP32[$2 + 18076 >> 2] < ($9 | 0) ? 0 : $5);
           break label$24;
          }
          if (($5 | 0) != 15) {
           break label$12;
          }
          $6 = $6 + 15 | 0;
         }
         $6 = $6 + 1 | 0;
         if (($12 | 0) > ($6 | 0)) {
          continue;
         }
         break;
        }
        break label$13;
       }
       $6 = 1;
       if (!$2) {
        break label$13;
       }
       if (($3 | 0) < ($2 | 0)) {
        if (!jpeg_fill_bit_buffer($4 + 24 | 0, $7, $3, $2)) {
         $5 = 0;
         break label$1;
        }
        $7 = HEAP32[$4 + 32 >> 2];
        $3 = HEAP32[$4 + 36 >> 2];
       }
       $3 = $3 - $2 | 0;
      }
      if (($6 | 0) > ($13 | 0)) {
       break label$12;
      }
      while (1) {
       label$31 : {
        label$32 : {
         label$33 : {
          if (($3 | 0) <= 7) {
           $5 = 0;
           if (!jpeg_fill_bit_buffer($4 + 24 | 0, $7, $3, 0)) {
            break label$1;
           }
           $7 = HEAP32[$4 + 32 >> 2];
           $3 = HEAP32[$4 + 36 >> 2];
           $2 = 1;
           if (($3 | 0) < 8) {
            break label$33;
           }
          }
          $2 = $7 >> $3 - 8 & 255;
          $5 = HEAP32[(($2 << 2) + $10 | 0) + 144 >> 2];
          if ($5) {
           break label$32;
          }
          $2 = 9;
         }
         $5 = 0;
         $2 = jpeg_huff_decode($4 + 24 | 0, $7, $3, $10, $2);
         if (($2 | 0) < 0) {
          break label$1;
         }
         $7 = HEAP32[$4 + 32 >> 2];
         $3 = HEAP32[$4 + 36 >> 2];
         break label$31;
        }
        $2 = HEAPU8[($2 + $10 | 0) + 1168 | 0];
        $3 = $3 - $5 | 0;
       }
       $5 = $2 >>> 4 | 0;
       $2 = $2 & 15;
       label$35 : {
        if ($2) {
         if (($3 | 0) < ($2 | 0)) {
          if (!jpeg_fill_bit_buffer($4 + 24 | 0, $7, $3, $2)) {
           $5 = 0;
           break label$1;
          }
          $7 = HEAP32[$4 + 32 >> 2];
          $3 = HEAP32[$4 + 36 >> 2];
         }
         $3 = $3 - $2 | 0;
         break label$35;
        }
        if (($5 | 0) != 15) {
         break label$12;
        }
       }
       $6 = ($5 + $6 | 0) + 1 | 0;
       if (($13 | 0) >= ($6 | 0)) {
        continue;
       }
       break;
      }
     }
     $11 = $11 + 1 | 0;
     if (($11 | 0) < HEAP32[$0 + 368 >> 2]) {
      continue;
     }
     break;
    }
    $6 = HEAP32[$0 + 24 >> 2];
    $10 = HEAP32[$4 + 24 >> 2];
    $2 = HEAP32[$4 + 28 >> 2];
   }
   HEAP32[$6 + 4 >> 2] = $2;
   HEAP32[$6 >> 2] = $10;
   HEAP32[$8 + 16 >> 2] = $3;
   HEAP32[$8 + 12 >> 2] = $7;
   $3 = $8 + 20 | 0;
   HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
   $5 = HEAP32[$4 + 12 >> 2];
   $9 = HEAP32[$4 + 8 >> 2];
   HEAP32[$8 + 28 >> 2] = $9;
   HEAP32[$8 + 32 >> 2] = $5;
   $9 = HEAP32[$4 + 4 >> 2];
   $5 = HEAP32[$4 >> 2];
   HEAP32[$8 + 20 >> 2] = $5;
   HEAP32[$8 + 24 >> 2] = $9;
  }
  HEAP32[$8 + 44 >> 2] = HEAP32[$8 + 44 >> 2] - 1;
  $5 = 1;
 }
 __stack_pointer = $4 + 48 | 0;
 return $5 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 83)) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
  if (islower($2)) {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         switch ($2 - 97 | 0) {
         default:
          switch ($2 - 111 | 0) {
          case 0:
           break label$5;
          case 4:
           break label$7;
          default:
           break label$1;
          }
         case 0:
          HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
          HEAP32[$1 + 12 >> 2] = 0;
          $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
          break label$3;
         case 2:
         case 4:
         case 5:
         case 6:
         case 7:
          break label$1;
         case 3:
          break label$4;
         case 8:
          break label$6;
         case 1:
          break label$8;
         }
        }
        HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
        HEAP32[$1 + 12 >> 2] = 1;
        $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
        break label$3;
       }
       HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
       HEAP32[$1 + 12 >> 2] = 2;
       $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
       break label$3;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      HEAP32[$1 + 12 >> 2] = 3;
      $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
      break label$3;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     HEAP32[$1 + 12 >> 2] = 4;
     $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
     break label$3;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    HEAP32[$1 + 12 >> 2] = 5;
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1 + 12 | 0);
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), $3);
   HEAP32[$1 + 12 >> 2] = $2;
   if (($2 | 0) == ($3 | 0)) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $1 + 12 | 0);
   $3 = $2;
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   $0 = $0 + 148 | 0;
   if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___empty_28_29_20const($0)) {
    break label$1;
   }
   $3 = HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___operator_5b_5d_28unsigned_20long_29($0, 0) >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $1 + 12 | 0)) {
   break label$1;
  }
  $2 = HEAP32[$1 + 12 >> 2];
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   break label$1;
  }
  $2 = $2 + 1 | 0;
  $0 = $0 + 148 | 0;
  if ($2 >>> 0 >= $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0) >>> 0) {
   break label$1;
  }
  $3 = HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___operator_5b_5d_28unsigned_20long_29($0, $2) >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return $3;
}
function decode_mcu_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 $7 = HEAP32[$0 + 468 >> 2];
 label$1 : {
  label$2 : {
   if (HEAP32[$7 + 44 >> 2] | !HEAP32[$0 + 280 >> 2]) {
    break label$2;
   }
   $3 = HEAP32[$0 + 464 >> 2];
   $6 = $7 + 16 | 0;
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + (HEAP32[$6 >> 2] / 8 | 0);
   HEAP32[$7 + 16 >> 2] = 0;
   if (!(FUNCTION_TABLE[HEAP32[$3 + 8 >> 2]]($0) | 0)) {
    break label$1;
   }
   if (HEAP32[$0 + 340 >> 2] >= 1) {
    $3 = 0;
    while (1) {
     HEAP32[(($3 << 2) + $7 | 0) + 24 >> 2] = 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) < HEAP32[$0 + 340 >> 2]) {
      continue;
     }
     break;
    }
   }
   HEAP32[$7 + 20 >> 2] = 0;
   HEAP32[$7 + 44 >> 2] = HEAP32[$0 + 280 >> 2];
   if (HEAP32[$0 + 440 >> 2]) {
    break label$2;
   }
   HEAP32[$7 + 40 >> 2] = 0;
  }
  if (!HEAP32[$7 + 40 >> 2]) {
   HEAP32[$4 + 40 >> 2] = $0;
   $2 = HEAP32[$0 + 24 >> 2];
   $8 = HEAP32[$2 >> 2];
   HEAP32[$4 + 24 >> 2] = $8;
   $9 = HEAP32[$2 + 4 >> 2];
   HEAP32[$4 + 28 >> 2] = $9;
   $3 = HEAP32[$7 + 16 >> 2];
   $6 = HEAP32[$7 + 12 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$7 + 36 >> 2];
   $5 = HEAP32[$7 + 32 >> 2];
   $10 = HEAP32[$7 + 28 >> 2];
   HEAP32[$4 + 8 >> 2] = $10;
   HEAP32[$4 + 12 >> 2] = $5;
   $10 = HEAP32[$7 + 24 >> 2];
   $5 = HEAP32[$7 + 20 >> 2];
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = $10;
   if (HEAP32[$0 + 368 >> 2] >= 1) {
    while (1) {
     $10 = $11 << 2;
     $13 = HEAP32[$10 + $1 >> 2];
     $8 = $7 + $10 | 0;
     $2 = HEAP32[$8 + 100 >> 2];
     label$8 : {
      label$9 : {
       label$10 : {
        if (($3 | 0) <= 7) {
         $5 = 0;
         if (!jpeg_fill_bit_buffer($4 + 24 | 0, $6, $3, 0)) {
          break label$1;
         }
         $6 = HEAP32[$4 + 32 >> 2];
         $3 = HEAP32[$4 + 36 >> 2];
         $9 = 1;
         if (($3 | 0) < 8) {
          break label$10;
         }
        }
        $9 = $6 >> $3 - 8 & 255;
        $5 = HEAP32[(($9 << 2) + $2 | 0) + 144 >> 2];
        if ($5) {
         break label$9;
        }
        $9 = 9;
       }
       $5 = 0;
       $2 = jpeg_huff_decode($4 + 24 | 0, $6, $3, $2, $9);
       if (($2 | 0) < 0) {
        break label$1;
       }
       $6 = HEAP32[$4 + 32 >> 2];
       $3 = HEAP32[$4 + 36 >> 2];
       break label$8;
      }
      $2 = HEAPU8[($2 + $9 | 0) + 1168 | 0];
      $3 = $3 - $5 | 0;
     }
     $9 = HEAP32[$8 + 140 >> 2];
     $12 = HEAP32[$8 + 180 >> 2];
     label$12 : {
      label$13 : {
       if ($12) {
        if ($2) {
         if (($3 | 0) < ($2 | 0)) {
          if (!jpeg_fill_bit_buffer($4 + 24 | 0, $6, $3, $2)) {
           $5 = 0;
           break label$1;
          }
          $6 = HEAP32[$4 + 32 >> 2];
          $3 = HEAP32[$4 + 36 >> 2];
         }
         $3 = $3 - $2 | 0;
         $2 = $2 << 2;
         $8 = HEAP32[$2 + 18080 >> 2];
         $5 = $8 & $6 >> $3;
         $8 = $5 - (HEAP32[$2 + 18076 >> 2] < ($5 | 0) ? 0 : $8) | 0;
        } else {
         $8 = 0;
        }
        $10 = (HEAP32[($0 + $10 | 0) + 372 >> 2] << 2) + $4 | 0;
        $2 = $10 + 4 | 0;
        $5 = $2;
        $2 = $8 + HEAP32[$10 + 4 >> 2] | 0;
        HEAP32[$5 >> 2] = $2;
        HEAP16[$13 >> 1] = $2;
        $8 = 1;
        if (($12 | 0) < 2) {
         break label$13;
        }
        while (1) {
         label$20 : {
          label$21 : {
           label$22 : {
            if (($3 | 0) <= 7) {
             $5 = 0;
             if (!jpeg_fill_bit_buffer($4 + 24 | 0, $6, $3, 0)) {
              break label$1;
             }
             $6 = HEAP32[$4 + 32 >> 2];
             $3 = HEAP32[$4 + 36 >> 2];
             $2 = 1;
             if (($3 | 0) < 8) {
              break label$22;
             }
            }
            $2 = $6 >> $3 - 8 & 255;
            $5 = HEAP32[(($2 << 2) + $9 | 0) + 144 >> 2];
            if ($5) {
             break label$21;
            }
            $2 = 9;
           }
           $5 = 0;
           $2 = jpeg_huff_decode($4 + 24 | 0, $6, $3, $9, $2);
           if (($2 | 0) < 0) {
            break label$1;
           }
           $6 = HEAP32[$4 + 32 >> 2];
           $3 = HEAP32[$4 + 36 >> 2];
           break label$20;
          }
          $2 = HEAPU8[($2 + $9 | 0) + 1168 | 0];
          $3 = $3 - $5 | 0;
         }
         $5 = $2 >>> 4 | 0;
         $2 = $2 & 15;
         label$24 : {
          if ($2) {
           if (($3 | 0) < ($2 | 0)) {
            if (!jpeg_fill_bit_buffer($4 + 24 | 0, $6, $3, $2)) {
             $5 = 0;
             break label$1;
            }
            $6 = HEAP32[$4 + 32 >> 2];
            $3 = HEAP32[$4 + 36 >> 2];
           }
           $3 = $3 - $2 | 0;
           $5 = $5 + $8 | 0;
           $2 = $2 << 2;
           $8 = HEAP32[$2 + 18080 >> 2];
           $10 = $8 & $6 >> $3;
           HEAP16[(HEAP32[($5 << 2) + 14992 >> 2] << 1) + $13 >> 1] = $10 - (HEAP32[$2 + 18076 >> 2] < ($10 | 0) ? 0 : $8);
           break label$24;
          }
          if (($5 | 0) != 15) {
           break label$12;
          }
          $5 = $8 + 15 | 0;
         }
         $8 = $5 + 1 | 0;
         if (($12 | 0) > ($8 | 0)) {
          continue;
         }
         break;
        }
        if (($5 | 0) <= 62) {
         break label$13;
        }
        break label$12;
       }
       $8 = 1;
       if (!$2) {
        break label$13;
       }
       if (($3 | 0) < ($2 | 0)) {
        if (!jpeg_fill_bit_buffer($4 + 24 | 0, $6, $3, $2)) {
         $5 = 0;
         break label$1;
        }
        $6 = HEAP32[$4 + 32 >> 2];
        $3 = HEAP32[$4 + 36 >> 2];
       }
       $3 = $3 - $2 | 0;
      }
      while (1) {
       label$31 : {
        label$32 : {
         label$33 : {
          if (($3 | 0) <= 7) {
           $5 = 0;
           if (!jpeg_fill_bit_buffer($4 + 24 | 0, $6, $3, 0)) {
            break label$1;
           }
           $6 = HEAP32[$4 + 32 >> 2];
           $3 = HEAP32[$4 + 36 >> 2];
           $2 = 1;
           if (($3 | 0) < 8) {
            break label$33;
           }
          }
          $2 = $6 >> $3 - 8 & 255;
          $5 = HEAP32[(($2 << 2) + $9 | 0) + 144 >> 2];
          if ($5) {
           break label$32;
          }
          $2 = 9;
         }
         $5 = 0;
         $2 = jpeg_huff_decode($4 + 24 | 0, $6, $3, $9, $2);
         if (($2 | 0) < 0) {
          break label$1;
         }
         $6 = HEAP32[$4 + 32 >> 2];
         $3 = HEAP32[$4 + 36 >> 2];
         break label$31;
        }
        $2 = HEAPU8[($2 + $9 | 0) + 1168 | 0];
        $3 = $3 - $5 | 0;
       }
       $5 = $2 >>> 4 | 0;
       $2 = $2 & 15;
       label$35 : {
        if ($2) {
         if (($3 | 0) < ($2 | 0)) {
          if (!jpeg_fill_bit_buffer($4 + 24 | 0, $6, $3, $2)) {
           $5 = 0;
           break label$1;
          }
          $6 = HEAP32[$4 + 32 >> 2];
          $3 = HEAP32[$4 + 36 >> 2];
         }
         $3 = $3 - $2 | 0;
         break label$35;
        }
        if (($5 | 0) != 15) {
         break label$12;
        }
       }
       $8 = ($5 + $8 | 0) + 1 | 0;
       if (($8 | 0) < 64) {
        continue;
       }
       break;
      }
     }
     $11 = $11 + 1 | 0;
     if (($11 | 0) < HEAP32[$0 + 368 >> 2]) {
      continue;
     }
     break;
    }
    $9 = HEAP32[$4 + 28 >> 2];
    $8 = HEAP32[$4 + 24 >> 2];
    $2 = HEAP32[$0 + 24 >> 2];
   }
   HEAP32[$2 + 4 >> 2] = $9;
   HEAP32[$2 >> 2] = $8;
   HEAP32[$7 + 16 >> 2] = $3;
   HEAP32[$7 + 12 >> 2] = $6;
   $3 = $7 + 20 | 0;
   HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
   $5 = HEAP32[$4 + 12 >> 2];
   $10 = HEAP32[$4 + 8 >> 2];
   HEAP32[$7 + 28 >> 2] = $10;
   HEAP32[$7 + 32 >> 2] = $5;
   $10 = HEAP32[$4 + 4 >> 2];
   $5 = HEAP32[$4 >> 2];
   HEAP32[$7 + 20 >> 2] = $5;
   HEAP32[$7 + 24 >> 2] = $10;
  }
  HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] - 1;
  $5 = 1;
 }
 __stack_pointer = $4 + 48 | 0;
 return $5 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseVectorType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 24 | 0, 32260);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 + 4 >> 2] = $4;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1)) {
   break label$1;
  }
  label$2 : {
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 49 & 255) >>> 0 <= 8) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 0);
    wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__StringView___29($0, $1 + 8 | 0), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 112)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PixelVectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 20 | 0);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    HEAP32[$1 + 8 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 8 | 0, $1 + 20 | 0);
    break label$1;
   }
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($3);
    HEAP32[$1 + 8 >> 2] = $4;
    if (!$4) {
     break label$1;
    }
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($3);
    HEAP32[$1 + 20 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 20 | 0, $1 + 8 | 0);
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   HEAP32[$1 + 8 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   HEAP32[$1 + 20 >> 2] = 0;
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20std__nullptr_t__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20std__nullptr_t___29($0, $1 + 8 | 0, $1 + 20 | 0);
   break label$1;
  }
  $2 = 0;
 }
 __stack_pointer = $1 + 32 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76);
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
     if (($2 | 0) != 90) {
      $2 = $2 & 255;
      if (($2 | 0) == 83) {
       break label$4;
      }
      if (($2 | 0) != 78) {
       break label$3;
      }
      $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), $1);
      break label$1;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseLocalName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), $1);
     break label$1;
    }
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) == 116) {
     break label$3;
    }
    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($4);
    HEAP32[$3 + 12 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = 0;
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
     break label$1;
    }
    $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($4, ($1 | 0) != 0);
    HEAP32[$3 + 8 >> 2] = $4;
    if (!$4) {
     break label$1;
    }
    if ($1) {
     HEAP8[$1 + 1 | 0] = 1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 12 | 0, $3 + 8 | 0);
    break label$1;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnscopedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($4, $1);
   HEAP32[$3 + 12 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $3 + 12 | 0);
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($4, ($1 | 0) != 0);
   HEAP32[$3 + 8 >> 2] = $2;
   if ($2) {
    if ($1) {
     HEAP8[$1 + 1 | 0] = 1;
    }
    $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $3 + 12 | 0, $3 + 8 | 0);
   }
   $2 = $5;
   break label$1;
  }
  $2 = 0;
 }
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function decompress_smooth_data($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 $9 = __stack_pointer - 128 | 0;
 __stack_pointer = $9;
 $42 = HEAP32[$0 + 332 >> 2] - 1 | 0;
 $25 = HEAP32[$0 + 452 >> 2];
 label$1 : {
  label$2 : {
   while (1) {
    $4 = HEAP32[$0 + 152 >> 2];
    $6 = HEAP32[$0 + 144 >> 2];
    if (($4 | 0) < ($6 | 0)) {
     break label$2;
    }
    $7 = HEAP32[$0 + 460 >> 2];
    if (HEAP32[$7 + 20 >> 2] | (HEAPU32[$0 + 148 >> 2] > HEAP32[$0 + 156 >> 2] + !HEAP32[$0 + 412 >> 2] >>> 0 ? ($4 | 0) == ($6 | 0) : 0)) {
     break label$2;
    }
    if (FUNCTION_TABLE[HEAP32[$7 >> 2]]($0) | 0) {
     continue;
    }
    break;
   }
   $6 = 0;
   break label$1;
  }
  if (HEAP32[$0 + 36 >> 2] >= 1) {
   $10 = HEAP32[$0 + 216 >> 2];
   while (1) {
    label$7 : {
     if (!HEAP32[$10 + 52 >> 2]) {
      break label$7;
     }
     $17 = HEAP32[$0 + 156 >> 2];
     $28 = $42 >>> 0 <= $17 >>> 0;
     label$8 : {
      if (!$28) {
       $6 = HEAP32[$10 + 12 >> 2];
       $4 = $6 << 1;
       $2 = $6;
       break label$8;
      }
      $6 = HEAP32[$10 + 12 >> 2];
      $4 = HEAPU32[$10 + 32 >> 2] % ($6 >>> 0) | 0;
      $4 = $4 ? $4 : $6;
      $2 = $4;
     }
     $26 = $2;
     label$10 : {
      if ($17) {
       $2 = (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 32 >> 2]]($0, HEAP32[(($13 << 2) + $25 | 0) + 72 >> 2], Math_imul($17 - 1 | 0, $6), $4 + $6 | 0, 0) | 0) + (HEAP32[$10 + 12 >> 2] << 2) | 0;
       break label$10;
      }
      $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 32 >> 2]]($0, HEAP32[(($13 << 2) + $25 | 0) + 72 >> 2], 0, $4, 0) | 0;
     }
     if (($26 | 0) < 1) {
      break label$7;
     }
     $43 = $2;
     $6 = HEAP32[$25 + 112 >> 2] + Math_imul($13, 24) | 0;
     $14 = $13 << 2;
     $44 = HEAP32[($14 + HEAP32[$0 + 472 >> 2] | 0) + 4 >> 2];
     $4 = HEAP32[$10 + 80 >> 2];
     $7 = HEAPU16[$4 + 4 >> 1];
     $29 = $7 << 8;
     $30 = $7 << 7;
     $7 = HEAPU16[$4 + 18 >> 1];
     $31 = $7 << 8;
     $32 = $7 << 7;
     $7 = HEAPU16[$4 >> 1];
     $45 = Math_imul($7, 5);
     $11 = HEAPU16[$4 + 32 >> 1];
     $33 = $11 << 8;
     $34 = $11 << 7;
     $35 = Math_imul($7, 9);
     $11 = HEAPU16[$4 + 16 >> 1];
     $36 = $11 << 8;
     $37 = $11 << 7;
     $4 = HEAPU16[$4 + 2 >> 1];
     $38 = $4 << 8;
     $39 = $4 << 7;
     $40 = Math_imul($7, 36);
     $46 = $26 - 1 | 0;
     $27 = HEAP32[$1 + $14 >> 2];
     $15 = 0;
     while (1) {
      $7 = ($15 << 2) + $43 | 0;
      $4 = HEAP32[$7 >> 2];
      $18 = $15 | $17 ? HEAP32[$7 - 4 >> 2] : $4;
      $19 = ($15 | 0) == ($46 | 0) & $28 ? $4 : HEAP32[$7 + 4 >> 2];
      $41 = HEAP32[$10 + 28 >> 2] - 1 | 0;
      $7 = 0;
      $20 = HEAP16[$19 >> 1];
      $11 = $20;
      $16 = HEAP16[$4 >> 1];
      $21 = $16;
      $22 = HEAP16[$18 >> 1];
      $23 = $22;
      $14 = 0;
      while (1) {
       $24 = $23;
       $23 = $22;
       $8 = $21;
       $21 = $16;
       $47 = $11;
       $11 = $20;
       jcopy_block_row($4, $9, 1);
       if ($7 >>> 0 < $41 >>> 0) {
        $20 = HEAP16[$19 + 128 >> 1];
        $22 = HEAP16[$18 + 128 >> 1];
        $16 = HEAP16[$4 + 128 >> 1];
       }
       $3 = HEAP32[$6 + 4 >> 2];
       if (!(HEAPU16[$9 + 2 >> 1] | !$3)) {
        $12 = $9;
        $2 = Math_imul($8 - $16 | 0, $40);
        label$18 : {
         if (($2 | 0) >= 0) {
          $2 = ($2 + $39 | 0) / ($38 | 0) | 0;
          $5 = $2;
          if (($3 | 0) < 1) {
           break label$18;
          }
          $3 = 1 << $3;
          $5 = ($2 | 0) < ($3 | 0) ? $2 : $3 - 1 | 0;
          break label$18;
         }
         $2 = ($39 - $2 | 0) / ($38 | 0) | 0;
         $5 = 1 << $3;
         $5 = 0 - (($3 | 0) > 0 ? ($2 | 0) < ($5 | 0) ? $2 : $5 - 1 | 0 : $2) | 0;
        }
        $2 = $5;
        HEAP16[$12 + 2 >> 1] = $2;
       }
       $3 = HEAP32[$6 + 8 >> 2];
       if (!(HEAPU16[$9 + 16 >> 1] | !$3)) {
        $12 = $9;
        $2 = Math_imul($23 - $11 | 0, $40);
        label$21 : {
         if (($2 | 0) >= 0) {
          $2 = ($2 + $37 | 0) / ($36 | 0) | 0;
          $5 = $2;
          if (($3 | 0) < 1) {
           break label$21;
          }
          $3 = 1 << $3;
          $5 = ($2 | 0) < ($3 | 0) ? $2 : $3 - 1 | 0;
          break label$21;
         }
         $2 = ($37 - $2 | 0) / ($36 | 0) | 0;
         $5 = 1 << $3;
         $5 = 0 - (($3 | 0) > 0 ? ($2 | 0) < ($5 | 0) ? $2 : $5 - 1 | 0 : $2) | 0;
        }
        $2 = $5;
        HEAP16[$12 + 16 >> 1] = $2;
       }
       $3 = HEAP32[$6 + 12 >> 2];
       if (!(HEAPU16[$9 + 32 >> 1] | !$3)) {
        $12 = $9;
        $2 = Math_imul(($23 - ($21 << 1) | 0) + $11 | 0, $35);
        label$24 : {
         if (($2 | 0) >= 0) {
          $2 = ($2 + $34 | 0) / ($33 | 0) | 0;
          $5 = $2;
          if (($3 | 0) < 1) {
           break label$24;
          }
          $3 = 1 << $3;
          $5 = ($2 | 0) < ($3 | 0) ? $2 : $3 - 1 | 0;
          break label$24;
         }
         $2 = ($34 - $2 | 0) / ($33 | 0) | 0;
         $5 = 1 << $3;
         $5 = 0 - (($3 | 0) > 0 ? ($2 | 0) < ($5 | 0) ? $2 : $5 - 1 | 0 : $2) | 0;
        }
        $2 = $5;
        HEAP16[$12 + 32 >> 1] = $2;
       }
       $3 = HEAP32[$6 + 16 >> 2];
       if (!(HEAPU16[$9 + 18 >> 1] | !$3)) {
        $12 = $9;
        $2 = Math_imul((($24 - $47 | 0) - $22 | 0) + $20 | 0, $45);
        label$27 : {
         if (($2 | 0) >= 0) {
          $2 = ($2 + $32 | 0) / ($31 | 0) | 0;
          $5 = $2;
          if (($3 | 0) < 1) {
           break label$27;
          }
          $3 = 1 << $3;
          $5 = ($2 | 0) < ($3 | 0) ? $2 : $3 - 1 | 0;
          break label$27;
         }
         $2 = ($32 - $2 | 0) / ($31 | 0) | 0;
         $24 = 1 << $3;
         $5 = 0 - (($3 | 0) > 0 ? ($2 | 0) < ($24 | 0) ? $2 : $24 - 1 | 0 : $2) | 0;
        }
        $2 = $5;
        HEAP16[$12 + 18 >> 1] = $2;
       }
       $3 = HEAP32[$6 + 20 >> 2];
       if (!(HEAPU16[$9 + 4 >> 1] | !$3)) {
        $5 = $9;
        $8 = Math_imul(($8 - ($21 << 1) | 0) + $16 | 0, $35);
        label$30 : {
         if (($8 | 0) >= 0) {
          $8 = ($8 + $30 | 0) / ($29 | 0) | 0;
          $2 = $8;
          if (($3 | 0) < 1) {
           break label$30;
          }
          $3 = 1 << $3;
          $2 = ($3 | 0) > ($8 | 0) ? $8 : $3 - 1 | 0;
          break label$30;
         }
         $8 = ($30 - $8 | 0) / ($29 | 0) | 0;
         $2 = 1 << $3;
         $2 = 0 - (($3 | 0) > 0 ? ($2 | 0) > ($8 | 0) ? $8 : $2 - 1 | 0 : $8) | 0;
        }
        $8 = $2;
        HEAP16[$5 + 4 >> 1] = $8;
       }
       FUNCTION_TABLE[$44 | 0]($0, $10, $9, $27, $14);
       $19 = $19 + 128 | 0;
       $18 = $18 + 128 | 0;
       $4 = $4 + 128 | 0;
       $14 = HEAP32[$10 + 36 >> 2] + $14 | 0;
       $7 = $7 + 1 | 0;
       if ($41 >>> 0 >= $7 >>> 0) {
        continue;
       }
       break;
      }
      $27 = (HEAP32[$10 + 40 >> 2] << 2) + $27 | 0;
      $15 = $15 + 1 | 0;
      if (($26 | 0) != ($15 | 0)) {
       continue;
      }
      break;
     }
    }
    $10 = $10 + 88 | 0;
    $13 = $13 + 1 | 0;
    if (($13 | 0) < HEAP32[$0 + 36 >> 2]) {
     continue;
    }
    break;
   }
  }
  $6 = HEAP32[$0 + 156 >> 2] + 1 | 0;
  HEAP32[$0 + 156 >> 2] = $6;
  $6 = HEAPU32[$0 + 332 >> 2] > $6 >>> 0 ? 3 : 4;
 }
 __stack_pointer = $9 + 128 | 0;
 return $6 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 100) {
     break label$3;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1);
    if (($1 | 0) != 88) {
     if (($1 | 0) != 120) {
      if (($1 | 0) != 105) {
       break label$3;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($3);
      HEAP32[$2 + 12 >> 2] = $1;
      if (!$1) {
       break label$2;
      }
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($3);
      HEAP32[$2 + 8 >> 2] = $1;
      if (!$1) {
       break label$2;
      }
      HEAP8[$2 + 4 | 0] = 0;
      $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $2 + 12 | 0, $2 + 8 | 0, $2 + 4 | 0);
      break label$1;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($3);
     HEAP32[$2 + 12 >> 2] = $1;
     if (!$1) {
      break label$2;
     }
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($3);
     HEAP32[$2 + 8 >> 2] = $1;
     if (!$1) {
      break label$2;
     }
     HEAP8[$2 + 4 | 0] = 1;
     $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $2 + 12 | 0, $2 + 8 | 0, $2 + 4 | 0);
     break label$1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($3);
    HEAP32[$2 + 12 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($3);
    HEAP32[$2 + 8 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBracedExpr_28_29($3);
    HEAP32[$2 + 4 >> 2] = $1;
    if (!$1) {
     break label$2;
    }
    $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2 + 8 | 0, $2 + 4 | 0);
    break label$1;
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $14 = __stack_pointer - 128 | 0;
 __stack_pointer = $14;
 label$1 : {
  label$2 : {
   $11 = $6;
   $12 = $8;
   label$3 : {
    if (!__letf2($5, $11, $7, $12, 0, 0, 0, 0)) {
     break label$3;
    }
    $10 = $6;
    $9 = $8;
    $18 = __fpclassifyl($5, $10, $7, $9);
    $9 = $4;
    $21 = $9 >>> 16 | 0;
    $16 = $21 & 32767;
    if (($16 | 0) == 32767) {
     break label$3;
    }
    if ($18) {
     break label$2;
    }
   }
   $10 = $2;
   $12 = $4;
   $9 = $6;
   $11 = $8;
   __multf3($14 + 16 | 0, $1, $10, $3, $12, $5, $9, $7, $11);
   $12 = $14;
   $11 = HEAP32[$12 + 16 >> 2];
   $7 = $11;
   $9 = HEAP32[$12 + 20 >> 2];
   $8 = $9;
   $11 = HEAP32[$12 + 28 >> 2];
   $6 = $11;
   $9 = HEAP32[$12 + 24 >> 2];
   $5 = $9;
   $11 = $8;
   $9 = $6;
   $12 = $11;
   __divtf3($14, $7, $12, $5, $9, $7, $12, $5, $9);
   $9 = $14;
   $10 = HEAP32[$9 + 8 >> 2];
   $3 = $10;
   $12 = HEAP32[$9 + 12 >> 2];
   $4 = $12;
   $12 = HEAP32[$9 >> 2];
   $7 = $12;
   $10 = HEAP32[$9 + 4 >> 2];
   $8 = $10;
   break label$1;
  }
  $10 = $4;
  $12 = $10 & 65535;
  $10 = $16;
  $9 = $10 << 16;
  $10 = $9;
  $9 = $12;
  $10 = $9 | $10;
  $19 = $10;
  $11 = 0;
  $12 = $3;
  $17 = $11 | $12;
  $10 = $8;
  $12 = $10 & 65535;
  $8 = $12;
  $9 = $7;
  $15 = 0 | $9;
  $18 = $10 >>> 16 & 32767;
  $12 = $18;
  $10 = $12 << 16;
  $12 = $10;
  $10 = $8;
  $12 = $12 | $10;
  $13 = $12;
  $12 = $2;
  $9 = $19;
  $10 = $6;
  $11 = $13;
  if ((__letf2($1, $12, $17, $9, $5, $10, $15, $11) | 0) <= 0) {
   $11 = $2;
   $10 = $19;
   $9 = $6;
   $12 = $13;
   if (__letf2($1, $11, $17, $10, $5, $9, $15, $12)) {
    $7 = $1;
    $12 = $2;
    $8 = $12;
    break label$1;
   }
   $12 = $2;
   $9 = $4;
   __multf3($14 + 112 | 0, $1, $12, $3, $9, 0, 0, 0, 0);
   $9 = $14;
   $11 = HEAP32[$9 + 120 >> 2];
   $3 = $11;
   $10 = HEAP32[$9 + 124 >> 2];
   $4 = $10;
   $10 = HEAP32[$9 + 112 >> 2];
   $7 = $10;
   $11 = HEAP32[$9 + 116 >> 2];
   $8 = $11;
   break label$1;
  }
  if ($16) {
   $7 = $1;
   $11 = $2;
   $10 = $11;
  } else {
   $11 = $2;
   $10 = $19;
   __multf3($14 + 96 | 0, $1, $11, $17, $10, 0, 0, 0, 1081540608);
   $9 = HEAP32[$14 + 108 >> 2];
   $19 = $9;
   $10 = $14;
   $12 = HEAP32[$10 + 104 >> 2];
   $17 = $12;
   $16 = ($9 >>> 16 | 0) - 120 | 0;
   $9 = $10;
   $12 = HEAP32[$9 + 96 >> 2];
   $7 = $12;
   $10 = HEAP32[$9 + 100 >> 2];
  }
  $8 = $10;
  if (!$18) {
   $10 = $6;
   $12 = $13;
   __multf3($14 + 80 | 0, $5, $10, $15, $12, 0, 0, 0, 1081540608);
   $9 = HEAP32[$14 + 92 >> 2];
   $13 = $9;
   $12 = $14;
   $11 = HEAP32[$12 + 88 >> 2];
   $15 = $11;
   $18 = ($9 >>> 16 | 0) - 120 | 0;
   $9 = $12;
   $11 = HEAP32[$9 + 80 >> 2];
   $5 = $11;
   $12 = HEAP32[$9 + 84 >> 2];
   $6 = $12;
  }
  $12 = $13;
  $11 = $12 & 65535;
  $9 = $15;
  $22 = $9;
  $9 = $11 | 65536;
  $20 = $9;
  $9 = $19;
  $12 = $9 & 65535;
  $11 = $17;
  $9 = $11;
  $17 = $9;
  $11 = $12 | 65536;
  $19 = $11;
  if (($16 | 0) > ($18 | 0)) {
   while (1) {
    $12 = $17;
    $10 = $22;
    $13 = $12 - $10 | 0;
    $11 = $19;
    $9 = $20;
    $23 = $11 - ($9 + ($10 >>> 0 > $12 >>> 0) | 0) | 0;
    $12 = $8;
    $11 = $5;
    $10 = $7;
    $12 = ($12 | 0) == ($6 | 0) & $11 >>> 0 > $10 >>> 0 | $6 >>> 0 > $12 >>> 0;
    $10 = $13;
    $9 = $10 - $12 | 0;
    $15 = $9;
    $11 = $23;
    $13 = $10 >>> 0 < $12 >>> 0;
    $13 = $11 - $13 | 0;
    label$11 : {
     if (($13 | 0) > 0 ? 1 : ($13 | 0) >= 0) {
      $12 = $7;
      $10 = $5;
      $7 = $12 - $10 | 0;
      $11 = $8;
      $9 = $6 + ($10 >>> 0 > $12 >>> 0) | 0;
      $9 = $11 - $9 | 0;
      $8 = $9;
      $12 = $9;
      $9 = $13;
      $12 = $12 | $9;
      $11 = $15;
      $10 = $7;
      if (!($12 | ($11 | $10))) {
       $12 = $2;
       $11 = $4;
       __multf3($14 + 32 | 0, $1, $12, $3, $11, 0, 0, 0, 0);
       $11 = $14;
       $10 = HEAP32[$11 + 40 >> 2];
       $3 = $10;
       $9 = HEAP32[$11 + 44 >> 2];
       $4 = $9;
       $9 = HEAP32[$11 + 32 >> 2];
       $7 = $9;
       $10 = HEAP32[$11 + 36 >> 2];
       $8 = $10;
       break label$1;
      }
      $10 = $13;
      $9 = $10 << 1 | $11 >>> 31;
      $13 = $9;
      $11 = 0;
      $10 = $11;
      $9 = $8;
      $12 = $9 >>> 31 | 0;
      $9 = $15 << 1;
      $17 = $12 | $9;
      $11 = $13;
      $10 = $11 | $10;
      $13 = 31;
      break label$11;
     }
     $11 = $17;
     $15 = $11 << 1;
     $10 = $19;
     $9 = $10 << 1 | $11 >>> 31;
     $13 = $9;
     $11 = 0;
     $10 = $11;
     $9 = $8;
     $12 = $9 >>> 31 | 0;
     $9 = $15;
     $17 = $12 | $9;
     $11 = $13;
     $10 = $11 | $10;
     $13 = 31;
    }
    $19 = $10;
    $11 = $7;
    $7 = $11 << 1;
    $10 = $8;
    $9 = $10 << 1 | $11 >>> 31;
    $8 = $9;
    $16 = $16 - 1 | 0;
    if (($18 | 0) < ($16 | 0)) {
     continue;
    }
    break;
   }
   $16 = $18;
  }
  $10 = $17;
  $12 = $22;
  $13 = $10 - $12 | 0;
  $9 = $19;
  $11 = $20;
  $20 = $9 - ($11 + ($10 >>> 0 < $12 >>> 0) | 0) | 0;
  $10 = $8;
  $12 = $7;
  $9 = $5;
  $10 = ($10 | 0) == ($6 | 0) & $12 >>> 0 < $9 >>> 0 | $6 >>> 0 > $10 >>> 0;
  $12 = $13;
  $11 = $12 - $10 | 0;
  $15 = $11;
  $9 = $20;
  $13 = $10 >>> 0 > $12 >>> 0;
  $13 = $9 - $13 | 0;
  label$14 : {
   if (($13 | 0) < 0) {
    $15 = $17;
    $9 = $19;
    $13 = $9;
    break label$14;
   }
   $10 = $7;
   $12 = $5;
   $7 = $10 - $12 | 0;
   $9 = $8;
   $11 = $6 + ($12 >>> 0 > $10 >>> 0) | 0;
   $11 = $9 - $11 | 0;
   $8 = $11;
   $11 = $13;
   $10 = $8;
   $10 = $11 | $10;
   $12 = $7;
   $9 = $15;
   $11 = $12 | $9;
   if ($11 | $10) {
    break label$14;
   }
   $11 = $2;
   $10 = $4;
   __multf3($14 + 48 | 0, $1, $11, $3, $10, 0, 0, 0, 0);
   $10 = $14;
   $9 = HEAP32[$10 + 56 >> 2];
   $3 = $9;
   $12 = HEAP32[$10 + 60 >> 2];
   $4 = $12;
   $12 = HEAP32[$10 + 48 >> 2];
   $7 = $12;
   $9 = HEAP32[$10 + 52 >> 2];
   $8 = $9;
   break label$1;
  }
  $9 = $13;
  if (($9 | 0) == 65535 | $9 >>> 0 < 65535) {
   while (1) {
    $11 = $7;
    $10 = $8;
    $5 = $10 >>> 31 | 0;
    $9 = 0;
    $6 = $9;
    $16 = $16 - 1 | 0;
    $10 = $11;
    $7 = $10 << 1;
    $9 = $8;
    $11 = $9 << 1 | $10 >>> 31;
    $8 = $11;
    $9 = $15;
    $12 = $9 << 1;
    $11 = $13;
    $10 = $11 << 1 | $9 >>> 31;
    $9 = $10;
    $10 = $6;
    $9 = $9 | $10;
    $13 = $9;
    $11 = $5;
    $15 = $11 | $12;
    if ($9 >>> 0 < 65536) {
     continue;
    }
    break;
   }
  }
  $18 = $21 & 32768;
  if (($16 | 0) <= 0) {
   $10 = $13;
   $9 = $10 & 65535;
   $10 = $16 + 120 | $18;
   $12 = $10 << 16;
   $10 = $12;
   $10 = $9 | $10;
   $1 = $10;
   $10 = $8;
   $11 = 0;
   $9 = $15;
   $2 = $11 | $9;
   $9 = $1;
   __multf3($14 - -64 | 0, $7, $10, $2, $9, 0, 0, 0, 1065811968);
   $9 = $14;
   $11 = HEAP32[$9 + 72 >> 2];
   $3 = $11;
   $12 = HEAP32[$9 + 76 >> 2];
   $4 = $12;
   $12 = HEAP32[$9 + 64 >> 2];
   $7 = $12;
   $11 = HEAP32[$9 + 68 >> 2];
   $8 = $11;
   break label$1;
  }
  $11 = $13;
  $12 = $11 & 65535;
  $9 = $15;
  $10 = 0;
  $3 = $9 | $10;
  $11 = $16 | $18;
  $9 = $11 << 16;
  $11 = $9;
  $9 = $12;
  $11 = $11 | $9;
  $4 = $11;
 }
 $12 = $0;
 HEAP32[$12 >> 2] = $7;
 $11 = $8;
 HEAP32[$12 + 4 >> 2] = $11;
 HEAP32[$12 + 8 >> 2] = $3;
 $11 = $4;
 HEAP32[$12 + 12 >> 2] = $11;
 __stack_pointer = $14 + 128 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 73)) {
   break label$1;
  }
  if ($1) {
   $3 = $0 + 332 | 0;
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clear_28_29($3);
   $4 = $0 + 288 | 0;
   HEAP32[$2 + 16 >> 2] = $4;
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___20const__29($3, $2 + 16 | 0);
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clear_28_29($4);
  }
  $4 = $0 + 332 | 0;
  $5 = $0 + 8 | 0;
  $7 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($5);
  label$3 : {
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     if ($1) {
      $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___PODSmallVector_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul____29($2 + 16 | 0, $4);
      $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
      HEAP32[$2 + 12 >> 2] = $3;
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___operator__28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul____29($4, $6);
      if (!$3) {
       break label$3;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $2 + 12 | 0);
      HEAP32[$2 + 8 >> 2] = $3;
      if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($3) | 0) == 33) {
       $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__getElements_28_29_20const($2, $3);
       wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $2), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
      }
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29(HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___back_28_29($4) >> 2], $2 + 8 | 0);
      $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul____PODSmallVector_28_29($6);
      continue;
     }
     $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     HEAP32[$2 + 16 >> 2] = $3;
     if (!$3) {
      break label$1;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($5, $2 + 16 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 16 | 0, $0, $7);
   $8 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $2 + 16 | 0);
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul____PODSmallVector_28_29($6);
 }
 __stack_pointer = $2 + 48 | 0;
 return $8;
}
function dispose_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = $0 + $1 | 0;
 label$1 : {
  label$2 : {
   $2 = HEAP32[$0 + 4 >> 2];
   if ($2 & 1) {
    break label$2;
   }
   if (!($2 & 3)) {
    break label$1;
   }
   $2 = HEAP32[$0 >> 2];
   $1 = $2 + $1 | 0;
   $0 = $0 - $2 | 0;
   if (($0 | 0) != HEAP32[8761]) {
    if ($2 >>> 0 <= 255) {
     $6 = $2 >>> 3 | 0;
     $2 = ($6 << 3) + 35064 | 0;
     $3 = HEAP32[$0 + 8 >> 2];
     $4 = HEAP32[$0 + 12 >> 2];
     if (($4 | 0) == ($3 | 0)) {
      wasm2js_i32$0 = 35024, wasm2js_i32$1 = HEAP32[8756] & __wasm_rotl_i32(-2, $6), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$2;
     }
     HEAP32[$3 + 12 >> 2] = $4;
     HEAP32[$4 + 8 >> 2] = $3;
     break label$2;
    }
    $6 = HEAP32[$0 + 24 >> 2];
    $3 = HEAP32[$0 + 12 >> 2];
    label$6 : {
     if (($3 | 0) != ($0 | 0)) {
      $2 = HEAP32[$0 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $2;
      break label$6;
     }
     label$9 : {
      $2 = $0 + 20 | 0;
      $4 = HEAP32[$2 >> 2];
      if ($4) {
       break label$9;
      }
      $2 = $0 + 16 | 0;
      $4 = HEAP32[$2 >> 2];
      if ($4) {
       break label$9;
      }
      $3 = 0;
      break label$6;
     }
     while (1) {
      $7 = $2;
      $3 = $4;
      $2 = $3 + 20 | 0;
      $4 = HEAP32[$2 >> 2];
      if ($4) {
       continue;
      }
      $2 = $3 + 16 | 0;
      $4 = HEAP32[$3 + 16 >> 2];
      if ($4) {
       continue;
      }
      break;
     }
     HEAP32[$7 >> 2] = 0;
    }
    if (!$6) {
     break label$2;
    }
    $4 = HEAP32[$0 + 28 >> 2];
    $2 = ($4 << 2) + 35328 | 0;
    label$11 : {
     if (HEAP32[$2 >> 2] == ($0 | 0)) {
      HEAP32[$2 >> 2] = $3;
      if ($3) {
       break label$11;
      }
      wasm2js_i32$0 = 35028, wasm2js_i32$1 = HEAP32[8757] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$2;
     }
     HEAP32[(HEAP32[$6 + 16 >> 2] == ($0 | 0) ? 16 : 20) + $6 >> 2] = $3;
     if (!$3) {
      break label$2;
     }
    }
    HEAP32[$3 + 24 >> 2] = $6;
    $2 = HEAP32[$0 + 16 >> 2];
    if ($2) {
     HEAP32[$3 + 16 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $3;
    }
    $2 = HEAP32[$0 + 20 >> 2];
    if (!$2) {
     break label$2;
    }
    HEAP32[$3 + 20 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = $3;
    break label$2;
   }
   $2 = HEAP32[$5 + 4 >> 2];
   if (($2 & 3) != 3) {
    break label$2;
   }
   HEAP32[8758] = $1;
   HEAP32[$5 + 4 >> 2] = $2 & -2;
   HEAP32[$0 + 4 >> 2] = $1 | 1;
   HEAP32[$5 >> 2] = $1;
   return;
  }
  $2 = HEAP32[$5 + 4 >> 2];
  label$14 : {
   if (!($2 & 2)) {
    if (HEAP32[8762] == ($5 | 0)) {
     HEAP32[8762] = $0;
     $1 = HEAP32[8759] + $1 | 0;
     HEAP32[8759] = $1;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     if (HEAP32[8761] != ($0 | 0)) {
      break label$1;
     }
     HEAP32[8758] = 0;
     HEAP32[8761] = 0;
     return;
    }
    if (HEAP32[8761] == ($5 | 0)) {
     HEAP32[8761] = $0;
     $1 = HEAP32[8758] + $1 | 0;
     HEAP32[8758] = $1;
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + $1 >> 2] = $1;
     return;
    }
    $1 = ($2 & -8) + $1 | 0;
    label$18 : {
     if ($2 >>> 0 <= 255) {
      $4 = HEAP32[$5 + 12 >> 2];
      $3 = HEAP32[$5 + 8 >> 2];
      $5 = $2 >>> 3 | 0;
      if (($3 | 0) == ($4 | 0)) {
       wasm2js_i32$0 = 35024, wasm2js_i32$1 = HEAP32[8756] & __wasm_rotl_i32(-2, $5), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$18;
      }
      HEAP32[$3 + 12 >> 2] = $4;
      HEAP32[$4 + 8 >> 2] = $3;
      break label$18;
     }
     $6 = HEAP32[$5 + 24 >> 2];
     $3 = HEAP32[$5 + 12 >> 2];
     label$21 : {
      if (($5 | 0) != ($3 | 0)) {
       $2 = HEAP32[$5 + 8 >> 2];
       HEAP32[$2 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $2;
       break label$21;
      }
      label$24 : {
       $2 = $5 + 20 | 0;
       $4 = HEAP32[$2 >> 2];
       if ($4) {
        break label$24;
       }
       $2 = $5 + 16 | 0;
       $4 = HEAP32[$2 >> 2];
       if ($4) {
        break label$24;
       }
       $3 = 0;
       break label$21;
      }
      while (1) {
       $7 = $2;
       $3 = $4;
       $2 = $3 + 20 | 0;
       $4 = HEAP32[$2 >> 2];
       if ($4) {
        continue;
       }
       $2 = $3 + 16 | 0;
       $4 = HEAP32[$3 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$7 >> 2] = 0;
     }
     if (!$6) {
      break label$18;
     }
     $4 = HEAP32[$5 + 28 >> 2];
     $2 = ($4 << 2) + 35328 | 0;
     label$26 : {
      if (HEAP32[$2 >> 2] == ($5 | 0)) {
       HEAP32[$2 >> 2] = $3;
       if ($3) {
        break label$26;
       }
       wasm2js_i32$0 = 35028, wasm2js_i32$1 = HEAP32[8757] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$18;
      }
      HEAP32[(HEAP32[$6 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $6 >> 2] = $3;
      if (!$3) {
       break label$18;
      }
     }
     HEAP32[$3 + 24 >> 2] = $6;
     $2 = HEAP32[$5 + 16 >> 2];
     if ($2) {
      HEAP32[$3 + 16 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = $3;
     }
     $2 = HEAP32[$5 + 20 >> 2];
     if (!$2) {
      break label$18;
     }
     HEAP32[$3 + 20 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $3;
    }
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$0 + $1 >> 2] = $1;
    if (HEAP32[8761] != ($0 | 0)) {
     break label$14;
    }
    HEAP32[8758] = $1;
    return;
   }
   HEAP32[$5 + 4 >> 2] = $2 & -2;
   HEAP32[$0 + 4 >> 2] = $1 | 1;
   HEAP32[$0 + $1 >> 2] = $1;
  }
  if ($1 >>> 0 <= 255) {
   $2 = $1 >>> 3 | 0;
   $1 = ($2 << 3) + 35064 | 0;
   $2 = 1 << $2;
   $4 = HEAP32[8756];
   label$30 : {
    if (!($2 & $4)) {
     HEAP32[8756] = $2 | $4;
     $2 = $1;
     break label$30;
    }
    $2 = HEAP32[$1 + 8 >> 2];
   }
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = $0;
   HEAP32[$0 + 12 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = $2;
   return;
  }
  $2 = 31;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  if ($1 >>> 0 <= 16777215) {
   $2 = $1 >>> 8 | 0;
   $3 = $2;
   $2 = $2 + 1048320 >>> 16 & 8;
   $4 = $3 << $2;
   $3 = $4;
   $4 = $4 + 520192 >>> 16 & 4;
   $3 = $3 << $4;
   $7 = $3;
   $3 = $3 + 245760 >>> 16 & 2;
   $2 = ($7 << $3 >>> 15 | 0) - ($2 | $4 | $3) | 0;
   $2 = ($2 << 1 | $1 >>> $2 + 21 & 1) + 28 | 0;
  }
  HEAP32[$0 + 28 >> 2] = $2;
  $4 = ($2 << 2) + 35328 | 0;
  label$33 : {
   $3 = HEAP32[8757];
   $5 = 1 << $2;
   label$34 : {
    if (!($3 & $5)) {
     HEAP32[8757] = $3 | $5;
     HEAP32[$4 >> 2] = $0;
     break label$34;
    }
    $2 = $1 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1 | 0) | 0);
    $3 = HEAP32[$4 >> 2];
    while (1) {
     $4 = $3;
     if ((HEAP32[$3 + 4 >> 2] & -8) == ($1 | 0)) {
      break label$33;
     }
     $3 = $2 >>> 29 | 0;
     $2 = $2 << 1;
     $7 = ($3 & 4) + $4 | 0;
     $5 = $7 + 16 | 0;
     $3 = HEAP32[$5 >> 2];
     if ($3) {
      continue;
     }
     break;
    }
    HEAP32[$7 + 16 >> 2] = $0;
   }
   HEAP32[$0 + 24 >> 2] = $4;
   HEAP32[$0 + 12 >> 2] = $0;
   HEAP32[$0 + 8 >> 2] = $0;
   return;
  }
  $1 = HEAP32[$4 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $1;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
    label$4 : {
     label$5 : {
      if (($3 | 0) == 85) {
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), $1);
       break label$5;
      }
      if (($3 - 49 & 255) >>> 0 <= 8) {
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
       break label$5;
      }
      $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 29934);
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$2 + 12 >> 2] = $4;
      if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2 + 8 | 0)) {
       $4 = $0 + 8 | 0;
       $5 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($4);
       $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
       while (1) {
        $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($3);
        HEAP32[$2 + 16 >> 2] = $1;
        if (!$1) {
         break label$4;
        }
        $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($4, $2 + 16 | 0);
        if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
         continue;
        }
        break;
       }
       $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2 + 16 | 0, $0, $5);
       $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__StructuredBindingName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $2 + 16 | 0);
       break label$2;
      }
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), $1);
     }
     if ($1) {
      break label$3;
     }
    }
    $0 = 0;
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
  }
  $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($3, $1);
 }
 __stack_pointer = $2 + 32 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 85)) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($1 + 72 | 0, $0);
    if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($1 + 72 | 0)) {
     break label$1;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 - -64 | 0, 31928);
    $5 = HEAP32[$3 >> 2];
    $3 = HEAP32[$3 + 4 >> 2];
    HEAP32[$1 >> 2] = $5;
    HEAP32[$1 + 4 >> 2] = $3;
    if ($28anonymous_20namespace_29__itanium_demangle__StringView__startsWith_28_28anonymous_20namespace_29__itanium_demangle__StringView_29_20const($1 + 72 | 0, $1)) {
     $28anonymous_20namespace_29__itanium_demangle__StringView__dropFront_28unsigned_20long_29_20const($1 + 56 | 0, $1 + 72 | 0, 9);
     $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28_29($1 + 48 | 0);
     $2 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($1 + 32 | 0, $0, $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($1 + 56 | 0));
     $6 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($1 + 16 | 0, $0 + 4 | 0, $28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($1 + 56 | 0));
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($1 + 8 | 0, $0);
     $5 = HEAP32[$1 + 12 >> 2];
     $3 = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 48 >> 2] = $3;
     HEAP32[$1 + 52 >> 2] = $5;
     $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_char_20const_____SwapAndRestore_28_29($6);
     $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_char_20const_____SwapAndRestore_28_29($2);
     $2 = 0;
     if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($4)) {
      break label$1;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     HEAP32[$1 + 32 >> 2] = $2;
     if (!$2) {
      break label$2;
     }
     $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ObjCProtoName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1 + 32 | 0, $4);
     break label$1;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseQualifiedType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    HEAP32[$1 + 32 >> 2] = $2;
    if (!$2) {
     break label$2;
    }
    $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VendorExtQualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1 + 32 | 0, $1 + 72 | 0);
    break label$1;
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
   HEAP32[$1 + 32 >> 2] = $4;
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   HEAP32[$1 + 16 >> 2] = $2;
   if (!$2) {
    break label$2;
   }
   if (!$4) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__29($0, $1 + 16 | 0, $1 + 32 | 0);
   break label$1;
  }
  $2 = 0;
 }
 __stack_pointer = $1 + 80 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseLocalName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 90)) {
   break label$1;
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
  $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($4);
  HEAP32[$2 + 12 >> 2] = $5;
  if (!$5) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 115)) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b15_5d__28char_20const_20_28__29_20_5b15_5d_29($0, 30056), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
   break label$1;
  }
  label$3 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 100)) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2, $0, 1);
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$1;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($4, $1);
    HEAP32[$2 >> 2] = $3;
    if (!$3) {
     break label$3;
    }
    $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($4, $1);
   HEAP32[$2 >> 2] = $3;
   if (!$3) {
    break label$3;
   }
   wasm2js_i32$0 = $0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2);
   break label$1;
  }
  $3 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $3;
}
function jinit_color_deconverter($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 28) | 0;
 HEAP32[$0 + 480 >> 2] = $1;
 HEAP32[$1 >> 2] = 53;
 label$1 : {
  label$2 : {
   $2 = HEAP32[$0 + 40 >> 2];
   if ($2 >>> 0 > 7) {
    break label$2;
   }
   label$3 : {
    if (!(1 << $2 & 204)) {
     if (1 << $2 & 48) {
      break label$3;
     }
     if (($2 | 0) != 1) {
      break label$2;
     }
     if (HEAP32[$0 + 36 >> 2] == 1) {
      break label$1;
     }
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 20 >> 2] = 11;
     FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
     break label$1;
    }
    if (HEAP32[$0 + 36 >> 2] == 3) {
     break label$1;
    }
    $2 = HEAP32[$0 >> 2];
    HEAP32[$2 + 20 >> 2] = 11;
    FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
    break label$1;
   }
   if (HEAP32[$0 + 36 >> 2] == 4) {
    break label$1;
   }
   $2 = HEAP32[$0 >> 2];
   HEAP32[$2 + 20 >> 2] = 11;
   FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
   break label$1;
  }
  if (HEAP32[$0 + 36 >> 2] > 0) {
   break label$1;
  }
  $2 = HEAP32[$0 >> 2];
  HEAP32[$2 + 20 >> 2] = 11;
  FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
 }
 label$5 : {
  if (!HEAP32[$0 + 304 >> 2]) {
   break label$5;
  }
  label$6 : {
   switch (HEAP32[$0 + 40 >> 2] - 2 | 0) {
   case 0:
   case 4:
    break label$5;
   default:
    break label$6;
   }
  }
  $2 = HEAP32[$0 >> 2];
  HEAP32[$2 + 20 >> 2] = 28;
  FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
 }
 label$7 : {
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $2 = HEAP32[$0 + 44 >> 2];
       switch ($2 - 1 | 0) {
       case 5:
        break label$10;
       case 1:
        break label$11;
       case 0:
        break label$12;
       case 3:
        break label$9;
       default:
        break label$8;
       }
      }
      HEAP32[$0 + 120 >> 2] = 1;
      label$13 : {
       switch (HEAP32[$0 + 40 >> 2] - 1 | 0) {
       case 0:
       case 2:
       case 6:
        HEAP32[$1 + 4 >> 2] = 54;
        $2 = HEAP32[$0 + 36 >> 2];
        if (($2 | 0) < 2) {
         break label$7;
        }
        $3 = HEAP32[$0 + 216 >> 2];
        $1 = 1;
        while (1) {
         HEAP32[(Math_imul($1, 88) + $3 | 0) + 52 >> 2] = 0;
         $1 = $1 + 1 | 0;
         if (($2 | 0) != ($1 | 0)) {
          continue;
         }
         break;
        }
        break label$7;
       case 1:
        label$17 : {
         label$18 : {
          switch (HEAP32[$0 + 304 >> 2]) {
          case 0:
           HEAP32[$1 + 4 >> 2] = 55;
           break label$17;
          case 1:
           HEAP32[$1 + 4 >> 2] = 56;
           break label$17;
          default:
           break label$18;
          }
         }
         $1 = HEAP32[$0 >> 2];
         HEAP32[$1 + 20 >> 2] = 28;
         FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
        }
        $1 = HEAP32[$0 + 480 >> 2];
        $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 3072) | 0;
        HEAP32[$1 + 24 >> 2] = $3;
        $1 = 0;
        while (1) {
         $2 = ($1 << 2) + $3 | 0;
         HEAP32[$2 >> 2] = Math_imul($1, 19595);
         HEAP32[$2 + 2048 >> 2] = Math_imul($1, 7471) + 32768;
         HEAP32[$2 + 1024 >> 2] = Math_imul($1, 38470);
         $1 = $1 + 1 | 0;
         if (($1 | 0) != 256) {
          continue;
         }
         break;
        }
        break label$7;
       default:
        break label$13;
       }
      }
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 20 >> 2] = 28;
      FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
      break label$7;
     }
     HEAP32[$0 + 120 >> 2] = 3;
     label$22 : {
      switch (HEAP32[$0 + 40 >> 2] - 1 | 0) {
      case 0:
       HEAP32[$1 + 4 >> 2] = 57;
       break label$7;
      case 2:
       HEAP32[$1 + 4 >> 2] = 58;
       build_ycc_rgb_table($0);
       break label$7;
      case 6:
       HEAP32[$1 + 4 >> 2] = 58;
       $1 = HEAP32[$0 + 480 >> 2];
       wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
       wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
       wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
       $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
       HEAP32[$1 + 20 >> 2] = $4;
       $5 = HEAP32[$1 + 16 >> 2];
       $6 = HEAP32[$1 + 12 >> 2];
       $7 = HEAP32[$1 + 8 >> 2];
       $1 = -128;
       while (1) {
        $2 = $3 << 2;
        HEAP32[$7 + $2 >> 2] = Math_imul($1, 183763) + 32768 >> 16;
        HEAP32[$2 + $6 >> 2] = Math_imul($1, 232260) + 32768 >> 16;
        HEAP32[$2 + $5 >> 2] = Math_imul($1, -93603);
        HEAP32[$2 + $4 >> 2] = Math_imul($1, -45107) + 32768;
        $1 = $1 + 1 | 0;
        $3 = $3 + 1 | 0;
        if (($3 | 0) != 256) {
         continue;
        }
        break;
       }
       break label$7;
      case 1:
       label$28 : {
        switch (HEAP32[$0 + 304 >> 2]) {
        case 0:
         HEAP32[$1 + 4 >> 2] = 59;
         break label$7;
        case 1:
         HEAP32[$1 + 4 >> 2] = 60;
         break label$7;
        default:
         break label$28;
        }
       }
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 20 >> 2] = 28;
       FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
       break label$7;
      default:
       break label$22;
      }
     }
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 20 >> 2] = 28;
     FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
     break label$7;
    }
    HEAP32[$0 + 120 >> 2] = 3;
    if (HEAP32[$0 + 40 >> 2] == 6) {
     label$32 : {
      switch (HEAP32[$0 + 304 >> 2]) {
      case 0:
       HEAP32[$1 + 4 >> 2] = 59;
       break label$7;
      case 1:
       HEAP32[$1 + 4 >> 2] = 60;
       break label$7;
      default:
       break label$32;
      }
     }
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 20 >> 2] = 28;
     FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
     break label$7;
    }
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 28;
    FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
    break label$7;
   }
   HEAP32[$0 + 120 >> 2] = 4;
   label$35 : {
    switch (HEAP32[$0 + 40 >> 2] - 4 | 0) {
    case 1:
     HEAP32[$1 + 4 >> 2] = 61;
     build_ycc_rgb_table($0);
     break label$7;
    case 0:
     HEAP32[$1 + 4 >> 2] = 62;
     break label$7;
    default:
     break label$35;
    }
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 28;
   FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
   break label$7;
  }
  if (HEAP32[$0 + 40 >> 2] == ($2 | 0)) {
   HEAP32[$0 + 120 >> 2] = HEAP32[$0 + 36 >> 2];
   HEAP32[$1 + 4 >> 2] = 62;
   break label$7;
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 28;
  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
 }
 $1 = 1;
 $1 = HEAP32[$0 + 84 >> 2] ? $1 : HEAP32[$0 + 120 >> 2];
 HEAP32[$0 + 124 >> 2] = $1;
}
function start_pass_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = HEAP32[$0 + 412 >> 2];
 $4 = HEAP32[$0 + 468 >> 2];
 label$1 : {
  if (HEAP32[$0 + 224 >> 2]) {
   $2 = HEAP32[$0 + 416 >> 2];
   label$3 : {
    label$4 : {
     label$5 : {
      if (!$1) {
       if (!$2) {
        break label$5;
       }
       break label$4;
      }
      if (HEAP32[$0 + 436 >> 2] < ($2 | 0) | ($1 | 0) > ($2 | 0) | HEAP32[$0 + 340 >> 2] != 1) {
       break label$4;
      }
     }
     $2 = HEAP32[$0 + 420 >> 2];
     label$7 : {
      if (!$2) {
       $2 = HEAP32[$0 + 424 >> 2];
       break label$7;
      }
      $2 = $2 - 1 | 0;
      if (($2 | 0) != HEAP32[$0 + 424 >> 2]) {
       break label$4;
      }
     }
     if (($2 | 0) < 14) {
      break label$3;
     }
    }
    $2 = HEAP32[$0 >> 2];
    HEAP32[$2 + 24 >> 2] = $1;
    HEAP32[$2 + 20 >> 2] = 17;
    HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAP32[$0 + 416 >> 2];
    HEAP32[HEAP32[$0 >> 2] + 32 >> 2] = HEAP32[$0 + 420 >> 2];
    HEAP32[HEAP32[$0 >> 2] + 36 >> 2] = HEAP32[$0 + 424 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   }
   $1 = HEAP32[$0 + 340 >> 2];
   if (($1 | 0) >= 1) {
    while (1) {
     $5 = HEAP32[HEAP32[(($7 << 2) + $0 | 0) + 344 >> 2] + 4 >> 2];
     $6 = HEAP32[$0 + 160 >> 2];
     $2 = HEAP32[$0 + 412 >> 2];
     $1 = 0;
     label$11 : {
      if (!$2) {
       break label$11;
      }
      $1 = $2;
      if (HEAP32[($5 << 8) + $6 >> 2] > -1) {
       break label$11;
      }
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 24 >> 2] = $5;
      HEAP32[$1 + 20 >> 2] = 118;
      HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
      $1 = HEAP32[$0 + 412 >> 2];
     }
     if (($1 | 0) <= HEAP32[$0 + 416 >> 2]) {
      while (1) {
       $2 = (($5 << 8) + $6 | 0) + ($1 << 2) | 0;
       $3 = HEAP32[$2 >> 2];
       if (HEAP32[$0 + 420 >> 2] != ((($3 | 0) > 0 ? $3 : 0) | 0)) {
        $3 = HEAP32[$0 >> 2];
        HEAP32[$3 + 24 >> 2] = $5;
        HEAP32[$3 + 20 >> 2] = 118;
        HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
       }
       HEAP32[$2 >> 2] = HEAP32[$0 + 424 >> 2];
       $2 = HEAP32[$0 + 416 >> 2] > ($1 | 0);
       $1 = $1 + 1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     $1 = HEAP32[$0 + 340 >> 2];
     $7 = $7 + 1 | 0;
     if (($1 | 0) > ($7 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 412 >> 2];
   if (!HEAP32[$0 + 420 >> 2]) {
    if (!$2) {
     HEAP32[$4 + 4 >> 2] = 100;
     break label$1;
    }
    HEAP32[$4 + 4 >> 2] = 101;
    break label$1;
   }
   if (!$2) {
    HEAP32[$4 + 4 >> 2] = 102;
    break label$1;
   }
   HEAP32[$4 + 4 >> 2] = 103;
   break label$1;
  }
  label$18 : {
   if (!(HEAP32[$0 + 424 >> 2] | (HEAP32[$0 + 420 >> 2] | $1))) {
    $1 = HEAP32[$0 + 416 >> 2];
    if (($1 | 0) > 63 | HEAP32[$0 + 436 >> 2] == ($1 | 0)) {
     break label$18;
    }
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 125;
   FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
  }
  HEAP32[$4 + 4 >> 2] = 104;
  $1 = HEAP32[$0 + 340 >> 2];
 }
 if (($1 | 0) >= 1) {
  $2 = 0;
  while (1) {
   $5 = $2 << 2;
   $3 = HEAP32[($5 + $0 | 0) + 344 >> 2];
   label$22 : {
    label$23 : {
     if (HEAP32[$0 + 224 >> 2]) {
      if (HEAP32[$0 + 412 >> 2]) {
       break label$23;
      }
      if (HEAP32[$0 + 420 >> 2]) {
       break label$22;
      }
     }
     $1 = HEAP32[$3 + 20 >> 2];
     if ($1 >>> 0 >= 16) {
      $6 = HEAP32[$0 >> 2];
      HEAP32[$6 + 24 >> 2] = $1;
      HEAP32[$6 + 20 >> 2] = 50;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
     }
     $7 = ($1 << 2) + $4 | 0;
     $6 = $7 + 60 | 0;
     $1 = HEAP32[$6 >> 2];
     if (!$1) {
      $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 64) | 0;
      HEAP32[$7 + 60 >> 2] = $1;
     }
     HEAP8[$1 | 0] = 0;
     HEAP8[$1 + 1 | 0] = 0;
     HEAP8[$1 + 2 | 0] = 0;
     HEAP8[$1 + 3 | 0] = 0;
     HEAP8[$1 + 4 | 0] = 0;
     HEAP8[$1 + 5 | 0] = 0;
     HEAP8[$1 + 6 | 0] = 0;
     HEAP8[$1 + 7 | 0] = 0;
     HEAP8[$1 + 56 | 0] = 0;
     HEAP8[$1 + 57 | 0] = 0;
     HEAP8[$1 + 58 | 0] = 0;
     HEAP8[$1 + 59 | 0] = 0;
     HEAP8[$1 + 60 | 0] = 0;
     HEAP8[$1 + 61 | 0] = 0;
     HEAP8[$1 + 62 | 0] = 0;
     HEAP8[$1 + 63 | 0] = 0;
     HEAP8[$1 + 48 | 0] = 0;
     HEAP8[$1 + 49 | 0] = 0;
     HEAP8[$1 + 50 | 0] = 0;
     HEAP8[$1 + 51 | 0] = 0;
     HEAP8[$1 + 52 | 0] = 0;
     HEAP8[$1 + 53 | 0] = 0;
     HEAP8[$1 + 54 | 0] = 0;
     HEAP8[$1 + 55 | 0] = 0;
     HEAP8[$1 + 40 | 0] = 0;
     HEAP8[$1 + 41 | 0] = 0;
     HEAP8[$1 + 42 | 0] = 0;
     HEAP8[$1 + 43 | 0] = 0;
     HEAP8[$1 + 44 | 0] = 0;
     HEAP8[$1 + 45 | 0] = 0;
     HEAP8[$1 + 46 | 0] = 0;
     HEAP8[$1 + 47 | 0] = 0;
     HEAP8[$1 + 32 | 0] = 0;
     HEAP8[$1 + 33 | 0] = 0;
     HEAP8[$1 + 34 | 0] = 0;
     HEAP8[$1 + 35 | 0] = 0;
     HEAP8[$1 + 36 | 0] = 0;
     HEAP8[$1 + 37 | 0] = 0;
     HEAP8[$1 + 38 | 0] = 0;
     HEAP8[$1 + 39 | 0] = 0;
     HEAP8[$1 + 24 | 0] = 0;
     HEAP8[$1 + 25 | 0] = 0;
     HEAP8[$1 + 26 | 0] = 0;
     HEAP8[$1 + 27 | 0] = 0;
     HEAP8[$1 + 28 | 0] = 0;
     HEAP8[$1 + 29 | 0] = 0;
     HEAP8[$1 + 30 | 0] = 0;
     HEAP8[$1 + 31 | 0] = 0;
     HEAP8[$1 + 16 | 0] = 0;
     HEAP8[$1 + 17 | 0] = 0;
     HEAP8[$1 + 18 | 0] = 0;
     HEAP8[$1 + 19 | 0] = 0;
     HEAP8[$1 + 20 | 0] = 0;
     HEAP8[$1 + 21 | 0] = 0;
     HEAP8[$1 + 22 | 0] = 0;
     HEAP8[$1 + 23 | 0] = 0;
     HEAP8[$1 + 8 | 0] = 0;
     HEAP8[$1 + 9 | 0] = 0;
     HEAP8[$1 + 10 | 0] = 0;
     HEAP8[$1 + 11 | 0] = 0;
     HEAP8[$1 + 12 | 0] = 0;
     HEAP8[$1 + 13 | 0] = 0;
     HEAP8[$1 + 14 | 0] = 0;
     HEAP8[$1 + 15 | 0] = 0;
     $1 = $4 + $5 | 0;
     HEAP32[$1 + 40 >> 2] = 0;
     HEAP32[$1 + 24 >> 2] = 0;
     if (!HEAP32[$0 + 224 >> 2]) {
      if (HEAP32[$0 + 436 >> 2]) {
       break label$23;
      }
      break label$22;
     }
     if (!HEAP32[$0 + 412 >> 2]) {
      break label$22;
     }
    }
    $1 = HEAP32[$3 + 24 >> 2];
    if ($1 >>> 0 >= 16) {
     $3 = HEAP32[$0 >> 2];
     HEAP32[$3 + 24 >> 2] = $1;
     HEAP32[$3 + 20 >> 2] = 50;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    $5 = ($1 << 2) + $4 | 0;
    $3 = $5 + 124 | 0;
    $1 = HEAP32[$3 >> 2];
    if (!$1) {
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 256) | 0;
     HEAP32[$5 + 124 >> 2] = $1;
    }
    memset($1, 0, 256);
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
    continue;
   }
   break;
  }
 }
 HEAP32[$4 + 20 >> 2] = -16;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 56 >> 2] = HEAP32[$0 + 280 >> 2];
}
function start_pass_huff_decoder($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = HEAP32[$0 + 412 >> 2];
 $6 = HEAP32[$0 + 468 >> 2];
 label$1 : {
  if (HEAP32[$0 + 224 >> 2]) {
   $2 = HEAP32[$0 + 416 >> 2];
   label$3 : {
    label$4 : {
     label$5 : {
      if (!$1) {
       if (!$2) {
        break label$5;
       }
       break label$4;
      }
      if (HEAP32[$0 + 436 >> 2] < ($2 | 0) | ($1 | 0) > ($2 | 0) | HEAP32[$0 + 340 >> 2] != 1) {
       break label$4;
      }
     }
     $2 = HEAP32[$0 + 420 >> 2];
     label$7 : {
      if (!$2) {
       $2 = HEAP32[$0 + 424 >> 2];
       break label$7;
      }
      $2 = $2 - 1 | 0;
      if (($2 | 0) != HEAP32[$0 + 424 >> 2]) {
       break label$4;
      }
     }
     if (($2 | 0) < 14) {
      break label$3;
     }
    }
    $2 = HEAP32[$0 >> 2];
    HEAP32[$2 + 24 >> 2] = $1;
    HEAP32[$2 + 20 >> 2] = 17;
    HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAP32[$0 + 416 >> 2];
    HEAP32[HEAP32[$0 >> 2] + 32 >> 2] = HEAP32[$0 + 420 >> 2];
    HEAP32[HEAP32[$0 >> 2] + 36 >> 2] = HEAP32[$0 + 424 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   }
   $1 = HEAP32[$0 + 340 >> 2];
   if (($1 | 0) >= 1) {
    while (1) {
     $4 = HEAP32[HEAP32[(($7 << 2) + $0 | 0) + 344 >> 2] + 4 >> 2];
     $3 = HEAP32[$0 + 160 >> 2];
     $2 = HEAP32[$0 + 412 >> 2];
     $1 = 0;
     label$11 : {
      if (!$2) {
       break label$11;
      }
      $1 = $2;
      if (HEAP32[($4 << 8) + $3 >> 2] > -1) {
       break label$11;
      }
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 24 >> 2] = $4;
      HEAP32[$1 + 20 >> 2] = 118;
      HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
      $1 = HEAP32[$0 + 412 >> 2];
     }
     if (($1 | 0) <= HEAP32[$0 + 416 >> 2]) {
      while (1) {
       $2 = (($4 << 8) + $3 | 0) + ($1 << 2) | 0;
       $5 = HEAP32[$2 >> 2];
       if (HEAP32[$0 + 420 >> 2] != ((($5 | 0) > 0 ? $5 : 0) | 0)) {
        $5 = HEAP32[$0 >> 2];
        HEAP32[$5 + 24 >> 2] = $4;
        HEAP32[$5 + 20 >> 2] = 118;
        HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
       }
       HEAP32[$2 >> 2] = HEAP32[$0 + 424 >> 2];
       $2 = HEAP32[$0 + 416 >> 2] > ($1 | 0);
       $1 = $1 + 1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     $1 = HEAP32[$0 + 340 >> 2];
     $7 = $7 + 1 | 0;
     if (($1 | 0) > ($7 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 412 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$0 + 420 >> 2] ? $2 ? 107 : 108 : $2 ? 109 : 110;
   label$15 : {
    if (($1 | 0) < 1) {
     break label$15;
    }
    $1 = 0;
    while (1) {
     $5 = $1 << 2;
     $4 = HEAP32[($5 + $0 | 0) + 344 >> 2];
     label$17 : {
      if (!$2) {
       if (HEAP32[$0 + 420 >> 2]) {
        break label$17;
       }
       $2 = HEAP32[$4 + 20 >> 2];
       jpeg_make_d_derived_tbl($0, 1, $2, (($2 << 2) + $6 | 0) + 48 | 0);
       break label$17;
      }
      $2 = HEAP32[$4 + 24 >> 2];
      $4 = $2;
      $3 = ($2 << 2) + $6 | 0;
      $2 = $3 + 48 | 0;
      jpeg_make_d_derived_tbl($0, 0, $4, $2);
      HEAP32[$6 + 64 >> 2] = HEAP32[$3 + 48 >> 2];
     }
     HEAP32[($6 + $5 | 0) + 24 >> 2] = 0;
     $1 = $1 + 1 | 0;
     if (($1 | 0) >= HEAP32[$0 + 340 >> 2]) {
      break label$15;
     }
     $2 = HEAP32[$0 + 412 >> 2];
     continue;
    }
   }
   HEAP32[$6 + 20 >> 2] = 0;
   break label$1;
  }
  label$19 : {
   if (!(HEAP32[$0 + 424 >> 2] | (HEAP32[$0 + 420 >> 2] | $1))) {
    $1 = HEAP32[$0 + 416 >> 2];
    if ((($1 | 0) > 63 ? !HEAP32[$0 + 220 >> 2] : 0) | HEAP32[$0 + 436 >> 2] == ($1 | 0)) {
     break label$19;
    }
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 125;
   FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
  }
  HEAP32[$6 + 4 >> 2] = HEAP32[$0 + 436 >> 2] == 63 ? 111 : 112;
  $1 = 0;
  if (HEAP32[$0 + 340 >> 2] > 0) {
   while (1) {
    $2 = $1 << 2;
    $4 = HEAP32[($2 + $0 | 0) + 344 >> 2];
    $5 = HEAP32[$4 + 20 >> 2];
    jpeg_make_d_derived_tbl($0, 1, $5, (($5 << 2) + $6 | 0) + 68 | 0);
    if (HEAP32[$0 + 436 >> 2]) {
     $5 = HEAP32[$4 + 24 >> 2];
     jpeg_make_d_derived_tbl($0, 0, $5, (($5 << 2) + $6 | 0) + 84 | 0);
    }
    HEAP32[($2 + $6 | 0) + 24 >> 2] = 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) < HEAP32[$0 + 340 >> 2]) {
     continue;
    }
    break;
   }
  }
  $2 = 0;
  if (HEAP32[$0 + 368 >> 2] <= 0) {
   break label$1;
  }
  while (1) {
   $1 = $2 << 2;
   $5 = $6 + $1 | 0;
   $1 = HEAP32[((HEAP32[($0 + $1 | 0) + 372 >> 2] << 2) + $0 | 0) + 344 >> 2];
   HEAP32[$5 + 100 >> 2] = HEAP32[((HEAP32[$1 + 20 >> 2] << 2) + $6 | 0) + 68 >> 2];
   HEAP32[$5 + 140 >> 2] = HEAP32[((HEAP32[$1 + 24 >> 2] << 2) + $6 | 0) + 84 >> 2];
   label$25 : {
    if (!HEAP32[$1 + 52 >> 2]) {
     $1 = 0;
     break label$25;
    }
    $4 = HEAP32[$1 + 36 >> 2];
    $3 = HEAP32[$1 + 40 >> 2];
    $1 = 1;
    label$27 : {
     switch (HEAP32[$0 + 436 >> 2]) {
     case 3:
      $1 = HEAP32[((($3 | 0) != 1) << 3 | (($4 | 0) != 1) << 2) + 17232 >> 2] + 1 | 0;
      break label$25;
     case 8:
      $1 = $3 - 1 | 0;
      $3 = Math_imul($1 >>> 0 < 2 ? $1 : 2, 12);
      $1 = $4 - 1 | 0;
      $1 = HEAP32[($3 + (($1 >>> 0 < 2 ? $1 : 2) << 2) | 0) + 17248 >> 2] + 1 | 0;
      break label$25;
     case 15:
      $1 = $3 - 1 | 0;
      $3 = ($1 >>> 0 < 3 ? $1 : 3) << 4;
      $1 = $4 - 1 | 0;
      $1 = HEAP32[($3 + (($1 >>> 0 < 3 ? $1 : 3) << 2) | 0) + 17296 >> 2] + 1 | 0;
      break label$25;
     case 24:
      $1 = $3 - 1 | 0;
      $3 = Math_imul($1 >>> 0 < 4 ? $1 : 4, 20);
      $1 = $4 - 1 | 0;
      $1 = HEAP32[($3 + (($1 >>> 0 < 4 ? $1 : 4) << 2) | 0) + 17360 >> 2] + 1 | 0;
      break label$25;
     case 35:
      $1 = $3 - 1 | 0;
      $3 = Math_imul($1 >>> 0 < 5 ? $1 : 5, 24);
      $1 = $4 - 1 | 0;
      $1 = HEAP32[($3 + (($1 >>> 0 < 5 ? $1 : 5) << 2) | 0) + 17472 >> 2] + 1 | 0;
      break label$25;
     case 48:
      $1 = $3 - 1 | 0;
      $3 = Math_imul($1 >>> 0 < 6 ? $1 : 6, 28);
      $1 = $4 - 1 | 0;
      $1 = HEAP32[($3 + (($1 >>> 0 < 6 ? $1 : 6) << 2) | 0) + 17616 >> 2] + 1 | 0;
      break label$25;
     case 0:
      break label$25;
     default:
      break label$27;
     }
    }
    $1 = $3 - 1 | 0;
    $3 = ($1 >>> 0 < 7 ? $1 : 7) << 5;
    $1 = $4 - 1 | 0;
    $1 = HEAP32[($3 + (($1 >>> 0 < 7 ? $1 : 7) << 2) | 0) + 17824 >> 2] + 1 | 0;
   }
   HEAP32[$5 + 180 >> 2] = $1;
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 368 >> 2]) {
    continue;
   }
   break;
  }
 }
 HEAP32[$6 + 40 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAP32[$6 + 16 >> 2] = 0;
 HEAP32[$6 + 44 >> 2] = HEAP32[$0 + 280 >> 2];
}
function decode_mcu_AC_refine_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $4 = __stack_pointer - 288 | 0;
 __stack_pointer = $4;
 $6 = HEAP32[$0 + 468 >> 2];
 label$1 : {
  label$2 : {
   if (HEAP32[$6 + 44 >> 2] | !HEAP32[$0 + 280 >> 2]) {
    break label$2;
   }
   $3 = HEAP32[$0 + 464 >> 2];
   $5 = $6 + 16 | 0;
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + (HEAP32[$5 >> 2] / 8 | 0);
   HEAP32[$6 + 16 >> 2] = 0;
   if (!(FUNCTION_TABLE[HEAP32[$3 + 8 >> 2]]($0) | 0)) {
    break label$1;
   }
   if (HEAP32[$0 + 340 >> 2] >= 1) {
    while (1) {
     HEAP32[(($2 << 2) + $6 | 0) + 24 >> 2] = 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
      continue;
     }
     break;
    }
   }
   HEAP32[$6 + 20 >> 2] = 0;
   HEAP32[$6 + 44 >> 2] = HEAP32[$0 + 280 >> 2];
   if (HEAP32[$0 + 440 >> 2]) {
    break label$2;
   }
   HEAP32[$6 + 40 >> 2] = 0;
  }
  label$5 : {
   if (!HEAP32[$6 + 40 >> 2]) {
    $14 = HEAP32[$0 + 432 >> 2];
    $11 = HEAP32[$0 + 416 >> 2];
    $2 = HEAP32[$0 + 424 >> 2];
    HEAP32[$4 + 280 >> 2] = $0;
    $3 = HEAP32[$0 + 24 >> 2];
    HEAP32[$4 + 264 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4 + 268 >> 2] = HEAP32[$3 + 4 >> 2];
    $15 = -1 << $2;
    $12 = 1 << $2;
    $2 = HEAP32[$6 + 16 >> 2];
    $3 = HEAP32[$0 + 412 >> 2];
    $13 = HEAP32[$1 >> 2];
    $5 = HEAP32[$6 + 12 >> 2];
    label$7 : {
     label$8 : {
      $8 = HEAP32[$6 + 20 >> 2];
      if ($8) {
       break label$8;
      }
      $16 = HEAP32[$6 + 64 >> 2];
      while (1) {
       label$11 : {
        label$12 : {
         label$13 : {
          if (($2 | 0) <= 7) {
           if (!jpeg_fill_bit_buffer($4 + 264 | 0, $5, $2, 0)) {
            break label$5;
           }
           $5 = HEAP32[$4 + 272 >> 2];
           $2 = HEAP32[$4 + 276 >> 2];
           $1 = 1;
           if (($2 | 0) < 8) {
            break label$13;
           }
          }
          $1 = $5 >> $2 - 8 & 255;
          $7 = HEAP32[(($1 << 2) + $16 | 0) + 144 >> 2];
          if ($7) {
           break label$12;
          }
          $1 = 9;
         }
         $1 = jpeg_huff_decode($4 + 264 | 0, $5, $2, $16, $1);
         if (($1 | 0) < 0) {
          break label$5;
         }
         $5 = HEAP32[$4 + 272 >> 2];
         $2 = HEAP32[$4 + 276 >> 2];
         break label$11;
        }
        $1 = HEAPU8[($1 + $16 | 0) + 1168 | 0];
        $2 = $2 - $7 | 0;
       }
       $7 = $1 >>> 4 | 0;
       label$15 : {
        label$16 : {
         switch ($1 & 15) {
         default:
          $1 = HEAP32[$0 >> 2];
          HEAP32[$1 + 20 >> 2] = 121;
          FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
         case 1:
          if (($2 | 0) <= 0) {
           if (!jpeg_fill_bit_buffer($4 + 264 | 0, $5, $2, 1)) {
            break label$5;
           }
           $5 = HEAP32[$4 + 272 >> 2];
           $2 = HEAP32[$4 + 276 >> 2];
          }
          $2 = $2 - 1 | 0;
          $17 = $5 >>> $2 & 1 ? $12 : $15;
          break label$15;
         case 0:
          break label$16;
         }
        }
        $17 = 0;
        if (($7 | 0) == 15) {
         break label$15;
        }
        $8 = 1;
        if (!$7) {
         break label$8;
        }
        if (($2 | 0) < ($7 | 0)) {
         if (!jpeg_fill_bit_buffer($4 + 264 | 0, $5, $2, $7)) {
          break label$5;
         }
         $5 = HEAP32[$4 + 272 >> 2];
         $2 = HEAP32[$4 + 276 >> 2];
        }
        $2 = $2 - $7 | 0;
        $8 = (HEAP32[($7 << 2) + 18080 >> 2] & $5 >> $2) + (1 << $7) | 0;
        if ($8) {
         break label$8;
        }
        $1 = 0;
        break label$7;
       }
       $9 = ($3 | 0) > ($11 | 0) ? $3 : $11;
       $18 = $9 + 1 | 0;
       label$21 : {
        while (1) {
         $1 = $3;
         $3 = (HEAP32[($3 << 2) + $14 >> 2] << 1) + $13 | 0;
         label$23 : {
          if (HEAPU16[$3 >> 1]) {
           if (($2 | 0) <= 0) {
            if (!jpeg_fill_bit_buffer($4 + 264 | 0, $5, $2, 1)) {
             break label$5;
            }
            $5 = HEAP32[$4 + 272 >> 2];
            $2 = HEAP32[$4 + 276 >> 2];
           }
           $2 = $2 - 1 | 0;
           if (!($5 >>> $2 & 1)) {
            break label$23;
           }
           $8 = HEAP16[$3 >> 1];
           if ($12 & $8) {
            break label$23;
           }
           if (($8 | 0) >= 0) {
            HEAP16[$3 >> 1] = $8 + $12;
            break label$23;
           }
           HEAP16[$3 >> 1] = $8 + $15;
           break label$23;
          }
          if (($7 | 0) < 1) {
           break label$21;
          }
          $7 = $7 - 1 | 0;
         }
         $3 = $1 + 1 | 0;
         if (($1 | 0) != ($9 | 0)) {
          continue;
         }
         break;
        }
        $1 = $18;
       }
       if ($17) {
        $3 = HEAP32[($1 << 2) + $14 >> 2];
        HEAP16[($3 << 1) + $13 >> 1] = $17;
        HEAP32[($10 << 2) + $4 >> 2] = $3;
        $10 = $10 + 1 | 0;
       }
       $3 = $1 + 1 | 0;
       if (($1 | 0) < ($11 | 0)) {
        continue;
       }
       break;
      }
      $1 = 0;
      break label$7;
     }
     $7 = ($3 | 0) > ($11 | 0) ? $3 : $11;
     while (1) {
      $1 = $3;
      $3 = (HEAP32[($3 << 2) + $14 >> 2] << 1) + $13 | 0;
      label$29 : {
       if (!HEAPU16[$3 >> 1]) {
        break label$29;
       }
       if (($2 | 0) <= 0) {
        if (!jpeg_fill_bit_buffer($4 + 264 | 0, $5, $2, 1)) {
         break label$5;
        }
        $5 = HEAP32[$4 + 272 >> 2];
        $2 = HEAP32[$4 + 276 >> 2];
       }
       $2 = $2 - 1 | 0;
       if (!($5 >>> $2 & 1)) {
        break label$29;
       }
       $9 = HEAP16[$3 >> 1];
       if ($9 & $12) {
        break label$29;
       }
       if (($9 | 0) >= 0) {
        HEAP16[$3 >> 1] = $12 + $9;
        break label$29;
       }
       HEAP16[$3 >> 1] = $9 + $15;
      }
      $3 = $1 + 1 | 0;
      if (($1 | 0) != ($7 | 0)) {
       continue;
      }
      break;
     }
     $1 = $8 - 1 | 0;
    }
    $3 = HEAP32[$0 + 24 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$4 + 264 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 268 >> 2];
    HEAP32[$6 + 20 >> 2] = $1;
    HEAP32[$6 + 16 >> 2] = $2;
    HEAP32[$6 + 12 >> 2] = $5;
   }
   HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 44 >> 2] - 1;
   $2 = 1;
   break label$1;
  }
  if (!$10) {
   $2 = 0;
   break label$1;
  }
  while (1) {
   $2 = 0;
   $10 = $10 - 1 | 0;
   HEAP16[(HEAP32[($10 << 2) + $4 >> 2] << 1) + $13 >> 1] = 0;
   if ($10) {
    continue;
   }
   break;
  }
 }
 __stack_pointer = $4 + 288 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
       switch ($1 - 74 | 0) {
       case 1:
        break label$3;
       case 2:
        break label$4;
       case 0:
        break label$5;
       default:
        break label$6;
       }
      }
      if (($1 | 0) != 88) {
       break label$3;
      }
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
      if (!$1) {
       break label$2;
      }
      $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69);
      __stack_pointer = $2 + 16 | 0;
      return $0 ? $1 : 0;
     }
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     $3 = $0 + 8 | 0;
     $4 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($3);
     while (1) {
      if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
       $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArg_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
       HEAP32[$2 + 12 >> 2] = $1;
       if (!$1) {
        break label$2;
       }
       $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $2 + 12 | 0);
       continue;
      }
      break;
     }
     $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($2, $0, $4);
     $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $2);
     break label$1;
    }
    if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) | 0) == 90) {
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
     $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
     if (!$1) {
      break label$2;
     }
     $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69) ? $1 : 0;
     break label$1;
    }
    $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExprPrimary_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    break label$1;
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function jpeg_idct_float($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = 0;
 $22 = __stack_pointer - 256 | 0;
 __stack_pointer = $22;
 $24 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $15 = 8;
 $1 = $22;
 while (1) {
  label$2 : {
   label$3 : {
    $5 = HEAPU16[$2 + 32 >> 1];
    $9 = HEAPU16[$2 + 16 >> 1];
    if ($5 | $9) {
     break label$3;
    }
    $5 = 0;
    if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
     break label$3;
    }
    if (HEAPU16[$2 + 112 >> 1]) {
     break label$3;
    }
    $7 = Math_fround(HEAPF32[$0 >> 2] * Math_fround(HEAP16[$2 >> 1]));
    HEAPF32[$1 + 192 >> 2] = $7;
    HEAPF32[$1 + 160 >> 2] = $7;
    HEAPF32[$1 + 128 >> 2] = $7;
    HEAPF32[$1 + 96 >> 2] = $7;
    HEAPF32[$1 + 64 >> 2] = $7;
    HEAPF32[$1 + 32 >> 2] = $7;
    HEAPF32[$1 >> 2] = $7;
    $5 = 56;
    break label$2;
   }
   $8 = Math_fround(HEAPF32[$0 >> 2] * Math_fround(HEAP16[$2 >> 1]));
   $10 = Math_fround(HEAPF32[$0 + 128 >> 2] * Math_fround(HEAP16[$2 + 64 >> 1]));
   $16 = Math_fround($8 + $10);
   $11 = Math_fround(HEAPF32[$0 + 64 >> 2] * Math_fround($5 << 16 >> 16));
   $12 = Math_fround(HEAPF32[$0 + 192 >> 2] * Math_fround(HEAP16[$2 + 96 >> 1]));
   $7 = Math_fround($11 + $12);
   $13 = Math_fround($16 + $7);
   $14 = Math_fround(HEAPF32[$0 + 96 >> 2] * Math_fround(HEAP16[$2 + 48 >> 1]));
   $17 = Math_fround(HEAPF32[$0 + 160 >> 2] * Math_fround(HEAP16[$2 + 80 >> 1]));
   $18 = Math_fround($14 + $17);
   $19 = Math_fround(HEAPF32[$0 + 32 >> 2] * Math_fround($9 << 16 >> 16));
   $20 = Math_fround(HEAPF32[$0 + 224 >> 2] * Math_fround(HEAP16[$2 + 112 >> 1]));
   $21 = Math_fround($19 + $20);
   $6 = Math_fround($18 + $21);
   HEAPF32[$1 + 224 >> 2] = $13 - $6;
   HEAPF32[$1 >> 2] = $13 + $6;
   $8 = Math_fround($8 - $10);
   $10 = Math_fround(Math_fround(Math_fround($11 - $12) * Math_fround(1.4142135381698608)) - $7);
   $11 = Math_fround($8 + $10);
   $12 = Math_fround($17 - $14);
   $13 = Math_fround($19 - $20);
   $14 = Math_fround(Math_fround($12 + $13) * Math_fround(1.8477590084075928));
   $6 = Math_fround(Math_fround($14 + Math_fround($12 * Math_fround(-2.613126039505005))) - $6);
   HEAPF32[$1 + 192 >> 2] = $11 - $6;
   HEAPF32[$1 + 32 >> 2] = $11 + $6;
   $8 = Math_fround($8 - $10);
   $6 = Math_fround(Math_fround(Math_fround($21 - $18) * Math_fround(1.4142135381698608)) - $6);
   HEAPF32[$1 + 160 >> 2] = $8 - $6;
   HEAPF32[$1 + 64 >> 2] = $8 + $6;
   $7 = Math_fround($16 - $7);
   $6 = Math_fround(Math_fround($14 + Math_fround($13 * Math_fround(-1.0823922157287598))) - $6);
   HEAPF32[$1 + 96 >> 2] = $7 + $6;
   $7 = Math_fround($7 - $6);
   $5 = 32;
  }
  HEAPF32[($5 << 2) + $1 >> 2] = $7;
  $2 = $2 + 2 | 0;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $5 = $15 >>> 0 > 1;
  $15 = $15 - 1 | 0;
  if ($5) {
   continue;
  }
  break;
 }
 $1 = $24 - 384 | 0;
 $15 = 0;
 $2 = $22;
 while (1) {
  $0 = HEAP32[($15 << 2) + $3 >> 2] + $4 | 0;
  $9 = $0;
  $8 = Math_fround(HEAPF32[$2 >> 2] + Math_fround(512.5));
  $10 = HEAPF32[$2 + 16 >> 2];
  $16 = Math_fround($8 + $10);
  $11 = HEAPF32[$2 + 8 >> 2];
  $12 = HEAPF32[$2 + 24 >> 2];
  $7 = Math_fround($11 + $12);
  $13 = Math_fround($16 + $7);
  $14 = HEAPF32[$2 + 20 >> 2];
  $17 = HEAPF32[$2 + 12 >> 2];
  $18 = Math_fround($14 + $17);
  $19 = HEAPF32[$2 + 4 >> 2];
  $20 = HEAPF32[$2 + 28 >> 2];
  $21 = Math_fround($19 + $20);
  $6 = Math_fround($18 + $21);
  $23 = Math_fround($13 + $6);
  label$5 : {
   if (Math_fround(Math_abs($23)) < Math_fround(2147483648)) {
    $5 = ~~$23;
    break label$5;
   }
   $5 = -2147483648;
  }
  HEAP8[$9 | 0] = HEAPU8[($5 & 1023) + $1 | 0];
  $9 = $0;
  $13 = Math_fround($13 - $6);
  label$7 : {
   if (Math_fround(Math_abs($13)) < Math_fround(2147483648)) {
    $5 = ~~$13;
    break label$7;
   }
   $5 = -2147483648;
  }
  HEAP8[$9 + 7 | 0] = HEAPU8[($5 & 1023) + $1 | 0];
  $9 = $0;
  $8 = Math_fround($8 - $10);
  $10 = Math_fround(Math_fround(Math_fround($11 - $12) * Math_fround(1.4142135381698608)) - $7);
  $11 = Math_fround($8 + $10);
  $12 = Math_fround($14 - $17);
  $13 = Math_fround($19 - $20);
  $14 = Math_fround(Math_fround($12 + $13) * Math_fround(1.8477590084075928));
  $6 = Math_fround(Math_fround($14 + Math_fround($12 * Math_fround(-2.613126039505005))) - $6);
  $12 = Math_fround($11 + $6);
  label$9 : {
   if (Math_fround(Math_abs($12)) < Math_fround(2147483648)) {
    $5 = ~~$12;
    break label$9;
   }
   $5 = -2147483648;
  }
  HEAP8[$9 + 1 | 0] = HEAPU8[($5 & 1023) + $1 | 0];
  $9 = $0;
  $11 = Math_fround($11 - $6);
  label$11 : {
   if (Math_fround(Math_abs($11)) < Math_fround(2147483648)) {
    $5 = ~~$11;
    break label$11;
   }
   $5 = -2147483648;
  }
  HEAP8[$9 + 6 | 0] = HEAPU8[($5 & 1023) + $1 | 0];
  $9 = $0;
  $8 = Math_fround($8 - $10);
  $6 = Math_fround(Math_fround(Math_fround($21 - $18) * Math_fround(1.4142135381698608)) - $6);
  $10 = Math_fround($8 + $6);
  label$13 : {
   if (Math_fround(Math_abs($10)) < Math_fround(2147483648)) {
    $5 = ~~$10;
    break label$13;
   }
   $5 = -2147483648;
  }
  HEAP8[$9 + 2 | 0] = HEAPU8[($5 & 1023) + $1 | 0];
  $9 = $0;
  $8 = Math_fround($8 - $6);
  label$15 : {
   if (Math_fround(Math_abs($8)) < Math_fround(2147483648)) {
    $5 = ~~$8;
    break label$15;
   }
   $5 = -2147483648;
  }
  HEAP8[$9 + 5 | 0] = HEAPU8[($5 & 1023) + $1 | 0];
  $9 = $0;
  $7 = Math_fround($16 - $7);
  $6 = Math_fround(Math_fround($14 + Math_fround($13 * Math_fround(-1.0823922157287598))) - $6);
  $8 = Math_fround($7 + $6);
  label$17 : {
   if (Math_fround(Math_abs($8)) < Math_fround(2147483648)) {
    $5 = ~~$8;
    break label$17;
   }
   $5 = -2147483648;
  }
  HEAP8[$9 + 3 | 0] = HEAPU8[($5 & 1023) + $1 | 0];
  $7 = Math_fround($7 - $6);
  label$19 : {
   if (Math_fround(Math_abs($7)) < Math_fround(2147483648)) {
    $5 = ~~$7;
    break label$19;
   }
   $5 = -2147483648;
  }
  HEAP8[$0 + 4 | 0] = HEAPU8[($5 & 1023) + $1 | 0];
  $2 = $2 + 32 | 0;
  $15 = $15 + 1 | 0;
  if (($15 | 0) != 8) {
   continue;
  }
  break;
 }
 __stack_pointer = $22 + 256 | 0;
}
function jpeg_idct_16x16($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 $29 = __stack_pointer - 512 | 0;
 __stack_pointer = $29;
 $30 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $29;
 while (1) {
  $8 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $10 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $15 = Math_imul($8 + $10 | 0, 11086);
  $14 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $12 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $9 = $14 - $12 | 0;
  $21 = Math_imul($9, 11363);
  $13 = $21 + Math_imul($12, 20995) | 0;
  $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $7 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $22 = Math_imul($7, 10703);
  $23 = $5 + $22 | 0;
  $16 = $13 + $23 | 0;
  $6 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $26 = Math_imul($10 + $6 | 0, 8956);
  $11 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $17 = $11 + $10 | 0;
  $19 = Math_imul($17, 10217);
  $18 = $26 + ($19 + (Math_imul($10, -18730) + $15 | 0) | 0) | 0;
  HEAP32[$1 + 480 >> 2] = $16 - $18 >> 11;
  HEAP32[$1 >> 2] = $16 + $18 >> 11;
  $9 = Math_imul($9, 2260);
  $16 = $9 + Math_imul($14, 7373) | 0;
  $7 = Math_imul($7, 4433);
  $18 = $7 + $5 | 0;
  $24 = $16 + $18 | 0;
  $27 = $6 + $8 | 0;
  $28 = Math_imul($27, -5461);
  $25 = Math_imul($8, 589) + $15 | 0;
  $15 = Math_imul($8 + $11 | 0, 1136);
  $25 = $28 + ($25 + $15 | 0) | 0;
  HEAP32[$1 + 448 >> 2] = $24 - $25 >> 11;
  HEAP32[$1 + 32 >> 2] = $24 + $25 >> 11;
  $14 = Math_imul($14, -4926) + $21 | 0;
  $21 = $5 - $7 | 0;
  $7 = $14 + $21 | 0;
  $19 = (Math_imul($11, -9222) + $15 | 0) + $19 | 0;
  $15 = Math_imul($6 + $11 | 0, -11086);
  $19 = $19 + $15 | 0;
  HEAP32[$1 + 416 >> 2] = $7 - $19 >> 11;
  HEAP32[$1 + 64 >> 2] = $7 + $19 >> 11;
  $5 = $5 - $22 | 0;
  $12 = Math_imul($12, -4176) + $9 | 0;
  $9 = $5 + $12 | 0;
  $7 = ((Math_imul($6, 8728) + $28 | 0) + $26 | 0) + $15 | 0;
  HEAP32[$1 + 384 >> 2] = $9 - $7 >> 11;
  HEAP32[$1 + 96 >> 2] = $9 + $7 >> 11;
  $5 = $5 - $12 | 0;
  $9 = Math_imul($10 - $6 | 0, 7350);
  $12 = Math_imul($27, -10217);
  $7 = $9 + ($12 + Math_imul($6, 25733) | 0) | 0;
  $6 = Math_imul($6 - $11 | 0, 3363);
  $7 = $7 + $6 | 0;
  HEAP32[$1 + 352 >> 2] = $5 - $7 >> 11;
  HEAP32[$1 + 128 >> 2] = $5 + $7 >> 11;
  $5 = $21 - $14 | 0;
  $14 = Math_imul($11 - $8 | 0, 11529);
  $7 = $14 + Math_imul($11, -6278) | 0;
  $11 = Math_imul($17, 5461);
  $6 = ($7 + $11 | 0) + $6 | 0;
  HEAP32[$1 + 320 >> 2] = $5 - $6 >> 11;
  HEAP32[$1 + 160 >> 2] = $5 + $6 >> 11;
  $6 = $18 - $16 | 0;
  $5 = Math_imul($10 - $8 | 0, 3363);
  $8 = (($5 + Math_imul($8, 16154) | 0) + $14 | 0) + $12 | 0;
  HEAP32[$1 + 288 >> 2] = $6 - $8 >> 11;
  HEAP32[$1 + 192 >> 2] = $6 + $8 >> 11;
  $8 = $23 - $13 | 0;
  $10 = ((Math_imul($10, -15038) + $5 | 0) + $11 | 0) + $9 | 0;
  HEAP32[$1 + 256 >> 2] = $8 - $10 >> 11;
  HEAP32[$1 + 224 >> 2] = $8 + $10 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $20 = $20 + 1 | 0;
  if (($20 | 0) != 8) {
   continue;
  }
  break;
 }
 $1 = $30 - 384 | 0;
 $14 = 0;
 $0 = $29;
 while (1) {
  $8 = HEAP32[$0 + 12 >> 2];
  $10 = HEAP32[$0 + 4 >> 2];
  $9 = Math_imul($8 + $10 | 0, 11086);
  $2 = HEAP32[($14 << 2) + $3 >> 2] + $4 | 0;
  $12 = HEAP32[$0 + 8 >> 2];
  $20 = HEAP32[$0 + 24 >> 2];
  $23 = $12 - $20 | 0;
  $16 = Math_imul($23, 11363);
  $15 = $16 + Math_imul($20, 20995) | 0;
  $5 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $17 = HEAP32[$0 + 16 >> 2];
  $19 = Math_imul($17, 10703);
  $26 = $5 + $19 | 0;
  $18 = $15 + $26 | 0;
  $6 = HEAP32[$0 + 28 >> 2];
  $7 = Math_imul($10 + $6 | 0, 8956);
  $11 = HEAP32[$0 + 20 >> 2];
  $21 = $11 + $10 | 0;
  $13 = Math_imul($21, 10217);
  $22 = $7 + ($13 + (Math_imul($10, -18730) + $9 | 0) | 0) | 0;
  HEAP8[$2 | 0] = HEAPU8[($18 + $22 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 15 | 0] = HEAPU8[($18 - $22 >>> 18 & 1023) + $1 | 0];
  $22 = $6 + $8 | 0;
  $18 = Math_imul($22, -5461);
  $24 = Math_imul($8, 589) + $9 | 0;
  $9 = Math_imul($8 + $11 | 0, 1136);
  $24 = $18 + ($24 + $9 | 0) | 0;
  $23 = Math_imul($23, 2260);
  $27 = $23 + Math_imul($12, 7373) | 0;
  $17 = Math_imul($17, 4433);
  $28 = $17 + $5 | 0;
  $25 = $27 + $28 | 0;
  HEAP8[$2 + 1 | 0] = HEAPU8[($24 + $25 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 14 | 0] = HEAPU8[($25 - $24 >>> 18 & 1023) + $1 | 0];
  $13 = (Math_imul($11, -9222) + $9 | 0) + $13 | 0;
  $9 = Math_imul($6 + $11 | 0, -11086);
  $13 = $13 + $9 | 0;
  $12 = Math_imul($12, -4926) + $16 | 0;
  $16 = $5 - $17 | 0;
  $17 = $12 + $16 | 0;
  HEAP8[$2 + 2 | 0] = HEAPU8[($13 + $17 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 13 | 0] = HEAPU8[($17 - $13 >>> 18 & 1023) + $1 | 0];
  $9 = ((Math_imul($6, 8728) + $18 | 0) + $7 | 0) + $9 | 0;
  $5 = $5 - $19 | 0;
  $20 = Math_imul($20, -4176) + $23 | 0;
  $13 = $5 + $20 | 0;
  HEAP8[$2 + 3 | 0] = HEAPU8[($9 + $13 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 12 | 0] = HEAPU8[($13 - $9 >>> 18 & 1023) + $1 | 0];
  $13 = Math_imul($10 - $6 | 0, 7350);
  $9 = Math_imul($22, -10217);
  $5 = $5 - $20 | 0;
  $7 = $13 + ($9 + Math_imul($6, 25733) | 0) | 0;
  $6 = Math_imul($6 - $11 | 0, 3363);
  $7 = $7 + $6 | 0;
  HEAP8[$2 + 4 | 0] = HEAPU8[($5 + $7 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 11 | 0] = HEAPU8[($5 - $7 >>> 18 & 1023) + $1 | 0];
  $5 = Math_imul($11 - $8 | 0, 11529);
  $7 = $5 + Math_imul($11, -6278) | 0;
  $11 = Math_imul($21, 5461);
  $6 = ($7 + $11 | 0) + $6 | 0;
  $12 = $16 - $12 | 0;
  HEAP8[$2 + 5 | 0] = HEAPU8[($6 + $12 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 10 | 0] = HEAPU8[($12 - $6 >>> 18 & 1023) + $1 | 0];
  $6 = Math_imul($10 - $8 | 0, 3363);
  $8 = (($6 + Math_imul($8, 16154) | 0) + $5 | 0) + $9 | 0;
  $5 = $28 - $27 | 0;
  HEAP8[$2 + 6 | 0] = HEAPU8[($8 + $5 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 9 | 0] = HEAPU8[($5 - $8 >>> 18 & 1023) + $1 | 0];
  $8 = ((Math_imul($10, -15038) + $6 | 0) + $11 | 0) + $13 | 0;
  $10 = $26 - $15 | 0;
  HEAP8[$2 + 7 | 0] = HEAPU8[($8 + $10 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[($10 - $8 >>> 18 & 1023) + $1 | 0];
  $0 = $0 + 32 | 0;
  $14 = $14 + 1 | 0;
  if (($14 | 0) != 16) {
   continue;
  }
  break;
 }
 __stack_pointer = $29 + 512 | 0;
}
function __floatscan($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 label$1 : {
  if ($2 >>> 0 <= 2) {
   $5 = $1;
   $2 = $2 << 2;
   $11 = HEAP32[$2 + 20460 >> 2];
   $12 = HEAP32[$2 + 20448 >> 2];
   while (1) {
    $2 = HEAP32[$1 + 4 >> 2];
    label$4 : {
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      HEAP32[$5 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$4;
     }
     $2 = __shgetc($1);
    }
    if (isspace($2)) {
     continue;
    }
    break;
   }
   $6 = 1;
   label$6 : {
    label$7 : {
     switch ($2 - 43 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$6;
     }
    }
    $6 = ($2 | 0) == 45 ? -1 : 1;
    $2 = HEAP32[$1 + 4 >> 2];
    if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$5 + 4 >> 2] = $2 + 1;
     $2 = HEAPU8[$2 | 0];
     break label$6;
    }
    $2 = __shgetc($1);
   }
   label$9 : {
    label$10 : {
     while (1) {
      if (HEAP8[$4 + 20373 | 0] == ($2 | 32)) {
       label$13 : {
        if ($4 >>> 0 > 6) {
         break label$13;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$5 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$13;
        }
        $2 = __shgetc($1);
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != 8) {
        continue;
       }
       break label$10;
      }
      break;
     }
     if (($4 | 0) != 3) {
      if (($4 | 0) == 8) {
       break label$10;
      }
      if (!$3 | $4 >>> 0 < 4) {
       break label$9;
      }
      if (($4 | 0) == 8) {
       break label$10;
      }
     }
     $1 = HEAP32[$1 + 104 >> 2];
     if ($1) {
      HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 1;
     }
     if (!$3 | $4 >>> 0 < 4) {
      break label$10;
     }
     while (1) {
      if ($1) {
       HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 1;
      }
      $4 = $4 - 1 | 0;
      if ($4 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    __extendsftf2($7, Math_fround(Math_fround($6 | 0) * Math_fround(infinity)));
    $2 = $7;
    $8 = HEAP32[$2 + 8 >> 2];
    $1 = HEAP32[$2 + 12 >> 2];
    $6 = $1;
    $1 = HEAP32[$2 >> 2];
    $9 = $1;
    $10 = HEAP32[$2 + 4 >> 2];
    break label$1;
   }
   label$19 : {
    label$20 : {
     label$21 : {
      if ($4) {
       break label$21;
      }
      $4 = 0;
      while (1) {
       if (HEAP8[$4 + 20382 | 0] != ($2 | 32)) {
        break label$21;
       }
       label$23 : {
        if ($4 >>> 0 > 1) {
         break label$23;
        }
        $2 = HEAP32[$1 + 4 >> 2];
        if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$5 + 4 >> 2] = $2 + 1;
         $2 = HEAPU8[$2 | 0];
         break label$23;
        }
        $2 = __shgetc($1);
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) != 3) {
        continue;
       }
       break;
      }
      break label$20;
     }
     label$25 : {
      switch ($4 | 0) {
      case 0:
       label$27 : {
        if (($2 | 0) != 48) {
         break label$27;
        }
        $4 = HEAP32[$1 + 4 >> 2];
        label$28 : {
         if ($4 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
          HEAP32[$5 + 4 >> 2] = $4 + 1;
          $4 = HEAPU8[$4 | 0];
          break label$28;
         }
         $4 = __shgetc($1);
        }
        if (($4 & -33) == 88) {
         hexfloat($7 + 16 | 0, $1, $12, $11, $6, $3);
         $2 = $7;
         $8 = HEAP32[$2 + 24 >> 2];
         $1 = HEAP32[$2 + 28 >> 2];
         $6 = $1;
         $1 = HEAP32[$2 + 16 >> 2];
         $9 = $1;
         $10 = HEAP32[$2 + 20 >> 2];
         break label$1;
        }
        if (!HEAP32[$1 + 104 >> 2]) {
         break label$27;
        }
        HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 1;
       }
       decfloat($7 + 32 | 0, $1, $2, $12, $11, $6, $3);
       $2 = $7;
       $8 = HEAP32[$2 + 40 >> 2];
       $1 = HEAP32[$2 + 44 >> 2];
       $6 = $1;
       $1 = HEAP32[$2 + 32 >> 2];
       $9 = $1;
       $10 = HEAP32[$2 + 36 >> 2];
       break label$1;
      case 3:
       break label$20;
      default:
       break label$25;
      }
     }
     if (HEAP32[$1 + 104 >> 2]) {
      HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 1;
     }
     break label$19;
    }
    label$32 : {
     $2 = HEAP32[$1 + 4 >> 2];
     label$33 : {
      if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       HEAP32[$5 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$33;
      }
      $2 = __shgetc($1);
     }
     if (($2 | 0) == 40) {
      $4 = 1;
      break label$32;
     }
     $6 = 2147450880;
     if (!HEAP32[$1 + 104 >> 2]) {
      break label$1;
     }
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 1;
     break label$1;
    }
    while (1) {
     label$37 : {
      $2 = HEAP32[$1 + 4 >> 2];
      label$39 : {
       if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
        HEAP32[$5 + 4 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break label$39;
       }
       $2 = __shgetc($1);
      }
      $6 = $2 - 65 | 0;
      label$38 : {
       if ($2 - 48 >>> 0 < 10 | $6 >>> 0 < 26) {
        break label$38;
       }
       $6 = $2 - 97 | 0;
       if (($2 | 0) == 95) {
        break label$38;
       }
       if ($6 >>> 0 >= 26) {
        break label$37;
       }
      }
      $4 = $4 + 1 | 0;
      continue;
     }
     break;
    }
    $6 = 2147450880;
    if (($2 | 0) == 41) {
     break label$1;
    }
    $2 = HEAP32[$1 + 104 >> 2];
    if ($2) {
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 1;
    }
    if ($3) {
     if (!$4) {
      break label$1;
     }
     while (1) {
      $4 = $4 - 1 | 0;
      if ($2) {
       HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 1;
      }
      if ($4) {
       continue;
      }
      break;
     }
     break label$1;
    }
   }
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __shlim($1, 0, 0);
  }
  $6 = 0;
 }
 $1 = $0;
 HEAP32[$1 >> 2] = $9;
 HEAP32[$1 + 4 >> 2] = $10;
 HEAP32[$1 + 8 >> 2] = $8;
 HEAP32[$1 + 12 >> 2] = $6;
 __stack_pointer = $7 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 $4 = HEAP32[$1 >> 2];
 label$1 : {
  if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($4) | 0) != 41) {
   break label$1;
  }
  $4 = HEAP32[$4 + 8 >> 2];
  HEAP32[$3 + 28 >> 2] = $4;
  if ($4 - 2 >>> 0 > 3) {
   break label$1;
  }
  wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__29($0, $3 + 28 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 label$2 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 67)) {
   $4 = 0;
   $5 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 73);
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 49 & 255) >>> 0 > 4) {
    break label$2;
   }
   wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 48 | 0, HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   if ($2) {
    HEAP8[$2 | 0] = 1;
   }
   label$5 : {
    if (!$5) {
     break label$5;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), $2)) {
     break label$5;
    }
    break label$2;
   }
   HEAP8[$3 + 23 | 0] = 0;
   $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $3 + 23 | 0, $3 + 24 | 0);
   break label$2;
  }
  $4 = 0;
  if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 68) {
   break label$2;
  }
  $5 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) & 255) - 48 | 0;
  if ($5 >>> 0 > 5 | ($5 | 0) == 3) {
   break label$2;
  }
  wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 1) - 48 | 0, HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
  if ($2) {
   HEAP8[$2 | 0] = 1;
  }
  HEAP8[$3 + 15 | 0] = 1;
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $3 + 15 | 0, $3 + 16 | 0);
 }
 __stack_pointer = $3 + 32 | 0;
 return $4;
}
function update_box($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $3 = HEAP32[$1 + 20 >> 2];
 $6 = HEAP32[$1 + 16 >> 2];
 $5 = HEAP32[$1 + 12 >> 2];
 $8 = HEAP32[$1 + 8 >> 2];
 $13 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
 $7 = HEAP32[$1 >> 2];
 $12 = HEAP32[$1 + 4 >> 2];
 label$1 : {
  if (($7 | 0) < ($12 | 0)) {
   $10 = $7;
   while (1) {
    if (($5 | 0) >= ($8 | 0)) {
     $9 = HEAP32[($10 << 2) + $13 >> 2];
     $2 = $8;
     while (1) {
      if (($3 | 0) >= ($6 | 0)) {
       $0 = (($2 << 6) + $9 | 0) + ($6 << 1) | 0;
       $4 = $6;
       while (1) {
        if (HEAPU16[$0 >> 1]) {
         HEAP32[$1 >> 2] = $10;
         break label$1;
        }
        $0 = $0 + 2 | 0;
        $11 = ($3 | 0) != ($4 | 0);
        $4 = $4 + 1 | 0;
        if ($11) {
         continue;
        }
        break;
       }
      }
      $0 = ($2 | 0) != ($5 | 0);
      $2 = $2 + 1 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    $0 = ($10 | 0) != ($12 | 0);
    $10 = $10 + 1 | 0;
    if ($0) {
     continue;
    }
    break;
   }
  }
  $10 = $7;
 }
 label$9 : {
  if (($10 | 0) < ($12 | 0)) {
   $9 = $12;
   while (1) {
    if (($5 | 0) >= ($8 | 0)) {
     $7 = HEAP32[($9 << 2) + $13 >> 2];
     $2 = $8;
     while (1) {
      if (($3 | 0) >= ($6 | 0)) {
       $0 = (($2 << 6) + $7 | 0) + ($6 << 1) | 0;
       $4 = $6;
       while (1) {
        if (HEAPU16[$0 >> 1]) {
         HEAP32[$1 + 4 >> 2] = $9;
         break label$9;
        }
        $0 = $0 + 2 | 0;
        $11 = ($3 | 0) != ($4 | 0);
        $4 = $4 + 1 | 0;
        if ($11) {
         continue;
        }
        break;
       }
      }
      $0 = ($2 | 0) != ($5 | 0);
      $2 = $2 + 1 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    $0 = ($9 | 0) > ($10 | 0);
    $9 = $9 - 1 | 0;
    if ($0) {
     continue;
    }
    break;
   }
  }
  $9 = $12;
 }
 label$17 : {
  if (($5 | 0) > ($8 | 0)) {
   $7 = $8;
   while (1) {
    $2 = $10;
    if (($9 | 0) >= ($2 | 0)) {
     while (1) {
      if (($3 | 0) >= ($6 | 0)) {
       $0 = (HEAP32[($2 << 2) + $13 >> 2] + ($7 << 6) | 0) + ($6 << 1) | 0;
       $4 = $6;
       while (1) {
        if (HEAPU16[$0 >> 1]) {
         HEAP32[$1 + 8 >> 2] = $7;
         break label$17;
        }
        $0 = $0 + 2 | 0;
        $11 = ($3 | 0) != ($4 | 0);
        $4 = $4 + 1 | 0;
        if ($11) {
         continue;
        }
        break;
       }
      }
      $0 = ($2 | 0) != ($9 | 0);
      $2 = $2 + 1 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    $0 = ($5 | 0) != ($7 | 0);
    $7 = $7 + 1 | 0;
    if ($0) {
     continue;
    }
    break;
   }
  }
  $7 = $8;
 }
 label$25 : {
  if (($5 | 0) > ($7 | 0)) {
   $8 = $5;
   while (1) {
    $2 = $10;
    if (($9 | 0) >= ($2 | 0)) {
     while (1) {
      if (($3 | 0) >= ($6 | 0)) {
       $0 = (HEAP32[($2 << 2) + $13 >> 2] + ($8 << 6) | 0) + ($6 << 1) | 0;
       $4 = $6;
       while (1) {
        if (HEAPU16[$0 >> 1]) {
         HEAP32[$1 + 12 >> 2] = $8;
         break label$25;
        }
        $0 = $0 + 2 | 0;
        $11 = ($3 | 0) != ($4 | 0);
        $4 = $4 + 1 | 0;
        if ($11) {
         continue;
        }
        break;
       }
      }
      $0 = ($2 | 0) != ($9 | 0);
      $2 = $2 + 1 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    $0 = ($7 | 0) < ($8 | 0);
    $8 = $8 - 1 | 0;
    if ($0) {
     continue;
    }
    break;
   }
  }
  $8 = $5;
 }
 label$33 : {
  if (($3 | 0) > ($6 | 0)) {
   $12 = $7 << 6;
   $2 = $6;
   while (1) {
    $5 = $10;
    if (($9 | 0) >= ($5 | 0)) {
     while (1) {
      if (($7 | 0) <= ($8 | 0)) {
       $0 = (HEAP32[($5 << 2) + $13 >> 2] + $12 | 0) + ($2 << 1) | 0;
       $4 = $7;
       while (1) {
        if (HEAPU16[$0 >> 1]) {
         HEAP32[$1 + 16 >> 2] = $2;
         break label$33;
        }
        $0 = $0 - -64 | 0;
        $11 = ($4 | 0) != ($8 | 0);
        $4 = $4 + 1 | 0;
        if ($11) {
         continue;
        }
        break;
       }
      }
      $0 = ($5 | 0) != ($9 | 0);
      $5 = $5 + 1 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    $0 = ($2 | 0) != ($3 | 0);
    $2 = $2 + 1 | 0;
    if ($0) {
     continue;
    }
    break;
   }
  }
  $2 = $6;
 }
 label$41 : {
  if (($2 | 0) < ($3 | 0)) {
   $12 = $7 << 6;
   $6 = $3;
   while (1) {
    $5 = $10;
    if (($9 | 0) >= ($5 | 0)) {
     while (1) {
      if (($7 | 0) <= ($8 | 0)) {
       $0 = (HEAP32[($5 << 2) + $13 >> 2] + $12 | 0) + ($6 << 1) | 0;
       $4 = $7;
       while (1) {
        if (HEAPU16[$0 >> 1]) {
         HEAP32[$1 + 20 >> 2] = $6;
         break label$41;
        }
        $0 = $0 - -64 | 0;
        $11 = ($4 | 0) != ($8 | 0);
        $4 = $4 + 1 | 0;
        if ($11) {
         continue;
        }
        break;
       }
      }
      $0 = ($5 | 0) != ($9 | 0);
      $5 = $5 + 1 | 0;
      if ($0) {
       continue;
      }
      break;
     }
    }
    $0 = ($2 | 0) < ($6 | 0);
    $6 = $6 - 1 | 0;
    if ($0) {
     continue;
    }
    break;
   }
  }
  $6 = $3;
 }
 $3 = Math_imul($8 - $7 | 0, 12);
 $0 = Math_imul($3, $3);
 $3 = $9 - $10 << 4;
 $0 = $0 + Math_imul($3, $3) | 0;
 $3 = $6 - $2 << 3;
 HEAP32[$1 + 24 >> 2] = $0 + Math_imul($3, $3);
 $4 = 0;
 if (($9 | 0) >= ($10 | 0)) {
  while (1) {
   if (($7 | 0) <= ($8 | 0)) {
    $12 = HEAP32[($10 << 2) + $13 >> 2];
    $5 = $7;
    while (1) {
     if (($2 | 0) <= ($6 | 0)) {
      $3 = (($5 << 6) + $12 | 0) + ($2 << 1) | 0;
      $0 = $2;
      while (1) {
       $4 = (HEAPU16[$3 >> 1] != 0) + $4 | 0;
       $11 = ($0 | 0) != ($6 | 0);
       $3 = $3 + 2 | 0;
       $0 = $0 + 1 | 0;
       if ($11) {
        continue;
       }
       break;
      }
     }
     $3 = ($5 | 0) != ($8 | 0);
     $5 = $5 + 1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   $3 = ($9 | 0) != ($10 | 0);
   $10 = $10 + 1 | 0;
   if ($3) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 28 >> 2] = $4;
}
function get_sof($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = HEAP32[$0 + 24 >> 2];
 $4 = HEAP32[$6 + 4 >> 2];
 $5 = HEAP32[$6 >> 2];
 HEAP32[$0 + 228 >> 2] = $3;
 HEAP32[$0 + 224 >> 2] = $2;
 HEAP32[$0 + 220 >> 2] = $1;
 label$1 : {
  if (!$4) {
   if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
    break label$1;
   }
   $5 = HEAP32[$6 >> 2];
   $4 = HEAP32[$6 + 4 >> 2];
  }
  $2 = HEAPU8[$5 | 0];
  $1 = $4 - 1 | 0;
  $4 = $5 + 1 | 0;
  label$3 : {
   if ($1) {
    break label$3;
   }
   if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
    break label$1;
   }
   $1 = HEAP32[$6 + 4 >> 2];
   $4 = HEAP32[$6 >> 2];
  }
  $3 = HEAPU8[$4 | 0];
  $7 = $0;
  $5 = $1 - 1 | 0;
  $4 = $4 + 1 | 0;
  label$4 : {
   if ($5) {
    break label$4;
   }
   if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
    break label$1;
   }
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = HEAP32[$6 >> 2];
  }
  HEAP32[$7 + 212 >> 2] = HEAPU8[$4 | 0];
  $7 = $0;
  $5 = $5 - 1 | 0;
  $4 = $4 + 1 | 0;
  label$5 : {
   if ($5) {
    break label$5;
   }
   if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
    break label$1;
   }
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = HEAP32[$6 >> 2];
  }
  $1 = HEAPU8[$4 | 0] << 8;
  HEAP32[$7 + 32 >> 2] = $1;
  $7 = $0;
  $5 = $5 - 1 | 0;
  $4 = $4 + 1 | 0;
  label$6 : {
   if ($5) {
    break label$6;
   }
   if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
    break label$1;
   }
   $1 = HEAP32[$0 + 32 >> 2];
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = HEAP32[$6 >> 2];
  }
  HEAP32[$7 + 32 >> 2] = HEAPU8[$4 | 0] + $1;
  $7 = $0;
  $5 = $5 - 1 | 0;
  $4 = $4 + 1 | 0;
  label$7 : {
   if ($5) {
    break label$7;
   }
   if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
    break label$1;
   }
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = HEAP32[$6 >> 2];
  }
  $1 = HEAPU8[$4 | 0] << 8;
  HEAP32[$7 + 28 >> 2] = $1;
  $7 = $0;
  $5 = $5 - 1 | 0;
  $4 = $4 + 1 | 0;
  label$8 : {
   if ($5) {
    break label$8;
   }
   if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
    break label$1;
   }
   $1 = HEAP32[$0 + 28 >> 2];
   $5 = HEAP32[$6 + 4 >> 2];
   $4 = HEAP32[$6 >> 2];
  }
  HEAP32[$7 + 28 >> 2] = HEAPU8[$4 | 0] + $1;
  $1 = $5 - 1 | 0;
  $5 = $4 + 1 | 0;
  label$9 : {
   if ($1) {
    break label$9;
   }
   if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
    break label$1;
   }
   $1 = HEAP32[$6 + 4 >> 2];
   $5 = HEAP32[$6 >> 2];
  }
  $2 = $2 << 8 | $3;
  HEAP32[$0 + 36 >> 2] = HEAPU8[$5 | 0];
  $4 = HEAP32[$0 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$0 + 440 >> 2];
  HEAP32[$4 + 28 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$4 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
  $3 = HEAP32[$0 + 36 >> 2];
  HEAP32[$4 + 20 >> 2] = 102;
  HEAP32[$4 + 36 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[$4 + 4 >> 2]]($0, 1);
  if (HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2]) {
   $4 = HEAP32[$0 >> 2];
   HEAP32[$4 + 20 >> 2] = 61;
   FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
  }
  $2 = $2 - 8 | 0;
  label$11 : {
   if (!(!HEAP32[$0 + 32 >> 2] | !HEAP32[$0 + 28 >> 2])) {
    $4 = HEAP32[$0 + 36 >> 2];
    if (($4 | 0) > 0) {
     break label$11;
    }
   }
   $4 = HEAP32[$0 >> 2];
   HEAP32[$4 + 20 >> 2] = 33;
   FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
   $4 = HEAP32[$0 + 36 >> 2];
  }
  if ((Math_imul($4, 3) | 0) != ($2 | 0)) {
   $4 = HEAP32[$0 >> 2];
   HEAP32[$4 + 20 >> 2] = 12;
   FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
  }
  if (!HEAP32[$0 + 216 >> 2]) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, Math_imul(HEAP32[$0 + 36 >> 2], 88)) | 0, HEAP32[wasm2js_i32$0 + 216 >> 2] = wasm2js_i32$1;
  }
  $8 = $5 + 1 | 0;
  $4 = $1 - 1 | 0;
  if (HEAP32[$0 + 36 >> 2] >= 1) {
   $1 = 0;
   while (1) {
    if (!$4) {
     if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
      break label$1;
     }
     $8 = HEAP32[$6 >> 2];
     $4 = HEAP32[$6 + 4 >> 2];
    }
    $9 = $4 - 1 | 0;
    $3 = HEAP32[$0 + 216 >> 2];
    $2 = HEAPU8[$8 | 0];
    label$18 : {
     if (!$1) {
      $4 = $3;
      break label$18;
     }
     $7 = Math_imul($1, 88) + $3 | 0;
     $5 = 0;
     $4 = $3;
     while (1) {
      if (HEAP32[$4 >> 2] == ($2 | 0)) {
       $4 = $3 + 88 | 0;
       $5 = HEAP32[$3 >> 2];
       $2 = 1;
       if ($1 >>> 0 >= 2) {
        while (1) {
         $3 = HEAP32[$4 >> 2];
         $5 = ($3 | 0) > ($5 | 0) ? $3 : $5;
         $4 = $4 + 88 | 0;
         $2 = $2 + 1 | 0;
         if (($2 | 0) != ($1 | 0)) {
          continue;
         }
         break;
        }
        $4 = $7;
       }
       $2 = $5 + 1 | 0;
       break label$18;
      }
      $4 = $4 + 88 | 0;
      $5 = $5 + 1 | 0;
      if (($5 | 0) != ($1 | 0)) {
       continue;
      }
      break;
     }
     $4 = $7;
    }
    HEAP32[$4 + 4 >> 2] = $1;
    HEAP32[$4 >> 2] = $2;
    $3 = $4;
    if ($9) {
     $5 = $8 + 1 | 0;
    } else {
     if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
      break label$1;
     }
     $9 = HEAP32[$6 + 4 >> 2];
     $5 = HEAP32[$6 >> 2];
    }
    $2 = HEAPU8[$5 | 0];
    HEAP32[$3 + 12 >> 2] = $2 & 15;
    HEAP32[$4 + 8 >> 2] = $2 >>> 4;
    $7 = $4;
    $3 = $9 - 1 | 0;
    $2 = $5 + 1 | 0;
    label$26 : {
     if ($3) {
      break label$26;
     }
     if (!(FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]]($0) | 0)) {
      break label$1;
     }
     $3 = HEAP32[$6 + 4 >> 2];
     $2 = HEAP32[$6 >> 2];
    }
    HEAP32[$7 + 16 >> 2] = HEAPU8[$2 | 0];
    $5 = HEAP32[$0 >> 2];
    HEAP32[$5 + 24 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$5 + 28 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$5 + 32 >> 2] = HEAP32[$4 + 12 >> 2];
    $4 = HEAP32[$4 + 16 >> 2];
    HEAP32[$5 + 20 >> 2] = 103;
    HEAP32[$5 + 36 >> 2] = $4;
    FUNCTION_TABLE[HEAP32[$5 + 4 >> 2]]($0, 1);
    $8 = $2 + 1 | 0;
    $4 = $3 - 1 | 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) < HEAP32[$0 + 36 >> 2]) {
     continue;
    }
    break;
   }
  }
  HEAP32[HEAP32[$0 + 464 >> 2] + 16 >> 2] = 1;
  HEAP32[$6 + 4 >> 2] = $4;
  HEAP32[$6 >> 2] = $8;
  return 1;
 }
 return 0;
}
function jpeg_idct_16x8($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 $23 = __stack_pointer - 256 | 0;
 __stack_pointer = $23;
 $15 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $11 = 8;
 $1 = $23;
 while (1) {
  label$2 : {
   label$3 : {
    $5 = HEAPU16[$2 + 32 >> 1];
    $7 = HEAP16[$2 + 16 >> 1];
    if (($5 | $7) & 65535) {
     break label$3;
    }
    $5 = 0;
    if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
     break label$3;
    }
    if (HEAPU16[$2 + 112 >> 1]) {
     break label$3;
    }
    $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 2;
    HEAP32[$1 + 192 >> 2] = $5;
    HEAP32[$1 + 160 >> 2] = $5;
    HEAP32[$1 + 128 >> 2] = $5;
    HEAP32[$1 + 96 >> 2] = $5;
    HEAP32[$1 + 64 >> 2] = $5;
    HEAP32[$1 + 32 >> 2] = $5;
    HEAP32[$1 >> 2] = $5;
    $7 = 56;
    break label$2;
   }
   $5 = Math_imul(HEAP32[$0 + 64 >> 2], $5 << 16 >> 16);
   $6 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $16 = Math_imul($5 + $6 | 0, 4433);
   $13 = $16 + Math_imul($5, 6270) | 0;
   $10 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $12 = Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$0 + 128 >> 2]) << 13;
   $21 = $10 + $12 | 0;
   $9 = $13 + $21 | 0;
   $5 = Math_imul(HEAP32[$0 + 32 >> 2], $7);
   $7 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $17 = Math_imul($5 + $7 | 0, -7373);
   $20 = $17 + Math_imul($5, 12299) | 0;
   $8 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $14 = $8 + $5 | 0;
   $5 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $18 = $7 + $5 | 0;
   $19 = Math_imul($14 + $18 | 0, 9633);
   $14 = $19 + Math_imul($14, -3196) | 0;
   $20 = $20 + $14 | 0;
   HEAP32[$1 + 224 >> 2] = $9 - $20 >> 11;
   HEAP32[$1 >> 2] = $9 + $20 >> 11;
   $6 = Math_imul($6, -15137) + $16 | 0;
   $16 = $10 - $12 | 0;
   $12 = $6 + $16 | 0;
   $10 = Math_imul($5 + $8 | 0, -20995);
   $9 = $10 + Math_imul($5, 25172) | 0;
   $5 = Math_imul($18, -16069) + $19 | 0;
   $9 = $9 + $5 | 0;
   HEAP32[$1 + 192 >> 2] = $12 - $9 >> 11;
   HEAP32[$1 + 32 >> 2] = $9 + $12 >> 11;
   $6 = $16 - $6 | 0;
   $8 = (Math_imul($8, 16819) + $10 | 0) + $14 | 0;
   HEAP32[$1 + 160 >> 2] = $6 - $8 >> 11;
   HEAP32[$1 + 64 >> 2] = $6 + $8 >> 11;
   $5 = (Math_imul($7, 2446) + $17 | 0) + $5 | 0;
   $7 = $21 - $13 | 0;
   HEAP32[$1 + 96 >> 2] = $5 + $7 >> 11;
   $5 = $7 - $5 >> 11;
   $7 = 32;
  }
  HEAP32[($7 << 2) + $1 >> 2] = $5;
  $2 = $2 + 2 | 0;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $5 = $11 >>> 0 > 1;
  $11 = $11 - 1 | 0;
  if ($5) {
   continue;
  }
  break;
 }
 $2 = $15 - 384 | 0;
 $16 = 0;
 $0 = $23;
 while (1) {
  $5 = HEAP32[$0 + 4 >> 2];
  $11 = HEAP32[$0 + 12 >> 2];
  $10 = Math_imul($5 + $11 | 0, 11086);
  $1 = HEAP32[($16 << 2) + $3 >> 2] + $4 | 0;
  $8 = HEAP32[$0 + 28 >> 2];
  $17 = Math_imul($8 + $5 | 0, 8956);
  $7 = HEAP32[$0 + 20 >> 2];
  $21 = $7 + $5 | 0;
  $9 = Math_imul($21, 10217);
  $14 = $17 + ($9 + (Math_imul($5, -18730) + $10 | 0) | 0) | 0;
  $13 = HEAP32[$0 + 8 >> 2];
  $12 = HEAP32[$0 + 24 >> 2];
  $18 = $13 - $12 | 0;
  $19 = Math_imul($18, 11363);
  $20 = $19 + Math_imul($12, 20995) | 0;
  $6 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $15 = HEAP32[$0 + 16 >> 2];
  $25 = Math_imul($15, 10703);
  $26 = $6 + $25 | 0;
  $22 = $20 + $26 | 0;
  HEAP8[$1 | 0] = HEAPU8[($14 + $22 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 15 | 0] = HEAPU8[($22 - $14 >>> 18 & 1023) + $2 | 0];
  $14 = $8 + $11 | 0;
  $22 = Math_imul($14, -5461);
  $24 = Math_imul($11, 589) + $10 | 0;
  $10 = Math_imul($11 + $7 | 0, 1136);
  $24 = $22 + ($24 + $10 | 0) | 0;
  $18 = Math_imul($18, 2260);
  $27 = $18 + Math_imul($13, 7373) | 0;
  $15 = Math_imul($15, 4433);
  $28 = $15 + $6 | 0;
  $29 = $27 + $28 | 0;
  HEAP8[$1 + 1 | 0] = HEAPU8[($24 + $29 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 14 | 0] = HEAPU8[($29 - $24 >>> 18 & 1023) + $2 | 0];
  $9 = (Math_imul($7, -9222) + $10 | 0) + $9 | 0;
  $10 = Math_imul($8 + $7 | 0, -11086);
  $9 = $9 + $10 | 0;
  $13 = Math_imul($13, -4926) + $19 | 0;
  $19 = $6 - $15 | 0;
  $15 = $13 + $19 | 0;
  HEAP8[$1 + 2 | 0] = HEAPU8[($9 + $15 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 13 | 0] = HEAPU8[($15 - $9 >>> 18 & 1023) + $2 | 0];
  $10 = ((Math_imul($8, 8728) + $22 | 0) + $17 | 0) + $10 | 0;
  $6 = $6 - $25 | 0;
  $12 = Math_imul($12, -4176) + $18 | 0;
  $9 = $6 + $12 | 0;
  HEAP8[$1 + 3 | 0] = HEAPU8[($10 + $9 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 12 | 0] = HEAPU8[($9 - $10 >>> 18 & 1023) + $2 | 0];
  $9 = Math_imul($5 - $8 | 0, 7350);
  $10 = Math_imul($14, -10217);
  $6 = $6 - $12 | 0;
  $12 = $9 + ($10 + Math_imul($8, 25733) | 0) | 0;
  $8 = Math_imul($8 - $7 | 0, 3363);
  $17 = $12 + $8 | 0;
  HEAP8[$1 + 4 | 0] = HEAPU8[($6 + $17 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 11 | 0] = HEAPU8[($6 - $17 >>> 18 & 1023) + $2 | 0];
  $6 = Math_imul($7 - $11 | 0, 11529);
  $12 = $6 + Math_imul($7, -6278) | 0;
  $7 = Math_imul($21, 5461);
  $8 = ($12 + $7 | 0) + $8 | 0;
  $13 = $19 - $13 | 0;
  HEAP8[$1 + 5 | 0] = HEAPU8[($8 + $13 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 10 | 0] = HEAPU8[($13 - $8 >>> 18 & 1023) + $2 | 0];
  $8 = Math_imul($5 - $11 | 0, 3363);
  $11 = (($8 + Math_imul($11, 16154) | 0) + $6 | 0) + $10 | 0;
  $6 = $28 - $27 | 0;
  HEAP8[$1 + 6 | 0] = HEAPU8[($11 + $6 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 9 | 0] = HEAPU8[($6 - $11 >>> 18 & 1023) + $2 | 0];
  $11 = ((Math_imul($5, -15038) + $8 | 0) + $7 | 0) + $9 | 0;
  $5 = $26 - $20 | 0;
  HEAP8[$1 + 7 | 0] = HEAPU8[($11 + $5 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 8 | 0] = HEAPU8[($5 - $11 >>> 18 & 1023) + $2 | 0];
  $0 = $0 + 32 | 0;
  $16 = $16 + 1 | 0;
  if (($16 | 0) != 8) {
   continue;
  }
  break;
 }
 __stack_pointer = $23 + 256 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___operator__28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul____29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___isInline_28_29_20const($1);
 $2 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___isInline_28_29_20const($0);
 label$1 : {
  if ($3) {
   if (!$2) {
    dlfree(HEAP32[$0 >> 2]);
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clearInline_28_29($0);
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____20std____2__copy__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___begin_28_29($1), $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___end_28_29($1), HEAP32[$0 >> 2]);
   wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$0 >> 2] + ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___size_28_29_20const($1) << 2) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   break label$1;
  }
  if ($2) {
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clearInline_28_29($1);
   return;
  }
  std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____29($0, $1);
  std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____29($0 + 4 | 0, $1 + 4 | 0);
  std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____29($0 + 8 | 0, $1 + 8 | 0);
 }
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clear_28_29($1);
}
function realize_virt_arrays($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $11 = HEAP32[$0 + 4 >> 2];
 $1 = HEAP32[$11 + 68 >> 2];
 if ($1) {
  while (1) {
   if (!HEAP32[$1 >> 2]) {
    $6 = HEAP32[$1 + 8 >> 2];
    $4 = Math_imul($6, HEAP32[$1 + 4 >> 2]) + $4 | 0;
    $2 = Math_imul(HEAP32[$1 + 12 >> 2], $6) + $2 | 0;
   }
   $1 = HEAP32[$1 + 44 >> 2];
   if ($1) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$11 + 72 >> 2];
 if ($1) {
  while (1) {
   if (!HEAP32[$1 >> 2]) {
    $6 = HEAP32[$1 + 8 >> 2];
    $4 = (Math_imul($6, HEAP32[$1 + 4 >> 2]) << 7) + $4 | 0;
    $2 = (Math_imul(HEAP32[$1 + 12 >> 2], $6) << 7) + $2 | 0;
   }
   $1 = HEAP32[$1 + 44 >> 2];
   if ($1) {
    continue;
   }
   break;
  }
 }
 label$8 : {
  if (($2 | 0) < 1) {
   break label$8;
  }
  $12 = 1e9;
  $1 = jpeg_mem_available($0, $2, $4, HEAP32[$11 + 76 >> 2]);
  if (($4 | 0) > ($1 | 0)) {
   $1 = ($1 | 0) / ($2 | 0) | 0;
   $12 = ($1 | 0) > 1 ? $1 : 1;
  }
  $3 = HEAP32[$11 + 68 >> 2];
  if ($3) {
   while (1) {
    if (!HEAP32[$3 >> 2]) {
     $8 = HEAP32[$3 + 4 >> 2];
     $1 = HEAP32[$3 + 12 >> 2];
     label$13 : {
      if (((($8 - 1 >>> 0) / ($1 >>> 0) | 0) + 1 | 0) <= ($12 | 0)) {
       HEAP32[$3 + 16 >> 2] = $8;
       break label$13;
      }
      HEAP32[$3 + 16 >> 2] = Math_imul($1, $12);
      jpeg_open_backing_store($0, $3 + 48 | 0, Math_imul(HEAP32[$3 + 8 >> 2], $8));
      HEAP32[$3 + 40 >> 2] = 1;
      $8 = HEAP32[$3 + 16 >> 2];
     }
     $6 = HEAP32[$3 + 8 >> 2];
     $1 = 999999984 / ($6 >>> 0) | 0;
     $2 = HEAP32[$0 + 4 >> 2];
     if ($6 >>> 0 >= 999999985) {
      $4 = HEAP32[$0 >> 2];
      HEAP32[$4 + 20 >> 2] = 72;
      FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
     }
     $7 = ($1 | 0) < ($8 | 0) ? $1 : $8;
     HEAP32[$2 + 80 >> 2] = $7;
     $1 = 0;
     $13 = alloc_small($0, 1, $8 << 2);
     if ($8) {
      while (1) {
       $4 = HEAP32[$0 + 4 >> 2];
       $2 = $8 - $1 | 0;
       $7 = $2 >>> 0 > $7 >>> 0 ? $7 : $2;
       $2 = Math_imul($7, $6);
       if ($2 >>> 0 >= 999999985) {
        $9 = HEAP32[$0 >> 2];
        HEAP32[$9 + 20 >> 2] = 56;
        HEAP32[$9 + 24 >> 2] = 3;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       }
       $5 = $2 & 7;
       $5 = ($5 ? 8 - $5 | 0 : 0) + $2 | 0;
       $10 = $5 + 16 | 0;
       $2 = jpeg_get_large($0, $10);
       if (!$2) {
        $9 = HEAP32[$0 >> 2];
        HEAP32[$9 + 20 >> 2] = 56;
        HEAP32[$9 + 24 >> 2] = 4;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
       }
       HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + $10;
       $4 = $4 - -64 | 0;
       $10 = HEAP32[$4 >> 2];
       HEAP32[$2 + 8 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = $5;
       HEAP32[$2 >> 2] = $10;
       HEAP32[$4 >> 2] = $2;
       if ($7) {
        $2 = $2 + 16 | 0;
        $4 = $7;
        while (1) {
         HEAP32[($1 << 2) + $13 >> 2] = $2;
         $2 = $2 + $6 | 0;
         $1 = $1 + 1 | 0;
         $4 = $4 - 1 | 0;
         if ($4) {
          continue;
         }
         break;
        }
       }
       if ($1 >>> 0 < $8 >>> 0) {
        continue;
       }
       break;
      }
     }
     HEAP32[$3 >> 2] = $13;
     $1 = HEAP32[$11 + 80 >> 2];
     HEAP32[$3 + 36 >> 2] = 0;
     HEAP32[$3 + 24 >> 2] = 0;
     HEAP32[$3 + 28 >> 2] = 0;
     HEAP32[$3 + 20 >> 2] = $1;
    }
    $3 = HEAP32[$3 + 44 >> 2];
    if ($3) {
     continue;
    }
    break;
   }
  }
  $3 = HEAP32[$11 + 72 >> 2];
  if (!$3) {
   break label$8;
  }
  while (1) {
   if (!HEAP32[$3 >> 2]) {
    $5 = HEAP32[$3 + 4 >> 2];
    $1 = HEAP32[$3 + 12 >> 2];
    label$24 : {
     if (((($5 - 1 >>> 0) / ($1 >>> 0) | 0) + 1 | 0) <= ($12 | 0)) {
      HEAP32[$3 + 16 >> 2] = $5;
      break label$24;
     }
     HEAP32[$3 + 16 >> 2] = Math_imul($1, $12);
     jpeg_open_backing_store($0, $3 + 48 | 0, Math_imul(HEAP32[$3 + 8 >> 2], $5) << 7);
     HEAP32[$3 + 40 >> 2] = 1;
     $5 = HEAP32[$3 + 16 >> 2];
    }
    $6 = HEAP32[$3 + 8 >> 2] << 7;
    $1 = 999999984 / ($6 >>> 0) | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    if ($6 >>> 0 >= 999999985) {
     $4 = HEAP32[$0 >> 2];
     HEAP32[$4 + 20 >> 2] = 72;
     FUNCTION_TABLE[HEAP32[$4 >> 2]]($0);
    }
    $7 = ($1 | 0) < ($5 | 0) ? $1 : $5;
    HEAP32[$2 + 80 >> 2] = $7;
    $1 = 0;
    $13 = alloc_small($0, 1, $5 << 2);
    if ($5) {
     while (1) {
      $4 = HEAP32[$0 + 4 >> 2];
      $2 = $5 - $1 | 0;
      $7 = $2 >>> 0 > $7 >>> 0 ? $7 : $2;
      $8 = Math_imul($7, $6);
      if ($8 >>> 0 >= 999999985) {
       $9 = HEAP32[$0 >> 2];
       HEAP32[$9 + 20 >> 2] = 56;
       HEAP32[$9 + 24 >> 2] = 3;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
      }
      $10 = $8 | 16;
      $2 = jpeg_get_large($0, $10);
      if (!$2) {
       $9 = HEAP32[$0 >> 2];
       HEAP32[$9 + 20 >> 2] = 56;
       HEAP32[$9 + 24 >> 2] = 4;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
      }
      HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + $10;
      $4 = $4 - -64 | 0;
      $10 = HEAP32[$4 >> 2];
      HEAP32[$2 + 8 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = $8;
      HEAP32[$2 >> 2] = $10;
      HEAP32[$4 >> 2] = $2;
      if ($7) {
       $2 = $2 + 16 | 0;
       $4 = $7;
       while (1) {
        HEAP32[($1 << 2) + $13 >> 2] = $2;
        $1 = $1 + 1 | 0;
        $2 = $2 + $6 | 0;
        $4 = $4 - 1 | 0;
        if ($4) {
         continue;
        }
        break;
       }
      }
      if ($1 >>> 0 < $5 >>> 0) {
       continue;
      }
      break;
     }
    }
    HEAP32[$3 >> 2] = $13;
    $1 = HEAP32[$11 + 80 >> 2];
    HEAP32[$3 + 36 >> 2] = 0;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 28 >> 2] = 0;
    HEAP32[$3 + 20 >> 2] = $1;
   }
   $3 = HEAP32[$3 + 44 >> 2];
   if ($3) {
    continue;
   }
   break;
  }
 }
}
function jpeg_idct_15x15($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 $27 = __stack_pointer - 480 | 0;
 __stack_pointer = $27;
 $28 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $27;
 while (1) {
  $12 = HEAP32[$0 + 160 >> 2];
  $17 = HEAP16[$2 + 80 >> 1];
  $7 = HEAP32[$0 + 32 >> 2];
  $15 = HEAP16[$2 + 16 >> 1];
  $10 = HEAP32[$0 + 224 >> 2];
  $8 = HEAP16[$2 + 112 >> 1];
  $11 = HEAP32[$0 + 96 >> 2];
  $16 = HEAP16[$2 + 48 >> 1];
  $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $13 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $14 = $5 + Math_imul($13, -11586) | 0;
  $18 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $9 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $6 = $18 - $9 | 0;
  HEAP32[$1 + 224 >> 2] = $14 + Math_imul($6, -11584) >> 11;
  $19 = Math_imul($13, 9373) + $5 | 0;
  $9 = $9 + $18 | 0;
  $20 = Math_imul($9, 10958);
  $23 = Math_imul($6, 374);
  $21 = $19 + ($20 + $23 | 0) | 0;
  $12 = Math_imul(Math_imul($12, $17), 10033);
  $7 = Math_imul($7, $15);
  $10 = Math_imul($8, $10);
  $15 = $7 - $10 | 0;
  $17 = $12 + Math_imul($15, 11522) | 0;
  $8 = Math_imul($11, $16);
  $11 = Math_imul($8, -11018);
  $16 = $17 + (Math_imul($10, 20131) - $11 | 0) | 0;
  HEAP32[$1 + 448 >> 2] = $21 - $16 >> 11;
  HEAP32[$1 >> 2] = $16 + $21 >> 11;
  $13 = Math_imul($13, -3580) + $5 | 0;
  $16 = Math_imul($6, 2896);
  $21 = Math_imul($9, 6476);
  $5 = $13 + ($16 + $21 | 0) | 0;
  $24 = $8 - $10 | 0;
  $25 = Math_imul($24 + $7 | 0, 6810);
  $26 = $25 + Math_imul($7, 4209) | 0;
  HEAP32[$1 + 416 >> 2] = $5 - $26 >> 11;
  HEAP32[$1 + 32 >> 2] = $5 + $26 >> 11;
  $5 = Math_imul($6, 5792) + $14 | 0;
  $15 = Math_imul($15, 10033) - $12 | 0;
  HEAP32[$1 + 384 >> 2] = $5 - $15 >> 11;
  HEAP32[$1 + 64 >> 2] = $5 + $15 >> 11;
  $18 = Math_imul($18, 11795);
  $5 = (($18 - $20 | 0) + $23 | 0) + $13 | 0;
  $15 = Math_imul($7 + $10 | 0, 4712);
  $8 = Math_imul($8, -6810);
  $14 = $15 + (($8 + Math_imul($7, 3897) | 0) - $12 | 0) | 0;
  HEAP32[$1 + 352 >> 2] = $5 - $14 >> 11;
  HEAP32[$1 + 96 >> 2] = $5 + $14 >> 11;
  $5 = ($19 - $21 | 0) + $16 | 0;
  $16 = Math_imul($24, -17828) + $25 | 0;
  HEAP32[$1 + 320 >> 2] = $5 - $16 >> 11;
  HEAP32[$1 + 128 >> 2] = $5 + $16 >> 11;
  $6 = Math_imul($6, -3271);
  $5 = Math_imul($9, 4482);
  $9 = $6 + ($19 - $5 | 0) | 0;
  $10 = (($12 + $11 | 0) + Math_imul($10, -7121) | 0) + $15 | 0;
  HEAP32[$1 + 288 >> 2] = $9 - $10 >> 11;
  HEAP32[$1 + 160 >> 2] = $10 + $9 >> 11;
  $6 = (($5 - $18 | 0) + $6 | 0) + $13 | 0;
  $7 = (Math_imul($7, -9113) + $8 | 0) + $17 | 0;
  HEAP32[$1 + 256 >> 2] = $6 - $7 >> 11;
  HEAP32[$1 + 192 >> 2] = $6 + $7 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $22 = $22 + 1 | 0;
  if (($22 | 0) != 8) {
   continue;
  }
  break;
 }
 $1 = $28 - 384 | 0;
 $18 = 0;
 $0 = $27;
 while (1) {
  $2 = HEAP32[($18 << 2) + $3 >> 2] + $4 | 0;
  $12 = Math_imul(HEAP32[$0 + 20 >> 2], 10033);
  $7 = HEAP32[$0 + 4 >> 2];
  $6 = HEAP32[$0 + 28 >> 2];
  $11 = $7 - $6 | 0;
  $16 = $12 + Math_imul($11, 11522) | 0;
  $13 = HEAP32[$0 + 12 >> 2];
  $15 = Math_imul($13, -11018);
  $17 = $16 + (Math_imul($6, 20131) - $15 | 0) | 0;
  $8 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $19 = HEAP32[$0 + 24 >> 2];
  $22 = $8 + Math_imul($19, 9373) | 0;
  $5 = HEAP32[$0 + 8 >> 2];
  $9 = HEAP32[$0 + 16 >> 2];
  $10 = $5 - $9 | 0;
  $14 = Math_imul($10, 374);
  $9 = $5 + $9 | 0;
  $23 = Math_imul($9, 10958);
  $20 = $22 + ($14 + $23 | 0) | 0;
  HEAP8[$2 | 0] = HEAPU8[($17 + $20 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 14 | 0] = HEAPU8[($20 - $17 >>> 18 & 1023) + $1 | 0];
  $17 = Math_imul($19, -3580) + $8 | 0;
  $25 = Math_imul($10, 2896);
  $26 = Math_imul($9, 6476);
  $28 = $17 + ($25 + $26 | 0) | 0;
  $20 = $13 - $6 | 0;
  $21 = Math_imul($20 + $7 | 0, 6810);
  $24 = $21 + Math_imul($7, 4209) | 0;
  HEAP8[$2 + 1 | 0] = HEAPU8[($28 + $24 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 13 | 0] = HEAPU8[($28 - $24 >>> 18 & 1023) + $1 | 0];
  $19 = Math_imul($19, -11586) + $8 | 0;
  $8 = $19 + Math_imul($10, 5792) | 0;
  $11 = Math_imul($11, 10033) - $12 | 0;
  HEAP8[$2 + 2 | 0] = HEAPU8[($8 + $11 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 12 | 0] = HEAPU8[($8 - $11 >>> 18 & 1023) + $1 | 0];
  $8 = Math_imul($6 + $7 | 0, 4712);
  $13 = Math_imul($13, -6810);
  $11 = $8 + (($13 + Math_imul($7, 3897) | 0) - $12 | 0) | 0;
  $5 = Math_imul($5, 11795);
  $14 = (($5 - $23 | 0) + $14 | 0) + $17 | 0;
  HEAP8[$2 + 3 | 0] = HEAPU8[($11 + $14 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 11 | 0] = HEAPU8[($14 - $11 >>> 18 & 1023) + $1 | 0];
  $11 = Math_imul($20, -17828) + $21 | 0;
  $14 = ($22 - $26 | 0) + $25 | 0;
  HEAP8[$2 + 4 | 0] = HEAPU8[($11 + $14 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 10 | 0] = HEAPU8[($14 - $11 >>> 18 & 1023) + $1 | 0];
  $6 = (($12 + $15 | 0) + Math_imul($6, -7121) | 0) + $8 | 0;
  $12 = Math_imul($9, 4482);
  $9 = Math_imul($10, -3271);
  $8 = $9 + ($22 - $12 | 0) | 0;
  HEAP8[$2 + 5 | 0] = HEAPU8[($8 + $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 9 | 0] = HEAPU8[($8 - $6 >>> 18 & 1023) + $1 | 0];
  $7 = (Math_imul($7, -9113) + $13 | 0) + $16 | 0;
  $6 = (($12 - $5 | 0) + $9 | 0) + $17 | 0;
  HEAP8[$2 + 6 | 0] = HEAPU8[($7 + $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[($6 - $7 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 7 | 0] = HEAPU8[(Math_imul($10, -11584) + $19 >>> 18 & 1023) + $1 | 0];
  $0 = $0 + 32 | 0;
  $18 = $18 + 1 | 0;
  if (($18 | 0) != 15) {
   continue;
  }
  break;
 }
 __stack_pointer = $27 + 480 | 0;
}
function jpeg_idct_13x13($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 $25 = __stack_pointer - 416 | 0;
 __stack_pointer = $25;
 $26 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $25;
 while (1) {
  $16 = HEAP32[$0 + 224 >> 2];
  $7 = HEAP16[$2 + 112 >> 1];
  $5 = HEAP32[$0 + 96 >> 2];
  $8 = HEAP16[$2 + 48 >> 1];
  $6 = HEAP32[$0 + 160 >> 2];
  $21 = HEAP16[$2 + 80 >> 1];
  $13 = HEAP32[$0 + 32 >> 2];
  $9 = HEAP16[$2 + 16 >> 1];
  $10 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $14 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $15 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $11 = $14 - $15 | 0;
  $12 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  HEAP32[$1 + 192 >> 2] = $10 + Math_imul($11 - $12 | 0, 11585) >> 11;
  $5 = Math_imul($5, $8);
  $13 = Math_imul($13, $9);
  $9 = Math_imul($5 + $13 | 0, 10832);
  $8 = Math_imul($6, $21);
  $6 = Math_imul($13 + $8 | 0, 9534);
  $19 = Math_imul($11, 793) + $10 | 0;
  $14 = $14 + $15 | 0;
  $15 = Math_imul($14, 9465);
  $20 = $19 + ($15 + Math_imul($12, 11249) | 0) | 0;
  $16 = Math_imul($7, $16);
  $7 = $16 + $13 | 0;
  $21 = Math_imul($7, 7682);
  $17 = $21 + ((Math_imul($13, -16549) + $9 | 0) + $6 | 0) | 0;
  HEAP32[$1 + 384 >> 2] = $20 - $17 >> 11;
  HEAP32[$1 >> 2] = $17 + $20 >> 11;
  $17 = Math_imul($11, 3989) + $10 | 0;
  $20 = Math_imul($14, 2592);
  $23 = $17 + (Math_imul($12, 8672) - $20 | 0) | 0;
  $24 = Math_imul($5 + $16 | 0, -9534);
  $22 = Math_imul($5, 6859) + $9 | 0;
  $9 = Math_imul($5 + $8 | 0, -2773);
  $22 = $24 + ($22 + $9 | 0) | 0;
  HEAP32[$1 + 352 >> 2] = $23 - $22 >> 11;
  HEAP32[$1 + 32 >> 2] = $23 + $22 >> 11;
  $15 = (Math_imul($12, 4108) - $15 | 0) + $19 | 0;
  $9 = (Math_imul($8, -12879) + $9 | 0) + $6 | 0;
  $6 = Math_imul($8 + $16 | 0, -5384);
  $9 = $9 + $6 | 0;
  HEAP32[$1 + 320 >> 2] = $15 - $9 >> 11;
  HEAP32[$1 + 64 >> 2] = $9 + $15 >> 11;
  $11 = Math_imul($11, -7678) + $10 | 0;
  $14 = Math_imul($14, 3570);
  $10 = $11 + (Math_imul($12, -1396) - $14 | 0) | 0;
  $6 = ((Math_imul($16, 18068) + $24 | 0) + $21 | 0) + $6 | 0;
  HEAP32[$1 + 288 >> 2] = $10 - $6 >> 11;
  HEAP32[$1 + 96 >> 2] = $6 + $10 >> 11;
  $11 = (Math_imul($12, -6581) + $14 | 0) + $11 | 0;
  $10 = Math_imul($7, 2773) + Math_imul($8 - $5 | 0, 7682) | 0;
  $5 = ($10 + Math_imul($13, 2611) | 0) + Math_imul($5, -3818) | 0;
  HEAP32[$1 + 256 >> 2] = $11 - $5 >> 11;
  HEAP32[$1 + 128 >> 2] = $5 + $11 >> 11;
  $12 = (Math_imul($12, -10258) + $20 | 0) + $17 | 0;
  $5 = (Math_imul($8, 3150) + $10 | 0) + Math_imul($16, -14273) | 0;
  HEAP32[$1 + 224 >> 2] = $12 - $5 >> 11;
  HEAP32[$1 + 160 >> 2] = $5 + $12 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $18 = $18 + 1 | 0;
  if (($18 | 0) != 8) {
   continue;
  }
  break;
 }
 $1 = $26 - 384 | 0;
 $14 = 0;
 $0 = $25;
 while (1) {
  $5 = HEAP32[$0 + 12 >> 2];
  $13 = HEAP32[$0 + 4 >> 2];
  $7 = Math_imul($5 + $13 | 0, 10832);
  $10 = HEAP32[$0 + 16 >> 2];
  $11 = HEAP32[$0 + 24 >> 2];
  $18 = $10 + $11 | 0;
  $19 = Math_imul($18, 9465);
  $11 = $10 - $11 | 0;
  $2 = HEAP32[($14 << 2) + $3 >> 2] + $4 | 0;
  $16 = HEAP32[$0 + 28 >> 2];
  $21 = $16 + $13 | 0;
  $9 = Math_imul($21, 7682);
  $8 = HEAP32[$0 + 20 >> 2];
  $6 = Math_imul($13 + $8 | 0, 9534);
  $15 = $9 + ($6 + (Math_imul($13, -16549) + $7 | 0) | 0) | 0;
  $10 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $20 = $10 + Math_imul($11, 793) | 0;
  $12 = HEAP32[$0 + 8 >> 2];
  $17 = $20 + (Math_imul($12, 11249) + $19 | 0) | 0;
  HEAP8[$2 | 0] = HEAPU8[($15 + $17 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 12 | 0] = HEAPU8[($17 - $15 >>> 18 & 1023) + $1 | 0];
  $15 = Math_imul($5 + $16 | 0, -9534);
  $17 = Math_imul($5, 6859) + $7 | 0;
  $7 = Math_imul($5 + $8 | 0, -2773);
  $17 = $15 + ($17 + $7 | 0) | 0;
  $24 = Math_imul($11, 3989) + $10 | 0;
  $23 = Math_imul($18, 2592);
  $22 = $24 + (Math_imul($12, 8672) - $23 | 0) | 0;
  HEAP8[$2 + 1 | 0] = HEAPU8[($17 + $22 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 11 | 0] = HEAPU8[($22 - $17 >>> 18 & 1023) + $1 | 0];
  $6 = (Math_imul($8, -12879) + $7 | 0) + $6 | 0;
  $7 = Math_imul($8 + $16 | 0, -5384);
  $6 = $6 + $7 | 0;
  $19 = (Math_imul($12, 4108) - $19 | 0) + $20 | 0;
  HEAP8[$2 + 2 | 0] = HEAPU8[($6 + $19 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 10 | 0] = HEAPU8[($19 - $6 >>> 18 & 1023) + $1 | 0];
  $7 = ((Math_imul($16, 18068) + $15 | 0) + $9 | 0) + $7 | 0;
  $6 = Math_imul($11, -7678) + $10 | 0;
  $18 = Math_imul($18, 3570);
  $9 = $6 + (Math_imul($12, -1396) - $18 | 0) | 0;
  HEAP8[$2 + 3 | 0] = HEAPU8[($7 + $9 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 9 | 0] = HEAPU8[($9 - $7 >>> 18 & 1023) + $1 | 0];
  $7 = Math_imul($21, 2773) + Math_imul($8 - $5 | 0, 7682) | 0;
  $5 = ($7 + Math_imul($13, 2611) | 0) + Math_imul($5, -3818) | 0;
  $13 = (Math_imul($12, -6581) + $18 | 0) + $6 | 0;
  HEAP8[$2 + 4 | 0] = HEAPU8[($5 + $13 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[($13 - $5 >>> 18 & 1023) + $1 | 0];
  $5 = (Math_imul($8, 3150) + $7 | 0) + Math_imul($16, -14273) | 0;
  $8 = (Math_imul($12, -10258) + $23 | 0) + $24 | 0;
  HEAP8[$2 + 5 | 0] = HEAPU8[($5 + $8 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 7 | 0] = HEAPU8[($8 - $5 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 6 | 0] = HEAPU8[(Math_imul($11 - $12 | 0, 11585) + $10 >>> 18 & 1023) + $1 | 0];
  $0 = $0 + 32 | 0;
  $14 = $14 + 1 | 0;
  if (($14 | 0) != 13) {
   continue;
  }
  break;
 }
 __stack_pointer = $25 + 416 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseConversionExpr_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 40 | 0, 26456);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$1 + 12 >> 2] = $3;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($1 + 24 | 0, $0 + 388 | 0, 0);
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($4);
  HEAP32[$1 + 36 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($2);
  if (!$3) {
   break label$1;
  }
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   $3 = $0 + 8 | 0;
   $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($3);
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
     $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
     HEAP32[$1 + 24 >> 2] = $2;
     if (!$2) {
      break label$1;
     }
     $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($3, $1 + 24 | 0);
     continue;
    }
    break;
   }
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($1 + 24 | 0, $0, $6);
   $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1 + 36 | 0, $1 + 24 | 0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
  HEAP32[$1 + 20 >> 2] = $2;
  if (!$2) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($1 + 24 | 0, $0, $1 + 20 | 0, $1 + 24 | 0);
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1 + 36 | 0, $1 + 24 | 0);
 }
 __stack_pointer = $1 + 48 | 0;
 return $5;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 84)) {
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 76)) {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1 + 12 | 0)) {
    break label$1;
   }
   $3 = HEAP32[$1 + 12 >> 2];
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   $3 = $3 + 1 | 0;
  }
  HEAP32[$1 + 8 >> 2] = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1 + 8 | 0)) {
    break label$1;
   }
   $4 = HEAP32[$1 + 8 >> 2] + 1 | 0;
   HEAP32[$1 + 8 >> 2] = $4;
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
  }
  if (!(!HEAPU8[$0 + 389 | 0] | $3)) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference_2c_20unsigned_20long___28unsigned_20long__29($0, $1 + 8 | 0);
   HEAP32[$1 + 4 >> 2] = $2;
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__20const__29($0 + 360 | 0, $1 + 4 | 0);
   break label$1;
  }
  label$5 : {
   $5 = $0 + 332 | 0;
   $6 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___size_28_29_20const($5);
   label$6 : {
    if ($6 >>> 0 <= $3 >>> 0) {
     break label$6;
    }
    $2 = HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___operator_5b_5d_28unsigned_20long_29($5, $3) >> 2];
    if (!$2) {
     break label$6;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___size_28_29_20const($2) >>> 0 > $4 >>> 0) {
     break label$5;
    }
   }
   $2 = 0;
   if (HEAP32[$0 + 392 >> 2] != ($3 | 0) | $3 >>> 0 > $6 >>> 0) {
    break label$1;
   }
   if (($3 | 0) == ($6 | 0)) {
    HEAP32[$1 + 4 >> 2] = 0;
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___20const__29($5, $1 + 4 | 0);
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, 23243);
   break label$1;
  }
  $2 = HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___operator_5b_5d_28unsigned_20long_29($2, $4) >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return $2;
}
function jpeg_idct_14x14($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 $24 = __stack_pointer - 448 | 0;
 __stack_pointer = $24;
 $25 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $24;
 while (1) {
  $10 = HEAP32[$0 + 192 >> 2];
  $16 = HEAP16[$2 + 96 >> 1];
  $8 = HEAP32[$0 + 64 >> 2];
  $7 = HEAP16[$2 + 32 >> 1];
  $9 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $11 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $17 = $9 + Math_imul($11, -11586) >> 11;
  $13 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $14 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $5 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $15 = $14 - $5 | 0;
  $6 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $12 = $13 + ($15 - $6 | 0) << 2;
  HEAP32[$1 + 320 >> 2] = $17 - $12;
  HEAP32[$1 + 96 >> 2] = $17 + $12;
  $8 = Math_imul($7, $8);
  $16 = Math_imul($10, $16);
  $7 = Math_imul($8 + $16 | 0, 9058);
  $17 = $7 + Math_imul($16, -14084) | 0;
  $12 = Math_imul($11, 2578) + $9 | 0;
  $18 = $17 + $12 | 0;
  $10 = $13 << 13;
  $13 = Math_imul($5 + $6 | 0, -1297) - $10 | 0;
  $22 = Math_imul($5 + $14 | 0, 10935);
  $20 = $13 + ($22 + Math_imul($5, -3474) | 0) | 0;
  HEAP32[$1 + 384 >> 2] = $18 - $20 >> 11;
  HEAP32[$1 + 32 >> 2] = $18 + $20 >> 11;
  $16 = Math_imul($16, -11295) + Math_imul($8, 5027) | 0;
  $18 = Math_imul($11, -7223) + $9 | 0;
  $20 = $16 + $18 | 0;
  $21 = $6 + $14 | 0;
  $23 = Math_imul($21, 9810);
  $13 = ($23 + Math_imul($6, -19447) | 0) + $13 | 0;
  HEAP32[$1 + 352 >> 2] = $20 - $13 >> 11;
  HEAP32[$1 + 64 >> 2] = $13 + $20 >> 11;
  $13 = Math_imul($6 - $5 | 0, 11512);
  $17 = $12 - $17 | 0;
  $12 = $13 + Math_imul($5, 5529) | 0;
  $5 = Math_imul($15, 3826) - $10 | 0;
  $15 = $12 + $5 | 0;
  HEAP32[$1 + 256 >> 2] = $17 - $15 >> 11;
  HEAP32[$1 + 160 >> 2] = $15 + $17 >> 11;
  $11 = Math_imul($11, 10438) + $9 | 0;
  $9 = Math_imul($8, 2237) + $7 | 0;
  $8 = $11 - $9 | 0;
  $7 = Math_imul($21, 6164);
  $5 = ($7 + Math_imul($14, -8693) | 0) + $5 | 0;
  HEAP32[$1 + 224 >> 2] = $8 - $5 >> 11;
  HEAP32[$1 + 192 >> 2] = $5 + $8 >> 11;
  $5 = $9 + $11 | 0;
  $14 = ((Math_imul($14, -9232) + $22 | 0) + $23 | 0) + $10 | 0;
  HEAP32[$1 + 416 >> 2] = $5 - $14 >> 11;
  HEAP32[$1 >> 2] = $5 + $14 >> 11;
  $5 = $18 - $16 | 0;
  $6 = ((Math_imul($6, -13850) + $13 | 0) + $7 | 0) + $10 | 0;
  HEAP32[$1 + 288 >> 2] = $5 - $6 >> 11;
  HEAP32[$1 + 128 >> 2] = $5 + $6 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $19 = $19 + 1 | 0;
  if (($19 | 0) != 8) {
   continue;
  }
  break;
 }
 $1 = $25 - 384 | 0;
 $16 = 0;
 $0 = $24;
 while (1) {
  $5 = HEAP32[$0 + 12 >> 2];
  $14 = HEAP32[$0 + 4 >> 2];
  $7 = Math_imul($5 + $14 | 0, 10935);
  $2 = HEAP32[($16 << 2) + $3 >> 2] + $4 | 0;
  $13 = HEAP32[$0 + 28 >> 2];
  $11 = $13 << 13;
  $6 = HEAP32[$0 + 20 >> 2];
  $17 = $14 + $6 | 0;
  $15 = Math_imul($17, 9810);
  $12 = $11 + ($15 + (Math_imul($14, -9232) + $7 | 0) | 0) | 0;
  $9 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $10 = HEAP32[$0 + 16 >> 2];
  $20 = $9 + Math_imul($10, 10438) | 0;
  $8 = HEAP32[$0 + 24 >> 2];
  $19 = HEAP32[$0 + 8 >> 2];
  $18 = Math_imul($8 + $19 | 0, 9058);
  $22 = $18 + Math_imul($19, 2237) | 0;
  $21 = $20 + $22 | 0;
  HEAP8[$2 | 0] = HEAPU8[($12 + $21 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 13 | 0] = HEAPU8[($21 - $12 >>> 18 & 1023) + $1 | 0];
  $12 = Math_imul($5, -3474) + $7 | 0;
  $7 = Math_imul($5 + $6 | 0, -1297) - $11 | 0;
  $12 = $12 + $7 | 0;
  $18 = Math_imul($8, -14084) + $18 | 0;
  $21 = Math_imul($10, 2578) + $9 | 0;
  $23 = $18 + $21 | 0;
  HEAP8[$2 + 1 | 0] = HEAPU8[($12 + $23 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 12 | 0] = HEAPU8[($23 - $12 >>> 18 & 1023) + $1 | 0];
  $7 = (Math_imul($6, -19447) + $15 | 0) + $7 | 0;
  $8 = Math_imul($8, -11295) + Math_imul($19, 5027) | 0;
  $19 = Math_imul($10, -7223) + $9 | 0;
  $15 = $8 + $19 | 0;
  HEAP8[$2 + 2 | 0] = HEAPU8[($7 + $15 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 11 | 0] = HEAPU8[($15 - $7 >>> 18 & 1023) + $1 | 0];
  $9 = Math_imul($10, -11586) + $9 | 0;
  $7 = $14 - $5 | 0;
  $15 = ($7 - $6 | 0) + $13 << 13;
  HEAP8[$2 + 3 | 0] = HEAPU8[($9 + $15 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 10 | 0] = HEAPU8[($9 - $15 >>> 18 & 1023) + $1 | 0];
  $8 = $19 - $8 | 0;
  $9 = Math_imul($17, 6164);
  $10 = Math_imul($6, -13850) + $11 | 0;
  $6 = Math_imul($6 - $5 | 0, 11512);
  $10 = $9 + ($10 + $6 | 0) | 0;
  HEAP8[$2 + 4 | 0] = HEAPU8[($8 + $10 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 9 | 0] = HEAPU8[($8 - $10 >>> 18 & 1023) + $1 | 0];
  $6 = Math_imul($5, 5529) + $6 | 0;
  $5 = Math_imul($7, 3826) - $11 | 0;
  $6 = $6 + $5 | 0;
  $11 = $21 - $18 | 0;
  HEAP8[$2 + 5 | 0] = HEAPU8[($6 + $11 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[($11 - $6 >>> 18 & 1023) + $1 | 0];
  $5 = (Math_imul($14, -8693) + $9 | 0) + $5 | 0;
  $6 = $20 - $22 | 0;
  HEAP8[$2 + 6 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 7 | 0] = HEAPU8[($6 - $5 >>> 18 & 1023) + $1 | 0];
  $0 = $0 + 32 | 0;
  $16 = $16 + 1 | 0;
  if (($16 | 0) != 14) {
   continue;
  }
  break;
 }
 __stack_pointer = $24 + 448 | 0;
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__20std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____construct_node_hash_std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28unsigned_20long_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 $1 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____node_alloc_28_29($1);
 $0 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___unique_ptr_true_2c_20void__28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__2c_20true_____good_rval_ref_type_29($0, std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___allocate_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20unsigned_20long_29($1, 1), std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____hash_node_destructor_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20bool_29($6 + 8 | 0, $1, 0));
 void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___construct_std____2__pair_int_20const_2c_20arIset__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($1, std____2____hash_key_value_types_std____2____hash_value_type_int_2c_20arIset__20_____get_ptr_28std____2____hash_value_type_int_2c_20arIset___29(std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___operator___28_29_20const($0) + 8 | 0), std____2__piecewise_construct_t_20const__20std____2__forward_std____2__piecewise_construct_t_20const___28std____2__remove_reference_std____2__piecewise_construct_t_20const____type__29($3), std____2__tuple_int_20const_____20std____2__forward_std____2__tuple_int_20const___20__28std____2__remove_reference_std____2__tuple_int_20const___20___type__29($4), std____2__tuple_____20std____2__forward_std____2__tuple___20__28std____2__remove_reference_std____2__tuple___20___type__29($5));
 wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___get_deleter_28_29($0), wasm2js_i32$1 = 1, HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___operator___28_29_20const($0), wasm2js_i32$1 = $2, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___operator___28_29_20const($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 __stack_pointer = $6 + 16 | 0;
}
function jpeg_idct_islow($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $21 = __stack_pointer - 256 | 0;
 __stack_pointer = $21;
 $22 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $6 = 8;
 $1 = $21;
 while (1) {
  label$2 : {
   label$3 : {
    $5 = HEAPU16[$2 + 32 >> 1];
    $7 = HEAP16[$2 + 16 >> 1];
    if (($5 | $7) & 65535) {
     break label$3;
    }
    $5 = 0;
    if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
     break label$3;
    }
    if (HEAPU16[$2 + 112 >> 1]) {
     break label$3;
    }
    $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 2;
    HEAP32[$1 + 192 >> 2] = $5;
    HEAP32[$1 + 160 >> 2] = $5;
    HEAP32[$1 + 128 >> 2] = $5;
    HEAP32[$1 + 96 >> 2] = $5;
    HEAP32[$1 + 64 >> 2] = $5;
    HEAP32[$1 + 32 >> 2] = $5;
    HEAP32[$1 >> 2] = $5;
    $7 = 56;
    break label$2;
   }
   $12 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $14 = Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$0 + 128 >> 2]) << 13;
   $15 = $12 + $14 | 0;
   $5 = Math_imul(HEAP32[$0 + 64 >> 2], $5 << 16 >> 16);
   $10 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $11 = Math_imul($5 + $10 | 0, 4433);
   $18 = $11 + Math_imul($5, 6270) | 0;
   $9 = $15 + $18 | 0;
   $5 = Math_imul(HEAP32[$0 + 32 >> 2], $7);
   $7 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $16 = Math_imul($5 + $7 | 0, -7373);
   $13 = $16 + Math_imul($5, 12299) | 0;
   $8 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $17 = $8 + $5 | 0;
   $5 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $19 = $7 + $5 | 0;
   $20 = Math_imul($17 + $19 | 0, 9633);
   $17 = $20 + Math_imul($17, -3196) | 0;
   $13 = $13 + $17 | 0;
   HEAP32[$1 + 224 >> 2] = $9 - $13 >> 11;
   HEAP32[$1 >> 2] = $9 + $13 >> 11;
   $10 = Math_imul($10, -15137) + $11 | 0;
   $11 = $12 - $14 | 0;
   $14 = $10 + $11 | 0;
   $12 = Math_imul($5 + $8 | 0, -20995);
   $9 = $12 + Math_imul($5, 25172) | 0;
   $5 = Math_imul($19, -16069) + $20 | 0;
   $9 = $9 + $5 | 0;
   HEAP32[$1 + 192 >> 2] = $14 - $9 >> 11;
   HEAP32[$1 + 32 >> 2] = $9 + $14 >> 11;
   $10 = $11 - $10 | 0;
   $8 = (Math_imul($8, 16819) + $12 | 0) + $17 | 0;
   HEAP32[$1 + 160 >> 2] = $10 - $8 >> 11;
   HEAP32[$1 + 64 >> 2] = $8 + $10 >> 11;
   $5 = (Math_imul($7, 2446) + $16 | 0) + $5 | 0;
   $7 = $15 - $18 | 0;
   HEAP32[$1 + 96 >> 2] = $5 + $7 >> 11;
   $5 = $7 - $5 >> 11;
   $7 = 32;
  }
  HEAP32[($7 << 2) + $1 >> 2] = $5;
  $2 = $2 + 2 | 0;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $5 = $6 >>> 0 > 1;
  $6 = $6 - 1 | 0;
  if ($5) {
   continue;
  }
  break;
 }
 $0 = $22 - 384 | 0;
 $7 = 0;
 $2 = $21;
 while (1) {
  $8 = HEAP32[$2 >> 2] + 16400 | 0;
  $1 = HEAP32[($7 << 2) + $3 >> 2] + $4 | 0;
  label$5 : {
   label$6 : {
    $5 = HEAP32[$2 + 8 >> 2];
    $6 = HEAP32[$2 + 4 >> 2];
    if ($5 | $6) {
     break label$6;
    }
    $5 = 0;
    if (HEAP32[$2 + 12 >> 2] | HEAP32[$2 + 16 >> 2] | (HEAP32[$2 + 20 >> 2] | HEAP32[$2 + 24 >> 2])) {
     break label$6;
    }
    if (HEAP32[$2 + 28 >> 2]) {
     break label$6;
    }
    $5 = __wasm_i64_mul(HEAPU8[($8 >>> 5 & 1023) + $0 | 0], 0, 16843009, 16843009);
    HEAP8[$1 | 0] = $5;
    HEAP8[$1 + 1 | 0] = $5 >>> 8;
    HEAP8[$1 + 2 | 0] = $5 >>> 16;
    HEAP8[$1 + 3 | 0] = $5 >>> 24;
    $5 = i64toi32_i32$HIGH_BITS;
    HEAP8[$1 + 4 | 0] = $5;
    HEAP8[$1 + 5 | 0] = $5 >>> 8;
    HEAP8[$1 + 6 | 0] = $5 >>> 16;
    HEAP8[$1 + 7 | 0] = $5 >>> 24;
    break label$5;
   }
   $10 = HEAP32[$2 + 28 >> 2];
   $14 = Math_imul($10 + $6 | 0, -7373);
   $9 = $14 + Math_imul($6, 12299) | 0;
   $18 = HEAP32[$2 + 20 >> 2];
   $6 = $18 + $6 | 0;
   $11 = HEAP32[$2 + 12 >> 2];
   $12 = $11 + $10 | 0;
   $15 = Math_imul($6 + $12 | 0, 9633);
   $6 = $15 + Math_imul($6, -3196) | 0;
   $9 = $9 + $6 | 0;
   $16 = HEAP32[$2 + 24 >> 2];
   $17 = Math_imul($16 + $5 | 0, 4433);
   $5 = $17 + Math_imul($5, 6270) | 0;
   $19 = HEAP32[$2 + 16 >> 2];
   $20 = $19 + $8 << 13;
   $13 = $5 + $20 | 0;
   HEAP8[$1 | 0] = HEAPU8[($9 + $13 >>> 18 & 1023) + $0 | 0];
   HEAP8[$1 + 7 | 0] = HEAPU8[($13 - $9 >>> 18 & 1023) + $0 | 0];
   $9 = Math_imul($11 + $18 | 0, -20995);
   $13 = $9 + Math_imul($11, 25172) | 0;
   $11 = Math_imul($12, -16069) + $15 | 0;
   $12 = $13 + $11 | 0;
   $8 = $8 - $19 << 13;
   $15 = Math_imul($16, -15137) + $17 | 0;
   $16 = $8 + $15 | 0;
   HEAP8[$1 + 1 | 0] = HEAPU8[($12 + $16 >>> 18 & 1023) + $0 | 0];
   HEAP8[$1 + 6 | 0] = HEAPU8[($16 - $12 >>> 18 & 1023) + $0 | 0];
   $6 = (Math_imul($18, 16819) + $9 | 0) + $6 | 0;
   $8 = $8 - $15 | 0;
   HEAP8[$1 + 2 | 0] = HEAPU8[($6 + $8 >>> 18 & 1023) + $0 | 0];
   HEAP8[$1 + 5 | 0] = HEAPU8[($8 - $6 >>> 18 & 1023) + $0 | 0];
   $5 = $20 - $5 | 0;
   $6 = (Math_imul($10, 2446) + $14 | 0) + $11 | 0;
   HEAP8[$1 + 3 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $0 | 0];
   HEAP8[$1 + 4 | 0] = HEAPU8[($5 - $6 >>> 18 & 1023) + $0 | 0];
  }
  $2 = $2 + 32 | 0;
  $7 = $7 + 1 | 0;
  if (($7 | 0) != 8) {
   continue;
  }
  break;
 }
 __stack_pointer = $21 + 256 | 0;
}
function jpeg_idct_8x16($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 $23 = __stack_pointer - 512 | 0;
 __stack_pointer = $23;
 $30 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $23;
 while (1) {
  $6 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $9 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $14 = Math_imul($6 + $9 | 0, 11086);
  $10 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $13 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $11 = $10 - $13 | 0;
  $15 = Math_imul($11, 11363);
  $16 = $15 + Math_imul($13, 20995) | 0;
  $8 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $5 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $20 = Math_imul($5, 10703);
  $21 = $8 + $20 | 0;
  $17 = $16 + $21 | 0;
  $7 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $25 = Math_imul($7 + $6 | 0, 8956);
  $12 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $26 = $12 + $6 | 0;
  $19 = Math_imul($26, 10217);
  $22 = $25 + ($19 + (Math_imul($6, -18730) + $14 | 0) | 0) | 0;
  HEAP32[$1 + 480 >> 2] = $17 - $22 >> 11;
  HEAP32[$1 >> 2] = $17 + $22 >> 11;
  $11 = Math_imul($11, 2260);
  $17 = $11 + Math_imul($10, 7373) | 0;
  $5 = Math_imul($5, 4433);
  $22 = $8 + $5 | 0;
  $27 = $17 + $22 | 0;
  $28 = $7 + $9 | 0;
  $29 = Math_imul($28, -5461);
  $24 = Math_imul($9, 589) + $14 | 0;
  $14 = Math_imul($9 + $12 | 0, 1136);
  $24 = $29 + ($24 + $14 | 0) | 0;
  HEAP32[$1 + 448 >> 2] = $27 - $24 >> 11;
  HEAP32[$1 + 32 >> 2] = $27 + $24 >> 11;
  $10 = Math_imul($10, -4926) + $15 | 0;
  $15 = $8 - $5 | 0;
  $5 = $10 + $15 | 0;
  $19 = (Math_imul($12, -9222) + $14 | 0) + $19 | 0;
  $14 = Math_imul($7 + $12 | 0, -11086);
  $19 = $19 + $14 | 0;
  HEAP32[$1 + 416 >> 2] = $5 - $19 >> 11;
  HEAP32[$1 + 64 >> 2] = $5 + $19 >> 11;
  $8 = $8 - $20 | 0;
  $13 = Math_imul($13, -4176) + $11 | 0;
  $11 = $8 + $13 | 0;
  $5 = ((Math_imul($7, 8728) + $29 | 0) + $25 | 0) + $14 | 0;
  HEAP32[$1 + 384 >> 2] = $11 - $5 >> 11;
  HEAP32[$1 + 96 >> 2] = $5 + $11 >> 11;
  $8 = $8 - $13 | 0;
  $11 = Math_imul($6 - $7 | 0, 7350);
  $13 = Math_imul($28, -10217);
  $5 = $11 + ($13 + Math_imul($7, 25733) | 0) | 0;
  $7 = Math_imul($7 - $12 | 0, 3363);
  $5 = $5 + $7 | 0;
  HEAP32[$1 + 352 >> 2] = $8 - $5 >> 11;
  HEAP32[$1 + 128 >> 2] = $8 + $5 >> 11;
  $8 = $15 - $10 | 0;
  $10 = Math_imul($12 - $9 | 0, 11529);
  $5 = $10 + Math_imul($12, -6278) | 0;
  $12 = Math_imul($26, 5461);
  $7 = ($5 + $12 | 0) + $7 | 0;
  HEAP32[$1 + 320 >> 2] = $8 - $7 >> 11;
  HEAP32[$1 + 160 >> 2] = $7 + $8 >> 11;
  $7 = $22 - $17 | 0;
  $8 = Math_imul($6 - $9 | 0, 3363);
  $9 = (($8 + Math_imul($9, 16154) | 0) + $10 | 0) + $13 | 0;
  HEAP32[$1 + 288 >> 2] = $7 - $9 >> 11;
  HEAP32[$1 + 192 >> 2] = $7 + $9 >> 11;
  $9 = $21 - $16 | 0;
  $6 = ((Math_imul($6, -15038) + $8 | 0) + $12 | 0) + $11 | 0;
  HEAP32[$1 + 256 >> 2] = $9 - $6 >> 11;
  HEAP32[$1 + 224 >> 2] = $6 + $9 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $18 = $18 + 1 | 0;
  if (($18 | 0) != 8) {
   continue;
  }
  break;
 }
 $2 = $30 - 384 | 0;
 $9 = 0;
 $1 = $23;
 while (1) {
  $6 = HEAP32[$1 + 4 >> 2];
  $12 = HEAP32[$1 + 28 >> 2];
  $8 = Math_imul($6 + $12 | 0, -7373);
  $0 = HEAP32[($9 << 2) + $3 >> 2] + $4 | 0;
  $5 = $8 + Math_imul($6, 12299) | 0;
  $7 = HEAP32[$1 + 20 >> 2];
  $10 = $7 + $6 | 0;
  $6 = HEAP32[$1 + 12 >> 2];
  $13 = $12 + $6 | 0;
  $18 = Math_imul($10 + $13 | 0, 9633);
  $10 = $18 + Math_imul($10, -3196) | 0;
  $11 = $5 + $10 | 0;
  $15 = HEAP32[$1 + 24 >> 2];
  $16 = HEAP32[$1 + 8 >> 2];
  $5 = Math_imul($15 + $16 | 0, 4433);
  $16 = $5 + Math_imul($16, 6270) | 0;
  $20 = HEAP32[$1 >> 2] + 16400 | 0;
  $21 = HEAP32[$1 + 16 >> 2];
  $17 = $20 + $21 << 13;
  $14 = $16 + $17 | 0;
  HEAP8[$0 | 0] = HEAPU8[($11 + $14 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 7 | 0] = HEAPU8[($14 - $11 >>> 18 & 1023) + $2 | 0];
  $11 = Math_imul($6 + $7 | 0, -20995);
  $14 = $11 + Math_imul($6, 25172) | 0;
  $6 = Math_imul($13, -16069) + $18 | 0;
  $13 = $14 + $6 | 0;
  $18 = Math_imul($15, -15137) + $5 | 0;
  $15 = $20 - $21 << 13;
  $5 = $18 + $15 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($13 + $5 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 6 | 0] = HEAPU8[($5 - $13 >>> 18 & 1023) + $2 | 0];
  $7 = (Math_imul($7, 16819) + $11 | 0) + $10 | 0;
  $10 = $15 - $18 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($7 + $10 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($10 - $7 >>> 18 & 1023) + $2 | 0];
  $6 = (Math_imul($12, 2446) + $8 | 0) + $6 | 0;
  $12 = $17 - $16 | 0;
  HEAP8[$0 + 3 | 0] = HEAPU8[($6 + $12 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($12 - $6 >>> 18 & 1023) + $2 | 0];
  $1 = $1 + 32 | 0;
  $9 = $9 + 1 | 0;
  if (($9 | 0) != 16) {
   continue;
  }
  break;
 }
 __stack_pointer = $23 + 512 | 0;
}
function jpeg_idct_11x11($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $23 = __stack_pointer - 352 | 0;
 __stack_pointer = $23;
 $17 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $23;
 while (1) {
  $9 = HEAP32[$0 + 224 >> 2];
  $14 = HEAP16[$2 + 112 >> 1];
  $7 = HEAP32[$0 + 96 >> 2];
  $8 = HEAP16[$2 + 48 >> 1];
  $12 = HEAP32[$0 + 160 >> 2];
  $15 = HEAP16[$2 + 80 >> 1];
  $10 = HEAP32[$0 + 32 >> 2];
  $6 = HEAP16[$2 + 16 >> 1];
  $18 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $5 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $16 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $21 = $5 + $16 | 0;
  $11 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $13 = $21 - $11 | 0;
  HEAP32[$1 + 160 >> 2] = $18 + Math_imul($13, -11585) >> 11;
  $7 = Math_imul($7, $8);
  $10 = Math_imul($10, $6);
  $6 = $7 + $10 | 0;
  $19 = Math_imul($6, 7274);
  $8 = Math_imul($12, $15);
  $12 = Math_imul($10 + $8 | 0, 5492);
  $13 = Math_imul($13, 11116) + $18 | 0;
  $18 = $13 + Math_imul($11 - $5 | 0, 20862) | 0;
  $22 = $18 + Math_imul($5, 17333) | 0;
  $15 = $12 + (Math_imul($10, -7562) + $19 | 0) | 0;
  $9 = Math_imul($9, $14);
  $14 = Math_imul($9 + ($8 + $6 | 0) | 0, 3264);
  $10 = $14 + Math_imul($9 + $10 | 0, 3e3) | 0;
  $15 = $15 + $10 | 0;
  HEAP32[$1 + 320 >> 2] = $22 - $15 >> 11;
  HEAP32[$1 >> 2] = $15 + $22 >> 11;
  $15 = Math_imul($21, -9467) + $13 | 0;
  $5 = $15 + Math_imul($5, -6461) | 0;
  $6 = Math_imul($8, -9766) + $12 | 0;
  $12 = Math_imul($7 + $8 | 0, -9527) + $14 | 0;
  $6 = $6 + $12 | 0;
  HEAP32[$1 + 256 >> 2] = $5 - $6 >> 11;
  HEAP32[$1 + 64 >> 2] = $5 + $6 >> 11;
  $5 = Math_imul($11 - $16 | 0, 3529);
  $13 = ($13 + $5 | 0) + Math_imul($16, -12399) | 0;
  $6 = Math_imul($9 + $7 | 0, -14731);
  $10 = ($6 + Math_imul($9, 17223) | 0) + $10 | 0;
  HEAP32[$1 + 224 >> 2] = $13 - $10 >> 11;
  HEAP32[$1 + 96 >> 2] = $10 + $13 >> 11;
  $16 = (Math_imul($11, 15929) + Math_imul($16, -11395) | 0) + $15 | 0;
  $8 = ((Math_imul($8, 8203) + Math_imul($7, -12019) | 0) + Math_imul($9, -13802) | 0) + $14 | 0;
  HEAP32[$1 + 192 >> 2] = $16 - $8 >> 11;
  HEAP32[$1 + 128 >> 2] = $8 + $16 >> 11;
  $11 = (Math_imul($11, -14924) + $18 | 0) + $5 | 0;
  $7 = ((Math_imul($7, 16984) + $19 | 0) + $6 | 0) + $12 | 0;
  HEAP32[$1 + 288 >> 2] = $11 - $7 >> 11;
  HEAP32[$1 + 32 >> 2] = $7 + $11 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $20 = $20 + 1 | 0;
  if (($20 | 0) != 8) {
   continue;
  }
  break;
 }
 $1 = $17 - 384 | 0;
 $10 = 0;
 $0 = $23;
 while (1) {
  $9 = HEAP32[$0 + 4 >> 2];
  $11 = HEAP32[$0 + 12 >> 2];
  $8 = $9 + $11 | 0;
  $20 = Math_imul($8, 7274);
  $7 = HEAP32[$0 + 20 >> 2];
  $12 = Math_imul($7 + $9 | 0, 5492);
  $2 = HEAP32[($10 << 2) + $3 >> 2] + $4 | 0;
  $5 = $7 + $8 | 0;
  $8 = HEAP32[$0 + 28 >> 2];
  $13 = Math_imul($5 + $8 | 0, 3264);
  $15 = $13 + Math_imul($9 + $8 | 0, 3e3) | 0;
  $6 = $15 + ((Math_imul($9, -7562) + $20 | 0) + $12 | 0) | 0;
  $22 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $5 = HEAP32[$0 + 24 >> 2];
  $16 = HEAP32[$0 + 8 >> 2];
  $21 = $5 + $16 | 0;
  $9 = HEAP32[$0 + 16 >> 2];
  $18 = $21 - $9 | 0;
  $14 = $22 + Math_imul($18, 11116) | 0;
  $19 = $14 + Math_imul($9 - $5 | 0, 20862) | 0;
  $17 = $19 + Math_imul($5, 17333) | 0;
  HEAP8[$2 | 0] = HEAPU8[($6 + $17 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 10 | 0] = HEAPU8[($17 - $6 >>> 18 & 1023) + $1 | 0];
  $6 = Math_imul($7 + $11 | 0, -9527) + $13 | 0;
  $17 = Math_imul($11, 16984) + $20 | 0;
  $20 = Math_imul($8 + $11 | 0, -14731);
  $17 = $6 + ($17 + $20 | 0) | 0;
  $24 = Math_imul($9, -14924) + $19 | 0;
  $19 = Math_imul($9 - $16 | 0, 3529);
  $24 = $24 + $19 | 0;
  HEAP8[$2 + 1 | 0] = HEAPU8[($17 + $24 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 9 | 0] = HEAPU8[($24 - $17 >>> 18 & 1023) + $1 | 0];
  $12 = (Math_imul($7, -9766) + $12 | 0) + $6 | 0;
  $6 = Math_imul($21, -9467) + $14 | 0;
  $5 = $6 + Math_imul($5, -6461) | 0;
  HEAP8[$2 + 2 | 0] = HEAPU8[($12 + $5 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[($5 - $12 >>> 18 & 1023) + $1 | 0];
  $5 = (Math_imul($8, 17223) + $20 | 0) + $15 | 0;
  $14 = ($14 + $19 | 0) + Math_imul($16, -12399) | 0;
  HEAP8[$2 + 3 | 0] = HEAPU8[($5 + $14 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 7 | 0] = HEAPU8[($14 - $5 >>> 18 & 1023) + $1 | 0];
  $11 = ((Math_imul($7, 8203) + Math_imul($11, -12019) | 0) + Math_imul($8, -13802) | 0) + $13 | 0;
  $7 = (Math_imul($9, 15929) + Math_imul($16, -11395) | 0) + $6 | 0;
  HEAP8[$2 + 4 | 0] = HEAPU8[($11 + $7 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 6 | 0] = HEAPU8[($7 - $11 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 5 | 0] = HEAPU8[(Math_imul($18, -11585) + $22 >>> 18 & 1023) + $1 | 0];
  $0 = $0 + 32 | 0;
  $10 = $10 + 1 | 0;
  if (($10 | 0) != 11) {
   continue;
  }
  break;
 }
 __stack_pointer = $23 + 352 | 0;
}



function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBaseUnresolvedName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 48 >>> 0 <= 9) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   break label$1;
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 40 | 0, 26836);
  $4 = HEAP32[$5 >> 2];
  $3 = HEAP32[$5 + 4 >> 2];
  HEAP32[$1 + 16 >> 2] = $4;
  HEAP32[$1 + 20 >> 2] = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDestructorName_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   break label$1;
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 32 | 0, 26839);
  $3 = HEAP32[$5 >> 2];
  $4 = HEAP32[$5 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0);
  $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseOperatorName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($4, 0);
  HEAP32[$1 + 28 >> 2] = $3;
  if (!$3) {
   break label$1;
  }
  $2 = $3;
  if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($4, 0);
  HEAP32[$1 + 24 >> 2] = $2;
  if ($2) {
   $6 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1 + 28 | 0, $1 + 24 | 0);
  }
  $2 = $6;
 }
 __stack_pointer = $1 + 48 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFunctionParam_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 40 | 0, 25596);
 $3 = HEAP32[$2 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = $3;
 HEAP32[$1 + 20 >> 2] = $4;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1 + 32 | 0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 24 | 0, 25599);
  $4 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = $4;
  HEAP32[$1 + 12 >> 2] = $3;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
  if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($1 + 32 | 0)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 112)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0);
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 32 | 0, $0, 0);
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   break label$1;
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1 + 32 | 0);
 }
 __stack_pointer = $1 + 48 | 0;
 return $5;
}
function finish_pass1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $16 = HEAP32[$0 + 484 >> 2];
 HEAP32[$0 + 136 >> 2] = HEAP32[$16 + 16 >> 2];
 $6 = HEAP32[$16 + 20 >> 2];
 $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, $6 << 5) | 0;
 HEAP32[$7 + 16 >> 2] = 0;
 HEAP32[$7 + 20 >> 2] = 31;
 HEAP32[$7 + 8 >> 2] = 0;
 HEAP32[$7 + 12 >> 2] = 63;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 31;
 update_box($0, $7);
 $8 = 1;
 label$1 : {
  label$2 : {
   if (($6 | 0) < 2) {
    break label$2;
   }
   while (1) {
    $3 = 0;
    $5 = 0;
    $9 = 0;
    $4 = 0;
    $10 = 0;
    $1 = $7;
    $2 = $1;
    label$4 : {
     if ($8 << 1 <= ($6 | 0)) {
      while (1) {
       $2 = HEAP32[$1 + 28 >> 2];
       if (($5 | 0) < ($2 | 0)) {
        $4 = HEAP32[$1 + 24 >> 2] > 0;
        $3 = $4 ? $1 : $3;
        $5 = $4 ? $2 : $5;
       }
       $1 = $1 + 32 | 0;
       $9 = $9 + 1 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue;
       }
       break label$4;
      }
     }
     while (1) {
      $1 = HEAP32[$2 + 24 >> 2];
      $5 = ($4 | 0) < ($1 | 0);
      $3 = $5 ? $2 : $3;
      $4 = $5 ? $1 : $4;
      $2 = $2 + 32 | 0;
      $10 = $10 + 1 | 0;
      if (($10 | 0) != ($8 | 0)) {
       continue;
      }
      break;
     }
    }
    if (!$3) {
     break label$2;
    }
    $1 = ($8 << 5) + $7 | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$1 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP32[$1 + 20 >> 2] = HEAP32[$3 + 20 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$1 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP32[$1 + 16 >> 2] = HEAP32[$3 + 16 >> 2];
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         $5 = HEAP32[$3 + 4 >> 2];
         $9 = HEAP32[$3 >> 2];
         $2 = $5 - $9 << 4;
         $10 = HEAP32[$3 + 12 >> 2];
         $14 = HEAP32[$3 + 8 >> 2];
         $4 = Math_imul($10 - $14 | 0, 12);
         $15 = HEAP32[$3 + 20 >> 2];
         $11 = HEAP32[$3 + 16 >> 2];
         switch (($15 - $11 << 3 > ((($2 | 0) > ($4 | 0) ? $2 : $4) | 0) ? 2 : ($2 | 0) <= ($4 | 0)) | 0) {
         case 2:
          break label$11;
         case 1:
          break label$12;
         case 0:
          break label$13;
         default:
          break label$9;
         }
        }
        $2 = ($5 + $9 | 0) / 2 | 0;
        HEAP32[$3 + 4 >> 2] = $2;
        $4 = $1;
        break label$10;
       }
       $2 = ($10 + $14 | 0) / 2 | 0;
       HEAP32[$3 + 12 >> 2] = $2;
       $4 = $1 + 8 | 0;
       break label$10;
      }
      $2 = ($11 + $15 | 0) / 2 | 0;
      HEAP32[$3 + 20 >> 2] = $2;
      $4 = $1 + 16 | 0;
     }
     HEAP32[$4 >> 2] = $2 + 1;
    }
    update_box($0, $3);
    update_box($0, $1);
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($6 | 0)) {
     continue;
    }
    break;
   }
   $8 = $6;
   if (($6 | 0) < 1) {
    break label$1;
   }
  }
  while (1) {
   $4 = 0;
   $5 = 0;
   $9 = 0;
   $10 = 0;
   $1 = ($12 << 5) + $7 | 0;
   $13 = HEAP32[$1 >> 2];
   $18 = HEAP32[$1 + 4 >> 2];
   if (($13 | 0) <= ($18 | 0)) {
    $6 = HEAP32[$1 + 20 >> 2];
    $17 = HEAP32[$1 + 16 >> 2];
    $19 = HEAP32[$1 + 12 >> 2];
    $20 = HEAP32[$1 + 8 >> 2];
    $21 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
    while (1) {
     if (($19 | 0) >= ($20 | 0)) {
      $15 = $13 << 3 | 4;
      $22 = HEAP32[($13 << 2) + $21 >> 2];
      $11 = $20;
      while (1) {
       if (($6 | 0) >= ($17 | 0)) {
        $3 = (($11 << 6) + $22 | 0) + ($17 << 1) | 0;
        $14 = $11 << 2 | 2;
        $1 = $17;
        while (1) {
         $2 = HEAPU16[$3 >> 1];
         if ($2) {
          $9 = Math_imul($2, $14) + $9 | 0;
          $5 = Math_imul($2, $15) + $5 | 0;
          $10 = Math_imul($1 << 3 | 4, $2) + $10 | 0;
          $4 = $2 + $4 | 0;
         }
         $3 = $3 + 2 | 0;
         $2 = ($1 | 0) != ($6 | 0);
         $1 = $1 + 1 | 0;
         if ($2) {
          continue;
         }
         break;
        }
       }
       $1 = ($11 | 0) != ($19 | 0);
       $11 = $11 + 1 | 0;
       if ($1) {
        continue;
       }
       break;
      }
     }
     $1 = ($13 | 0) != ($18 | 0);
     $13 = $13 + 1 | 0;
     if ($1) {
      continue;
     }
     break;
    }
   }
   $1 = $4 >> 1;
   HEAP8[HEAP32[HEAP32[$0 + 136 >> 2] >> 2] + $12 | 0] = ($5 + $1 | 0) / ($4 | 0);
   HEAP8[HEAP32[HEAP32[$0 + 136 >> 2] + 4 >> 2] + $12 | 0] = ($1 + $9 | 0) / ($4 | 0);
   HEAP8[HEAP32[HEAP32[$0 + 136 >> 2] + 8 >> 2] + $12 | 0] = ($1 + $10 | 0) / ($4 | 0);
   $12 = $12 + 1 | 0;
   if (($12 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
  $6 = $8;
 }
 HEAP32[$0 + 132 >> 2] = $6;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$1 + 24 >> 2] = $6;
 HEAP32[$1 + 20 >> 2] = 98;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
 HEAP32[$16 + 28 >> 2] = 1;
}
function jpeg_idct_ifast($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 $20 = __stack_pointer - 256 | 0;
 __stack_pointer = $20;
 $21 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $20;
 $8 = 8;
 while (1) {
  label$2 : {
   label$3 : {
    $5 = HEAP16[$2 + 16 >> 1];
    $6 = HEAPU16[$2 + 32 >> 1];
    if (($5 | $6) & 65535) {
     break label$3;
    }
    $6 = 0;
    if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
     break label$3;
    }
    if (HEAPU16[$2 + 112 >> 1]) {
     break label$3;
    }
    $6 = Math_imul(HEAP32[$0 >> 2], HEAP16[$2 >> 1]);
    HEAP32[$1 + 192 >> 2] = $6;
    HEAP32[$1 + 160 >> 2] = $6;
    HEAP32[$1 + 128 >> 2] = $6;
    HEAP32[$1 + 96 >> 2] = $6;
    HEAP32[$1 + 64 >> 2] = $6;
    HEAP32[$1 + 32 >> 2] = $6;
    HEAP32[$1 >> 2] = $6;
    $5 = 56;
    break label$2;
   }
   $7 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $9 = Math_imul(HEAP32[$0 + 64 >> 2], $6 << 16 >> 16);
   $6 = $7 + $9 | 0;
   $10 = Math_imul(HEAP32[$0 >> 2], HEAP16[$2 >> 1]);
   $12 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
   $14 = $10 + $12 | 0;
   $11 = $6 + $14 | 0;
   $13 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $15 = Math_imul(HEAP32[$0 + 32 >> 2], $5);
   $16 = $13 + $15 | 0;
   $17 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $18 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $19 = $17 + $18 | 0;
   $5 = $16 + $19 | 0;
   HEAP32[$1 + 224 >> 2] = $11 - $5;
   HEAP32[$1 >> 2] = $5 + $11;
   $7 = (Math_imul($9 - $7 | 0, 362) >> 8) - $6 | 0;
   $9 = $10 - $12 | 0;
   $12 = $7 + $9 | 0;
   $10 = $15 - $13 | 0;
   $11 = $17 - $18 | 0;
   $13 = Math_imul($10 + $11 | 0, 473) >> 8;
   $5 = ($13 - (Math_imul($11, 669) >> 8) | 0) - $5 | 0;
   HEAP32[$1 + 192 >> 2] = $12 - $5;
   HEAP32[$1 + 32 >> 2] = $5 + $12;
   $7 = $9 - $7 | 0;
   $5 = (Math_imul($16 - $19 | 0, 362) >> 8) - $5 | 0;
   HEAP32[$1 + 160 >> 2] = $7 - $5;
   HEAP32[$1 + 64 >> 2] = $5 + $7;
   $5 = ($13 - (Math_imul($10, 277) >> 8) | 0) - $5 | 0;
   $6 = $14 - $6 | 0;
   HEAP32[$1 + 96 >> 2] = $5 + $6;
   $6 = $6 - $5 | 0;
   $5 = 32;
  }
  HEAP32[($5 << 2) + $1 >> 2] = $6;
  $2 = $2 + 2 | 0;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $6 = $8 >>> 0 > 1;
  $8 = $8 - 1 | 0;
  if ($6) {
   continue;
  }
  break;
 }
 $0 = $21 - 384 | 0;
 $6 = 0;
 $2 = $20;
 while (1) {
  $5 = HEAP32[$2 >> 2] + 16400 | 0;
  $1 = HEAP32[($6 << 2) + $3 >> 2] + $4 | 0;
  label$5 : {
   label$6 : {
    $8 = HEAP32[$2 + 8 >> 2];
    $7 = HEAP32[$2 + 4 >> 2];
    if ($8 | $7) {
     break label$6;
    }
    $8 = 0;
    if (HEAP32[$2 + 12 >> 2] | HEAP32[$2 + 16 >> 2] | (HEAP32[$2 + 20 >> 2] | HEAP32[$2 + 24 >> 2])) {
     break label$6;
    }
    if (HEAP32[$2 + 28 >> 2]) {
     break label$6;
    }
    $5 = __wasm_i64_mul(HEAPU8[($5 >>> 5 & 1023) + $0 | 0], 0, 16843009, 16843009);
    HEAP8[$1 | 0] = $5;
    HEAP8[$1 + 1 | 0] = $5 >>> 8;
    HEAP8[$1 + 2 | 0] = $5 >>> 16;
    HEAP8[$1 + 3 | 0] = $5 >>> 24;
    $5 = i64toi32_i32$HIGH_BITS;
    HEAP8[$1 + 4 | 0] = $5;
    HEAP8[$1 + 5 | 0] = $5 >>> 8;
    HEAP8[$1 + 6 | 0] = $5 >>> 16;
    HEAP8[$1 + 7 | 0] = $5 >>> 24;
    break label$5;
   }
   $10 = HEAP32[$2 + 28 >> 2];
   $14 = $10 + $7 | 0;
   $11 = HEAP32[$2 + 12 >> 2];
   $13 = HEAP32[$2 + 20 >> 2];
   $15 = $11 + $13 | 0;
   $9 = $14 + $15 | 0;
   $16 = HEAP32[$2 + 24 >> 2];
   $12 = $16 + $8 | 0;
   $17 = HEAP32[$2 + 16 >> 2];
   $18 = $17 + $5 | 0;
   $19 = $12 + $18 | 0;
   HEAP8[$1 | 0] = HEAPU8[($9 + $19 >>> 5 & 1023) + $0 | 0];
   HEAP8[$1 + 7 | 0] = HEAPU8[($19 - $9 >>> 5 & 1023) + $0 | 0];
   $10 = $7 - $10 | 0;
   $7 = $13 - $11 | 0;
   $11 = Math_imul($10 + $7 | 0, 473) >> 8;
   $7 = ($11 - (Math_imul($7, 669) >> 8) | 0) - $9 | 0;
   $5 = $5 - $17 | 0;
   $9 = (Math_imul($8 - $16 | 0, 362) >> 8) - $12 | 0;
   $8 = $5 + $9 | 0;
   HEAP8[$1 + 1 | 0] = HEAPU8[($7 + $8 >>> 5 & 1023) + $0 | 0];
   HEAP8[$1 + 6 | 0] = HEAPU8[($8 - $7 >>> 5 & 1023) + $0 | 0];
   $5 = $5 - $9 | 0;
   $8 = (Math_imul($14 - $15 | 0, 362) >> 8) - $7 | 0;
   HEAP8[$1 + 2 | 0] = HEAPU8[($5 + $8 >>> 5 & 1023) + $0 | 0];
   HEAP8[$1 + 5 | 0] = HEAPU8[($5 - $8 >>> 5 & 1023) + $0 | 0];
   $5 = $18 - $12 | 0;
   $8 = ($11 - (Math_imul($10, 277) >> 8) | 0) - $8 | 0;
   HEAP8[$1 + 3 | 0] = HEAPU8[($5 + $8 >>> 5 & 1023) + $0 | 0];
   HEAP8[$1 + 4 | 0] = HEAPU8[($5 - $8 >>> 5 & 1023) + $0 | 0];
  }
  $2 = $2 + 32 | 0;
  $6 = $6 + 1 | 0;
  if (($6 | 0) != 8) {
   continue;
  }
  break;
 }
 __stack_pointer = $20 + 256 | 0;
}
function jpeg_idct_12x12($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $22 = __stack_pointer - 384 | 0;
 __stack_pointer = $22;
 $20 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $22;
 while (1) {
  $18 = HEAP32[$0 + 128 >> 2];
  $16 = HEAP16[$2 + 64 >> 1];
  $14 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $15 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $5 = $14 - $15 << 13;
  $8 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $7 = $5 + $8 | 0;
  $6 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $10 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $11 = $6 - $10 | 0;
  $12 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $9 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $19 = $12 - $9 | 0;
  $17 = Math_imul($11 + $19 | 0, 4433);
  $11 = $17 + Math_imul($11, 6270) | 0;
  HEAP32[$1 + 320 >> 2] = $7 - $11 >> 11;
  HEAP32[$1 + 32 >> 2] = $7 + $11 >> 11;
  $5 = $8 - $5 | 0;
  $7 = Math_imul($19, -15137) + $17 | 0;
  HEAP32[$1 + 224 >> 2] = $5 - $7 >> 11;
  HEAP32[$1 + 128 >> 2] = $5 + $7 >> 11;
  $16 = Math_imul(Math_imul($18, $16), 10033);
  $5 = $16 + $8 | 0;
  $15 = $15 << 13;
  $7 = $15 + Math_imul($14, 11190) | 0;
  $11 = $5 - $7 | 0;
  $17 = $6 + $9 | 0;
  $18 = Math_imul($17 + $10 | 0, 7053);
  $19 = Math_imul($12, -4433);
  $21 = $18 + (($19 + Math_imul($6, -5540) | 0) + Math_imul($10, -16244) | 0) | 0;
  HEAP32[$1 + 192 >> 2] = $11 - $21 >> 11;
  HEAP32[$1 + 160 >> 2] = $11 + $21 >> 11;
  $12 = Math_imul($12, 10703);
  $5 = $5 + $7 | 0;
  $7 = $12 + Math_imul($6, 2295) | 0;
  $6 = Math_imul($17, 2139) + $18 | 0;
  $7 = $7 + $6 | 0;
  HEAP32[$1 + 352 >> 2] = $5 - $7 >> 11;
  HEAP32[$1 >> 2] = $5 + $7 >> 11;
  $8 = $8 - $16 | 0;
  $14 = Math_imul($14, 2998) - $15 | 0;
  $16 = $8 + $14 | 0;
  $5 = Math_imul($9, -12112) + $19 | 0;
  $9 = Math_imul($10 + $9 | 0, -8565);
  $6 = ($5 + $9 | 0) + $6 | 0;
  HEAP32[$1 + 288 >> 2] = $16 - $6 >> 11;
  HEAP32[$1 + 64 >> 2] = $6 + $16 >> 11;
  $8 = $8 - $14 | 0;
  $10 = ((Math_imul($10, 12998) - $12 | 0) + $18 | 0) + $9 | 0;
  HEAP32[$1 + 256 >> 2] = $8 - $10 >> 11;
  HEAP32[$1 + 96 >> 2] = $10 + $8 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $13 = $13 + 1 | 0;
  if (($13 | 0) != 8) {
   continue;
  }
  break;
 }
 $1 = $20 - 384 | 0;
 $14 = 0;
 $0 = $22;
 while (1) {
  $2 = HEAP32[($14 << 2) + $3 >> 2] + $4 | 0;
  $10 = HEAP32[$0 + 28 >> 2];
  $6 = HEAP32[$0 + 20 >> 2];
  $8 = HEAP32[$0 + 4 >> 2];
  $9 = $6 + $8 | 0;
  $18 = Math_imul($10 + $9 | 0, 7053);
  $15 = $18 + Math_imul($9, 2139) | 0;
  $12 = HEAP32[$0 + 12 >> 2];
  $16 = Math_imul($12, 10703);
  $5 = $15 + ($16 + Math_imul($8, 2295) | 0) | 0;
  $7 = HEAP32[$0 + 24 >> 2];
  $11 = $7 << 13;
  $13 = HEAP32[$0 + 8 >> 2];
  $19 = $11 + Math_imul($13, 11190) | 0;
  $9 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $17 = Math_imul(HEAP32[$0 + 16 >> 2], 10033);
  $21 = $9 + $17 | 0;
  $20 = $19 + $21 | 0;
  HEAP8[$2 | 0] = HEAPU8[($5 + $20 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 11 | 0] = HEAPU8[($20 - $5 >>> 18 & 1023) + $1 | 0];
  $5 = $8 - $10 | 0;
  $20 = $12 - $6 | 0;
  $23 = Math_imul($5 + $20 | 0, 4433);
  $5 = $23 + Math_imul($5, 6270) | 0;
  $7 = $13 - $7 << 13;
  $24 = $7 + $9 | 0;
  HEAP8[$2 + 1 | 0] = HEAPU8[($5 + $24 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 10 | 0] = HEAPU8[($24 - $5 >>> 18 & 1023) + $1 | 0];
  $12 = Math_imul($12, -4433);
  $5 = $9 - $17 | 0;
  $13 = Math_imul($13, 2998) - $11 | 0;
  $11 = $5 + $13 | 0;
  $17 = $12 + Math_imul($6, -12112) | 0;
  $6 = Math_imul($6 + $10 | 0, -8565);
  $15 = ($17 + $6 | 0) + $15 | 0;
  HEAP8[$2 + 2 | 0] = HEAPU8[($11 + $15 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 9 | 0] = HEAPU8[($11 - $15 >>> 18 & 1023) + $1 | 0];
  $6 = ((Math_imul($10, 12998) - $16 | 0) + $18 | 0) + $6 | 0;
  $13 = $5 - $13 | 0;
  HEAP8[$2 + 3 | 0] = HEAPU8[($6 + $13 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[($13 - $6 >>> 18 & 1023) + $1 | 0];
  $6 = Math_imul($20, -15137) + $23 | 0;
  $9 = $9 - $7 | 0;
  HEAP8[$2 + 4 | 0] = HEAPU8[($6 + $9 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 7 | 0] = HEAPU8[($9 - $6 >>> 18 & 1023) + $1 | 0];
  $10 = ((Math_imul($8, -5540) + $12 | 0) + Math_imul($10, -16244) | 0) + $18 | 0;
  $8 = $21 - $19 | 0;
  HEAP8[$2 + 5 | 0] = HEAPU8[($10 + $8 >>> 18 & 1023) + $1 | 0];
  HEAP8[$2 + 6 | 0] = HEAPU8[($8 - $10 >>> 18 & 1023) + $1 | 0];
  $0 = $0 + 32 | 0;
  $14 = $14 + 1 | 0;
  if (($14 | 0) != 12) {
   continue;
  }
  break;
 }
 __stack_pointer = $22 + 384 | 0;
}
function jpeg_core_output_dimensions($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[$0 + 428 >> 2];
 $3 = Math_imul($1, HEAP32[$0 + 48 >> 2]);
 $4 = HEAP32[$0 + 52 >> 2];
 label$1 : {
  if ($3 >>> 0 <= $4 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2], $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $2 = 1;
   $1 = HEAP32[$0 + 32 >> 2];
   break label$1;
  }
  if ($4 << 1 >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2] << 1, $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $2 = 2;
   $1 = HEAP32[$0 + 32 >> 2] << 1;
   break label$1;
  }
  $2 = 3;
  if (Math_imul($4, 3) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 3), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 3);
   break label$1;
  }
  if ($4 << 2 >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2] << 2, $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $2 = 4;
   $1 = HEAP32[$0 + 32 >> 2] << 2;
   break label$1;
  }
  $2 = 5;
  if (Math_imul($4, 5) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 5), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 5);
   break label$1;
  }
  $2 = 6;
  if (Math_imul($4, 6) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 6), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 6);
   break label$1;
  }
  $2 = 7;
  if (Math_imul($4, 7) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 7), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 7);
   break label$1;
  }
  if ($4 << 3 >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2] << 3, $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $2 = 8;
   $1 = HEAP32[$0 + 32 >> 2] << 3;
   break label$1;
  }
  $2 = 9;
  if (Math_imul($4, 9) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 9), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 9);
   break label$1;
  }
  $2 = 10;
  if (Math_imul($4, 10) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 10), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 10);
   break label$1;
  }
  $2 = 11;
  if (Math_imul($4, 11) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 11), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 11);
   break label$1;
  }
  $2 = 12;
  if (Math_imul($4, 12) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 12), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 12);
   break label$1;
  }
  $2 = 13;
  if (Math_imul($4, 13) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 13), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 13);
   break label$1;
  }
  $2 = 14;
  if (Math_imul($4, 14) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$0 + 28 >> 2], 14), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 14);
   break label$1;
  }
  $2 = 15;
  $5 = HEAP32[$0 + 28 >> 2];
  if (Math_imul($4, 15) >>> 0 >= $3 >>> 0) {
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(Math_imul($5, 15), $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
   $1 = Math_imul(HEAP32[$0 + 32 >> 2], 15);
   break label$1;
  }
  wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up($5 << 4, $1), HEAP32[wasm2js_i32$0 + 112 >> 2] = wasm2js_i32$1;
  $2 = 16;
  $1 = HEAP32[$0 + 32 >> 2] << 4;
 }
 $1 = jdiv_round_up($1, HEAP32[$0 + 428 >> 2]);
 HEAP32[$0 + 328 >> 2] = $2;
 HEAP32[$0 + 324 >> 2] = $2;
 HEAP32[$0 + 116 >> 2] = $1;
 $3 = HEAP32[$0 + 36 >> 2];
 if (($3 | 0) >= 1) {
  $0 = HEAP32[$0 + 216 >> 2];
  $1 = 0;
  while (1) {
   HEAP32[$0 + 40 >> 2] = $2;
   HEAP32[$0 + 36 >> 2] = $2;
   $0 = $0 + 88 | 0;
   $1 = $1 + 1 | 0;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
}
function std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___find_int__28int_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $4 = std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true___operator_28_29_28int_20const__29_20const(std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___hash_function_28_29($0), $1);
 label$1 : {
  label$2 : {
   $5 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___bucket_count_28_29_20const($0);
   if (!$5) {
    break label$2;
   }
   $6 = std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($4, $5);
   $2 = HEAP32[std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $6) >> 2];
   if (!$2) {
    break label$2;
   }
   while (1) {
    $2 = HEAP32[$2 >> 2];
    if (!$2) {
     break label$2;
    }
    if ((std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const($2) | 0) != ($4 | 0)) {
     if ((std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29(std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const($2), $5) | 0) != ($6 | 0)) {
      break label$2;
     }
    }
    if ((std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const($2) | 0) != ($4 | 0)) {
     continue;
    }
    if (!std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arIset__20const__2c_20int_20const__29_20const(std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___key_eq_28_29($0), std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________upcast_28_29($2) + 8 | 0, $1)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_iterator_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($3 + 8 | 0, $2) >> 2];
   break label$1;
  }
  $2 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___end_28_29($0);
  HEAP32[$3 + 8 >> 2] = $2;
 }
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseArrayType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 65)) {
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 48 >>> 0 <= 9) {
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1, $0, 0);
    wasm2js_i32$0 = $1, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__StringView___29($0, $1), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
     break label$2;
    }
    break label$1;
   }
   if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$2;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   if (!$3) {
    break label$1;
   }
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = $3;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
  HEAP32[$1 >> 2] = $2;
  if (!$2) {
   $2 = 0;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ArrayType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $1 + 12 | 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseClassEnumType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28_29($1 + 56 | 0);
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 48 | 0, 32728);
 $3 = HEAP32[$2 >> 2];
 $2 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = $3;
 HEAP32[$1 + 20 >> 2] = $2;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 16 | 0)) {
   $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 40 | 0, 32731);
   $3 = HEAP32[$1 + 44 >> 2];
   $2 = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 56 >> 2] = $2;
   HEAP32[$1 + 60 >> 2] = $3;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 32 | 0, 32738);
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $2;
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0)) {
   $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 40 | 0, 32741);
   $3 = HEAP32[$1 + 44 >> 2];
   $2 = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 56 >> 2] = $2;
   HEAP32[$1 + 60 >> 2] = $3;
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 24 | 0, 32747);
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $2;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 40 | 0, 32750);
  $3 = HEAP32[$1 + 44 >> 2];
  $2 = HEAP32[$1 + 40 >> 2];
  HEAP32[$1 + 56 >> 2] = $2;
  HEAP32[$1 + 60 >> 2] = $3;
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), 0);
 HEAP32[$1 + 40 >> 2] = $3;
 label$4 : {
  if (!$3) {
   break label$4;
  }
  $5 = $3;
  if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($4)) {
   break label$4;
  }
  $5 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $4, $1 + 40 | 0);
 }
 __stack_pointer = $1 - -64 | 0;
 return $5;
}
function jpeg_idct_14x7($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $20 = __stack_pointer - 224 | 0;
 __stack_pointer = $20;
 $16 = HEAP32[$0 + 336 >> 2];
 $1 = HEAP32[$1 + 84 >> 2];
 $0 = $20;
 while (1) {
  $7 = HEAP32[$1 + 160 >> 2];
  $9 = HEAP16[$2 + 80 >> 1];
  $10 = HEAP32[$1 + 32 >> 2];
  $13 = HEAP16[$2 + 16 >> 1];
  $8 = HEAP32[$1 + 96 >> 2];
  $21 = HEAP16[$2 + 48 >> 1];
  $14 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $6 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $5 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $12 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $11 = $5 + $12 | 0;
  HEAP32[$0 + 96 >> 2] = $14 + Math_imul($6 - $11 | 0, 11585) >> 11;
  $11 = Math_imul($11, 10438) + $14 | 0;
  $18 = Math_imul($6 - $5 | 0, 7223);
  $15 = $11 + ($18 + Math_imul($5, -637) | 0) | 0;
  $5 = Math_imul($7, $9);
  $7 = Math_imul($10, $13);
  $10 = Math_imul($5 + $7 | 0, 5027);
  $9 = Math_imul($8, $21);
  $13 = Math_imul($9 + $7 | 0, 7663);
  $7 = Math_imul($7 - $9 | 0, 1395);
  $8 = $10 + ($13 - $7 | 0) | 0;
  HEAP32[$0 + 192 >> 2] = $15 - $8 >> 11;
  HEAP32[$0 >> 2] = $8 + $15 >> 11;
  $8 = Math_imul($12 - $6 | 0, 2578);
  $12 = ($8 + Math_imul($12, -20239) | 0) + $11 | 0;
  $10 = Math_imul($5, 15326) + $10 | 0;
  $5 = Math_imul($5 + $9 | 0, -11295);
  $9 = $10 + $5 | 0;
  HEAP32[$0 + 128 >> 2] = $12 - $9 >> 11;
  HEAP32[$0 + 64 >> 2] = $9 + $12 >> 11;
  $6 = ((Math_imul($6, -15083) + $14 | 0) + $8 | 0) + $18 | 0;
  $5 = ($7 + $13 | 0) + $5 | 0;
  HEAP32[$0 + 160 >> 2] = $6 - $5 >> 11;
  HEAP32[$0 + 32 >> 2] = $5 + $6 >> 11;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $2 = $2 + 2 | 0;
  $17 = $17 + 1 | 0;
  if (($17 | 0) != 8) {
   continue;
  }
  break;
 }
 $2 = $16 - 384 | 0;
 $17 = 0;
 $0 = $20;
 while (1) {
  $6 = HEAP32[$0 + 12 >> 2];
  $12 = HEAP32[$0 + 4 >> 2];
  $8 = Math_imul($6 + $12 | 0, 10935);
  $1 = HEAP32[($17 << 2) + $3 >> 2] + $4 | 0;
  $18 = HEAP32[$0 + 28 >> 2];
  $14 = $18 << 13;
  $5 = HEAP32[$0 + 20 >> 2];
  $21 = $12 + $5 | 0;
  $11 = Math_imul($21, 9810);
  $15 = $14 + ($11 + (Math_imul($12, -9232) + $8 | 0) | 0) | 0;
  $10 = HEAP32[$0 + 24 >> 2];
  $13 = HEAP32[$0 + 8 >> 2];
  $16 = Math_imul($10 + $13 | 0, 9058);
  $22 = $16 + Math_imul($13, 2237) | 0;
  $7 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $9 = HEAP32[$0 + 16 >> 2];
  $23 = $7 + Math_imul($9, 10438) | 0;
  $19 = $22 + $23 | 0;
  HEAP8[$1 | 0] = HEAPU8[($15 + $19 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 13 | 0] = HEAPU8[($19 - $15 >>> 18 & 1023) + $2 | 0];
  $15 = Math_imul($6, -3474) + $8 | 0;
  $8 = Math_imul($5 + $6 | 0, -1297) - $14 | 0;
  $15 = $15 + $8 | 0;
  $16 = Math_imul($10, -14084) + $16 | 0;
  $19 = Math_imul($9, 2578) + $7 | 0;
  $24 = $16 + $19 | 0;
  HEAP8[$1 + 1 | 0] = HEAPU8[($15 + $24 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 12 | 0] = HEAPU8[($24 - $15 >>> 18 & 1023) + $2 | 0];
  $8 = (Math_imul($5, -19447) + $11 | 0) + $8 | 0;
  $10 = Math_imul($10, -11295) + Math_imul($13, 5027) | 0;
  $13 = Math_imul($9, -7223) + $7 | 0;
  $11 = $10 + $13 | 0;
  HEAP8[$1 + 2 | 0] = HEAPU8[($8 + $11 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 11 | 0] = HEAPU8[($11 - $8 >>> 18 & 1023) + $2 | 0];
  $7 = Math_imul($9, -11586) + $7 | 0;
  $8 = $12 - $6 | 0;
  $11 = ($8 - $5 | 0) + $18 << 13;
  HEAP8[$1 + 3 | 0] = HEAPU8[($7 + $11 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 10 | 0] = HEAPU8[($7 - $11 >>> 18 & 1023) + $2 | 0];
  $7 = Math_imul($21, 6164);
  $9 = Math_imul($5, -13850) + $14 | 0;
  $5 = Math_imul($5 - $6 | 0, 11512);
  $9 = $7 + ($9 + $5 | 0) | 0;
  $10 = $13 - $10 | 0;
  HEAP8[$1 + 4 | 0] = HEAPU8[($9 + $10 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 9 | 0] = HEAPU8[($10 - $9 >>> 18 & 1023) + $2 | 0];
  $5 = Math_imul($6, 5529) + $5 | 0;
  $6 = Math_imul($8, 3826) - $14 | 0;
  $5 = $5 + $6 | 0;
  $14 = $19 - $16 | 0;
  HEAP8[$1 + 5 | 0] = HEAPU8[($5 + $14 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 8 | 0] = HEAPU8[($14 - $5 >>> 18 & 1023) + $2 | 0];
  $5 = $23 - $22 | 0;
  $6 = (Math_imul($12, -8693) + $7 | 0) + $6 | 0;
  HEAP8[$1 + 6 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 7 | 0] = HEAPU8[($5 - $6 >>> 18 & 1023) + $2 | 0];
  $0 = $0 + 32 | 0;
  $17 = $17 + 1 | 0;
  if (($17 | 0) != 7) {
   continue;
  }
  break;
 }
 __stack_pointer = $20 + 224 | 0;
}
function try_realloc_chunk($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $3 = $6 & 3;
 $5 = $6 & -8;
 $2 = $5 + $0 | 0;
 label$1 : {
  if (!$3) {
   $3 = 0;
   if ($1 >>> 0 < 256) {
    break label$1;
   }
   if ($1 + 4 >>> 0 <= $5 >>> 0) {
    $3 = $0;
    if ($5 - $1 >>> 0 <= HEAP32[8876] << 1 >>> 0) {
     break label$1;
    }
   }
   return 0;
  }
  label$4 : {
   if ($1 >>> 0 <= $5 >>> 0) {
    $3 = $5 - $1 | 0;
    if ($3 >>> 0 < 16) {
     break label$4;
    }
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
    $1 = $0 + $1 | 0;
    HEAP32[$1 + 4 >> 2] = $3 | 3;
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
    dispose_chunk($1, $3);
    break label$4;
   }
   $3 = 0;
   if (HEAP32[8762] == ($2 | 0)) {
    $2 = HEAP32[8759] + $5 | 0;
    if ($2 >>> 0 <= $1 >>> 0) {
     break label$1;
    }
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
    $3 = $0 + $1 | 0;
    $1 = $2 - $1 | 0;
    HEAP32[$3 + 4 >> 2] = $1 | 1;
    HEAP32[8759] = $1;
    HEAP32[8762] = $3;
    break label$4;
   }
   if (HEAP32[8761] == ($2 | 0)) {
    $2 = HEAP32[8758] + $5 | 0;
    if ($2 >>> 0 < $1 >>> 0) {
     break label$1;
    }
    $3 = $2 - $1 | 0;
    label$8 : {
     if ($3 >>> 0 >= 16) {
      HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
      $1 = $0 + $1 | 0;
      HEAP32[$1 + 4 >> 2] = $3 | 1;
      $2 = $0 + $2 | 0;
      HEAP32[$2 >> 2] = $3;
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
      break label$8;
     }
     HEAP32[$0 + 4 >> 2] = $6 & 1 | $2 | 2;
     $1 = $0 + $2 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
     $3 = 0;
     $1 = 0;
    }
    HEAP32[8761] = $1;
    HEAP32[8758] = $3;
    break label$4;
   }
   $4 = HEAP32[$2 + 4 >> 2];
   if ($4 & 2) {
    break label$1;
   }
   $7 = ($4 & -8) + $5 | 0;
   if ($7 >>> 0 < $1 >>> 0) {
    break label$1;
   }
   $9 = $7 - $1 | 0;
   label$10 : {
    if ($4 >>> 0 <= 255) {
     $3 = HEAP32[$2 + 12 >> 2];
     $2 = HEAP32[$2 + 8 >> 2];
     $4 = $4 >>> 3 | 0;
     $5 = ($4 << 3) + 35064 | 0;
     if (($2 | 0) == ($3 | 0)) {
      wasm2js_i32$0 = 35024, wasm2js_i32$1 = HEAP32[8756] & __wasm_rotl_i32(-2, $4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$10;
     }
     HEAP32[$2 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $2;
     break label$10;
    }
    $8 = HEAP32[$2 + 24 >> 2];
    $4 = HEAP32[$2 + 12 >> 2];
    label$13 : {
     if (($4 | 0) != ($2 | 0)) {
      $3 = HEAP32[$2 + 8 >> 2];
      HEAP32[$3 + 12 >> 2] = $4;
      HEAP32[$4 + 8 >> 2] = $3;
      break label$13;
     }
     label$16 : {
      $3 = $2 + 20 | 0;
      $5 = HEAP32[$3 >> 2];
      if ($5) {
       break label$16;
      }
      $3 = $2 + 16 | 0;
      $5 = HEAP32[$3 >> 2];
      if ($5) {
       break label$16;
      }
      $4 = 0;
      break label$13;
     }
     while (1) {
      $10 = $3;
      $4 = $5;
      $3 = $4 + 20 | 0;
      $5 = HEAP32[$3 >> 2];
      if ($5) {
       continue;
      }
      $3 = $4 + 16 | 0;
      $5 = HEAP32[$4 + 16 >> 2];
      if ($5) {
       continue;
      }
      break;
     }
     HEAP32[$10 >> 2] = 0;
    }
    if (!$8) {
     break label$10;
    }
    $5 = HEAP32[$2 + 28 >> 2];
    $3 = ($5 << 2) + 35328 | 0;
    label$18 : {
     if (HEAP32[$3 >> 2] == ($2 | 0)) {
      HEAP32[$3 >> 2] = $4;
      if ($4) {
       break label$18;
      }
      wasm2js_i32$0 = 35028, wasm2js_i32$1 = HEAP32[8757] & __wasm_rotl_i32(-2, $5), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$10;
     }
     HEAP32[(HEAP32[$8 + 16 >> 2] == ($2 | 0) ? 16 : 20) + $8 >> 2] = $4;
     if (!$4) {
      break label$10;
     }
    }
    HEAP32[$4 + 24 >> 2] = $8;
    $3 = HEAP32[$2 + 16 >> 2];
    if ($3) {
     HEAP32[$4 + 16 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $4;
    }
    $2 = HEAP32[$2 + 20 >> 2];
    if (!$2) {
     break label$10;
    }
    HEAP32[$4 + 20 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = $4;
   }
   if ($9 >>> 0 <= 15) {
    HEAP32[$0 + 4 >> 2] = $6 & 1 | $7 | 2;
    $1 = $0 + $7 | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
    break label$4;
   }
   HEAP32[$0 + 4 >> 2] = $6 & 1 | $1 | 2;
   $1 = $0 + $1 | 0;
   HEAP32[$1 + 4 >> 2] = $9 | 3;
   $2 = $0 + $7 | 0;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 1;
   dispose_chunk($1, $9);
  }
  $3 = $0;
 }
 return $3;
}



function jpeg_idct_7x14($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 $21 = __stack_pointer - 400 | 0;
 __stack_pointer = $21;
 $25 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $21;
 while (1) {
  $16 = HEAP32[$0 + 192 >> 2];
  $8 = HEAP16[$2 + 96 >> 1];
  $9 = HEAP32[$0 + 64 >> 2];
  $13 = HEAP16[$2 + 32 >> 1];
  $7 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $10 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $15 = $7 + Math_imul($10, -11586) >> 11;
  $11 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $6 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $5 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $17 = $6 - $5 | 0;
  $12 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $14 = $11 + ($17 - $12 | 0) << 2;
  HEAP32[$1 + 280 >> 2] = $15 - $14;
  HEAP32[$1 + 84 >> 2] = $15 + $14;
  $8 = Math_imul($8, $16);
  $9 = Math_imul($9, $13);
  $13 = Math_imul($8 + $9 | 0, 9058);
  $15 = $13 + Math_imul($8, -14084) | 0;
  $14 = Math_imul($10, 2578) + $7 | 0;
  $18 = $15 + $14 | 0;
  $16 = $11 << 13;
  $11 = Math_imul($5 + $12 | 0, -1297) - $16 | 0;
  $22 = Math_imul($5 + $6 | 0, 10935);
  $19 = $11 + ($22 + Math_imul($5, -3474) | 0) | 0;
  HEAP32[$1 + 336 >> 2] = $18 - $19 >> 11;
  HEAP32[$1 + 28 >> 2] = $18 + $19 >> 11;
  $8 = Math_imul($8, -11295) + Math_imul($9, 5027) | 0;
  $18 = Math_imul($10, -7223) + $7 | 0;
  $19 = $8 + $18 | 0;
  $23 = $6 + $12 | 0;
  $24 = Math_imul($23, 9810);
  $11 = ($24 + Math_imul($12, -19447) | 0) + $11 | 0;
  HEAP32[$1 + 308 >> 2] = $19 - $11 >> 11;
  HEAP32[$1 + 56 >> 2] = $11 + $19 >> 11;
  $11 = Math_imul($12 - $5 | 0, 11512);
  $15 = $14 - $15 | 0;
  $14 = $11 + Math_imul($5, 5529) | 0;
  $5 = Math_imul($17, 3826) - $16 | 0;
  $17 = $14 + $5 | 0;
  HEAP32[$1 + 224 >> 2] = $15 - $17 >> 11;
  HEAP32[$1 + 140 >> 2] = $15 + $17 >> 11;
  $10 = Math_imul($10, 10438) + $7 | 0;
  $7 = Math_imul($9, 2237) + $13 | 0;
  $9 = $10 - $7 | 0;
  $13 = Math_imul($23, 6164);
  $5 = ($13 + Math_imul($6, -8693) | 0) + $5 | 0;
  HEAP32[$1 + 196 >> 2] = $9 - $5 >> 11;
  HEAP32[$1 + 168 >> 2] = $5 + $9 >> 11;
  $5 = $7 + $10 | 0;
  $6 = ((Math_imul($6, -9232) + $22 | 0) + $24 | 0) + $16 | 0;
  HEAP32[$1 + 364 >> 2] = $5 - $6 >> 11;
  HEAP32[$1 >> 2] = $5 + $6 >> 11;
  $5 = $18 - $8 | 0;
  $12 = ((Math_imul($12, -13850) + $11 | 0) + $13 | 0) + $16 | 0;
  HEAP32[$1 + 252 >> 2] = $5 - $12 >> 11;
  HEAP32[$1 + 112 >> 2] = $5 + $12 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $20 = $20 + 1 | 0;
  if (($20 | 0) != 7) {
   continue;
  }
  break;
 }
 $2 = $25 - 384 | 0;
 $12 = 0;
 $1 = $21;
 while (1) {
  $5 = HEAP32[$1 + 4 >> 2];
  $6 = HEAP32[$1 + 12 >> 2];
  $8 = Math_imul($5 + $6 | 0, 7663);
  $10 = HEAP32[$1 + 20 >> 2];
  $20 = Math_imul($10 + $5 | 0, 5027);
  $9 = Math_imul($5 - $6 | 0, 1395);
  $13 = $20 + ($8 - $9 | 0) | 0;
  $5 = HEAP32[$1 + 16 >> 2];
  $7 = HEAP32[$1 + 24 >> 2];
  $15 = Math_imul($5 - $7 | 0, 7223);
  $16 = HEAP32[$1 + 8 >> 2];
  $17 = $16 + $7 | 0;
  $0 = HEAP32[($12 << 2) + $3 >> 2] + $4 | 0;
  $14 = $15 + Math_imul($7, -637) | 0;
  $7 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
  $11 = $7 + Math_imul($17, 10438) | 0;
  $14 = $14 + $11 | 0;
  HEAP8[$0 | 0] = HEAPU8[($14 + $13 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 6 | 0] = HEAPU8[($14 - $13 >>> 18 & 1023) + $2 | 0];
  $6 = Math_imul($6 + $10 | 0, -11295);
  $8 = $6 + ($8 + $9 | 0) | 0;
  $9 = Math_imul($16 - $5 | 0, 2578);
  $13 = ($9 + (Math_imul($5, -15083) + $7 | 0) | 0) + $15 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($8 + $13 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($13 - $8 >>> 18 & 1023) + $2 | 0];
  $6 = (Math_imul($10, 15326) + $20 | 0) + $6 | 0;
  $10 = (Math_imul($16, -20239) + $9 | 0) + $11 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($6 + $10 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($10 - $6 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[(Math_imul($5 - $17 | 0, 11585) + $7 >>> 18 & 1023) + $2 | 0];
  $1 = $1 + 28 | 0;
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 14) {
   continue;
  }
  break;
 }
 __stack_pointer = $21 + 400 | 0;
}
function access_virt_barray($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $9 = $2 + $3 | 0;
 if (!(HEAP32[$1 >> 2] ? !(HEAPU32[$1 + 12 >> 2] < $3 >>> 0 | $9 >>> 0 > HEAPU32[$1 + 4 >> 2]) : 0)) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = 23;
  FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
 }
 $3 = HEAP32[$1 + 24 >> 2];
 label$3 : {
  if (HEAP32[$1 + 16 >> 2] + $3 >>> 0 >= $9 >>> 0 ? $3 >>> 0 <= $2 >>> 0 : 0) {
   break label$3;
  }
  if (!HEAP32[$1 + 40 >> 2]) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 20 >> 2] = 71;
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
  }
  if (HEAP32[$1 + 36 >> 2]) {
   $3 = HEAP32[$1 + 16 >> 2];
   label$7 : {
    if (($3 | 0) < 1) {
     break label$7;
    }
    $6 = HEAP32[$1 + 20 >> 2];
    $6 = ($3 | 0) > ($6 | 0) ? $6 : $3;
    $3 = HEAP32[$1 + 24 >> 2];
    $5 = HEAP32[$1 + 28 >> 2] - $3 | 0;
    $6 = ($5 | 0) > ($6 | 0) ? $6 : $5;
    $5 = HEAP32[$1 + 4 >> 2] - $3 | 0;
    $5 = ($5 | 0) > ($6 | 0) ? $6 : $5;
    if (($5 | 0) < 1) {
     break label$7;
    }
    $11 = $1 + 48 | 0;
    $10 = HEAP32[$1 + 8 >> 2] << 7;
    $6 = Math_imul($10, $3);
    $3 = 0;
    while (1) {
     $7 = Math_imul($5, $10);
     FUNCTION_TABLE[HEAP32[$1 + 52 >> 2]]($0, $11, HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], $6, $7);
     $5 = HEAP32[$1 + 20 >> 2];
     $3 = $5 + $3 | 0;
     $8 = HEAP32[$1 + 16 >> 2];
     if (($3 | 0) >= ($8 | 0)) {
      break label$7;
     }
     $6 = $6 + $7 | 0;
     $7 = $8 - $3 | 0;
     $5 = ($5 | 0) < ($7 | 0) ? $5 : $7;
     $7 = HEAP32[$1 + 24 >> 2] + $3 | 0;
     $8 = HEAP32[$1 + 28 >> 2] - $7 | 0;
     $5 = ($5 | 0) < ($8 | 0) ? $5 : $8;
     $7 = HEAP32[$1 + 4 >> 2] - $7 | 0;
     $5 = ($5 | 0) < ($7 | 0) ? $5 : $7;
     if (($5 | 0) > 0) {
      continue;
     }
     break;
    }
   }
   HEAP32[$1 + 36 >> 2] = 0;
  }
  $3 = HEAP32[$1 + 16 >> 2];
  $6 = $9 - $3 | 0;
  $6 = HEAPU32[$1 + 24 >> 2] < $2 >>> 0 ? $2 : ($6 | 0) > 0 ? $6 : 0;
  HEAP32[$1 + 24 >> 2] = $6;
  if (($3 | 0) < 1) {
   break label$3;
  }
  $5 = HEAP32[$1 + 20 >> 2];
  $3 = ($3 | 0) > ($5 | 0) ? $5 : $3;
  $5 = HEAP32[$1 + 28 >> 2] - $6 | 0;
  $3 = ($3 | 0) < ($5 | 0) ? $3 : $5;
  $5 = HEAP32[$1 + 4 >> 2] - $6 | 0;
  $5 = ($3 | 0) < ($5 | 0) ? $3 : $5;
  if (($5 | 0) < 1) {
   break label$3;
  }
  $11 = $1 + 48 | 0;
  $10 = HEAP32[$1 + 8 >> 2] << 7;
  $6 = Math_imul($10, $6);
  $3 = 0;
  while (1) {
   $7 = Math_imul($5, $10);
   FUNCTION_TABLE[HEAP32[$1 + 48 >> 2]]($0, $11, HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], $6, $7);
   $5 = HEAP32[$1 + 20 >> 2];
   $3 = $5 + $3 | 0;
   $8 = HEAP32[$1 + 16 >> 2];
   if (($3 | 0) >= ($8 | 0)) {
    break label$3;
   }
   $6 = $6 + $7 | 0;
   $7 = $8 - $3 | 0;
   $5 = ($5 | 0) < ($7 | 0) ? $5 : $7;
   $7 = HEAP32[$1 + 24 >> 2] + $3 | 0;
   $8 = HEAP32[$1 + 28 >> 2] - $7 | 0;
   $5 = ($5 | 0) < ($8 | 0) ? $5 : $8;
   $7 = HEAP32[$1 + 4 >> 2] - $7 | 0;
   $5 = ($5 | 0) < ($7 | 0) ? $5 : $7;
   if (($5 | 0) > 0) {
    continue;
   }
   break;
  }
 }
 $3 = HEAP32[$1 + 28 >> 2];
 label$10 : {
  label$11 : {
   label$12 : {
    if ($9 >>> 0 <= $3 >>> 0) {
     break label$12;
    }
    label$13 : {
     label$14 : {
      label$15 : {
       if ($2 >>> 0 > $3 >>> 0) {
        $3 = $2;
        if (!$4) {
         break label$15;
        }
        $3 = HEAP32[$0 >> 2];
        HEAP32[$3 + 20 >> 2] = 23;
        FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
        $3 = $2;
        break label$14;
       }
       if ($4) {
        break label$14;
       }
      }
      if (HEAP32[$1 + 32 >> 2]) {
       break label$13;
      }
      $3 = HEAP32[$0 >> 2];
      HEAP32[$3 + 20 >> 2] = 23;
      FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
      break label$10;
     }
     HEAP32[$1 + 28 >> 2] = $9;
     if (!HEAP32[$1 + 32 >> 2]) {
      break label$11;
     }
    }
    $6 = HEAP32[$1 + 24 >> 2];
    $3 = $3 - $6 | 0;
    $6 = $9 - $6 | 0;
    if ($3 >>> 0 >= $6 >>> 0) {
     break label$12;
    }
    $5 = HEAP32[$1 + 8 >> 2] << 7;
    while (1) {
     memset(HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], 0, $5);
     $3 = $3 + 1 | 0;
     if (($6 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   if (!$4) {
    break label$10;
   }
  }
  HEAP32[$1 + 36 >> 2] = 1;
 }
 return HEAP32[$1 >> 2] + ($2 - HEAP32[$1 + 24 >> 2] << 2) | 0;
}
function jinit_1pass_quantizer($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 88) | 0;
 HEAP32[$0 + 484 >> 2] = $1;
 HEAP32[$1 + 68 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 40;
 HEAP32[$1 + 8 >> 2] = 41;
 HEAP32[$1 >> 2] = 42;
 HEAP32[$1 + 52 >> 2] = 0;
 if (HEAP32[$0 + 120 >> 2] >= 5) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = 57;
  HEAP32[$3 + 24 >> 2] = 4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $6 = HEAP32[$0 + 96 >> 2];
 if (($6 | 0) >= 257) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = 59;
  HEAP32[$3 + 24 >> 2] = 256;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  $6 = HEAP32[$0 + 96 >> 2];
 }
 $7 = HEAP32[$0 + 484 >> 2];
 $4 = HEAP32[$0 + 120 >> 2];
 $3 = ($4 | 0) < 2;
 $8 = 1;
 while (1) {
  $5 = $8;
  $8 = $5 + 1 | 0;
  $1 = $8;
  $2 = 1;
  if (!$3) {
   while (1) {
    $1 = Math_imul($1, $8);
    $2 = $2 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  if (($1 | 0) <= ($6 | 0)) {
   continue;
  }
  break;
 }
 $10 = 1;
 if ($5 >>> 0 <= 1) {
  $2 = HEAP32[$0 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = 58;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $1 = 0;
 if (($4 | 0) > 0) {
  while (1) {
   HEAP32[(($1 << 2) + $7 | 0) + 32 >> 2] = $5;
   $10 = Math_imul($5, $10);
   $1 = $1 + 1 | 0;
   if (($4 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $13 = ($4 | 0) < 1;
 $3 = $10;
 while (1) {
  label$10 : {
   if ($13) {
    $3 = $10;
    break label$10;
   }
   $11 = HEAP32[$0 + 44 >> 2];
   $1 = 0;
   $9 = 1;
   while (1) {
    $2 = ($11 | 0) == 2 ? HEAP32[($1 << 2) + 16544 >> 2] : $1;
    $12 = ($2 << 2) + $7 | 0;
    $8 = $12 + 32 | 0;
    $2 = HEAP32[$8 >> 2];
    $5 = ($3 | 0) / ($2 | 0) | 0;
    $2 = $2 + 1 | 0;
    $5 = Math_imul($5, $2);
    if (($5 | 0) <= ($6 | 0)) {
     HEAP32[$12 + 32 >> 2] = $2;
     $9 = 0;
     $3 = $5;
     $1 = $1 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue;
     }
    }
    break;
   }
   if (!($9 & 1)) {
    continue;
   }
  }
  break;
 }
 $1 = HEAP32[$0 >> 2];
 label$16 : {
  if (HEAP32[$0 + 120 >> 2] == 3) {
   HEAP32[$1 + 24 >> 2] = $3;
   HEAP32[$1 + 28 >> 2] = HEAP32[$7 + 32 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$7 + 36 >> 2];
   $2 = HEAP32[$7 + 40 >> 2];
   HEAP32[$1 + 20 >> 2] = 96;
   HEAP32[$1 + 36 >> 2] = $2;
   FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, 1);
   break label$16;
  }
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 20 >> 2] = 97;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
 }
 $12 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]]($0, 1, $3, HEAP32[$0 + 120 >> 2]) | 0;
 $1 = HEAP32[$0 + 120 >> 2];
 if (($1 | 0) >= 1) {
  $6 = $3;
  while (1) {
   $2 = $14 << 2;
   $11 = HEAP32[($7 + $2 | 0) + 32 >> 2];
   $4 = ($6 | 0) / ($11 | 0) | 0;
   if (($11 | 0) >= 1) {
    $5 = $2 + $12 | 0;
    $10 = $11 - 1 | 0;
    $13 = ($10 | 0) / 2 | 0;
    $9 = 0;
    while (1) {
     $2 = Math_imul($4, $9);
     if (($3 | 0) > ($2 | 0)) {
      $8 = (Math_imul($9, 255) + $13 | 0) / ($10 | 0) | 0;
      while (1) {
       $1 = 0;
       if (($4 | 0) >= 1) {
        while (1) {
         HEAP8[HEAP32[$5 >> 2] + ($1 + $2 | 0) | 0] = $8;
         $1 = $1 + 1 | 0;
         if (($4 | 0) != ($1 | 0)) {
          continue;
         }
         break;
        }
       }
       $2 = $2 + $6 | 0;
       if (($3 | 0) > ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     $9 = $9 + 1 | 0;
     if (($11 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
    $1 = HEAP32[$0 + 120 >> 2];
   }
   $6 = $4;
   $14 = $14 + 1 | 0;
   if (($14 | 0) < ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$7 + 20 >> 2] = $3;
 HEAP32[$7 + 16 >> 2] = $12;
 create_colorindex($0);
 if (!(HEAP32[$0 + 88 >> 2] != 2 | HEAP32[$0 + 120 >> 2] < 1)) {
  $2 = (HEAP32[$0 + 112 >> 2] << 1) + 4 | 0;
  $4 = HEAP32[$0 + 484 >> 2];
  $1 = 0;
  while (1) {
   wasm2js_i32$0 = ($1 << 2) + $4 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, $2) | 0, HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
   $1 = $1 + 1 | 0;
   if (($1 | 0) < HEAP32[$0 + 120 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function access_virt_sarray($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $9 = $2 + $3 | 0;
 if (!(HEAP32[$1 >> 2] ? !(HEAPU32[$1 + 12 >> 2] < $3 >>> 0 | $9 >>> 0 > HEAPU32[$1 + 4 >> 2]) : 0)) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = 23;
  FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
 }
 $3 = HEAP32[$1 + 24 >> 2];
 label$3 : {
  if (HEAP32[$1 + 16 >> 2] + $3 >>> 0 >= $9 >>> 0 ? $3 >>> 0 <= $2 >>> 0 : 0) {
   break label$3;
  }
  if (!HEAP32[$1 + 40 >> 2]) {
   $3 = HEAP32[$0 >> 2];
   HEAP32[$3 + 20 >> 2] = 71;
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
  }
  if (HEAP32[$1 + 36 >> 2]) {
   $3 = HEAP32[$1 + 16 >> 2];
   label$7 : {
    if (($3 | 0) < 1) {
     break label$7;
    }
    $6 = HEAP32[$1 + 20 >> 2];
    $6 = ($3 | 0) > ($6 | 0) ? $6 : $3;
    $3 = HEAP32[$1 + 24 >> 2];
    $5 = HEAP32[$1 + 28 >> 2] - $3 | 0;
    $6 = ($5 | 0) > ($6 | 0) ? $6 : $5;
    $5 = HEAP32[$1 + 4 >> 2] - $3 | 0;
    $5 = ($5 | 0) > ($6 | 0) ? $6 : $5;
    if (($5 | 0) < 1) {
     break label$7;
    }
    $11 = $1 + 48 | 0;
    $10 = HEAP32[$1 + 8 >> 2];
    $6 = Math_imul($10, $3);
    $3 = 0;
    while (1) {
     $7 = Math_imul($5, $10);
     FUNCTION_TABLE[HEAP32[$1 + 52 >> 2]]($0, $11, HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], $6, $7);
     $5 = HEAP32[$1 + 20 >> 2];
     $3 = $5 + $3 | 0;
     $8 = HEAP32[$1 + 16 >> 2];
     if (($3 | 0) >= ($8 | 0)) {
      break label$7;
     }
     $6 = $6 + $7 | 0;
     $7 = $8 - $3 | 0;
     $5 = ($5 | 0) < ($7 | 0) ? $5 : $7;
     $7 = HEAP32[$1 + 24 >> 2] + $3 | 0;
     $8 = HEAP32[$1 + 28 >> 2] - $7 | 0;
     $5 = ($5 | 0) < ($8 | 0) ? $5 : $8;
     $7 = HEAP32[$1 + 4 >> 2] - $7 | 0;
     $5 = ($5 | 0) < ($7 | 0) ? $5 : $7;
     if (($5 | 0) > 0) {
      continue;
     }
     break;
    }
   }
   HEAP32[$1 + 36 >> 2] = 0;
  }
  $3 = HEAP32[$1 + 16 >> 2];
  $6 = $9 - $3 | 0;
  $6 = HEAPU32[$1 + 24 >> 2] < $2 >>> 0 ? $2 : ($6 | 0) > 0 ? $6 : 0;
  HEAP32[$1 + 24 >> 2] = $6;
  if (($3 | 0) < 1) {
   break label$3;
  }
  $5 = HEAP32[$1 + 20 >> 2];
  $3 = ($3 | 0) > ($5 | 0) ? $5 : $3;
  $5 = HEAP32[$1 + 28 >> 2] - $6 | 0;
  $3 = ($3 | 0) < ($5 | 0) ? $3 : $5;
  $5 = HEAP32[$1 + 4 >> 2] - $6 | 0;
  $5 = ($3 | 0) < ($5 | 0) ? $3 : $5;
  if (($5 | 0) < 1) {
   break label$3;
  }
  $11 = $1 + 48 | 0;
  $10 = HEAP32[$1 + 8 >> 2];
  $6 = Math_imul($10, $6);
  $3 = 0;
  while (1) {
   $7 = Math_imul($5, $10);
   FUNCTION_TABLE[HEAP32[$1 + 48 >> 2]]($0, $11, HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], $6, $7);
   $5 = HEAP32[$1 + 20 >> 2];
   $3 = $5 + $3 | 0;
   $8 = HEAP32[$1 + 16 >> 2];
   if (($3 | 0) >= ($8 | 0)) {
    break label$3;
   }
   $6 = $6 + $7 | 0;
   $7 = $8 - $3 | 0;
   $5 = ($5 | 0) < ($7 | 0) ? $5 : $7;
   $7 = HEAP32[$1 + 24 >> 2] + $3 | 0;
   $8 = HEAP32[$1 + 28 >> 2] - $7 | 0;
   $5 = ($5 | 0) < ($8 | 0) ? $5 : $8;
   $7 = HEAP32[$1 + 4 >> 2] - $7 | 0;
   $5 = ($5 | 0) < ($7 | 0) ? $5 : $7;
   if (($5 | 0) > 0) {
    continue;
   }
   break;
  }
 }
 $3 = HEAP32[$1 + 28 >> 2];
 label$10 : {
  label$11 : {
   label$12 : {
    if ($9 >>> 0 <= $3 >>> 0) {
     break label$12;
    }
    label$13 : {
     label$14 : {
      label$15 : {
       if ($2 >>> 0 > $3 >>> 0) {
        $3 = $2;
        if (!$4) {
         break label$15;
        }
        $3 = HEAP32[$0 >> 2];
        HEAP32[$3 + 20 >> 2] = 23;
        FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
        $3 = $2;
        break label$14;
       }
       if ($4) {
        break label$14;
       }
      }
      if (HEAP32[$1 + 32 >> 2]) {
       break label$13;
      }
      $3 = HEAP32[$0 >> 2];
      HEAP32[$3 + 20 >> 2] = 23;
      FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
      break label$10;
     }
     HEAP32[$1 + 28 >> 2] = $9;
     if (!HEAP32[$1 + 32 >> 2]) {
      break label$11;
     }
    }
    $6 = HEAP32[$1 + 24 >> 2];
    $3 = $3 - $6 | 0;
    $6 = $9 - $6 | 0;
    if ($3 >>> 0 >= $6 >>> 0) {
     break label$12;
    }
    $5 = HEAP32[$1 + 8 >> 2];
    while (1) {
     memset(HEAP32[HEAP32[$1 >> 2] + ($3 << 2) >> 2], 0, $5);
     $3 = $3 + 1 | 0;
     if (($6 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   if (!$4) {
    break label$10;
   }
  }
  HEAP32[$1 + 36 >> 2] = 1;
 }
 return HEAP32[$1 >> 2] + ($2 - HEAP32[$1 + 24 >> 2] << 2) | 0;
}
function decode_mcu($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $6 = HEAP32[$0 + 468 >> 2];
 if (HEAP32[$0 + 280 >> 2]) {
  $2 = HEAP32[$6 + 56 >> 2];
  if (!$2) {
   process_restart($0);
   $2 = HEAP32[$6 + 56 >> 2];
  }
  HEAP32[$6 + 56 >> 2] = $2 - 1;
 }
 label$3 : {
  if (!(HEAP32[$6 + 20 >> 2] == -1 | HEAP32[$0 + 368 >> 2] < 1)) {
   $15 = HEAP32[$0 + 432 >> 2];
   $16 = $6 + 188 | 0;
   while (1) {
    $2 = $11 << 2;
    $13 = HEAP32[$2 + $1 >> 2];
    $2 = HEAP32[($0 + $2 | 0) + 372 >> 2] << 2;
    $10 = HEAP32[($2 + $0 | 0) + 344 >> 2];
    $7 = HEAP32[$10 + 20 >> 2];
    $14 = ($7 << 2) + $6 | 0;
    $8 = $2 + $6 | 0;
    $9 = $8;
    $5 = $8 + 40 | 0;
    $3 = HEAP32[$14 + 60 >> 2] + HEAP32[$5 >> 2] | 0;
    label$6 : {
     if (!arith_decode($0, $3)) {
      HEAP32[$9 + 40 >> 2] = 0;
      $2 = HEAP32[$8 + 24 >> 2];
      break label$6;
     }
     $5 = 0;
     $2 = 0;
     $12 = arith_decode($0, $3 + 1 | 0);
     $4 = ($12 + $3 | 0) + 2 | 0;
     $3 = arith_decode($0, $4);
     label$8 : {
      if (!$3) {
       break label$8;
      }
      $2 = $3;
      $4 = HEAP32[$14 + 60 >> 2] + 20 | 0;
      if (!arith_decode($0, $4)) {
       break label$8;
      }
      while (1) {
       $2 = $2 << 1;
       if (($2 | 0) == 32768) {
        break label$3;
       }
       $4 = $4 + 1 | 0;
       if (arith_decode($0, $4)) {
        continue;
       }
       break;
      }
     }
     $3 = $0 + $7 | 0;
     label$11 : {
      if (1 << HEAPU8[$3 + 232 | 0] >> 1 > ($2 | 0)) {
       break label$11;
      }
      $7 = $12 << 2;
      if (1 << HEAPU8[$3 + 248 | 0] >> 1 < ($2 | 0)) {
       $5 = $7 + 12 | 0;
       break label$11;
      }
      $5 = $7 + 4 | 0;
     }
     HEAP32[$9 + 40 >> 2] = $5;
     $3 = $2 >> 1;
     if ($3) {
      $5 = $4 + 14 | 0;
      while (1) {
       $2 = (arith_decode($0, $5) ? $3 : 0) | $2;
       $4 = $3 >> 1;
       $3 = $4;
       if ($3) {
        continue;
       }
       break;
      }
     }
     $3 = $8 + 24 | 0;
     $2 = HEAP32[$8 + 24 >> 2] + ($12 ? $2 ^ -1 : $2 + 1 | 0) | 0;
     HEAP32[$3 >> 2] = $2;
    }
    HEAP16[$13 >> 1] = $2;
    label$15 : {
     if (!HEAP32[$0 + 436 >> 2]) {
      break label$15;
     }
     $2 = HEAP32[$10 + 24 >> 2];
     $10 = $2 + $0 | 0;
     $9 = ($2 << 2) + $6 | 0;
     $2 = 0;
     while (1) {
      $4 = $2;
      $3 = HEAP32[$9 + 124 >> 2] + Math_imul($2, 3) | 0;
      if (arith_decode($0, $3)) {
       break label$15;
      }
      label$17 : {
       while (1) {
        $2 = $4 + 1 | 0;
        if (arith_decode($0, $3 + 1 | 0)) {
         break label$17;
        }
        $3 = $3 + 3 | 0;
        $4 = $2;
        if (HEAP32[$0 + 436 >> 2] > ($2 | 0)) {
         continue;
        }
        break;
       }
       break label$3;
      }
      $7 = arith_decode($0, $16);
      $5 = $3 + 2 | 0;
      $3 = arith_decode($0, $5);
      label$19 : {
       if (!$3) {
        $3 = 0;
        break label$19;
       }
       label$21 : {
        if (!arith_decode($0, $5)) {
         break label$21;
        }
        $3 = $3 << 1;
        $5 = HEAP32[$9 + 124 >> 2] + (HEAPU8[$10 + 264 | 0] > ($4 | 0) ? 189 : 217) | 0;
        if (!arith_decode($0, $5)) {
         break label$21;
        }
        while (1) {
         $3 = $3 << 1;
         if (($3 | 0) == 32768) {
          break label$3;
         }
         $5 = $5 + 1 | 0;
         if (arith_decode($0, $5)) {
          continue;
         }
         break;
        }
       }
       $4 = $3 >> 1;
       if (!$4) {
        break label$19;
       }
       $8 = $5 + 14 | 0;
       while (1) {
        $3 = (arith_decode($0, $8) ? $4 : 0) | $3;
        $5 = $4 >> 1;
        $4 = $5;
        if ($4) {
         continue;
        }
        break;
       }
      }
      HEAP16[(HEAP32[($2 << 2) + $15 >> 2] << 1) + $13 >> 1] = $7 ? $3 ^ -1 : $3 + 1 | 0;
      if (HEAP32[$0 + 436 >> 2] > ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    $11 = $11 + 1 | 0;
    if (($11 | 0) < HEAP32[$0 + 368 >> 2]) {
     continue;
    }
    break;
   }
  }
  return 1;
 }
 $2 = HEAP32[$0 >> 2];
 HEAP32[$2 + 20 >> 2] = 117;
 FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, -1);
 HEAP32[$6 + 20 >> 2] = -1;
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 40);
 label$1 : {
  if (HEAPU8[$0 + 24 | 0]) {
   $2 = HEAP32[$0 + 12 >> 2];
   if ($2) {
    $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($2, $1);
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
    $3 = HEAP32[$0 + 20 >> 2];
    $2 = HEAP32[$0 + 16 >> 2];
    $4 = $2;
    $2 = $5;
    HEAP32[$2 + 48 >> 2] = $4;
    HEAP32[$2 + 52 >> 2] = $3;
    HEAP32[$2 + 96 >> 2] = $4;
    HEAP32[$2 + 100 >> 2] = $3;
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 48 | 0);
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
   }
   $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($5 + 88 | 0, 25908);
   $3 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 4 >> 2];
   $4 = $3;
   $3 = $5;
   HEAP32[$3 + 40 >> 2] = $4;
   HEAP32[$3 + 44 >> 2] = $2;
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $3 + 40 | 0);
   $3 = HEAP32[$0 + 20 >> 2];
   $2 = HEAP32[$0 + 16 >> 2];
   $4 = $2;
   $2 = $5;
   HEAP32[$2 + 32 >> 2] = $4;
   HEAP32[$2 + 36 >> 2] = $3;
   HEAP32[$2 + 80 >> 2] = $4;
   HEAP32[$2 + 84 >> 2] = $3;
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 32 | 0);
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
   $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($2 + 104 | 0);
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($5 + 104 | 0);
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
  $2 = HEAP32[$0 + 20 >> 2];
  $3 = HEAP32[$0 + 16 >> 2];
  $4 = $3;
  $3 = $5;
  HEAP32[$3 + 24 >> 2] = $4;
  HEAP32[$3 + 28 >> 2] = $2;
  HEAP32[$3 + 72 >> 2] = $4;
  HEAP32[$3 + 76 >> 2] = $2;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $3 + 24 | 0);
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 - -64 | 0, 25913);
  $2 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $4 = $2;
  $2 = $5;
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
  if (!HEAP32[$0 + 12 >> 2]) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
  $2 = HEAP32[$0 + 20 >> 2];
  $3 = HEAP32[$0 + 16 >> 2];
  $4 = $3;
  $3 = $5;
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP32[$3 + 56 >> 2] = $4;
  HEAP32[$3 + 60 >> 2] = $2;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $3 + 8 | 0);
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 }
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 41);
 __stack_pointer = $5 + 112 | 0;
}
function jpeg_idct_10x10($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $21 = __stack_pointer - 320 | 0;
 __stack_pointer = $21;
 $22 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $21;
 while (1) {
  $10 = HEAP32[$0 + 192 >> 2];
  $8 = HEAP16[$2 + 96 >> 1];
  $11 = HEAP32[$0 + 64 >> 2];
  $16 = HEAP16[$2 + 32 >> 1];
  $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $9 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $12 = $5 + Math_imul($9, -11586) >> 11;
  $7 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $17 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $13 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $14 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $6 = $13 - $14 | 0;
  $15 = ($7 - $17 | 0) - $6 << 2;
  HEAP32[$1 + 224 >> 2] = $12 - $15;
  HEAP32[$1 + 64 >> 2] = $12 + $15;
  $10 = Math_imul($8, $10);
  $8 = Math_imul($11, $16);
  $11 = Math_imul($10 + $8 | 0, 6810);
  $8 = $11 + Math_imul($8, 4209) | 0;
  $16 = Math_imul($9, 9373) + $5 | 0;
  $12 = $8 + $16 | 0;
  $15 = Math_imul($6, 2531);
  $17 = $17 << 13;
  $19 = $15 + $17 | 0;
  $13 = $13 + $14 | 0;
  $14 = Math_imul($13, 7791);
  $20 = $19 + ($14 + Math_imul($7, 11443) | 0) | 0;
  HEAP32[$1 + 288 >> 2] = $12 - $20 >> 11;
  HEAP32[$1 >> 2] = $12 + $20 >> 11;
  $8 = $16 - $8 | 0;
  $16 = (Math_imul($7, 1812) - $14 | 0) + $19 | 0;
  HEAP32[$1 + 160 >> 2] = $8 - $16 >> 11;
  HEAP32[$1 + 128 >> 2] = $8 + $16 >> 11;
  $9 = Math_imul($9, -3580) + $5 | 0;
  $10 = Math_imul($10, -17828) + $11 | 0;
  $5 = $9 + $10 | 0;
  $8 = Math_imul($13, 4815);
  $6 = ($17 - $15 | 0) - ($6 << 12) | 0;
  $11 = (Math_imul($7, 10323) - $8 | 0) - $6 | 0;
  HEAP32[$1 + 256 >> 2] = $5 - $11 >> 11;
  HEAP32[$1 + 32 >> 2] = $5 + $11 >> 11;
  $9 = $9 - $10 | 0;
  $7 = (Math_imul($7, 5260) - $8 | 0) + $6 | 0;
  HEAP32[$1 + 192 >> 2] = $9 - $7 >> 11;
  HEAP32[$1 + 96 >> 2] = $7 + $9 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $18 = $18 + 1 | 0;
  if (($18 | 0) != 8) {
   continue;
  }
  break;
 }
 $1 = $22 - 384 | 0;
 $9 = 0;
 $2 = $21;
 while (1) {
  $5 = HEAP32[$2 + 28 >> 2];
  $6 = HEAP32[$2 + 12 >> 2];
  $10 = $5 + $6 | 0;
  $8 = Math_imul($10, 7791);
  $0 = HEAP32[($9 << 2) + $3 >> 2] + $4 | 0;
  $5 = $6 - $5 | 0;
  $11 = Math_imul($5, 2531);
  $16 = HEAP32[$2 + 20 >> 2];
  $12 = $16 << 13;
  $17 = $11 + $12 | 0;
  $7 = HEAP32[$2 + 4 >> 2];
  $13 = $17 + (Math_imul($7, 11443) + $8 | 0) | 0;
  $6 = HEAP32[$2 + 8 >> 2];
  $14 = HEAP32[$2 + 24 >> 2];
  $15 = Math_imul($6 + $14 | 0, 6810);
  $19 = $15 + Math_imul($6, 4209) | 0;
  $6 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
  $18 = HEAP32[$2 + 16 >> 2];
  $20 = $6 + Math_imul($18, 9373) | 0;
  $22 = $19 + $20 | 0;
  HEAP8[$0 | 0] = HEAPU8[($13 + $22 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 9 | 0] = HEAPU8[($22 - $13 >>> 18 & 1023) + $1 | 0];
  $10 = Math_imul($10, 4815);
  $11 = ($12 - $11 | 0) - ($5 << 12) | 0;
  $12 = (Math_imul($7, 10323) - $10 | 0) - $11 | 0;
  $13 = Math_imul($14, -17828) + $15 | 0;
  $14 = Math_imul($18, -3580) + $6 | 0;
  $15 = $13 + $14 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($12 + $15 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 8 | 0] = HEAPU8[($15 - $12 >>> 18 & 1023) + $1 | 0];
  $5 = ($7 - $16 | 0) - $5 << 13;
  $6 = Math_imul($18, -11586) + $6 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 7 | 0] = HEAPU8[($6 - $5 >>> 18 & 1023) + $1 | 0];
  $5 = (Math_imul($7, 5260) - $10 | 0) + $11 | 0;
  $6 = $14 - $13 | 0;
  HEAP8[$0 + 3 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 6 | 0] = HEAPU8[($6 - $5 >>> 18 & 1023) + $1 | 0];
  $5 = $20 - $19 | 0;
  $7 = (Math_imul($7, 1812) - $8 | 0) + $17 | 0;
  HEAP8[$0 + 4 | 0] = HEAPU8[($5 + $7 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($5 - $7 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 32 | 0;
  $9 = $9 + 1 | 0;
  if (($9 | 0) != 10) {
   continue;
  }
  break;
 }
 __stack_pointer = $21 + 320 | 0;
}
function jpeg_consume_input($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = 1;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      $3 = HEAP32[$0 + 20 >> 2];
      switch ($3 - 200 | 0) {
      case 2:
       break label$1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
       break label$3;
      case 1:
       break label$4;
      case 0:
       break label$5;
      default:
       break label$2;
      }
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] + 4 >> 2]]($0);
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 8 >> 2]]($0);
     HEAP32[$0 + 20 >> 2] = 201;
    }
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] >> 2]]($0) | 0;
    if (($1 | 0) != 1) {
     break label$1;
    }
    $1 = HEAP32[$0 + 36 >> 2];
    $3 = $1;
    label$6 : {
     label$7 : {
      switch ($1 - 1 | 0) {
      case 2:
       $1 = HEAP32[$0 + 216 >> 2];
       $4 = HEAP32[$1 + 176 >> 2];
       $2 = HEAP32[$1 + 88 >> 2];
       $3 = 2;
       $5 = HEAP32[$1 >> 2];
       $1 = ($5 | 0) != 1;
       if (!($1 | ($2 | 0) != 2 | ($4 | 0) != 3)) {
        $1 = 3;
        break label$6;
       }
       if (!(($2 | 0) != 34 | $1)) {
        $1 = 7;
        if (($4 | 0) == 35) {
         break label$6;
        }
       }
       if (!(($5 | 0) != 82 | ($2 | 0) != 71 | ($4 | 0) != 66)) {
        $1 = 2;
        break label$6;
       }
       if (!(($5 | 0) != 114 | ($2 | 0) != 103)) {
        $1 = 6;
        if (($4 | 0) == 98) {
         break label$6;
        }
       }
       if (HEAP32[$0 + 284 >> 2]) {
        $1 = 3;
        break label$6;
       }
       if (HEAP32[$0 + 296 >> 2]) {
        $1 = 2;
        label$16 : {
         label$17 : {
          $2 = HEAPU8[$0 + 300 | 0];
          switch ($2 | 0) {
          case 1:
           break label$17;
          case 0:
           break label$6;
          default:
           break label$16;
          }
         }
         $1 = 3;
         break label$6;
        }
        $1 = HEAP32[$0 >> 2];
        HEAP32[$1 + 24 >> 2] = $2;
        HEAP32[$1 + 20 >> 2] = 116;
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
        $1 = 3;
        break label$6;
       }
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 24 >> 2] = $5;
       HEAP32[$1 + 20 >> 2] = 113;
       HEAP32[$1 + 32 >> 2] = $4;
       HEAP32[$1 + 28 >> 2] = $2;
       FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, 1);
       $1 = 3;
       break label$6;
      case 3:
       $3 = 4;
       if (!HEAP32[$0 + 296 >> 2]) {
        $1 = 4;
        break label$6;
       }
       $1 = 4;
       label$19 : {
        label$20 : {
         $2 = HEAPU8[$0 + 300 | 0];
         switch ($2 | 0) {
         case 2:
          break label$20;
         case 0:
          break label$6;
         default:
          break label$19;
         }
        }
        $1 = 5;
        break label$6;
       }
       $1 = HEAP32[$0 >> 2];
       HEAP32[$1 + 24 >> 2] = $2;
       HEAP32[$1 + 20 >> 2] = 116;
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
       $1 = 5;
       break label$6;
      case 0:
       break label$6;
      default:
       break label$7;
      }
     }
     $1 = 0;
     $3 = 0;
    }
    HEAP32[$0 + 44 >> 2] = $3;
    HEAP32[$0 + 40 >> 2] = $1;
    HEAP32[$0 + 136 >> 2] = 0;
    HEAP32[$0 + 96 >> 2] = 256;
    HEAP32[$0 + 88 >> 2] = 2;
    HEAP32[$0 + 92 >> 2] = 1;
    HEAP32[$0 + 80 >> 2] = 1;
    HEAP32[$0 + 84 >> 2] = 0;
    HEAP32[$0 + 72 >> 2] = 0;
    HEAP32[$0 + 76 >> 2] = 1;
    HEAP32[$0 + 64 >> 2] = 0;
    HEAP32[$0 + 68 >> 2] = 0;
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 1072693248;
    HEAP32[$0 + 108 >> 2] = 0;
    HEAP32[$0 + 100 >> 2] = 0;
    HEAP32[$0 + 104 >> 2] = 0;
    HEAP32[$0 + 20 >> 2] = 202;
    $1 = HEAP32[$0 + 428 >> 2];
    HEAP32[$0 + 52 >> 2] = $1;
    HEAP32[$0 + 48 >> 2] = $1;
    return 1;
   }
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] >> 2]]($0) | 0;
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 20 >> 2] = 21;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  $1 = 0;
 }
 return $1;
}
function decode_mcu_AC_first_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 $4 = HEAP32[$0 + 468 >> 2];
 label$1 : {
  label$2 : {
   if (HEAP32[$4 + 44 >> 2] | !HEAP32[$0 + 280 >> 2]) {
    break label$2;
   }
   $2 = HEAP32[$0 + 464 >> 2];
   $7 = $4 + 16 | 0;
   HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + (HEAP32[$7 >> 2] / 8 | 0);
   HEAP32[$4 + 16 >> 2] = 0;
   if (!(FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0) | 0)) {
    break label$1;
   }
   if (HEAP32[$0 + 340 >> 2] >= 1) {
    $2 = 0;
    while (1) {
     HEAP32[(($2 << 2) + $4 | 0) + 24 >> 2] = 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
      continue;
     }
     break;
    }
   }
   HEAP32[$4 + 20 >> 2] = 0;
   HEAP32[$4 + 44 >> 2] = HEAP32[$0 + 280 >> 2];
   if (HEAP32[$0 + 440 >> 2]) {
    break label$2;
   }
   HEAP32[$4 + 40 >> 2] = 0;
  }
  if (!HEAP32[$4 + 40 >> 2]) {
   $2 = HEAP32[$4 + 20 >> 2];
   label$6 : {
    if ($2) {
     $6 = $2 - 1 | 0;
     break label$6;
    }
    HEAP32[$3 + 24 >> 2] = $0;
    $2 = HEAP32[$0 + 24 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$3 + 12 >> 2] = HEAP32[$2 + 4 >> 2];
    $2 = HEAP32[$4 + 16 >> 2];
    $7 = HEAP32[$4 + 12 >> 2];
    $8 = HEAP32[$0 + 412 >> 2];
    $10 = HEAP32[$0 + 416 >> 2];
    label$8 : {
     if (($8 | 0) > ($10 | 0)) {
      break label$8;
     }
     $9 = HEAP32[$4 + 64 >> 2];
     $11 = HEAP32[$1 >> 2];
     $12 = HEAP32[$0 + 432 >> 2];
     $13 = HEAP32[$0 + 424 >> 2];
     while (1) {
      label$10 : {
       label$11 : {
        label$12 : {
         if (($2 | 0) <= 7) {
          $5 = 0;
          if (!jpeg_fill_bit_buffer($3 + 8 | 0, $7, $2, 0)) {
           break label$1;
          }
          $7 = HEAP32[$3 + 16 >> 2];
          $2 = HEAP32[$3 + 20 >> 2];
          $1 = 1;
          if (($2 | 0) < 8) {
           break label$12;
          }
         }
         $5 = $7 >> $2 - 8 & 255;
         $1 = HEAP32[(($5 << 2) + $9 | 0) + 144 >> 2];
         if ($1) {
          break label$11;
         }
         $1 = 9;
        }
        $5 = 0;
        $1 = jpeg_huff_decode($3 + 8 | 0, $7, $2, $9, $1);
        if (($1 | 0) < 0) {
         break label$1;
        }
        $2 = HEAP32[$3 + 20 >> 2];
        $7 = HEAP32[$3 + 16 >> 2];
        break label$10;
       }
       $2 = $2 - $1 | 0;
       $1 = HEAPU8[($5 + $9 | 0) + 1168 | 0];
      }
      $6 = $1 >>> 4 | 0;
      $5 = $1 & 15;
      label$14 : {
       if ($5) {
        if (($2 | 0) < ($5 | 0)) {
         if (!jpeg_fill_bit_buffer($3 + 8 | 0, $7, $2, $5)) {
          $5 = 0;
          break label$1;
         }
         $7 = HEAP32[$3 + 16 >> 2];
         $2 = HEAP32[$3 + 20 >> 2];
        }
        $2 = $2 - $5 | 0;
        $1 = $6 + $8 | 0;
        $5 = $5 << 2;
        $6 = HEAP32[$5 + 18080 >> 2];
        $8 = $6 & $7 >> $2;
        HEAP16[(HEAP32[($1 << 2) + $12 >> 2] << 1) + $11 >> 1] = $8 - (HEAP32[$5 + 18076 >> 2] < ($8 | 0) ? 0 : $6) << $13;
        break label$14;
       }
       if (($6 | 0) != 15) {
        if (!$6) {
         break label$8;
        }
        if (($2 | 0) < ($6 | 0)) {
         if (!jpeg_fill_bit_buffer($3 + 8 | 0, $7, $2, $6)) {
          $5 = 0;
          break label$1;
         }
         $7 = HEAP32[$3 + 16 >> 2];
         $2 = HEAP32[$3 + 20 >> 2];
        }
        $2 = $2 - $6 | 0;
        $6 = (HEAP32[($6 << 2) + 18080 >> 2] & $7 >> $2) + (-1 << $6 ^ -1) | 0;
        break label$8;
       }
       $1 = $8 + 15 | 0;
      }
      $8 = $1 + 1 | 0;
      if (($1 | 0) < ($10 | 0)) {
       continue;
      }
      break;
     }
     $6 = 0;
    }
    $0 = HEAP32[$0 + 24 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP32[$4 + 16 >> 2] = $2;
    HEAP32[$4 + 12 >> 2] = $7;
   }
   HEAP32[$4 + 20 >> 2] = $6;
  }
  HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] - 1;
  $5 = 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return $5 | 0;
}
function __embind_register_native_and_builtin_types() {
 _embind_register_void(emscripten__internal__TypeID_void_2c_20void___get_28_29() | 0, 18204);
 _embind_register_bool(emscripten__internal__TypeID_bool_2c_20void___get_28_29() | 0, 18209, 1, 1, 0);
 void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29(18214);
 void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29(18219);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29(18231);
 void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29(18245);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29(18251);
 void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29(18266);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29(18270);
 void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29(18283);
 void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29(18288);
 void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29(18302);
 void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29(18308);
 _embind_register_std_string(emscripten__internal__TypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___get_28_29() | 0, 18315);
 _embind_register_std_string(emscripten__internal__TypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__2c_20void___get_28_29() | 0, 18327);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__2c_20void___get_28_29() | 0, 4, 18360);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__2c_20void___get_28_29() | 0, 2, 18373);
 _embind_register_std_wstring(emscripten__internal__TypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__2c_20void___get_28_29() | 0, 4, 18388);
 _embind_register_emval(emscripten__internal__TypeID_emscripten__val_2c_20void___get_28_29() | 0, 18403);
 void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29(18419);
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(18449);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(18486);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(18525);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(18556);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(18596);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(18625);
 void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29(18663);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29(18693);
 void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(18732);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(18764);
 void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(18797);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(18830);
 void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(18864);
 void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(18897);
 void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29(18931);
 void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29(18962);
}
function decode_mcu_DC_first_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $12 = HEAP32[$0 + 424 >> 2];
 $5 = HEAP32[$0 + 468 >> 2];
 label$1 : {
  label$2 : {
   if (HEAP32[$5 + 44 >> 2] | !HEAP32[$0 + 280 >> 2]) {
    break label$2;
   }
   $4 = HEAP32[$0 + 464 >> 2];
   $8 = $5 + 16 | 0;
   HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + (HEAP32[$8 >> 2] / 8 | 0);
   HEAP32[$5 + 16 >> 2] = 0;
   if (!(FUNCTION_TABLE[HEAP32[$4 + 8 >> 2]]($0) | 0)) {
    break label$1;
   }
   if (HEAP32[$0 + 340 >> 2] >= 1) {
    $4 = 0;
    while (1) {
     HEAP32[(($4 << 2) + $5 | 0) + 24 >> 2] = 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) < HEAP32[$0 + 340 >> 2]) {
      continue;
     }
     break;
    }
   }
   HEAP32[$5 + 20 >> 2] = 0;
   HEAP32[$5 + 44 >> 2] = HEAP32[$0 + 280 >> 2];
   if (HEAP32[$0 + 440 >> 2]) {
    break label$2;
   }
   HEAP32[$5 + 40 >> 2] = 0;
  }
  if (!HEAP32[$5 + 40 >> 2]) {
   HEAP32[$2 + 40 >> 2] = $0;
   $3 = HEAP32[$0 + 24 >> 2];
   $9 = HEAP32[$3 >> 2];
   HEAP32[$2 + 24 >> 2] = $9;
   $10 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 28 >> 2] = $10;
   $4 = HEAP32[$5 + 16 >> 2];
   $8 = HEAP32[$5 + 12 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$5 + 36 >> 2];
   $6 = HEAP32[$5 + 32 >> 2];
   $7 = HEAP32[$5 + 28 >> 2];
   HEAP32[$2 + 8 >> 2] = $7;
   HEAP32[$2 + 12 >> 2] = $6;
   $7 = HEAP32[$5 + 24 >> 2];
   $6 = HEAP32[$5 + 20 >> 2];
   HEAP32[$2 >> 2] = $6;
   HEAP32[$2 + 4 >> 2] = $7;
   if (HEAP32[$0 + 368 >> 2] >= 1) {
    $9 = 0;
    while (1) {
     $3 = $9 << 2;
     $10 = HEAP32[$3 + $1 >> 2];
     $11 = HEAP32[($0 + $3 | 0) + 372 >> 2] << 2;
     $3 = HEAP32[((HEAP32[HEAP32[($11 + $0 | 0) + 344 >> 2] + 20 >> 2] << 2) + $5 | 0) + 48 >> 2];
     label$8 : {
      label$9 : {
       label$10 : {
        if (($4 | 0) <= 7) {
         $6 = 0;
         if (!jpeg_fill_bit_buffer($2 + 24 | 0, $8, $4, 0)) {
          break label$1;
         }
         $8 = HEAP32[$2 + 32 >> 2];
         $4 = HEAP32[$2 + 36 >> 2];
         $7 = 1;
         if (($4 | 0) < 8) {
          break label$10;
         }
        }
        $6 = $8 >> $4 - 8 & 255;
        $7 = HEAP32[(($6 << 2) + $3 | 0) + 144 >> 2];
        if ($7) {
         break label$9;
        }
        $7 = 9;
       }
       $6 = 0;
       $3 = jpeg_huff_decode($2 + 24 | 0, $8, $4, $3, $7);
       if (($3 | 0) < 0) {
        break label$1;
       }
       $8 = HEAP32[$2 + 32 >> 2];
       $4 = HEAP32[$2 + 36 >> 2];
       break label$8;
      }
      $3 = HEAPU8[($3 + $6 | 0) + 1168 | 0];
      $4 = $4 - $7 | 0;
     }
     if ($3) {
      if (($4 | 0) < ($3 | 0)) {
       if (!jpeg_fill_bit_buffer($2 + 24 | 0, $8, $4, $3)) {
        $6 = 0;
        break label$1;
       }
       $8 = HEAP32[$2 + 32 >> 2];
       $4 = HEAP32[$2 + 36 >> 2];
      }
      $4 = $4 - $3 | 0;
      $3 = $3 << 2;
      $6 = HEAP32[$3 + 18080 >> 2];
      $7 = $6 & $8 >> $4;
      $6 = $7 - (HEAP32[$3 + 18076 >> 2] < ($7 | 0) ? 0 : $6) | 0;
     } else {
      $6 = 0;
     }
     $11 = $2 + $11 | 0;
     $3 = $11 + 4 | 0;
     $7 = $3;
     $3 = $6 + HEAP32[$11 + 4 >> 2] | 0;
     HEAP32[$7 >> 2] = $3;
     HEAP16[$10 >> 1] = $3 << $12;
     $9 = $9 + 1 | 0;
     if (($9 | 0) < HEAP32[$0 + 368 >> 2]) {
      continue;
     }
     break;
    }
    $10 = HEAP32[$2 + 28 >> 2];
    $9 = HEAP32[$2 + 24 >> 2];
    $3 = HEAP32[$0 + 24 >> 2];
   }
   HEAP32[$3 + 4 >> 2] = $10;
   HEAP32[$3 >> 2] = $9;
   HEAP32[$5 + 16 >> 2] = $4;
   HEAP32[$5 + 12 >> 2] = $8;
   $4 = $5 + 20 | 0;
   HEAP32[$4 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
   $6 = HEAP32[$2 + 12 >> 2];
   $7 = HEAP32[$2 + 8 >> 2];
   HEAP32[$5 + 28 >> 2] = $7;
   HEAP32[$5 + 32 >> 2] = $6;
   $7 = HEAP32[$2 + 4 >> 2];
   $6 = HEAP32[$2 >> 2];
   HEAP32[$5 + 20 >> 2] = $6;
   HEAP32[$5 + 24 >> 2] = $7;
  }
  HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 44 >> 2] - 1;
  $6 = 1;
 }
 __stack_pointer = $2 + 48 | 0;
 return $6 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnscopedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 30704);
 $5 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $5;
 HEAP32[$2 + 20 >> 2] = $3;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2 + 16 | 0)) {
    $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 23026);
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$2 + 12 >> 2] = $5;
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2 + 8 | 0)) {
     break label$2;
    }
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), $1);
   HEAP32[$2 + 28 >> 2] = $1;
   $3 = 0;
   if (!$1) {
    break label$1;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__StdQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 28 | 0);
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnqualifiedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0), $1);
 }
 __stack_pointer = $2 + 48 | 0;
 $0 = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 $6 = $0 + 12 | 0;
 if ($28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_20const__29($6, $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 120 | 0, 23454))) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 112 | 0, 23852);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 56 >> 2] = $4;
  HEAP32[$2 + 60 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 56 | 0);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 104 | 0, 23852);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = $5;
 HEAP32[$2 + 52 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 48 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 96 | 0, 26140);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = $4;
 HEAP32[$2 + 44 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 40 | 0);
 $3 = $0;
 $5 = HEAP32[$3 + 12 >> 2];
 $4 = HEAP32[$3 + 16 >> 2];
 $3 = $5;
 HEAP32[$2 + 32 >> 2] = $5;
 HEAP32[$2 + 36 >> 2] = $4;
 HEAP32[$2 + 88 >> 2] = $3;
 HEAP32[$2 + 92 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 32 | 0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 80 | 0, 26143);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 20 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 72 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $5;
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 if ($28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_20const__29($6, $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 120 | 0, 23454))) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 - -64 | 0, 23378);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 __stack_pointer = $2 + 128 | 0;
}
function process_data_context_main($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 label$1 : {
  $4 = HEAP32[$0 + 448 >> 2];
  if (!HEAP32[$4 + 56 >> 2]) {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 452 >> 2] + 12 >> 2]]($0, HEAP32[((HEAP32[$4 + 68 >> 2] << 2) + $4 | 0) + 60 >> 2]) | 0)) {
    break label$1;
   }
   HEAP32[$4 + 56 >> 2] = 1;
   HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
  }
  label$3 : {
   switch (HEAP32[$4 + 72 >> 2]) {
   case 2:
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] + 4 >> 2]]($0, HEAP32[((HEAP32[$4 + 68 >> 2] << 2) + $4 | 0) + 60 >> 2], $4 + 48 | 0, HEAP32[$4 + 52 >> 2], $1, $2, $3);
    if (HEAPU32[$4 + 48 >> 2] < HEAPU32[$4 + 52 >> 2]) {
     break label$1;
    }
    HEAP32[$4 + 72 >> 2] = 0;
    if (HEAPU32[$2 >> 2] >= $3 >>> 0) {
     break label$1;
    }
   case 0:
    HEAP32[$4 + 48 >> 2] = 0;
    $10 = HEAP32[$0 + 328 >> 2];
    HEAP32[$4 + 52 >> 2] = $10 - 1;
    label$6 : {
     if (HEAP32[$4 + 76 >> 2] != HEAP32[$0 + 332 >> 2]) {
      break label$6;
     }
     $11 = HEAP32[$0 + 36 >> 2];
     if (($11 | 0) < 1) {
      break label$6;
     }
     $15 = HEAP32[$0 + 448 >> 2];
     $8 = $15 + (HEAP32[$15 + 68 >> 2] << 2) | 0;
     $6 = HEAP32[$0 + 216 >> 2];
     while (1) {
      $5 = Math_imul(HEAP32[$6 + 40 >> 2], HEAP32[$6 + 12 >> 2]);
      $7 = HEAPU32[$6 + 48 >> 2] % ($5 >>> 0) | 0;
      $7 = $7 ? $7 : $5;
      $5 = ($5 | 0) / ($10 | 0) | 0;
      if (!$13) {
       HEAP32[$15 + 52 >> 2] = (($7 - 1 | 0) / ($5 | 0) | 0) + 1;
      }
      if (($5 | 0) >= 1) {
       $5 = $5 << 1;
       $14 = ($5 | 0) > 1 ? $5 : 1;
       $9 = HEAP32[HEAP32[$8 + 60 >> 2] + ($13 << 2) >> 2];
       $12 = ($9 + ($7 << 2) | 0) - 4 | 0;
       $5 = 0;
       while (1) {
        HEAP32[($5 + $7 << 2) + $9 >> 2] = HEAP32[$12 >> 2];
        $5 = $5 + 1 | 0;
        if (($14 | 0) != ($5 | 0)) {
         continue;
        }
        break;
       }
      }
      $6 = $6 + 88 | 0;
      $13 = $13 + 1 | 0;
      if (($11 | 0) != ($13 | 0)) {
       continue;
      }
      break;
     }
    }
    HEAP32[$4 + 72 >> 2] = 1;
    break;
   case 1:
    break label$3;
   default:
    break label$1;
   }
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] + 4 >> 2]]($0, HEAP32[((HEAP32[$4 + 68 >> 2] << 2) + $4 | 0) + 60 >> 2], $4 + 48 | 0, HEAP32[$4 + 52 >> 2], $1, $2, $3);
  if (HEAPU32[$4 + 48 >> 2] < HEAPU32[$4 + 52 >> 2]) {
   break label$1;
  }
  label$11 : {
   if (HEAP32[$4 + 76 >> 2] != 1) {
    $8 = HEAP32[$0 + 328 >> 2];
    break label$11;
   }
   $8 = HEAP32[$0 + 328 >> 2];
   $3 = HEAP32[$0 + 36 >> 2];
   if (($3 | 0) < 1) {
    break label$11;
   }
   $2 = HEAP32[$0 + 448 >> 2];
   $1 = $8 + 2 | 0;
   $15 = $8 + 1 | 0;
   $10 = HEAP32[$0 + 216 >> 2];
   $11 = 0;
   while (1) {
    $9 = (Math_imul(HEAP32[$10 + 40 >> 2], HEAP32[$10 + 12 >> 2]) | 0) / ($8 | 0) | 0;
    if (($9 | 0) >= 1) {
     $5 = $11 << 2;
     $7 = HEAP32[$5 + HEAP32[$2 + 64 >> 2] >> 2];
     $14 = HEAP32[HEAP32[$2 + 60 >> 2] + $5 >> 2];
     $13 = Math_imul($1, $9);
     $0 = Math_imul($9, $15);
     $5 = 0;
     while (1) {
      $12 = $5 - $9 << 2;
      $6 = $0 + $5 << 2;
      HEAP32[$12 + $14 >> 2] = HEAP32[$14 + $6 >> 2];
      HEAP32[$7 + $12 >> 2] = HEAP32[$7 + $6 >> 2];
      $12 = $5 + $13 << 2;
      $6 = $5 << 2;
      HEAP32[$12 + $14 >> 2] = HEAP32[$14 + $6 >> 2];
      HEAP32[$7 + $12 >> 2] = HEAP32[$7 + $6 >> 2];
      $5 = $5 + 1 | 0;
      if (($9 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
    }
    $10 = $10 + 88 | 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 72 >> 2] = 2;
  HEAP32[$4 + 52 >> 2] = $8 + 2;
  HEAP32[$4 + 48 >> 2] = $8 + 1;
  HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] ^ 1;
 }
}
function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   if (HEAP32[$1 + 44 >> 2] != 4) {
    $5 = $0 + 16 | 0;
    $3 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $9 = $1;
    label$7 : {
     label$8 : {
      while (1) {
       label$10 : {
        if ($3 >>> 0 <= $5 >>> 0) {
         break label$10;
        }
        HEAP16[$1 + 52 >> 1] = 0;
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
        if (HEAPU8[$1 + 54 | 0]) {
         break label$10;
        }
        label$11 : {
         if (!HEAPU8[$1 + 53 | 0]) {
          break label$11;
         }
         if (HEAPU8[$1 + 52 | 0]) {
          $6 = 1;
          if (HEAP32[$1 + 24 >> 2] == 1) {
           break label$8;
          }
          $7 = 1;
          $8 = 1;
          if (HEAPU8[$0 + 8 | 0] & 2) {
           break label$11;
          }
          break label$8;
         }
         $7 = 1;
         $6 = $8;
         if (!(HEAP8[$0 + 8 | 0] & 1)) {
          break label$8;
         }
        }
        $5 = $5 + 8 | 0;
        continue;
       }
       break;
      }
      $6 = $8;
      $5 = 4;
      if (!$7) {
       break label$7;
      }
     }
     $5 = 3;
    }
    HEAP32[$9 + 44 >> 2] = $5;
    if ($6 & 1) {
     break label$2;
    }
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $5 = HEAP32[$0 + 12 >> 2];
  $6 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4);
  if (($5 | 0) < 2) {
   break label$2;
  }
  $6 = ($5 << 3) + $6 | 0;
  $5 = $0 + 24 | 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!(HEAP32[$1 + 36 >> 2] != 1 ? !($0 & 2) : 0)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0]) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($6 >>> 0 > $5 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if (!($0 & 1)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($6 >>> 0 > $5 >>> 0) {
     continue;
    }
    break label$2;
   }
  }
  while (1) {
   if (HEAPU8[$1 + 54 | 0] | (HEAP32[$1 + 24 >> 2] == 1 ? HEAP32[$1 + 36 >> 2] == 1 : 0)) {
    break label$2;
   }
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
   $5 = $5 + 8 | 0;
   if ($6 >>> 0 > $5 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___rehash_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = $2;
 label$1 : {
  if (($1 | 0) == 1) {
   $1 = 2;
  } else {
   if (!($1 - 1 & $1)) {
    break label$1;
   }
   $1 = std____2____next_prime_28unsigned_20long_29($1);
  }
  HEAP32[$3 + 12 >> 2] = $1;
 }
 $4 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___bucket_count_28_29_20const($0);
 label$4 : {
  if ($4 >>> 0 < $1 >>> 0) {
   std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____rehash_28unsigned_20long_29($0, $1);
   break label$4;
  }
  if ($1 >>> 0 >= $4 >>> 0) {
   break label$4;
  }
  $1 = std____2____is_hash_power2_28unsigned_20long_29($4);
  $5 = ceil_28float_29(Math_fround(Math_fround(HEAPU32[std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___size_28_29($0) >> 2]) / HEAPF32[std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___max_load_factor_28_29($0) >> 2]));
  label$6 : {
   if ($5 < Math_fround(4294967296) & $5 >= Math_fround(0)) {
    $3 = ~~$5 >>> 0;
    break label$6;
   }
   $3 = 0;
  }
  $6 = $2;
  label$8 : {
   if ($1) {
    $1 = std____2____next_hash_pow2_28unsigned_20long_29($3);
    break label$8;
   }
   $1 = std____2____next_prime_28unsigned_20long_29($3);
  }
  HEAP32[$6 + 8 >> 2] = $1;
  $1 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 12 | 0, $2 + 8 | 0) >> 2];
  HEAP32[$2 + 12 >> 2] = $1;
  if ($1 >>> 0 >= $4 >>> 0) {
   break label$4;
  }
  std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____rehash_28unsigned_20long_29($0, $1);
 }
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 if (HEAPU8[$0 + 28 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 104 | 0, 28568);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 48 >> 2] = $4;
  HEAP32[$2 + 52 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 48 | 0);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 96 | 0, 28580);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = $5;
 HEAP32[$2 + 44 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 40 | 0);
 if (HEAPU8[$0 + 29 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 88 | 0, 25476);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = $4;
  HEAP32[$2 + 36 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 32 | 0);
 }
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
 $6 = $0 + 8 | 0;
 if (!$28anonymous_20namespace_29__itanium_demangle__NodeArray__empty_28_29_20const($6)) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 80 | 0, 23852);
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = $5;
  HEAP32[$2 + 28 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
  $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($6, $1);
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 72 | 0, 23378);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 $0 = $0 + 20 | 0;
 if (!$28anonymous_20namespace_29__itanium_demangle__NodeArray__empty_28_29_20const($0)) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 - -64 | 0, 23852);
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $5;
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
  $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 56 | 0, 23378);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = $4;
  HEAP32[$2 + 4 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 }
 __stack_pointer = $2 + 112 | 0;
}
function ar2ReadImageSetOld($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    $6 = dlmalloc(8);
    if ($6) {
     $1 = $6;
     label$5 : {
      $3 = $6 + 4 | 0;
      if ((fread($3, 4, 1, $0) | 0) == 1) {
       $5 = HEAP32[$1 + 4 >> 2];
       if (($5 | 0) > 0) {
        break label$5;
       }
      }
      arLog(0, 3, 5486, 0);
      break label$3;
     }
     $3 = dlmalloc($5 << 2);
     HEAP32[$6 >> 2] = $3;
     if ($3) {
      while (1) {
       if (($2 | 0) == ($5 | 0)) {
        $2 = 0;
        label$10 : {
         while (1) {
          if (($2 | 0) == ($5 | 0)) {
           break label$2;
          }
          $1 = ($2 << 2) + $3 | 0;
          if ((fread(HEAP32[$1 >> 2] + 4 | 0, 4, 1, $0) | 0) != 1) {
           $1 = 0;
           while (1) {
            if (($2 | 0) == ($1 | 0)) {
             $2 = 0;
             while (1) {
              if (($2 | 0) == ($5 | 0)) {
               break label$10;
              }
              dlfree(HEAP32[($2 << 2) + $3 >> 2]);
              $2 = $2 + 1 | 0;
              continue;
             }
            }
            dlfree(HEAP32[HEAP32[($1 << 2) + $3 >> 2] >> 2]);
            $1 = $1 + 1 | 0;
            continue;
           }
          }
          if ((fread(HEAP32[$1 >> 2] + 8 | 0, 4, 1, $0) | 0) != 1) {
           $1 = 0;
           while (1) {
            if (($2 | 0) == ($1 | 0)) {
             $2 = 0;
             while (1) {
              if (($2 | 0) == ($5 | 0)) {
               break label$10;
              }
              dlfree(HEAP32[($2 << 2) + $3 >> 2]);
              $2 = $2 + 1 | 0;
              continue;
             }
            }
            dlfree(HEAP32[HEAP32[($1 << 2) + $3 >> 2] >> 2]);
            $1 = $1 + 1 | 0;
            continue;
           }
          }
          if ((fread(HEAP32[$1 >> 2] + 12 | 0, 4, 1, $0) | 0) != 1) {
           $1 = 0;
           while (1) {
            if (($2 | 0) == ($1 | 0)) {
             $2 = 0;
             while (1) {
              if (($2 | 0) == ($5 | 0)) {
               break label$10;
              }
              dlfree(HEAP32[($2 << 2) + $3 >> 2]);
              $2 = $2 + 1 | 0;
              continue;
             }
            }
            dlfree(HEAP32[HEAP32[($1 << 2) + $3 >> 2] >> 2]);
            $1 = $1 + 1 | 0;
            continue;
           }
          }
          $4 = HEAP32[$1 >> 2];
          $4 = dlmalloc(Math_imul(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2]));
          HEAP32[HEAP32[$1 >> 2] >> 2] = $4;
          if (!$4) {
           break label$1;
          }
          $2 = $2 + 1 | 0;
          $4 = HEAP32[$1 >> 2];
          $4 = fread(HEAP32[$4 >> 2], 1, Math_imul(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2]), $0);
          $1 = HEAP32[$1 >> 2];
          if (($4 | 0) == (Math_imul(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]) | 0)) {
           continue;
          }
          break;
         }
         $1 = 0;
         while (1) {
          if (($2 | 0) == ($1 | 0)) {
           $2 = 0;
           while (1) {
            if (($2 | 0) == ($5 | 0)) {
             break label$10;
            }
            dlfree(HEAP32[($2 << 2) + $3 >> 2]);
            $2 = $2 + 1 | 0;
            continue;
           }
          }
          dlfree(HEAP32[HEAP32[($1 << 2) + $3 >> 2] >> 2]);
          $1 = $1 + 1 | 0;
          continue;
         }
        }
        dlfree($3);
        break label$3;
       }
       $4 = ($2 << 2) + $3 | 0;
       $1 = dlmalloc(16);
       HEAP32[$4 >> 2] = $1;
       $2 = $2 + 1 | 0;
       if ($1) {
        continue;
       }
       break;
      }
      break label$1;
     }
     break label$1;
    }
    break label$1;
   }
   dlfree($6);
   $6 = 0;
  }
  fclose($0);
  return $6;
 }
 arLog(0, 3, 1837, 0);
 exit(1);
 abort();
}
function jpeg_idct_9x9($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $21 = __stack_pointer - 288 | 0;
 __stack_pointer = $21;
 $22 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $21;
 while (1) {
  $8 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $9 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $15 = Math_imul($8 + $9 | 0, 7447);
  $5 = Math_imul(Math_imul(HEAP16[$2 + 96 >> 1], HEAP32[$0 + 192 >> 2]), 5793);
  $12 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $13 = $5 + $12 | 0;
  $6 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $7 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $16 = Math_imul($6 + $7 | 0, 10887);
  $17 = Math_imul($6, 2012);
  $18 = $13 + ($16 - $17 | 0) | 0;
  $10 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $19 = Math_imul($10 + $9 | 0, 3962);
  $11 = Math_imul(Math_imul(HEAP16[$2 + 48 >> 1], HEAP32[$0 + 96 >> 2]), -10033);
  $20 = $19 + ($15 - $11 | 0) | 0;
  HEAP32[$1 + 256 >> 2] = $18 - $20 >> 11;
  HEAP32[$1 >> 2] = $18 + $20 >> 11;
  $5 = ($12 - $5 | 0) - $5 | 0;
  $6 = $7 - $6 | 0;
  HEAP32[$1 + 128 >> 2] = $5 + Math_imul($6, -11586) >> 11;
  $6 = Math_imul($6, 5793) + $5 | 0;
  $5 = Math_imul(($9 - $8 | 0) - $10 | 0, 10033);
  HEAP32[$1 + 224 >> 2] = $6 - $5 >> 11;
  HEAP32[$1 + 32 >> 2] = $5 + $6 >> 11;
  $6 = Math_imul($7, 8875);
  $7 = $6 + ($13 - $16 | 0) | 0;
  $5 = Math_imul($8 - $10 | 0, 11409);
  $8 = ($11 - $5 | 0) + $15 | 0;
  HEAP32[$1 + 192 >> 2] = $7 - $8 >> 11;
  HEAP32[$1 + 64 >> 2] = $7 + $8 >> 11;
  $6 = ($13 - $6 | 0) + $17 | 0;
  $7 = ($5 + $11 | 0) + $19 | 0;
  HEAP32[$1 + 160 >> 2] = $6 - $7 >> 11;
  HEAP32[$1 + 96 >> 2] = $6 + $7 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $14 = $14 + 1 | 0;
  if (($14 | 0) != 8) {
   continue;
  }
  break;
 }
 $2 = $22 - 384 | 0;
 $6 = 0;
 $1 = $21;
 while (1) {
  $5 = HEAP32[$1 + 4 >> 2];
  $7 = HEAP32[$1 + 20 >> 2];
  $16 = Math_imul($5 + $7 | 0, 7447);
  $0 = HEAP32[($6 << 2) + $3 >> 2] + $4 | 0;
  $8 = HEAP32[$1 + 28 >> 2];
  $17 = Math_imul($8 + $5 | 0, 3962);
  $13 = Math_imul(HEAP32[$1 + 12 >> 2], -10033);
  $12 = $17 + ($16 - $13 | 0) | 0;
  $10 = Math_imul(HEAP32[$1 + 24 >> 2], 5793);
  $19 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
  $14 = $10 + $19 | 0;
  $9 = HEAP32[$1 + 16 >> 2];
  $11 = HEAP32[$1 + 8 >> 2];
  $18 = Math_imul($9 + $11 | 0, 10887);
  $15 = Math_imul($9, 2012);
  $20 = $14 + ($18 - $15 | 0) | 0;
  HEAP8[$0 | 0] = HEAPU8[($12 + $20 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 8 | 0] = HEAPU8[($20 - $12 >>> 18 & 1023) + $2 | 0];
  $5 = Math_imul(($5 - $7 | 0) - $8 | 0, 10033);
  $10 = ($19 - $10 | 0) - $10 | 0;
  $9 = $11 - $9 | 0;
  $12 = $10 + Math_imul($9, 5793) | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($5 + $12 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 7 | 0] = HEAPU8[($12 - $5 >>> 18 & 1023) + $2 | 0];
  $7 = Math_imul($7 - $8 | 0, 11409);
  $5 = ($13 - $7 | 0) + $16 | 0;
  $8 = Math_imul($11, 8875);
  $11 = $8 + ($14 - $18 | 0) | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($5 + $11 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 6 | 0] = HEAPU8[($11 - $5 >>> 18 & 1023) + $2 | 0];
  $5 = ($14 - $8 | 0) + $15 | 0;
  $7 = ($7 + $13 | 0) + $17 | 0;
  HEAP8[$0 + 3 | 0] = HEAPU8[($5 + $7 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($5 - $7 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[(Math_imul($9, -11586) + $10 >>> 18 & 1023) + $2 | 0];
  $1 = $1 + 32 | 0;
  $6 = $6 + 1 | 0;
  if (($6 | 0) != 9) {
   continue;
  }
  break;
 }
 __stack_pointer = $21 + 288 | 0;
}
function jpeg_idct_6x3($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $9 = HEAP32[$0 + 336 >> 2];
 $7 = HEAP16[$2 + 16 >> 1];
 $1 = HEAP32[$1 + 84 >> 2];
 $6 = HEAP32[$1 + 32 >> 2];
 $5 = __stack_pointer;
 $0 = $5 - 80 | 0;
 $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
 $8 = Math_imul(Math_imul(HEAP16[$2 + 32 >> 1], HEAP32[$1 + 64 >> 2]), 5793);
 HEAP32[$0 + 24 >> 2] = $5 - ($8 << 1) >> 11;
 $5 = $5 + $8 | 0;
 $7 = Math_imul(Math_imul($6, $7), 10033);
 HEAP32[$0 + 48 >> 2] = $5 - $7 >> 11;
 HEAP32[$0 >> 2] = $5 + $7 >> 11;
 $5 = HEAP32[$1 + 36 >> 2];
 $7 = HEAP16[$2 + 18 >> 1];
 $6 = Math_imul(HEAP16[$2 + 2 >> 1], HEAP32[$1 + 4 >> 2]) << 13 | 1024;
 $8 = Math_imul(Math_imul(HEAP16[$2 + 34 >> 1], HEAP32[$1 + 68 >> 2]), 5793);
 HEAP32[$0 + 28 >> 2] = $6 - ($8 << 1) >> 11;
 $6 = $6 + $8 | 0;
 $5 = Math_imul(Math_imul($5, $7), 10033);
 HEAP32[$0 + 52 >> 2] = $6 - $5 >> 11;
 HEAP32[$0 + 4 >> 2] = $5 + $6 >> 11;
 $5 = HEAP32[$1 + 40 >> 2];
 $7 = HEAP16[$2 + 20 >> 1];
 $6 = Math_imul(HEAP16[$2 + 4 >> 1], HEAP32[$1 + 8 >> 2]) << 13 | 1024;
 $8 = Math_imul(Math_imul(HEAP16[$2 + 36 >> 1], HEAP32[$1 + 72 >> 2]), 5793);
 HEAP32[$0 + 32 >> 2] = $6 - ($8 << 1) >> 11;
 $6 = $6 + $8 | 0;
 $5 = Math_imul(Math_imul($5, $7), 10033);
 HEAP32[$0 + 56 >> 2] = $6 - $5 >> 11;
 HEAP32[$0 + 8 >> 2] = $5 + $6 >> 11;
 $5 = HEAP32[$1 + 44 >> 2];
 $7 = HEAP16[$2 + 22 >> 1];
 $6 = Math_imul(HEAP16[$2 + 6 >> 1], HEAP32[$1 + 12 >> 2]) << 13 | 1024;
 $8 = Math_imul(Math_imul(HEAP16[$2 + 38 >> 1], HEAP32[$1 + 76 >> 2]), 5793);
 HEAP32[$0 + 36 >> 2] = $6 - ($8 << 1) >> 11;
 $6 = $6 + $8 | 0;
 $5 = Math_imul(Math_imul($5, $7), 10033);
 HEAP32[$0 + 60 >> 2] = $6 - $5 >> 11;
 HEAP32[$0 + 12 >> 2] = $5 + $6 >> 11;
 $5 = HEAP32[$1 + 48 >> 2];
 $7 = HEAP16[$2 + 24 >> 1];
 $6 = Math_imul(HEAP16[$2 + 8 >> 1], HEAP32[$1 + 16 >> 2]) << 13 | 1024;
 $8 = Math_imul(Math_imul(HEAP16[$2 + 40 >> 1], HEAP32[$1 + 80 >> 2]), 5793);
 HEAP32[$0 + 40 >> 2] = $6 - ($8 << 1) >> 11;
 $6 = $6 + $8 | 0;
 $5 = Math_imul(Math_imul($5, $7), 10033);
 HEAP32[$0 + 64 >> 2] = $6 - $5 >> 11;
 HEAP32[$0 + 16 >> 2] = $5 + $6 >> 11;
 $5 = HEAP32[$1 + 52 >> 2];
 $7 = HEAP16[$2 + 26 >> 1];
 $6 = Math_imul(HEAP16[$2 + 10 >> 1], HEAP32[$1 + 20 >> 2]) << 13 | 1024;
 $2 = Math_imul(Math_imul(HEAP16[$2 + 42 >> 1], HEAP32[$1 + 84 >> 2]), 5793);
 HEAP32[$0 + 44 >> 2] = $6 - ($2 << 1) >> 11;
 $2 = $2 + $6 | 0;
 $1 = Math_imul(Math_imul($5, $7), 10033);
 HEAP32[$0 + 68 >> 2] = $2 - $1 >> 11;
 HEAP32[$0 + 20 >> 2] = $1 + $2 >> 11;
 $1 = $9 - 384 | 0;
 $5 = 0;
 $2 = $0;
 while (1) {
  $0 = HEAP32[($5 << 2) + $3 >> 2] + $4 | 0;
  $7 = HEAP32[$2 + 4 >> 2];
  $9 = HEAP32[$2 + 20 >> 2];
  $10 = Math_imul($7 + $9 | 0, 2998);
  $6 = HEAP32[$2 + 12 >> 2];
  $11 = $10 + ($7 + $6 << 13) | 0;
  $8 = Math_imul(HEAP32[$2 + 16 >> 2], 5793);
  $12 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
  $13 = $8 + $12 | 0;
  $14 = Math_imul(HEAP32[$2 + 8 >> 2], 10033);
  $15 = $13 + $14 | 0;
  HEAP8[$0 | 0] = HEAPU8[($11 + $15 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($15 - $11 >>> 18 & 1023) + $1 | 0];
  $7 = ($7 - $6 | 0) - $9 << 13;
  $8 = ($12 - $8 | 0) - $8 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($7 + $8 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($8 - $7 >>> 18 & 1023) + $1 | 0];
  $7 = $13 - $14 | 0;
  $9 = ($9 - $6 << 13) + $10 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($7 + $9 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[($7 - $9 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 24 | 0;
  $5 = $5 + 1 | 0;
  if (($5 | 0) != 3) {
   continue;
  }
  break;
 }
}
function jpeg_idct_12x6($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $19 = __stack_pointer - 192 | 0;
 __stack_pointer = $19;
 $7 = HEAP32[$0 + 336 >> 2];
 $1 = HEAP32[$1 + 84 >> 2];
 $0 = $19;
 while (1) {
  $12 = HEAP32[$1 + 64 >> 2];
  $11 = HEAP16[$2 + 32 >> 1];
  $13 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $8 = Math_imul(Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$1 + 128 >> 2]), 5793);
  $15 = $13 - ($8 << 1) >> 11;
  $5 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $9 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $6 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $14 = ($5 - $9 | 0) - $6 << 2;
  HEAP32[$0 + 128 >> 2] = $15 - $14;
  HEAP32[$0 + 32 >> 2] = $14 + $15;
  $12 = Math_imul(Math_imul($12, $11), 10033);
  $11 = $8 + $13 | 0;
  $13 = $12 + $11 | 0;
  $8 = Math_imul($5 + $6 | 0, 2998);
  $5 = $8 + ($5 + $9 << 13) | 0;
  HEAP32[$0 + 160 >> 2] = $13 - $5 >> 11;
  HEAP32[$0 >> 2] = $5 + $13 >> 11;
  $5 = $11 - $12 | 0;
  $9 = ($6 - $9 << 13) + $8 | 0;
  HEAP32[$0 + 96 >> 2] = $5 - $9 >> 11;
  HEAP32[$0 + 64 >> 2] = $5 + $9 >> 11;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $2 = $2 + 2 | 0;
  $10 = $10 + 1 | 0;
  if (($10 | 0) != 8) {
   continue;
  }
  break;
 }
 $2 = $7 - 384 | 0;
 $12 = 0;
 $0 = $19;
 while (1) {
  $1 = HEAP32[($12 << 2) + $3 >> 2] + $4 | 0;
  $5 = HEAP32[$0 + 28 >> 2];
  $6 = HEAP32[$0 + 20 >> 2];
  $9 = HEAP32[$0 + 4 >> 2];
  $10 = $6 + $9 | 0;
  $13 = Math_imul($5 + $10 | 0, 7053);
  $14 = $13 + Math_imul($10, 2139) | 0;
  $11 = HEAP32[$0 + 12 >> 2];
  $15 = Math_imul($11, 10703);
  $7 = $14 + ($15 + Math_imul($9, 2295) | 0) | 0;
  $16 = HEAP32[$0 + 24 >> 2];
  $17 = $16 << 13;
  $8 = HEAP32[$0 + 8 >> 2];
  $20 = $17 + Math_imul($8, 11190) | 0;
  $10 = (HEAP32[$0 >> 2] << 13) + 134348800 | 0;
  $21 = Math_imul(HEAP32[$0 + 16 >> 2], 10033);
  $22 = $10 + $21 | 0;
  $18 = $20 + $22 | 0;
  HEAP8[$1 | 0] = HEAPU8[($7 + $18 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 11 | 0] = HEAPU8[($18 - $7 >>> 18 & 1023) + $2 | 0];
  $7 = $9 - $5 | 0;
  $18 = $11 - $6 | 0;
  $23 = Math_imul($7 + $18 | 0, 4433);
  $7 = $23 + Math_imul($7, 6270) | 0;
  $16 = $8 - $16 << 13;
  $24 = $16 + $10 | 0;
  HEAP8[$1 + 1 | 0] = HEAPU8[($7 + $24 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 10 | 0] = HEAPU8[($24 - $7 >>> 18 & 1023) + $2 | 0];
  $11 = Math_imul($11, -4433);
  $7 = $11 + Math_imul($6, -12112) | 0;
  $6 = Math_imul($5 + $6 | 0, -8565);
  $14 = ($7 + $6 | 0) + $14 | 0;
  $8 = Math_imul($8, 2998) - $17 | 0;
  $7 = $10 - $21 | 0;
  $17 = $8 + $7 | 0;
  HEAP8[$1 + 2 | 0] = HEAPU8[($14 + $17 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 9 | 0] = HEAPU8[($17 - $14 >>> 18 & 1023) + $2 | 0];
  $6 = ((Math_imul($5, 12998) - $15 | 0) + $13 | 0) + $6 | 0;
  $8 = $7 - $8 | 0;
  HEAP8[$1 + 3 | 0] = HEAPU8[($6 + $8 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 8 | 0] = HEAPU8[($8 - $6 >>> 18 & 1023) + $2 | 0];
  $6 = Math_imul($18, -15137) + $23 | 0;
  $10 = $10 - $16 | 0;
  HEAP8[$1 + 4 | 0] = HEAPU8[($6 + $10 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 7 | 0] = HEAPU8[($10 - $6 >>> 18 & 1023) + $2 | 0];
  $5 = ((Math_imul($9, -5540) + $11 | 0) + Math_imul($5, -16244) | 0) + $13 | 0;
  $9 = $22 - $20 | 0;
  HEAP8[$1 + 5 | 0] = HEAPU8[($5 + $9 >>> 18 & 1023) + $2 | 0];
  HEAP8[$1 + 6 | 0] = HEAPU8[($9 - $5 >>> 18 & 1023) + $2 | 0];
  $0 = $0 + 32 | 0;
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 6) {
   continue;
  }
  break;
 }
 __stack_pointer = $19 + 192 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 104 | 0, 23852);
 $3 = HEAP32[$4 >> 2];
 $5 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = $3;
 HEAP32[$2 + 52 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 48 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 12 | 0, $1);
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 96 | 0, 23378);
 $5 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = $5;
 HEAP32[$2 + 44 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 40 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 $3 = HEAP32[$0 + 20 >> 2];
 if ($3 & 1) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 88 | 0, 31180);
  $3 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = $3;
  HEAP32[$2 + 36 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 32 | 0);
  $3 = HEAP32[$0 + 20 >> 2];
 }
 if ($3 & 2) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 80 | 0, 31187);
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = $5;
  HEAP32[$2 + 28 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
  $3 = HEAP32[$0 + 20 >> 2];
 }
 if ($3 & 4) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 72 | 0, 31197);
  $3 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = $3;
  HEAP32[$2 + 20 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 }
 $6 = $2;
 label$6 : {
  label$7 : {
   label$8 : {
    switch (HEAPU8[$0 + 24 | 0] - 1 | 0) {
    case 0:
     $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 - -64 | 0, 31207);
     break label$7;
    case 1:
     break label$8;
    default:
     break label$6;
    }
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 56 | 0, 31210);
  }
  $4 = $3;
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $4 = $5;
  $5 = $6;
  HEAP32[$5 + 8 >> 2] = $4;
  HEAP32[$5 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 if (HEAP32[$0 + 28 >> 2]) {
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 28 >> 2], $1);
 }
 __stack_pointer = $2 + 112 | 0;
}
function decompress_onepass($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $2 = HEAP32[$0 + 332 >> 2];
 $5 = HEAP32[$0 + 452 >> 2];
 $9 = HEAP32[$5 + 24 >> 2];
 label$1 : {
  $4 = HEAP32[$5 + 28 >> 2];
  if (($9 | 0) < ($4 | 0)) {
   $16 = $2 - 1 | 0;
   $11 = HEAP32[$0 + 360 >> 2] - 1 | 0;
   $14 = $5 + 32 | 0;
   $7 = HEAP32[$5 + 20 >> 2];
   while (1) {
    if ($7 >>> 0 <= $11 >>> 0) {
     while (1) {
      if (HEAP32[$0 + 436 >> 2]) {
       memset(HEAP32[$14 >> 2], 0, HEAP32[$0 + 368 >> 2] << 7);
      }
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 468 >> 2] + 4 >> 2]]($0, $14) | 0)) {
       break label$1;
      }
      $2 = HEAP32[$0 + 340 >> 2];
      if (($2 | 0) >= 1) {
       $6 = 0;
       $10 = 0;
       while (1) {
        $3 = HEAP32[(($10 << 2) + $0 | 0) + 344 >> 2];
        label$9 : {
         if (!HEAP32[$3 + 52 >> 2]) {
          $6 = HEAP32[$3 + 64 >> 2] + $6 | 0;
          break label$9;
         }
         $4 = HEAP32[$3 + 60 >> 2];
         if (($4 | 0) < 1) {
          break label$9;
         }
         $17 = Math_imul(HEAP32[$3 + 68 >> 2], $7);
         $2 = HEAP32[$3 + 4 >> 2] << 2;
         $18 = HEAP32[($2 + HEAP32[$0 + 472 >> 2] | 0) + 4 >> 2];
         $12 = HEAP32[$1 + $2 >> 2];
         $2 = HEAP32[$3 + 40 >> 2];
         $13 = $12 + (Math_imul($9, $2) << 2) | 0;
         $8 = HEAP32[($7 >>> 0 < $11 >>> 0 ? 56 : 72) + $3 >> 2];
         $12 = ($8 | 0) > 1 ? $8 : 1;
         $15 = ($8 | 0) < 1;
         $8 = 0;
         while (1) {
          label$12 : {
           label$13 : {
            if (HEAPU32[$0 + 148 >> 2] >= $16 >>> 0) {
             if (!(HEAP32[$3 + 76 >> 2] <= ($9 + $8 | 0) | $15)) {
              break label$13;
             }
             break label$12;
            }
            if ($15) {
             break label$12;
            }
           }
           $4 = 0;
           $2 = $17;
           while (1) {
            FUNCTION_TABLE[$18 | 0]($0, $3, HEAP32[(($4 + $6 << 2) + $5 | 0) + 32 >> 2], $13, $2);
            $2 = HEAP32[$3 + 36 >> 2] + $2 | 0;
            $4 = $4 + 1 | 0;
            if (($12 | 0) != ($4 | 0)) {
             continue;
            }
            break;
           }
           $4 = HEAP32[$3 + 60 >> 2];
           $2 = HEAP32[$3 + 40 >> 2];
          }
          $13 = ($2 << 2) + $13 | 0;
          $6 = HEAP32[$3 + 56 >> 2] + $6 | 0;
          $8 = $8 + 1 | 0;
          if (($8 | 0) < ($4 | 0)) {
           continue;
          }
          break;
         }
         $2 = HEAP32[$0 + 340 >> 2];
        }
        $10 = $10 + 1 | 0;
        if (($10 | 0) < ($2 | 0)) {
         continue;
        }
        break;
       }
      }
      $7 = $7 + 1 | 0;
      if ($11 >>> 0 >= $7 >>> 0) {
       continue;
      }
      break;
     }
     $4 = HEAP32[$5 + 28 >> 2];
    }
    $7 = 0;
    HEAP32[$5 + 20 >> 2] = 0;
    $9 = $9 + 1 | 0;
    if (($9 | 0) < ($4 | 0)) {
     continue;
    }
    break;
   }
   $2 = HEAP32[$0 + 332 >> 2];
  }
  $3 = 1;
  HEAP32[$0 + 156 >> 2] = HEAP32[$0 + 156 >> 2] + 1;
  $4 = HEAP32[$0 + 148 >> 2] + 1 | 0;
  HEAP32[$0 + 148 >> 2] = $4;
  if ($2 >>> 0 > $4 >>> 0) {
   $6 = HEAP32[$0 + 452 >> 2];
   $3 = HEAP32[$0 + 340 >> 2] <= 1 ? HEAP32[HEAP32[$0 + 344 >> 2] + ($2 - 1 >>> 0 > $4 >>> 0 ? 12 : 76) >> 2] : $3;
   HEAP32[$6 + 20 >> 2] = 0;
   HEAP32[$6 + 24 >> 2] = 0;
   HEAP32[$6 + 28 >> 2] = $3;
   return 3;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] + 12 >> 2]]($0);
  return 4;
 }
 HEAP32[$5 + 20 >> 2] = $7;
 HEAP32[$5 + 24 >> 2] = $9;
 return 0;
}
function __trunctfdf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $13 = __stack_pointer - 32 | 0;
 __stack_pointer = $13;
 $5 = $3;
 $8 = $5 & 2147483647;
 $10 = $8;
 $7 = $2;
 $9 = $7;
 $5 = $7;
 $6 = $5;
 $4 = 1006698496;
 $4 = $8 - $4 | 0;
 $5 = $4;
 $4 = $8;
 $7 = $6;
 $6 = 1140785152;
 $6 = $4 - $6 | 0;
 $8 = $6;
 $6 = $5;
 $4 = $7;
 label$1 : {
  if (($8 | 0) == ($6 | 0) & $4 >>> 0 > $4 >>> 0 | $6 >>> 0 < $8 >>> 0) {
   $7 = $2 << 4;
   $4 = $3;
   $6 = $4 << 4 | $2 >>> 28;
   $5 = $6;
   $2 = 0;
   $4 = $2;
   $6 = $1;
   $8 = $6 >>> 28 | 0;
   $6 = $7;
   $9 = $8 | $6;
   $2 = $5;
   $4 = $2 | $4;
   $10 = $4;
   $4 = $1;
   $6 = $4 & 268435455;
   $1 = $6;
   $4 = $0;
   if (($6 | 0) == 134217728 & $4 >>> 0 >= 1 | $6 >>> 0 > 134217728) {
    $4 = $10;
    $7 = $4 + 1073741824 | 0;
    $8 = $9;
    $5 = $8 + 1 | 0;
    $7 = $5 >>> 0 < 1 ? $7 + 1 | 0 : $7;
    $12 = $5;
    $11 = $7;
    break label$1;
   }
   $4 = $9;
   $12 = $4;
   $7 = $10;
   $5 = -1073741824;
   $5 = $7 - $5 | 0;
   $11 = $5;
   $5 = $1;
   $4 = $5 ^ 134217728;
   $7 = $0;
   $5 = $7;
   if ($5 | $4) {
    break label$1;
   }
   $5 = $12;
   $2 = $9;
   $7 = $2 & 1;
   $8 = $5 + $7 | 0;
   $4 = 0;
   $2 = $4;
   $4 = $11;
   $6 = $2 + $4 | 0;
   $12 = $8;
   $6 = $7 >>> 0 > $8 >>> 0 ? $6 + 1 | 0 : $6;
   $11 = $6;
   break label$1;
  }
  $6 = $1;
  $8 = !($6 | $0);
  $6 = $10;
  $5 = $6 >>> 0 < 2147418112;
  $4 = $6;
  $7 = $9;
  if (!(!$7 & ($4 | 0) == 2147418112 ? $8 : $5)) {
   $5 = $2;
   $0 = $5 << 4;
   $7 = $3;
   $4 = $7 << 4 | $5 >>> 28;
   $5 = 0;
   $7 = $5;
   $7 = $4 | $7;
   $4 = $1;
   $6 = $4 >>> 28 | 0;
   $4 = $0;
   $5 = $6 | $4;
   $4 = $7 & 524287;
   $12 = $5;
   $5 = $4 | 2146959360;
   $11 = $5;
   break label$1;
  }
  $11 = 2146435072;
  $5 = $10;
  if ($5 >>> 0 > 1140785151) {
   break label$1;
  }
  $11 = 0;
  $4 = $10;
  $7 = $4 >>> 16 | 0;
  if ($7 >>> 0 < 15249) {
   break label$1;
  }
  $5 = $3;
  $6 = $5 & 65535;
  $4 = $2;
  $9 = $4;
  $4 = $6 | 65536;
  $10 = $4;
  $4 = $1;
  $5 = $10;
  __ashlti3($13 + 16 | 0, $0, $4, $9, $5, $7 - 15233 | 0);
  $5 = $4;
  $4 = $10;
  __lshrti3($13, $0, $5, $9, $4, 15361 - $7 | 0);
  $6 = $13;
  $4 = HEAP32[$6 + 8 >> 2];
  $5 = HEAP32[$6 + 12 >> 2];
  $1 = $4 << 4;
  $4 = $5 << 4 | $4 >>> 28;
  $0 = $4;
  $6 = HEAP32[$13 + 4 >> 2];
  $10 = $6;
  $5 = $13;
  $4 = HEAP32[$5 >> 2];
  $9 = $4;
  $7 = $6 >>> 28 | 0;
  $6 = $1;
  $12 = $7 | $6;
  $4 = 0;
  $5 = $4;
  $4 = $0;
  $5 = $5 | $4;
  $11 = $5;
  $4 = $13;
  $5 = HEAP32[$4 + 16 >> 2];
  $1 = $5;
  $6 = HEAP32[$4 + 20 >> 2];
  $0 = $6;
  $6 = HEAP32[$4 + 24 >> 2];
  $7 = $6;
  $5 = HEAP32[$4 + 28 >> 2];
  $6 = $5;
  $5 = $0;
  $6 = $5 | $6;
  $4 = $1;
  $5 = $7 | $4;
  $0 = ($5 | 0) != 0 | ($6 | 0) != 0;
  $5 = $10;
  $6 = $5 & 268435455;
  $5 = $0;
  $7 = $9;
  $4 = $7;
  $9 = $5 | $4;
  $7 = $6;
  $10 = $6;
  $6 = $9;
  if (($7 | 0) == 134217728 & $6 >>> 0 >= 1 | $7 >>> 0 > 134217728) {
   $6 = $11;
   $4 = $12;
   $2 = $4 + 1 | 0;
   $8 = $2 >>> 0 < 1 ? $6 + 1 | 0 : $6;
   $12 = $2;
   $11 = $8;
   break label$1;
  }
  $8 = $10;
  $4 = $8 ^ 134217728;
  $8 = $9;
  if ($8 | $4) {
   break label$1;
  }
  $5 = $12;
  $8 = $5 & 1;
  $6 = $5;
  $7 = $8 + $6 | 0;
  $5 = $11;
  $4 = 0;
  $2 = $5 + $4 | 0;
  $12 = $7;
  $2 = $6 >>> 0 > $7 >>> 0 ? $2 + 1 | 0 : $2;
  $11 = $2;
 }
 __stack_pointer = $13 + 32 | 0;
 $2 = $3;
 $8 = $2 & -2147483648;
 $4 = $8;
 $8 = $11;
 $4 = $8 | $4;
 $2 = $12;
 $6 = 0;
 wasm2js_scratch_store_i32(0, $2 | $6);
 wasm2js_scratch_store_i32(1, $4 | 0);
 return +wasm2js_scratch_load_f64();
}
function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$11 : {
           $5 = $1;
           if ($5) {
            $7 = $2;
            if (!$7) {
             break label$11;
            }
            $4 = $3;
            if (!$4) {
             break label$9;
            }
            $5 = Math_clz32($4) - Math_clz32($5) | 0;
            if ($5 >>> 0 <= 31) {
             break label$8;
            }
            break label$2;
           }
           $4 = $3;
           if (($4 | 0) == 1 | $4 >>> 0 > 1) {
            break label$2;
           }
           $5 = $0;
           $7 = $2;
           $5 = ($5 >>> 0) / ($7 >>> 0) | 0;
           i64toi32_i32$HIGH_BITS = 0;
           return $5;
          }
          $7 = $3;
          if (!$0) {
           break label$7;
          }
          if (!$7) {
           break label$6;
          }
          $4 = $7 - 1 | 0;
          if ($4 & $7) {
           break label$6;
          }
          $9 = $5 >>> __wasm_ctz_i32($7) | 0;
          i64toi32_i32$HIGH_BITS = 0;
          return $9;
         }
         if (!($7 - 1 & $7)) {
          break label$5;
         }
         $5 = (Math_clz32($7) + 33 | 0) - Math_clz32($5) | 0;
         $7 = 0 - $5 | 0;
         break label$3;
        }
        $7 = 63 - $5 | 0;
        $5 = $5 + 1 | 0;
        break label$3;
       }
       $4 = ($5 >>> 0) / ($7 >>> 0) | 0;
       i64toi32_i32$HIGH_BITS = 0;
       return $4;
      }
      $5 = Math_clz32($7) - Math_clz32($5) | 0;
      if ($5 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     if (($7 | 0) == 1) {
      break label$1;
     }
     $4 = $1;
     $9 = $0;
     $10 = 0;
     $8 = __wasm_ctz_i32($7);
     $6 = $8 & 31;
     if (($8 & 63) >>> 0 >= 32) {
      $9 = $4 >>> $6 | 0;
     } else {
      $10 = $4 >>> $6 | 0;
      $9 = ((1 << $6) - 1 & $4) << 32 - $6 | $9 >>> $6;
     }
     i64toi32_i32$HIGH_BITS = $10;
     return $9;
    }
    $7 = 63 - $5 | 0;
    $5 = $5 + 1 | 0;
   }
   $9 = $1;
   $4 = $0;
   $10 = 0;
   $8 = $5 & 63;
   $6 = $8 & 31;
   if (($8 & 63) >>> 0 >= 32) {
    $12 = $9 >>> $6 | 0;
   } else {
    $10 = $9 >>> $6 | 0;
    $12 = ((1 << $6) - 1 & $9) << 32 - $6 | $4 >>> $6;
   }
   $13 = $10;
   $10 = $1;
   $9 = $0;
   $8 = $7 & 63;
   $6 = $8 & 31;
   if (($8 & 63) >>> 0 >= 32) {
    $4 = $9 << $6;
    $0 = 0;
   } else {
    $4 = (1 << $6) - 1 & $9 >>> 32 - $6 | $10 << $6;
    $0 = $9 << $6;
   }
   $1 = $4;
   if ($5) {
    $4 = $3 - 1 | 0;
    $6 = $2 - 1 | 0;
    $4 = ($6 | 0) != -1 ? $4 + 1 | 0 : $4;
    $7 = $6;
    $9 = $4;
    while (1) {
     $4 = $12;
     $8 = $4 << 1;
     $4 = $13 << 1 | $4 >>> 31;
     $12 = $8 | $1 >>> 31;
     $11 = $12;
     $10 = $4;
     $4 = $7;
     $8 = $11;
     $6 = $9 - (($4 >>> 0 < $8 >>> 0) + $10 | 0) | 0;
     $13 = $3 & $6 >> 31;
     $4 = $8;
     $11 = $6 >> 31;
     $8 = $11 & $2;
     $12 = $4 - $8 | 0;
     $13 = $10 - (($4 >>> 0 < $8 >>> 0) + $13 | 0) | 0;
     $4 = $1 << 1 | $0 >>> 31;
     $0 = $0 << 1 | $14;
     $1 = $4 | $16;
     $15 = 0;
     $11 = $11 & 1;
     $14 = $11;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue;
     }
     break;
    }
   }
   i64toi32_i32$HIGH_BITS = $15 | ($1 << 1 | $0 >>> 31);
   return $0 << 1 | $11;
  }
  $0 = 0;
  $1 = 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0;
}
function jpeg_idct_6x12($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $20 = __stack_pointer - 288 | 0;
 __stack_pointer = $20;
 $22 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $20;
 while (1) {
  $14 = HEAP32[$0 + 128 >> 2];
  $12 = HEAP16[$2 + 64 >> 1];
  $6 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $8 = Math_imul(HEAP32[$0 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $15 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $7 = $8 - $15 << 13;
  $9 = $6 + $7 | 0;
  $5 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $10 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $16 = $5 - $10 | 0;
  $13 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $11 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $17 = $13 - $11 | 0;
  $18 = Math_imul($16 + $17 | 0, 4433);
  $16 = $18 + Math_imul($16, 6270) | 0;
  HEAP32[$1 + 240 >> 2] = $9 - $16 >> 11;
  HEAP32[$1 + 24 >> 2] = $9 + $16 >> 11;
  $7 = $6 - $7 | 0;
  $9 = Math_imul($17, -15137) + $18 | 0;
  HEAP32[$1 + 168 >> 2] = $7 - $9 >> 11;
  HEAP32[$1 + 96 >> 2] = $7 + $9 >> 11;
  $12 = Math_imul(Math_imul($12, $14), 10033);
  $7 = $12 + $6 | 0;
  $15 = $15 << 13;
  $9 = $15 + Math_imul($8, 11190) | 0;
  $16 = $7 - $9 | 0;
  $18 = $5 + $11 | 0;
  $14 = Math_imul($18 + $10 | 0, 7053);
  $17 = Math_imul($13, -4433);
  $21 = $14 + (($17 + Math_imul($5, -5540) | 0) + Math_imul($10, -16244) | 0) | 0;
  HEAP32[$1 + 144 >> 2] = $16 - $21 >> 11;
  HEAP32[$1 + 120 >> 2] = $16 + $21 >> 11;
  $13 = Math_imul($13, 10703);
  $7 = $7 + $9 | 0;
  $9 = $13 + Math_imul($5, 2295) | 0;
  $5 = Math_imul($18, 2139) + $14 | 0;
  $9 = $9 + $5 | 0;
  HEAP32[$1 + 264 >> 2] = $7 - $9 >> 11;
  HEAP32[$1 >> 2] = $7 + $9 >> 11;
  $6 = $6 - $12 | 0;
  $8 = Math_imul($8, 2998) - $15 | 0;
  $12 = $6 + $8 | 0;
  $7 = Math_imul($11, -12112) + $17 | 0;
  $11 = Math_imul($10 + $11 | 0, -8565);
  $5 = ($7 + $11 | 0) + $5 | 0;
  HEAP32[$1 + 216 >> 2] = $12 - $5 >> 11;
  HEAP32[$1 + 48 >> 2] = $5 + $12 >> 11;
  $6 = $6 - $8 | 0;
  $10 = ((Math_imul($10, 12998) - $13 | 0) + $14 | 0) + $11 | 0;
  HEAP32[$1 + 192 >> 2] = $6 - $10 >> 11;
  HEAP32[$1 + 72 >> 2] = $6 + $10 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $19 = $19 + 1 | 0;
  if (($19 | 0) != 6) {
   continue;
  }
  break;
 }
 $2 = $22 - 384 | 0;
 $10 = 0;
 $1 = $20;
 while (1) {
  $0 = HEAP32[($10 << 2) + $3 >> 2] + $4 | 0;
  $8 = Math_imul(HEAP32[$1 + 16 >> 2], 5793);
  $19 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
  $12 = $8 + $19 | 0;
  $15 = Math_imul(HEAP32[$1 + 8 >> 2], 10033);
  $7 = $12 + $15 | 0;
  $5 = HEAP32[$1 + 4 >> 2];
  $6 = HEAP32[$1 + 20 >> 2];
  $13 = Math_imul($5 + $6 | 0, 2998);
  $11 = HEAP32[$1 + 12 >> 2];
  $14 = $13 + ($11 + $5 << 13) | 0;
  HEAP8[$0 | 0] = HEAPU8[($7 + $14 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($7 - $14 >>> 18 & 1023) + $2 | 0];
  $5 = ($5 - $11 | 0) - $6 << 13;
  $8 = ($19 - $8 | 0) - $8 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($5 + $8 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($8 - $5 >>> 18 & 1023) + $2 | 0];
  $5 = $12 - $15 | 0;
  $6 = ($6 - $11 << 13) + $13 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[($5 - $6 >>> 18 & 1023) + $2 | 0];
  $1 = $1 + 24 | 0;
  $10 = $10 + 1 | 0;
  if (($10 | 0) != 12) {
   continue;
  }
  break;
 }
 __stack_pointer = $20 + 288 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 104 | 0, 23852);
 $3 = HEAP32[$4 >> 2];
 $5 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 48 >> 2] = $3;
 HEAP32[$2 + 52 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 48 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 16 | 0, $1);
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 96 | 0, 23378);
 $5 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 40 >> 2] = $5;
 HEAP32[$2 + 44 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 40 | 0);
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $1);
 }
 $3 = HEAP32[$0 + 28 >> 2];
 if ($3 & 1) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 88 | 0, 31180);
  $3 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = $3;
  HEAP32[$2 + 36 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 32 | 0);
  $3 = HEAP32[$0 + 28 >> 2];
 }
 if ($3 & 2) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 80 | 0, 31187);
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = $5;
  HEAP32[$2 + 28 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
  $3 = HEAP32[$0 + 28 >> 2];
 }
 if ($3 & 4) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 72 | 0, 31197);
  $3 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = $3;
  HEAP32[$2 + 20 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 }
 $6 = $2;
 label$7 : {
  label$8 : {
   label$9 : {
    switch (HEAPU8[$0 + 32 | 0] - 1 | 0) {
    case 0:
     $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 - -64 | 0, 31207);
     break label$8;
    case 1:
     break label$9;
    default:
     break label$7;
    }
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 56 | 0, 31210);
  }
  $4 = $3;
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $4 = $5;
  $5 = $6;
  HEAP32[$5 + 8 >> 2] = $4;
  HEAP32[$5 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 $0 = HEAP32[$0 + 24 >> 2];
 if ($0) {
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 }
 __stack_pointer = $2 + 112 | 0;
}
function jpeg_idct_4x8($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $22 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $9 = __stack_pointer;
 $16 = $9 - 128 | 0;
 $1 = $16;
 $9 = 4;
 while (1) {
  label$2 : {
   label$3 : {
    $5 = HEAPU16[$2 + 32 >> 1];
    $6 = HEAP16[$2 + 16 >> 1];
    if (($5 | $6) & 65535) {
     break label$3;
    }
    $5 = 0;
    if (HEAPU16[$2 + 48 >> 1] | HEAPU16[$2 + 64 >> 1] | (HEAPU16[$2 + 80 >> 1] | HEAPU16[$2 + 96 >> 1])) {
     break label$3;
    }
    if (HEAPU16[$2 + 112 >> 1]) {
     break label$3;
    }
    $5 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 2;
    HEAP32[$1 + 96 >> 2] = $5;
    HEAP32[$1 + 80 >> 2] = $5;
    HEAP32[$1 + 64 >> 2] = $5;
    HEAP32[$1 + 48 >> 2] = $5;
    HEAP32[$1 + 32 >> 2] = $5;
    HEAP32[$1 + 16 >> 2] = $5;
    HEAP32[$1 >> 2] = $5;
    $7 = 28;
    break label$2;
   }
   $5 = Math_imul(HEAP32[$0 + 64 >> 2], $5 << 16 >> 16);
   $8 = Math_imul(HEAP32[$0 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
   $11 = Math_imul($5 + $8 | 0, 4433);
   $17 = $11 + Math_imul($5, 6270) | 0;
   $7 = Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$0 + 128 >> 2]) << 13;
   $13 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
   $18 = $7 + $13 | 0;
   $12 = $17 + $18 | 0;
   $5 = Math_imul(HEAP32[$0 + 32 >> 2], $6);
   $6 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
   $19 = Math_imul($5 + $6 | 0, -7373);
   $15 = $19 + Math_imul($5, 12299) | 0;
   $10 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
   $14 = $10 + $5 | 0;
   $5 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
   $20 = $6 + $5 | 0;
   $21 = Math_imul($14 + $20 | 0, 9633);
   $14 = $21 + Math_imul($14, -3196) | 0;
   $15 = $15 + $14 | 0;
   HEAP32[$1 + 112 >> 2] = $12 - $15 >> 11;
   HEAP32[$1 >> 2] = $12 + $15 >> 11;
   $8 = Math_imul($8, -15137) + $11 | 0;
   $11 = $13 - $7 | 0;
   $7 = $8 + $11 | 0;
   $13 = Math_imul($5 + $10 | 0, -20995);
   $12 = $13 + Math_imul($5, 25172) | 0;
   $5 = Math_imul($20, -16069) + $21 | 0;
   $12 = $12 + $5 | 0;
   HEAP32[$1 + 96 >> 2] = $7 - $12 >> 11;
   HEAP32[$1 + 16 >> 2] = $7 + $12 >> 11;
   $8 = $11 - $8 | 0;
   $10 = (Math_imul($10, 16819) + $13 | 0) + $14 | 0;
   HEAP32[$1 + 80 >> 2] = $8 - $10 >> 11;
   HEAP32[$1 + 32 >> 2] = $8 + $10 >> 11;
   $5 = (Math_imul($6, 2446) + $19 | 0) + $5 | 0;
   $6 = $18 - $17 | 0;
   HEAP32[$1 + 48 >> 2] = $5 + $6 >> 11;
   $5 = $6 - $5 >> 11;
   $7 = 16;
  }
  HEAP32[($7 << 2) + $1 >> 2] = $5;
  $2 = $2 + 2 | 0;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $5 = $9 >>> 0 > 1;
  $9 = $9 - 1 | 0;
  if ($5) {
   continue;
  }
  break;
 }
 $1 = $22 - 384 | 0;
 $9 = 0;
 $2 = $16;
 while (1) {
  $0 = HEAP32[($9 << 2) + $3 >> 2] + $4 | 0;
  $5 = HEAP32[$2 + 12 >> 2];
  $6 = HEAP32[$2 + 4 >> 2];
  $10 = Math_imul($5 + $6 | 0, 4433);
  $6 = $10 + Math_imul($6, 6270) | 0;
  $8 = HEAP32[$2 + 8 >> 2];
  $7 = HEAP32[$2 >> 2] + 16400 | 0;
  $11 = $8 + $7 << 13;
  HEAP8[$0 | 0] = HEAPU8[($6 + $11 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[($11 - $6 >>> 18 & 1023) + $1 | 0];
  $5 = Math_imul($5, -15137) + $10 | 0;
  $6 = $7 - $8 << 13;
  HEAP8[$0 + 1 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 2 | 0] = HEAPU8[($6 - $5 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 16 | 0;
  $9 = $9 + 1 | 0;
  if (($9 | 0) != 8) {
   continue;
  }
  break;
 }
}
function ar2ReadImageSet($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP16[$2 + 88 >> 1] = HEAPU8[8772] | HEAPU8[8773] << 8;
 HEAP32[$2 + 84 >> 2] = HEAPU8[8768] | HEAPU8[8769] << 8 | (HEAPU8[8770] << 16 | HEAPU8[8771] << 24);
 label$1 : {
  label$2 : {
   label$3 : {
    $1 = dlmalloc((strlen($0) + strlen($2 + 84 | 0) | 0) + 1 | 0);
    if ($1) {
     HEAP32[$2 + 64 >> 2] = $0;
     HEAP32[$2 + 68 >> 2] = $2 + 84;
     siprintf($1, 3027, $2 - -64 | 0);
     $5 = fopen($1, 4383);
     dlfree($1);
     if (!$5) {
      HEAP32[$2 >> 2] = $0;
      HEAP32[$2 + 4 >> 2] = $2 + 84;
      $1 = 0;
      arLog(0, 3, 5015, $2);
      break label$2;
     }
     $7 = dlmalloc(8);
     if (!$7) {
      break label$1;
     }
     $3 = $7;
     label$7 : {
      label$8 : {
       $1 = $7 + 4 | 0;
       if ((fread($1, 4, 1, $5) | 0) == 1) {
        $4 = HEAP32[$3 + 4 >> 2];
        if (($4 | 0) > 0) {
         break label$8;
        }
       }
       arLog(0, 3, 5486, 0);
       break label$7;
      }
      HEAP32[$2 + 48 >> 2] = $4;
      arLog(0, 1, 6260, $2 + 48 | 0);
      $3 = dlmalloc($4 << 2);
      HEAP32[$7 >> 2] = $3;
      if (!$3) {
       break label$1;
      }
      $1 = dlmalloc(16);
      HEAP32[$3 >> 2] = $1;
      if (!$1) {
       break label$1;
      }
      $6 = ar2ReadJpegImage2($5);
      if (!$6) {
       break label$3;
      }
      if (HEAP32[$6 + 4 >> 2] != 1) {
       HEAP32[$2 + 32 >> 2] = $0;
       HEAP32[$2 + 36 >> 2] = $2 + 84;
       $1 = 0;
       arLog(0, 2, 6956, $2 + 32 | 0);
       dlfree(HEAP32[$3 >> 2]);
       dlfree($3);
       dlfree($7);
       dlfree($6);
       fclose($5);
       break label$2;
      }
      $1 = HEAP32[$3 >> 2];
      HEAP32[$1 + 4 >> 2] = HEAP32[$6 + 8 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$6 + 12 >> 2];
      HEAPF32[$1 + 12 >> 2] = HEAPF32[$6 + 16 >> 2];
      HEAP32[$1 >> 2] = HEAP32[$6 >> 2];
      dlfree($6);
      fseek($5, 4 - ($4 << 2) | 0, 2);
      $1 = 1;
      label$11 : {
       while (1) {
        if (($1 | 0) != ($4 | 0)) {
         if ((fread($2 + 92 | 0, 4, 1, $5) | 0) != 1) {
          $0 = 0;
          while (1) {
           if (($0 | 0) == ($1 | 0)) {
            break label$11;
           }
           $4 = ($0 << 2) + $3 | 0;
           dlfree(HEAP32[HEAP32[$4 >> 2] >> 2]);
           dlfree(HEAP32[$4 >> 2]);
           $0 = $0 + 1 | 0;
           continue;
          }
         }
         $6 = ($1 << 2) + $3 | 0;
         $0 = ar2GenImageLayer2(HEAP32[$3 >> 2], HEAPF32[$2 + 92 >> 2]);
         HEAP32[$6 >> 2] = $0;
         if ($0) {
          $1 = $1 + 1 | 0;
          continue;
         } else {
          $0 = 0;
          while (1) {
           if (($0 | 0) == ($1 | 0)) {
            break label$11;
           }
           $4 = ($0 << 2) + $3 | 0;
           dlfree(HEAP32[HEAP32[$4 >> 2] >> 2]);
           dlfree(HEAP32[$4 >> 2]);
           $0 = $0 + 1 | 0;
           continue;
          }
         }
        }
        break;
       }
       fclose($5);
       $1 = $7;
       break label$2;
      }
      dlfree($3);
     }
     dlfree($7);
     fclose($5);
     $1 = 0;
     break label$2;
    }
    break label$1;
   }
   HEAP32[$2 + 16 >> 2] = $0;
   HEAP32[$2 + 20 >> 2] = $2 + 84;
   arLog(0, 2, 6956, $2 + 16 | 0);
   dlfree(HEAP32[$3 >> 2]);
   dlfree($3);
   dlfree($7);
   rewind($5);
   $1 = ar2ReadImageSetOld($5);
  }
  __stack_pointer = $2 + 96 | 0;
  return $1;
 }
 arLog(0, 3, 1837, 0);
 exit(1);
 abort();
}
function jpeg_idct_7x7($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $18 = __stack_pointer - 208 | 0;
 __stack_pointer = $18;
 $20 = HEAP32[$0 + 336 >> 2];
 $1 = HEAP32[$1 + 84 >> 2];
 $0 = $18;
 while (1) {
  $6 = HEAP32[$1 + 160 >> 2];
  $10 = HEAP16[$2 + 80 >> 1];
  $11 = HEAP32[$1 + 32 >> 2];
  $15 = HEAP16[$2 + 16 >> 1];
  $9 = HEAP32[$1 + 96 >> 2];
  $19 = HEAP16[$2 + 48 >> 1];
  $12 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $7 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $5 = Math_imul(HEAP32[$1 + 192 >> 2], HEAP16[$2 + 96 >> 1]);
  $8 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $13 = $5 + $8 | 0;
  HEAP32[$0 + 84 >> 2] = $12 + Math_imul($7 - $13 | 0, 11585) >> 11;
  $13 = Math_imul($13, 10438) + $12 | 0;
  $17 = Math_imul($7 - $5 | 0, 7223);
  $16 = $13 + ($17 + Math_imul($5, -637) | 0) | 0;
  $5 = Math_imul($6, $10);
  $6 = Math_imul($11, $15);
  $11 = Math_imul($5 + $6 | 0, 5027);
  $10 = Math_imul($9, $19);
  $15 = Math_imul($10 + $6 | 0, 7663);
  $6 = Math_imul($6 - $10 | 0, 1395);
  $9 = $11 + ($15 - $6 | 0) | 0;
  HEAP32[$0 + 168 >> 2] = $16 - $9 >> 11;
  HEAP32[$0 >> 2] = $9 + $16 >> 11;
  $9 = Math_imul($8 - $7 | 0, 2578);
  $8 = ($9 + Math_imul($8, -20239) | 0) + $13 | 0;
  $11 = Math_imul($5, 15326) + $11 | 0;
  $5 = Math_imul($5 + $10 | 0, -11295);
  $10 = $11 + $5 | 0;
  HEAP32[$0 + 112 >> 2] = $8 - $10 >> 11;
  HEAP32[$0 + 56 >> 2] = $8 + $10 >> 11;
  $7 = ((Math_imul($7, -15083) + $12 | 0) + $9 | 0) + $17 | 0;
  $5 = ($6 + $15 | 0) + $5 | 0;
  HEAP32[$0 + 140 >> 2] = $7 - $5 >> 11;
  HEAP32[$0 + 28 >> 2] = $5 + $7 >> 11;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $2 = $2 + 2 | 0;
  $14 = $14 + 1 | 0;
  if (($14 | 0) != 7) {
   continue;
  }
  break;
 }
 $1 = $20 - 384 | 0;
 $5 = 0;
 $2 = $18;
 while (1) {
  $7 = HEAP32[$2 + 4 >> 2];
  $8 = HEAP32[$2 + 12 >> 2];
  $14 = Math_imul($7 + $8 | 0, 7663);
  $12 = HEAP32[$2 + 20 >> 2];
  $15 = Math_imul($12 + $7 | 0, 5027);
  $11 = Math_imul($7 - $8 | 0, 1395);
  $9 = $15 + ($14 - $11 | 0) | 0;
  $7 = HEAP32[$2 + 16 >> 2];
  $6 = HEAP32[$2 + 24 >> 2];
  $19 = Math_imul($7 - $6 | 0, 7223);
  $10 = HEAP32[$2 + 8 >> 2];
  $13 = $10 + $6 | 0;
  $0 = HEAP32[($5 << 2) + $3 >> 2] + $4 | 0;
  $16 = $19 + Math_imul($6, -637) | 0;
  $6 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
  $17 = $6 + Math_imul($13, 10438) | 0;
  $16 = $16 + $17 | 0;
  HEAP8[$0 | 0] = HEAPU8[($16 + $9 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 6 | 0] = HEAPU8[($16 - $9 >>> 18 & 1023) + $1 | 0];
  $8 = Math_imul($8 + $12 | 0, -11295);
  $14 = $8 + ($11 + $14 | 0) | 0;
  $11 = Math_imul($10 - $7 | 0, 2578);
  $9 = ($11 + (Math_imul($7, -15083) + $6 | 0) | 0) + $19 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($14 + $9 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($9 - $14 >>> 18 & 1023) + $1 | 0];
  $8 = (Math_imul($12, 15326) + $15 | 0) + $8 | 0;
  $12 = (Math_imul($10, -20239) + $11 | 0) + $17 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($8 + $12 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($12 - $8 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[(Math_imul($7 - $13 | 0, 11585) + $6 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 28 | 0;
  $5 = $5 + 1 | 0;
  if (($5 | 0) != 7) {
   continue;
  }
  break;
 }
 __stack_pointer = $18 + 208 | 0;
}
function start_pass_1_quant($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = HEAP32[$0 + 484 >> 2];
 HEAP32[$0 + 136 >> 2] = HEAP32[$3 + 16 >> 2];
 HEAP32[$0 + 132 >> 2] = HEAP32[$3 + 20 >> 2];
 label$1 : {
  label$2 : {
   switch (HEAP32[$0 + 88 >> 2]) {
   case 0:
    if (HEAP32[$0 + 120 >> 2] == 3) {
     HEAP32[$3 + 4 >> 2] = 43;
     return;
    }
    HEAP32[$3 + 4 >> 2] = 44;
    return;
   case 1:
    $2 = HEAP32[$0 + 120 >> 2];
    HEAP32[$3 + 48 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = ($2 | 0) == 3 ? 45 : 46;
    if (!HEAP32[$3 + 28 >> 2]) {
     create_colorindex($0);
    }
    if (HEAP32[$3 + 52 >> 2]) {
     break label$1;
    }
    $4 = HEAP32[$0 + 120 >> 2];
    if (($4 | 0) < 1) {
     break label$1;
    }
    $7 = HEAP32[$0 + 484 >> 2];
    while (1) {
     $8 = ($6 << 2) + $7 | 0;
     $3 = HEAP32[$8 + 32 >> 2];
     $2 = 0;
     label$9 : {
      label$10 : {
       if (!$6) {
        break label$10;
       }
       while (1) {
        $1 = ($2 << 2) + $7 | 0;
        if (HEAP32[$1 + 32 >> 2] != ($3 | 0)) {
         $2 = $2 + 1 | 0;
         if (($6 | 0) != ($2 | 0)) {
          continue;
         }
         break label$10;
        }
        break;
       }
       $5 = HEAP32[$1 + 52 >> 2];
       if ($5) {
        break label$9;
       }
      }
      $4 = ($3 << 9) - 512 | 0;
      $3 = 0;
      $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
      while (1) {
       $2 = 0;
       while (1) {
        $9 = (($3 << 6) + $5 | 0) + ($2 << 2) | 0;
        $1 = Math_imul(HEAPU8[(($3 << 4) + $2 | 0) + 16288 | 0], -510);
        label$15 : {
         if (($1 | 0) <= -65026) {
          $1 = 0 - ((-65025 - $1 | 0) / ($4 | 0) | 0) | 0;
          break label$15;
         }
         $1 = ($1 + 65025 | 0) / ($4 | 0) | 0;
        }
        HEAP32[$9 >> 2] = $1;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != 16) {
         continue;
        }
        break;
       }
       $3 = $3 + 1 | 0;
       if (($3 | 0) != 16) {
        continue;
       }
       break;
      }
      $4 = HEAP32[$0 + 120 >> 2];
     }
     HEAP32[$8 + 52 >> 2] = $5;
     $6 = $6 + 1 | 0;
     if (($6 | 0) < ($4 | 0)) {
      continue;
     }
     break;
    }
    break label$1;
   case 2:
    HEAP32[$3 + 84 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 47;
    label$17 : {
     if (HEAP32[$3 + 68 >> 2]) {
      $1 = HEAP32[$0 + 120 >> 2];
      break label$17;
     }
     if (HEAP32[$0 + 120 >> 2] < 1) {
      break label$1;
     }
     $5 = (HEAP32[$0 + 112 >> 2] << 1) + 4 | 0;
     while (1) {
      wasm2js_i32$0 = ($2 << 2) + $3 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, $5) | 0, HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
      $2 = $2 + 1 | 0;
      $1 = HEAP32[$0 + 120 >> 2];
      if (($2 | 0) < ($1 | 0)) {
       continue;
      }
      break;
     }
    }
    if (($1 | 0) < 1) {
     break label$1;
    }
    $1 = (HEAP32[$0 + 112 >> 2] << 1) + 4 | 0;
    $2 = 0;
    while (1) {
     memset(HEAP32[(($2 << 2) + $3 | 0) + 68 >> 2], 0, $1);
     $2 = $2 + 1 | 0;
     if (($2 | 0) < HEAP32[$0 + 120 >> 2]) {
      continue;
     }
     break;
    }
    break label$1;
   default:
    break label$2;
   }
  }
  $2 = HEAP32[$0 >> 2];
  HEAP32[$2 + 20 >> 2] = 49;
  FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
 }
}
function examine_app0($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = $2 + $3 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if ($2 >>> 0 >= 14) {
      if (HEAPU8[$1 | 0] != 74) {
       break label$3;
      }
      if (HEAPU8[$1 + 1 | 0] != 70 | HEAPU8[$1 + 2 | 0] != 73 | (HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 3 | 0] != 70)) {
       break label$4;
      }
      HEAP32[$0 + 284 >> 2] = 1;
      $4 = HEAPU8[$1 + 5 | 0];
      HEAP8[$0 + 288 | 0] = $4;
      $5 = HEAPU8[$1 + 6 | 0];
      HEAP8[$0 + 289 | 0] = $5;
      $6 = HEAPU8[$1 + 7 | 0];
      HEAP8[$0 + 290 | 0] = $6;
      $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8;
      $7 = ($2 << 24 | $2 << 8 & 16711680) >>> 16 | 0;
      HEAP16[$0 + 292 >> 1] = $7;
      $2 = HEAPU8[$1 + 10 | 0] | HEAPU8[$1 + 11 | 0] << 8;
      $8 = ($2 << 24 | $2 << 8 & 16711680) >>> 16 | 0;
      HEAP16[$0 + 294 >> 1] = $8;
      if (($4 - 1 & 255) >>> 0 > 1) {
       $2 = HEAP32[$0 >> 2];
       HEAP32[$2 + 24 >> 2] = $4;
       HEAP32[$2 + 20 >> 2] = 122;
       HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAPU8[$0 + 289 | 0];
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
       $6 = HEAPU8[$0 + 290 | 0];
       $8 = HEAPU16[$0 + 294 >> 1];
       $7 = HEAPU16[$0 + 292 >> 1];
       $5 = HEAPU8[$0 + 289 | 0];
       $4 = HEAPU8[$0 + 288 | 0];
      }
      $2 = HEAP32[$0 >> 2];
      HEAP32[$2 + 24 >> 2] = $4;
      HEAP32[$2 + 20 >> 2] = 89;
      HEAP32[$2 + 40 >> 2] = $6;
      HEAP32[$2 + 36 >> 2] = $8;
      HEAP32[$2 + 32 >> 2] = $7;
      HEAP32[$2 + 28 >> 2] = $5;
      FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, 1);
      $2 = HEAPU8[$1 + 13 | 0];
      $4 = HEAPU8[$1 + 12 | 0];
      if ($2 | $4) {
       $2 = HEAP32[$0 >> 2];
       HEAP32[$2 + 20 >> 2] = 92;
       HEAP32[$2 + 24 >> 2] = HEAPU8[$1 + 12 | 0];
       HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = HEAPU8[$1 + 13 | 0];
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
       $4 = HEAPU8[$1 + 12 | 0];
       $2 = HEAPU8[$1 + 13 | 0];
      }
      $1 = $3 - 14 | 0;
      if (($1 | 0) == (Math_imul(Math_imul($2 & 255, $4), 3) | 0)) {
       break label$2;
      }
      $2 = HEAP32[$0 >> 2];
      HEAP32[$2 + 24 >> 2] = $1;
      HEAP32[$2 + 20 >> 2] = 90;
      break label$1;
     }
     if (HEAPU8[$1 | 0] != 74 | $2 >>> 0 < 6) {
      break label$3;
     }
    }
    if (HEAPU8[$1 + 1 | 0] != 70 | HEAPU8[$1 + 2 | 0] != 88 | (HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 3 | 0] != 88)) {
     break label$3;
    }
    label$8 : {
     switch (HEAPU8[$1 + 5 | 0] - 16 | 0) {
     case 0:
      $2 = HEAP32[$0 >> 2];
      HEAP32[$2 + 24 >> 2] = $3;
      HEAP32[$2 + 20 >> 2] = 110;
      break label$1;
     case 1:
      $2 = HEAP32[$0 >> 2];
      HEAP32[$2 + 24 >> 2] = $3;
      HEAP32[$2 + 20 >> 2] = 111;
      break label$1;
     case 3:
      $2 = HEAP32[$0 >> 2];
      HEAP32[$2 + 24 >> 2] = $3;
      HEAP32[$2 + 20 >> 2] = 112;
      break label$1;
     default:
      break label$8;
     }
    }
    $2 = HEAP32[$0 >> 2];
    HEAP32[$2 + 20 >> 2] = 91;
    HEAP32[$2 + 24 >> 2] = HEAPU8[$1 + 5 | 0];
    HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $3;
    break label$1;
   }
   $2 = HEAP32[$0 >> 2];
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 79;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
  }
  return;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 $6 = $2;
 label$1 : {
  label$2 : {
   $3 = HEAP32[$0 + 8 >> 2];
   if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($3) | 0) == 10) {
    if ($28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($3)) {
     break label$2;
    }
    $3 = HEAP32[$0 + 8 >> 2];
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
   if ($28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
    $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 88 | 0, 24984);
    $3 = HEAP32[$5 >> 2];
    $4 = HEAP32[$5 + 4 >> 2];
    HEAP32[$2 + 40 >> 2] = $3;
    HEAP32[$2 + 44 >> 2] = $4;
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 40 | 0);
   }
   label$6 : {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
     if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
      break label$6;
     }
    }
    $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 80 | 0, 23852);
    $4 = HEAP32[$5 >> 2];
    $3 = HEAP32[$5 + 4 >> 2];
    HEAP32[$2 + 32 >> 2] = $4;
    HEAP32[$2 + 36 >> 2] = $3;
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 32 | 0);
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 72 | 0, 23431);
   break label$1;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 - -64 | 0, 32976);
  $3 = HEAP32[$5 >> 2];
  $4 = HEAP32[$5 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = $3;
  HEAP32[$2 + 28 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
  $3 = HEAP32[$0 + 16 >> 2];
  $4 = HEAP32[$0 + 12 >> 2];
  $0 = $4;
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $3;
  HEAP32[$2 + 56 >> 2] = $0;
  HEAP32[$2 + 60 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
  $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 48 | 0, 23454);
 }
 $3 = HEAP32[$0 >> 2];
 $4 = HEAP32[$0 + 4 >> 2];
 $0 = $3;
 $3 = $6;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 __stack_pointer = $2 + 96 | 0;
}
function start_input_pass($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = 1;
 $2 = HEAP32[$0 + 340 >> 2];
 label$1 : {
  label$2 : {
   if (($2 | 0) == 1) {
    $2 = HEAP32[$0 + 344 >> 2];
    HEAP32[$0 + 360 >> 2] = HEAP32[$2 + 28 >> 2];
    $3 = HEAP32[$2 + 32 >> 2];
    HEAP32[$0 + 364 >> 2] = $3;
    HEAP32[$2 + 64 >> 2] = 1;
    HEAP32[$2 + 56 >> 2] = 1;
    HEAP32[$2 + 60 >> 2] = 1;
    HEAP32[$2 + 72 >> 2] = 1;
    HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 36 >> 2];
    $4 = HEAP32[$2 + 12 >> 2];
    $3 = ($3 >>> 0) % ($4 >>> 0) | 0;
    HEAP32[$2 + 76 >> 2] = $3 ? $3 : $4;
    HEAP32[$0 + 368 >> 2] = 1;
    HEAP32[$0 + 372 >> 2] = 0;
    break label$2;
   }
   if ($2 - 1 >>> 0 >= 4) {
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 24 >> 2] = $2;
    HEAP32[$1 + 20 >> 2] = 27;
    HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = 4;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   }
   wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[$0 + 28 >> 2], Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 316 >> 2])), HEAP32[wasm2js_i32$0 + 360 >> 2] = wasm2js_i32$1;
   $2 = jdiv_round_up(HEAP32[$0 + 32 >> 2], Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 320 >> 2]));
   HEAP32[$0 + 368 >> 2] = 0;
   HEAP32[$0 + 364 >> 2] = $2;
   if (HEAP32[$0 + 340 >> 2] < 1) {
    break label$1;
   }
   while (1) {
    $1 = HEAP32[(($3 << 2) + $0 | 0) + 344 >> 2];
    $4 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 56 >> 2] = $4;
    $5 = HEAP32[$1 + 12 >> 2];
    HEAP32[$1 + 60 >> 2] = $5;
    $2 = Math_imul($4, $5);
    HEAP32[$1 + 64 >> 2] = $2;
    HEAP32[$1 + 68 >> 2] = Math_imul(HEAP32[$1 + 36 >> 2], $4);
    $6 = HEAPU32[$1 + 28 >> 2] % ($4 >>> 0) | 0;
    HEAP32[$1 + 72 >> 2] = $6 ? $6 : $4;
    $4 = HEAPU32[$1 + 32 >> 2] % ($5 >>> 0) | 0;
    HEAP32[$1 + 76 >> 2] = $4 ? $4 : $5;
    if (($2 + $7 | 0) >= 11) {
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 20 >> 2] = 14;
     FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
    }
    if (($2 | 0) >= 1) {
     while (1) {
      $1 = HEAP32[$0 + 368 >> 2];
      HEAP32[$0 + 368 >> 2] = $1 + 1;
      HEAP32[(($1 << 2) + $0 | 0) + 372 >> 2] = $3;
      $1 = ($2 | 0) > 1;
      $2 = $2 - 1 | 0;
      if ($1) {
       continue;
      }
      break;
     }
    }
    $1 = HEAP32[$0 + 340 >> 2];
    $3 = $3 + 1 | 0;
    if (($1 | 0) > ($3 | 0)) {
     $7 = HEAP32[$0 + 368 >> 2];
     continue;
    }
    break;
   }
   if (($1 | 0) < 1) {
    break label$1;
   }
  }
  $2 = 0;
  while (1) {
   $3 = HEAP32[(($2 << 2) + $0 | 0) + 344 >> 2];
   if (!HEAP32[$3 + 80 >> 2]) {
    $1 = HEAP32[$3 + 16 >> 2];
    if (!(HEAP32[(($1 << 2) + $0 | 0) + 164 >> 2] ? $1 >>> 0 <= 3 : 0)) {
     $4 = HEAP32[$0 >> 2];
     HEAP32[$4 + 24 >> 2] = $1;
     HEAP32[$4 + 20 >> 2] = 54;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    wasm2js_i32$0 = $3, wasm2js_i32$1 = memcpy(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 132) | 0, HEAP32[(($1 << 2) + $0 | 0) + 164 >> 2], 132), HEAP32[wasm2js_i32$0 + 80 >> 2] = wasm2js_i32$1;
    $1 = HEAP32[$0 + 340 >> 2];
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 468 >> 2] >> 2]]($0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 452 >> 2] >> 2]]($0);
 HEAP32[HEAP32[$0 + 460 >> 2] >> 2] = HEAP32[HEAP32[$0 + 452 >> 2] + 4 >> 2];
}
function jinit_master_decompress($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 28) | 0;
 HEAP32[$0 + 444 >> 2] = $2;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 113;
 HEAP32[$2 >> 2] = 114;
 $3 = HEAP32[$0 + 212 >> 2];
 if (($3 | 0) != 8) {
  $4 = HEAP32[$0 >> 2];
  HEAP32[$4 + 24 >> 2] = $3;
  HEAP32[$4 + 20 >> 2] = 16;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 jpeg_calc_output_dimensions($0);
 $4 = memset(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1280) | 0, 0, 512);
 $3 = $4 + 512 | 0;
 HEAP32[$0 + 336 >> 2] = $3;
 while (1) {
  HEAP8[$1 + $3 | 0] = $1;
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 256) {
   continue;
  }
  break;
 }
 memset($4 + 768 | 0, 255, 512);
 if (!(HEAP32[$0 + 120 >> 2] > 0 ? !(!HEAP32[$0 + 116 >> 2] | !HEAP32[$0 + 112 >> 2]) : 0)) {
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 33;
  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
 }
 HEAP32[$2 + 12 >> 2] = 0;
 $1 = use_merged_upsample($0);
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = $1;
 label$5 : {
  if (!HEAP32[$0 + 84 >> 2]) {
   HEAP32[$0 + 108 >> 2] = 0;
   HEAP32[$0 + 100 >> 2] = 0;
   HEAP32[$0 + 104 >> 2] = 0;
   break label$5;
  }
  if (!HEAP32[$0 + 64 >> 2]) {
   HEAP32[$0 + 108 >> 2] = 0;
   HEAP32[$0 + 100 >> 2] = 0;
   HEAP32[$0 + 104 >> 2] = 0;
  }
  if (HEAP32[$0 + 68 >> 2]) {
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 48;
   FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
  }
  label$9 : {
   if (HEAP32[$0 + 120 >> 2] != 3) {
    HEAP32[$0 + 136 >> 2] = 0;
    HEAP32[$0 + 108 >> 2] = 0;
    HEAP32[$0 + 100 >> 2] = 1;
    HEAP32[$0 + 104 >> 2] = 0;
    break label$9;
   }
   if (HEAP32[$0 + 136 >> 2]) {
    HEAP32[$0 + 104 >> 2] = 1;
    break label$9;
   }
   if (HEAP32[$0 + 92 >> 2]) {
    HEAP32[$0 + 108 >> 2] = 1;
    break label$9;
   }
   HEAP32[$0 + 100 >> 2] = 1;
  }
  if (HEAP32[$0 + 100 >> 2]) {
   jinit_1pass_quantizer($0);
   HEAP32[$2 + 20 >> 2] = HEAP32[$0 + 484 >> 2];
  }
  if (HEAP32[$0 + 104 >> 2] ? 0 : !HEAP32[$0 + 108 >> 2]) {
   break label$5;
  }
  jinit_2pass_quantizer($0);
  HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 484 >> 2];
 }
 if (!HEAP32[$0 + 68 >> 2]) {
  label$16 : {
   if (HEAP32[$2 + 16 >> 2]) {
    jinit_merged_upsampler($0);
    break label$16;
   }
   jinit_color_deconverter($0);
   jinit_upsampler($0);
  }
  jinit_d_post_controller($0, HEAP32[$0 + 108 >> 2]);
 }
 jinit_inverse_dct($0);
 label$18 : {
  if (HEAP32[$0 + 228 >> 2]) {
   jinit_arith_decoder($0);
   break label$18;
  }
  jinit_huff_decoder($0);
 }
 $1 = 1;
 $1 = HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2] ? $1 : HEAP32[$0 + 64 >> 2] != 0;
 jinit_d_coef_controller($0, $1);
 if (!HEAP32[$0 + 68 >> 2]) {
  jinit_d_main_controller($0, 0);
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 24 >> 2]]($0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] + 8 >> 2]]($0);
 $1 = HEAP32[$0 + 8 >> 2];
 if (!(!HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2] | (HEAP32[$0 + 64 >> 2] | !$1))) {
  $4 = HEAP32[$0 + 224 >> 2];
  $3 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 4 >> 2] = 0;
  $5 = HEAP32[$0 + 332 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = Math_imul($4 ? Math_imul($3, 3) + 2 | 0 : $3, $5);
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 108 >> 2] ? 3 : 2;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 32, 1, 1, 1);
 HEAP32[$0 >> 2] = 30380;
 $2 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 7 | 0] = 2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP8[$0 + 5 | 0] = 2;
 HEAP8[$0 + 6 | 0] = 2;
 $1 = $0 + 8 | 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($28anonymous_20namespace_29__itanium_demangle__NodeArray__begin_28_29_20const($1), $28anonymous_20namespace_29__itanium_demangle__NodeArray__end_28_29_20const($1)) ? 1 : 2, HEAP8[wasm2js_i32$0 + 6 | 0] = wasm2js_i32$1;
 if (bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($28anonymous_20namespace_29__itanium_demangle__NodeArray__begin_28_29_20const($1), $28anonymous_20namespace_29__itanium_demangle__NodeArray__end_28_29_20const($1))) {
  HEAP8[$0 + 7 | 0] = 1;
 }
 if (bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($28anonymous_20namespace_29__itanium_demangle__NodeArray__begin_28_29_20const($1), $28anonymous_20namespace_29__itanium_demangle__NodeArray__end_28_29_20const($1))) {
  HEAP8[$0 + 5 | 0] = 1;
 }
 return $0;
}
function jpeg_idct_10x5($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $18 = __stack_pointer - 160 | 0;
 __stack_pointer = $18;
 $12 = HEAP32[$0 + 336 >> 2];
 $1 = HEAP32[$1 + 84 >> 2];
 $0 = $18;
 while (1) {
  $7 = HEAP32[$1 + 96 >> 2];
  $5 = HEAP16[$2 + 48 >> 1];
  $6 = HEAP32[$1 + 32 >> 2];
  $13 = HEAP16[$2 + 16 >> 1];
  $14 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $8 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $11 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $9 = $8 - $11 | 0;
  HEAP32[$0 + 64 >> 2] = $14 + Math_imul($9, -11584) >> 11;
  $7 = Math_imul($5, $7);
  $8 = Math_imul($8 + $11 | 0, 6476);
  $9 = Math_imul($9, 2896) + $14 | 0;
  $11 = $8 + $9 | 0;
  $5 = Math_imul($6, $13);
  $6 = Math_imul($7 + $5 | 0, 6810);
  $5 = $6 + Math_imul($5, 4209) | 0;
  HEAP32[$0 + 128 >> 2] = $11 - $5 >> 11;
  HEAP32[$0 >> 2] = $5 + $11 >> 11;
  $5 = $9 - $8 | 0;
  $7 = Math_imul($7, -17828) + $6 | 0;
  HEAP32[$0 + 96 >> 2] = $5 - $7 >> 11;
  HEAP32[$0 + 32 >> 2] = $5 + $7 >> 11;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $2 = $2 + 2 | 0;
  $10 = $10 + 1 | 0;
  if (($10 | 0) != 8) {
   continue;
  }
  break;
 }
 $2 = $12 - 384 | 0;
 $7 = 0;
 $1 = $18;
 while (1) {
  $5 = HEAP32[$1 + 28 >> 2];
  $6 = HEAP32[$1 + 12 >> 2];
  $8 = $5 + $6 | 0;
  $11 = Math_imul($8, 7791);
  $0 = HEAP32[($7 << 2) + $3 >> 2] + $4 | 0;
  $5 = $6 - $5 | 0;
  $9 = Math_imul($5, 2531);
  $14 = HEAP32[$1 + 20 >> 2];
  $12 = $14 << 13;
  $19 = $9 + $12 | 0;
  $10 = HEAP32[$1 + 4 >> 2];
  $15 = $19 + (Math_imul($10, 11443) + $11 | 0) | 0;
  $6 = HEAP32[$1 + 8 >> 2];
  $16 = HEAP32[$1 + 24 >> 2];
  $17 = Math_imul($6 + $16 | 0, 6810);
  $20 = $17 + Math_imul($6, 4209) | 0;
  $6 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
  $13 = HEAP32[$1 + 16 >> 2];
  $21 = $6 + Math_imul($13, 9373) | 0;
  $22 = $20 + $21 | 0;
  HEAP8[$0 | 0] = HEAPU8[($15 + $22 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 9 | 0] = HEAPU8[($22 - $15 >>> 18 & 1023) + $2 | 0];
  $8 = Math_imul($8, 4815);
  $9 = ($12 - $9 | 0) - ($5 << 12) | 0;
  $12 = (Math_imul($10, 10323) - $8 | 0) - $9 | 0;
  $15 = Math_imul($16, -17828) + $17 | 0;
  $16 = Math_imul($13, -3580) + $6 | 0;
  $17 = $15 + $16 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($12 + $17 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 8 | 0] = HEAPU8[($17 - $12 >>> 18 & 1023) + $2 | 0];
  $5 = ($10 - $14 | 0) - $5 << 13;
  $6 = Math_imul($13, -11586) + $6 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 7 | 0] = HEAPU8[($6 - $5 >>> 18 & 1023) + $2 | 0];
  $5 = (Math_imul($10, 5260) - $8 | 0) + $9 | 0;
  $6 = $16 - $15 | 0;
  HEAP8[$0 + 3 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 6 | 0] = HEAPU8[($6 - $5 >>> 18 & 1023) + $2 | 0];
  $5 = $21 - $20 | 0;
  $10 = (Math_imul($10, 1812) - $11 | 0) + $19 | 0;
  HEAP8[$0 + 4 | 0] = HEAPU8[($5 + $10 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($5 - $10 >>> 18 & 1023) + $2 | 0];
  $1 = $1 + 32 | 0;
  $7 = $7 + 1 | 0;
  if (($7 | 0) != 5) {
   continue;
  }
  break;
 }
 __stack_pointer = $18 + 160 | 0;
}
function jpeg_idct_5x10($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $19 = __stack_pointer - 208 | 0;
 __stack_pointer = $19;
 $22 = HEAP32[$0 + 336 >> 2];
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = $19;
 while (1) {
  $8 = HEAP32[$0 + 192 >> 2];
  $5 = HEAP16[$2 + 96 >> 1];
  $10 = HEAP32[$0 + 64 >> 2];
  $11 = HEAP16[$2 + 32 >> 1];
  $6 = Math_imul(HEAP16[$2 >> 1], HEAP32[$0 >> 2]) << 13 | 1024;
  $7 = Math_imul(HEAP32[$0 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $14 = $6 + Math_imul($7, -11586) >> 11;
  $9 = Math_imul(HEAP32[$0 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $15 = Math_imul(HEAP32[$0 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $16 = Math_imul(HEAP32[$0 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $17 = Math_imul(HEAP32[$0 + 224 >> 2], HEAP16[$2 + 112 >> 1]);
  $12 = $16 - $17 | 0;
  $18 = ($9 - $15 | 0) - $12 << 2;
  HEAP32[$1 + 140 >> 2] = $14 - $18;
  HEAP32[$1 + 40 >> 2] = $14 + $18;
  $8 = Math_imul($5, $8);
  $5 = Math_imul($10, $11);
  $10 = Math_imul($8 + $5 | 0, 6810);
  $5 = $10 + Math_imul($5, 4209) | 0;
  $11 = Math_imul($7, 9373) + $6 | 0;
  $14 = $5 + $11 | 0;
  $15 = $15 << 13;
  $18 = Math_imul($12, 2531);
  $20 = $15 + $18 | 0;
  $16 = $16 + $17 | 0;
  $17 = Math_imul($16, 7791);
  $21 = $20 + ($17 + Math_imul($9, 11443) | 0) | 0;
  HEAP32[$1 + 180 >> 2] = $14 - $21 >> 11;
  HEAP32[$1 >> 2] = $14 + $21 >> 11;
  $5 = $11 - $5 | 0;
  $11 = (Math_imul($9, 1812) - $17 | 0) + $20 | 0;
  HEAP32[$1 + 100 >> 2] = $5 - $11 >> 11;
  HEAP32[$1 + 80 >> 2] = $5 + $11 >> 11;
  $7 = Math_imul($7, -3580) + $6 | 0;
  $8 = Math_imul($8, -17828) + $10 | 0;
  $6 = $7 + $8 | 0;
  $5 = Math_imul($16, 4815);
  $12 = ($15 - $18 | 0) - ($12 << 12) | 0;
  $10 = (Math_imul($9, 10323) - $5 | 0) - $12 | 0;
  HEAP32[$1 + 160 >> 2] = $6 - $10 >> 11;
  HEAP32[$1 + 20 >> 2] = $6 + $10 >> 11;
  $7 = $7 - $8 | 0;
  $9 = (Math_imul($9, 5260) - $5 | 0) + $12 | 0;
  HEAP32[$1 + 120 >> 2] = $7 - $9 >> 11;
  HEAP32[$1 + 60 >> 2] = $7 + $9 >> 11;
  $1 = $1 + 4 | 0;
  $0 = $0 + 4 | 0;
  $2 = $2 + 2 | 0;
  $13 = $13 + 1 | 0;
  if (($13 | 0) != 5) {
   continue;
  }
  break;
 }
 $2 = $22 - 384 | 0;
 $9 = 0;
 $1 = $19;
 while (1) {
  $0 = HEAP32[($9 << 2) + $3 >> 2] + $4 | 0;
  $6 = HEAP32[$1 + 4 >> 2];
  $7 = HEAP32[$1 + 12 >> 2];
  $12 = Math_imul($6 + $7 | 0, 6810);
  $6 = $12 + Math_imul($6, 4209) | 0;
  $10 = (HEAP32[$1 >> 2] << 13) + 134348800 | 0;
  $13 = HEAP32[$1 + 8 >> 2];
  $8 = HEAP32[$1 + 16 >> 2];
  $5 = $13 - $8 | 0;
  $11 = $10 + Math_imul($5, 2896) | 0;
  $13 = Math_imul($8 + $13 | 0, 6476);
  $8 = $11 + $13 | 0;
  HEAP8[$0 | 0] = HEAPU8[($6 + $8 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($8 - $6 >>> 18 & 1023) + $2 | 0];
  $6 = $11 - $13 | 0;
  $7 = Math_imul($7, -17828) + $12 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($6 + $7 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[($6 - $7 >>> 18 & 1023) + $2 | 0];
  HEAP8[$0 + 2 | 0] = HEAPU8[(Math_imul($5, -11584) + $10 >>> 18 & 1023) + $2 | 0];
  $1 = $1 + 20 | 0;
  $9 = $9 + 1 | 0;
  if (($9 | 0) != 10) {
   continue;
  }
  break;
 }
 __stack_pointer = $19 + 208 | 0;
}
function jpeg_make_d_derived_tbl($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $8 = __stack_pointer - 1312 | 0;
 __stack_pointer = $8;
 if ($2 >>> 0 >= 4) {
  $4 = HEAP32[$0 >> 2];
  HEAP32[$4 + 24 >> 2] = $2;
  HEAP32[$4 + 20 >> 2] = 52;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $4 = ($2 << 2) + $0 | 0;
 $9 = HEAP32[($1 ? $4 + 180 | 0 : $4 + 196 | 0) >> 2];
 if (!$9) {
  $4 = HEAP32[$0 >> 2];
  HEAP32[$4 + 24 >> 2] = $2;
  HEAP32[$4 + 20 >> 2] = 52;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $4 = HEAP32[$3 >> 2];
 if (!$4) {
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1424) | 0;
  HEAP32[$3 >> 2] = $4;
 }
 HEAP32[$4 + 140 >> 2] = $9;
 $2 = 1;
 while (1) {
  $3 = HEAPU8[$2 + $9 | 0];
  $5 = $10 + $3 | 0;
  if (($5 | 0) >= 257) {
   $6 = HEAP32[$0 >> 2];
   HEAP32[$6 + 20 >> 2] = 9;
   FUNCTION_TABLE[HEAP32[$6 >> 2]]($0);
  }
  if ($3) {
   memset(($8 + 1040 | 0) + $10 | 0, $2, $3);
   $10 = $5;
  }
  $2 = $2 + 1 | 0;
  if (($2 | 0) != 17) {
   continue;
  }
  break;
 }
 $3 = 0;
 HEAP8[($8 + 1040 | 0) + $10 | 0] = 0;
 $6 = HEAPU8[$8 + 1040 | 0];
 if ($6) {
  $5 = $6 << 24 >> 24;
  $2 = 0;
  while (1) {
   if ($6 << 24 >> 24 == ($5 | 0)) {
    while (1) {
     HEAP32[($3 << 2) + $8 >> 2] = $2;
     $2 = $2 + 1 | 0;
     $3 = $3 + 1 | 0;
     $6 = HEAP8[$3 + ($8 + 1040 | 0) | 0];
     if (($6 | 0) == ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   if (1 << $5 <= ($2 | 0)) {
    $7 = HEAP32[$0 >> 2];
    HEAP32[$7 + 20 >> 2] = 9;
    FUNCTION_TABLE[HEAP32[$7 >> 2]]($0);
   }
   $5 = $5 + 1 | 0;
   $2 = $2 << 1;
   if ($6 & 255) {
    continue;
   }
   break;
  }
 }
 $3 = 0;
 $2 = 1;
 while (1) {
  $7 = ($2 << 2) + $4 | 0;
  $5 = $2 + $9 | 0;
  $6 = -1;
  label$13 : {
   if (!HEAPU8[$5 | 0]) {
    break label$13;
   }
   HEAP32[(($2 << 2) + $4 | 0) + 72 >> 2] = $3 - HEAP32[($3 << 2) + $8 >> 2];
   $3 = HEAPU8[$5 | 0] + $3 | 0;
   $6 = HEAP32[(($3 << 2) + $8 | 0) - 4 >> 2];
  }
  $5 = $6;
  HEAP32[$7 >> 2] = $5;
  $2 = $2 + 1 | 0;
  if (($2 | 0) != 17) {
   continue;
  }
  break;
 }
 HEAP32[$4 + 68 >> 2] = 1048575;
 memset($4 + 144 | 0, 0, 1024);
 $7 = 1;
 while (1) {
  $13 = $7 + $9 | 0;
  if (HEAPU8[$13 | 0]) {
   $11 = 1;
   $14 = 8 - $7 | 0;
   $6 = 1 << $14;
   while (1) {
    $15 = $9 + $12 | 0;
    $2 = HEAP32[($12 << 2) + $8 >> 2] << $14;
    $3 = $6;
    while (1) {
     HEAP32[(($2 << 2) + $4 | 0) + 144 >> 2] = $7;
     HEAP8[($2 + $4 | 0) + 1168 | 0] = HEAPU8[$15 + 17 | 0];
     $2 = $2 + 1 | 0;
     $5 = ($3 | 0) > 1;
     $3 = $3 - 1 | 0;
     if ($5) {
      continue;
     }
     break;
    }
    $12 = $12 + 1 | 0;
    $2 = HEAPU8[$13 | 0] > $11 >>> 0;
    $11 = $11 + 1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  $7 = $7 + 1 | 0;
  if (($7 | 0) != 9) {
   continue;
  }
  break;
 }
 if (!(!$1 | ($10 | 0) < 1)) {
  $2 = 0;
  while (1) {
   if (HEAPU8[($2 + $9 | 0) + 17 | 0] >= 16) {
    $3 = HEAP32[$0 >> 2];
    HEAP32[$3 + 20 >> 2] = 9;
    FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
   }
   $2 = $2 + 1 | 0;
   if (($10 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 __stack_pointer = $8 + 1312 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 $6 = $0 + 8 | 0;
 if ($28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($6) >>> 0 >= 4) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 104 | 0, 23852);
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 48 >> 2] = $5;
  HEAP32[$2 + 52 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 48 | 0);
  $3 = $6;
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  $3 = $4;
  HEAP32[$2 + 40 >> 2] = $4;
  HEAP32[$2 + 44 >> 2] = $5;
  HEAP32[$2 + 96 >> 2] = $3;
  HEAP32[$2 + 100 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 40 | 0);
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 88 | 0, 23378);
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = $5;
  HEAP32[$2 + 36 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 32 | 0);
 }
 $7 = $2;
 $0 = $0 + 16 | 0;
 label$2 : {
  if (HEAPU8[$28anonymous_20namespace_29__itanium_demangle__StringView__operator_5b_5d_28unsigned_20long_29_20const($0) | 0] == 110) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 80 | 0, 23468);
   $4 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 24 >> 2] = $4;
   HEAP32[$2 + 28 >> 2] = $5;
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
   $28anonymous_20namespace_29__itanium_demangle__StringView__dropFront_28unsigned_20long_29_20const($2 + 72 | 0, $0, 1);
   $0 = $2 + 72 | 0;
   break label$2;
  }
  $3 = $0;
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 64 >> 2] = $5;
  HEAP32[$2 + 68 >> 2] = $4;
  $0 = $2 - -64 | 0;
 }
 $3 = $0;
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 $0 = $4;
 $4 = $7;
 HEAP32[$4 + 16 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 if ($28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($6) >>> 0 <= 3) {
  $3 = $6;
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  $3 = $5;
  HEAP32[$2 + 8 >> 2] = $5;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 56 >> 2] = $3;
  HEAP32[$2 + 60 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 __stack_pointer = $2 + 112 | 0;
}
function jpeg_idct_4x4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $11 = HEAP32[$0 + 336 >> 2];
 $6 = __stack_pointer;
 $0 = $6 + -64 | 0;
 $1 = HEAP32[$1 + 84 >> 2];
 $6 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
 $5 = Math_imul(HEAP32[$1 >> 2], HEAP16[$2 >> 1]);
 $8 = $6 + $5 << 2;
 $7 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
 $9 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
 $10 = Math_imul($7 + $9 | 0, 4433) + 1024 | 0;
 $7 = $10 + Math_imul($7, 6270) >> 11;
 HEAP32[$0 + 48 >> 2] = $8 - $7;
 HEAP32[$0 >> 2] = $7 + $8;
 $6 = $5 - $6 << 2;
 $5 = Math_imul($9, -15137) + $10 >> 11;
 HEAP32[$0 + 32 >> 2] = $6 - $5;
 HEAP32[$0 + 16 >> 2] = $6 + $5;
 $5 = Math_imul(HEAP32[$1 + 4 >> 2], HEAP16[$2 + 2 >> 1]);
 $6 = Math_imul(HEAP32[$1 + 68 >> 2], HEAP16[$2 + 34 >> 1]);
 $8 = $5 + $6 << 2;
 $7 = Math_imul(HEAP32[$1 + 36 >> 2], HEAP16[$2 + 18 >> 1]);
 $9 = Math_imul(HEAP32[$1 + 100 >> 2], HEAP16[$2 + 50 >> 1]);
 $10 = Math_imul($7 + $9 | 0, 4433) + 1024 | 0;
 $7 = $10 + Math_imul($7, 6270) >> 11;
 HEAP32[$0 + 52 >> 2] = $8 - $7;
 HEAP32[$0 + 4 >> 2] = $7 + $8;
 $6 = $5 - $6 << 2;
 $5 = Math_imul($9, -15137) + $10 >> 11;
 HEAP32[$0 + 36 >> 2] = $6 - $5;
 HEAP32[$0 + 20 >> 2] = $6 + $5;
 $5 = Math_imul(HEAP32[$1 + 8 >> 2], HEAP16[$2 + 4 >> 1]);
 $6 = Math_imul(HEAP32[$1 + 72 >> 2], HEAP16[$2 + 36 >> 1]);
 $8 = $5 + $6 << 2;
 $7 = Math_imul(HEAP32[$1 + 40 >> 2], HEAP16[$2 + 20 >> 1]);
 $9 = Math_imul(HEAP32[$1 + 104 >> 2], HEAP16[$2 + 52 >> 1]);
 $10 = Math_imul($7 + $9 | 0, 4433) + 1024 | 0;
 $7 = $10 + Math_imul($7, 6270) >> 11;
 HEAP32[$0 + 56 >> 2] = $8 - $7;
 HEAP32[$0 + 8 >> 2] = $7 + $8;
 $6 = $5 - $6 << 2;
 $5 = Math_imul($9, -15137) + $10 >> 11;
 HEAP32[$0 + 40 >> 2] = $6 - $5;
 HEAP32[$0 + 24 >> 2] = $6 + $5;
 $9 = Math_imul(HEAP32[$1 + 108 >> 2], HEAP16[$2 + 54 >> 1]);
 $5 = Math_imul(HEAP32[$1 + 12 >> 2], HEAP16[$2 + 6 >> 1]);
 $6 = Math_imul(HEAP32[$1 + 76 >> 2], HEAP16[$2 + 38 >> 1]);
 $8 = $5 + $6 << 2;
 $2 = Math_imul(HEAP32[$1 + 44 >> 2], HEAP16[$2 + 22 >> 1]);
 $1 = Math_imul($9 + $2 | 0, 4433) + 1024 | 0;
 $2 = $1 + Math_imul($2, 6270) >> 11;
 HEAP32[$0 + 60 >> 2] = $8 - $2;
 HEAP32[$0 + 12 >> 2] = $2 + $8;
 $2 = $5 - $6 << 2;
 $1 = Math_imul($9, -15137) + $1 >> 11;
 HEAP32[$0 + 44 >> 2] = $2 - $1;
 HEAP32[$0 + 28 >> 2] = $1 + $2;
 $1 = $11 - 384 | 0;
 $6 = 0;
 $2 = $0;
 while (1) {
  $0 = HEAP32[($6 << 2) + $3 >> 2] + $4 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $11 = HEAP32[$2 + 12 >> 2];
  $8 = Math_imul($5 + $11 | 0, 4433);
  $5 = $8 + Math_imul($5, 6270) | 0;
  $7 = HEAP32[$2 + 8 >> 2];
  $9 = HEAP32[$2 >> 2] + 16400 | 0;
  $10 = $7 + $9 << 13;
  HEAP8[$0 | 0] = HEAPU8[($5 + $10 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[($10 - $5 >>> 18 & 1023) + $1 | 0];
  $5 = $9 - $7 << 13;
  $11 = Math_imul($11, -15137) + $8 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($5 + $11 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 2 | 0] = HEAPU8[($5 - $11 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 16 | 0;
  $6 = $6 + 1 | 0;
  if (($6 | 0) != 4) {
   continue;
  }
  break;
 }
}
function consume_data($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $8 = __stack_pointer - 16 | 0;
 __stack_pointer = $8;
 $4 = HEAP32[$0 + 452 >> 2];
 if (HEAP32[$0 + 340 >> 2] >= 1) {
  while (1) {
   $2 = $1 << 2;
   $3 = $8 + $2 | 0;
   $2 = HEAP32[($0 + $2 | 0) + 344 >> 2];
   $5 = HEAP32[((HEAP32[$2 + 4 >> 2] << 2) + $4 | 0) + 72 >> 2];
   $2 = HEAP32[$2 + 12 >> 2];
   wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 32 >> 2]]($0, $5, Math_imul($2, HEAP32[$0 + 148 >> 2]), $2, 1) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $1 = $1 + 1 | 0;
   if (($1 | 0) < HEAP32[$0 + 340 >> 2]) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$4 + 28 >> 2];
 $6 = HEAP32[$4 + 24 >> 2];
 label$3 : {
  if (($2 | 0) > ($6 | 0)) {
   $13 = $4 + 32 | 0;
   $1 = HEAP32[$0 + 360 >> 2];
   $5 = HEAP32[$4 + 20 >> 2];
   while (1) {
    if ($1 >>> 0 > $5 >>> 0) {
     while (1) {
      $9 = 0;
      $2 = 0;
      $11 = HEAP32[$0 + 340 >> 2];
      if (($11 | 0) >= 1) {
       while (1) {
        $1 = $9 << 2;
        $3 = HEAP32[($1 + $0 | 0) + 344 >> 2];
        $12 = HEAP32[$3 + 60 >> 2];
        if (($12 | 0) >= 1) {
         $7 = HEAP32[$3 + 56 >> 2];
         $14 = Math_imul($7, $5);
         $15 = HEAP32[$1 + $8 >> 2];
         $10 = 0;
         while (1) {
          if (($7 | 0) >= 1) {
           $1 = HEAP32[($6 + $10 << 2) + $15 >> 2] + ($14 << 7) | 0;
           $3 = 0;
           while (1) {
            HEAP32[(($2 << 2) + $4 | 0) + 32 >> 2] = $1;
            $2 = $2 + 1 | 0;
            $1 = $1 + 128 | 0;
            $3 = $3 + 1 | 0;
            if (($7 | 0) != ($3 | 0)) {
             continue;
            }
            break;
           }
          }
          $10 = $10 + 1 | 0;
          if (($12 | 0) != ($10 | 0)) {
           continue;
          }
          break;
         }
        }
        $9 = $9 + 1 | 0;
        if (($11 | 0) != ($9 | 0)) {
         continue;
        }
        break;
       }
      }
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 468 >> 2] + 4 >> 2]]($0, $13) | 0)) {
       HEAP32[$4 + 20 >> 2] = $5;
       HEAP32[$4 + 24 >> 2] = $6;
       $1 = 0;
       break label$3;
      }
      $1 = HEAP32[$0 + 360 >> 2];
      $5 = $5 + 1 | 0;
      if ($1 >>> 0 > $5 >>> 0) {
       continue;
      }
      break;
     }
     $2 = HEAP32[$4 + 28 >> 2];
    }
    $5 = 0;
    HEAP32[$4 + 20 >> 2] = 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  $2 = 1;
  $1 = HEAP32[$0 + 148 >> 2] + 1 | 0;
  HEAP32[$0 + 148 >> 2] = $1;
  $7 = HEAP32[$0 + 332 >> 2];
  if ($7 >>> 0 > $1 >>> 0) {
   $3 = HEAP32[$0 + 452 >> 2];
   $2 = HEAP32[$0 + 340 >> 2] <= 1 ? HEAP32[HEAP32[$0 + 344 >> 2] + ($7 - 1 >>> 0 > $1 >>> 0 ? 12 : 76) >> 2] : $2;
   HEAP32[$3 + 20 >> 2] = 0;
   HEAP32[$3 + 24 >> 2] = 0;
   HEAP32[$3 + 28 >> 2] = $2;
   $1 = 3;
   break label$3;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] + 12 >> 2]]($0);
  $1 = 4;
 }
 __stack_pointer = $8 + 16 | 0;
 return $1 | 0;
}
function pass2_fs_dither($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 if (($3 | 0) >= 1) {
  $21 = HEAP32[$0 + 336 >> 2];
  $4 = HEAP32[$0 + 136 >> 2];
  $30 = HEAP32[$4 + 8 >> 2];
  $31 = HEAP32[$4 + 4 >> 2];
  $32 = HEAP32[$4 >> 2];
  $12 = HEAP32[$0 + 484 >> 2];
  $22 = HEAP32[$12 + 40 >> 2];
  $33 = HEAP32[$12 + 24 >> 2];
  $16 = HEAP32[$0 + 112 >> 2];
  $34 = $16 - 1 | 0;
  $4 = Math_imul($16, 3);
  $35 = $4 - 3 | 0;
  $36 = $4 + 3 << 1;
  while (1) {
   $4 = $23 << 2;
   $13 = HEAP32[$4 + $2 >> 2];
   $7 = HEAP32[$1 + $4 >> 2];
   $17 = $12;
   label$3 : {
    if (HEAP32[$12 + 36 >> 2]) {
     $13 = $13 + $34 | 0;
     $7 = $7 + $35 | 0;
     $14 = -3;
     $25 = -1;
     $4 = 0;
     $6 = HEAP32[$12 + 32 >> 2] + $36 | 0;
     break label$3;
    }
    $14 = 3;
    $25 = 1;
    $4 = 1;
    $6 = HEAP32[$12 + 32 >> 2];
   }
   HEAP32[$17 + 36 >> 2] = $4;
   label$5 : {
    if (!$16) {
     $18 = 0;
     $19 = 0;
     $20 = 0;
     break label$5;
    }
    $37 = $14 + 2 | 0;
    $38 = $14 + 1 | 0;
    $15 = 0;
    $8 = 0;
    $9 = 0;
    $26 = 0;
    $27 = 0;
    $17 = 0;
    $20 = 0;
    $19 = 0;
    $18 = 0;
    $24 = $16;
    $4 = $6;
    while (1) {
     $6 = ($14 << 1) + $4 | 0;
     $10 = HEAPU8[(HEAP32[((HEAP16[$6 >> 1] + $15 | 0) + 8 >> 4 << 2) + $22 >> 2] + HEAPU8[$7 | 0] | 0) + $21 | 0];
     $28 = $10 >>> 3 | 0;
     $11 = HEAPU8[(HEAP32[((HEAP16[($38 << 1) + $4 >> 1] + $8 | 0) + 8 >> 4 << 2) + $22 >> 2] + HEAPU8[$7 + 1 | 0] | 0) + $21 | 0];
     $8 = $11 >>> 2 | 0;
     $15 = HEAPU8[(HEAP32[((HEAP16[($37 << 1) + $4 >> 1] + $9 | 0) + 8 >> 4 << 2) + $22 >> 2] + HEAPU8[$7 + 2 | 0] | 0) + $21 | 0];
     $9 = $15 >>> 3 | 0;
     $29 = (HEAP32[($28 << 2) + $33 >> 2] + ($8 << 6) | 0) + ($9 << 1) | 0;
     $5 = HEAPU16[$29 >> 1];
     if (!$5) {
      fill_inverse_cmap($0, $28, $8, $9);
      $5 = HEAPU16[$29 >> 1];
     }
     $5 = ($5 & 65535) - 1 | 0;
     HEAP8[$13 | 0] = $5;
     $8 = HEAPU8[$5 + $32 | 0];
     $9 = HEAPU8[$5 + $31 | 0];
     $5 = $15 - HEAPU8[$5 + $30 | 0] | 0;
     HEAP16[$4 + 4 >> 1] = Math_imul($5, 3) + $18;
     $11 = $11 - $9 | 0;
     HEAP16[$4 + 2 >> 1] = Math_imul($11, 3) + $19;
     $10 = $10 - $8 | 0;
     HEAP16[$4 >> 1] = Math_imul($10, 3) + $20;
     $13 = $13 + $25 | 0;
     $7 = $7 + $14 | 0;
     $9 = Math_imul($5, 7);
     $8 = Math_imul($11, 7);
     $15 = Math_imul($10, 7);
     $18 = Math_imul($5, 5) + $17 | 0;
     $19 = Math_imul($11, 5) + $27 | 0;
     $20 = Math_imul($10, 5) + $26 | 0;
     $26 = $10;
     $27 = $11;
     $17 = $5;
     $4 = $6;
     $24 = $24 - 1 | 0;
     if ($24) {
      continue;
     }
     break;
    }
   }
   HEAP16[$6 + 4 >> 1] = $18;
   HEAP16[$6 + 2 >> 1] = $19;
   HEAP16[$6 >> 1] = $20;
   $23 = $23 + 1 | 0;
   if (($23 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___PODSmallVector_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul____29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $0 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___PODSmallVector_28_29($0);
 if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___isInline_28_29_20const($1)) {
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____20std____2__copy__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___begin_28_29($1), $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___end_28_29($1), HEAP32[$0 >> 2]);
  wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$0 >> 2] + ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___size_28_29_20const($1) << 2) | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clear_28_29($1);
  return $0;
 }
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clearInline_28_29($1);
 return $0;
}
function process_restart($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[$0 + 468 >> 2];
 if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 464 >> 2] + 8 >> 2]]($0) | 0)) {
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 25;
  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
 }
 if (HEAP32[$0 + 340 >> 2] >= 1) {
  while (1) {
   $4 = $3 << 2;
   $5 = HEAP32[($4 + $0 | 0) + 344 >> 2];
   label$4 : {
    label$5 : {
     if (HEAP32[$0 + 224 >> 2]) {
      if (HEAP32[$0 + 412 >> 2]) {
       break label$5;
      }
      if (HEAP32[$0 + 420 >> 2]) {
       break label$4;
      }
     }
     $1 = HEAP32[((HEAP32[$5 + 20 >> 2] << 2) + $2 | 0) + 60 >> 2];
     HEAP8[$1 | 0] = 0;
     HEAP8[$1 + 1 | 0] = 0;
     HEAP8[$1 + 2 | 0] = 0;
     HEAP8[$1 + 3 | 0] = 0;
     HEAP8[$1 + 4 | 0] = 0;
     HEAP8[$1 + 5 | 0] = 0;
     HEAP8[$1 + 6 | 0] = 0;
     HEAP8[$1 + 7 | 0] = 0;
     HEAP8[$1 + 56 | 0] = 0;
     HEAP8[$1 + 57 | 0] = 0;
     HEAP8[$1 + 58 | 0] = 0;
     HEAP8[$1 + 59 | 0] = 0;
     HEAP8[$1 + 60 | 0] = 0;
     HEAP8[$1 + 61 | 0] = 0;
     HEAP8[$1 + 62 | 0] = 0;
     HEAP8[$1 + 63 | 0] = 0;
     HEAP8[$1 + 48 | 0] = 0;
     HEAP8[$1 + 49 | 0] = 0;
     HEAP8[$1 + 50 | 0] = 0;
     HEAP8[$1 + 51 | 0] = 0;
     HEAP8[$1 + 52 | 0] = 0;
     HEAP8[$1 + 53 | 0] = 0;
     HEAP8[$1 + 54 | 0] = 0;
     HEAP8[$1 + 55 | 0] = 0;
     HEAP8[$1 + 40 | 0] = 0;
     HEAP8[$1 + 41 | 0] = 0;
     HEAP8[$1 + 42 | 0] = 0;
     HEAP8[$1 + 43 | 0] = 0;
     HEAP8[$1 + 44 | 0] = 0;
     HEAP8[$1 + 45 | 0] = 0;
     HEAP8[$1 + 46 | 0] = 0;
     HEAP8[$1 + 47 | 0] = 0;
     HEAP8[$1 + 32 | 0] = 0;
     HEAP8[$1 + 33 | 0] = 0;
     HEAP8[$1 + 34 | 0] = 0;
     HEAP8[$1 + 35 | 0] = 0;
     HEAP8[$1 + 36 | 0] = 0;
     HEAP8[$1 + 37 | 0] = 0;
     HEAP8[$1 + 38 | 0] = 0;
     HEAP8[$1 + 39 | 0] = 0;
     HEAP8[$1 + 24 | 0] = 0;
     HEAP8[$1 + 25 | 0] = 0;
     HEAP8[$1 + 26 | 0] = 0;
     HEAP8[$1 + 27 | 0] = 0;
     HEAP8[$1 + 28 | 0] = 0;
     HEAP8[$1 + 29 | 0] = 0;
     HEAP8[$1 + 30 | 0] = 0;
     HEAP8[$1 + 31 | 0] = 0;
     HEAP8[$1 + 16 | 0] = 0;
     HEAP8[$1 + 17 | 0] = 0;
     HEAP8[$1 + 18 | 0] = 0;
     HEAP8[$1 + 19 | 0] = 0;
     HEAP8[$1 + 20 | 0] = 0;
     HEAP8[$1 + 21 | 0] = 0;
     HEAP8[$1 + 22 | 0] = 0;
     HEAP8[$1 + 23 | 0] = 0;
     HEAP8[$1 + 8 | 0] = 0;
     HEAP8[$1 + 9 | 0] = 0;
     HEAP8[$1 + 10 | 0] = 0;
     HEAP8[$1 + 11 | 0] = 0;
     HEAP8[$1 + 12 | 0] = 0;
     HEAP8[$1 + 13 | 0] = 0;
     HEAP8[$1 + 14 | 0] = 0;
     HEAP8[$1 + 15 | 0] = 0;
     $1 = $2 + $4 | 0;
     HEAP32[$1 + 40 >> 2] = 0;
     HEAP32[$1 + 24 >> 2] = 0;
     if (!HEAP32[$0 + 224 >> 2]) {
      if (HEAP32[$0 + 436 >> 2]) {
       break label$5;
      }
      break label$4;
     }
     if (!HEAP32[$0 + 412 >> 2]) {
      break label$4;
     }
    }
    memset(HEAP32[((HEAP32[$5 + 24 >> 2] << 2) + $2 | 0) + 124 >> 2], 0, 256);
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) < HEAP32[$0 + 340 >> 2]) {
    continue;
   }
   break;
  }
 }
 HEAP32[$2 + 20 >> 2] = -16;
 $1 = $2;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 280 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCallOffset_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 104)) {
   $2 = 1;
   $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 1);
   if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($1 + 8 | 0)) {
    break label$1;
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95) ^ 1;
   break label$1;
  }
  $2 = 1;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 118)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1 + 8 | 0, $0, 1);
  if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($1 + 8 | 0)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95)) {
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($1, $0, 1);
  if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($1)) {
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 95) ^ 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($0) {
 var $1 = 0, $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  label$2 : {
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
   if (($1 | 0) != 68) {
    if (($1 & 255) != 84) {
     break label$2;
    }
    $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParam_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
    HEAP32[$2 + 12 >> 2] = $1;
    if (!$1) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $2 + 12 | 0);
    break label$1;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
   HEAP32[$2 + 8 >> 2] = $1;
   if (!$1) {
    break label$1;
   }
   $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0 + 148 | 0, $2 + 8 | 0);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSubstitution_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
 }
 __stack_pointer = $2 + 16 | 0;
 return $1;
}
function scanexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    $2 = HEAP32[$0 + 4 >> 2];
    label$4 : {
     if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
      HEAP32[$0 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$4;
     }
     $2 = __shgetc($0);
    }
    switch ($2 - 43 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$3;
    }
   }
   $3 = $2 - 48 | 0;
   break label$1;
  }
  $3 = HEAP32[$0 + 4 >> 2];
  label$6 : {
   if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $3 + 1;
    $4 = HEAPU8[$3 | 0];
    break label$6;
   }
   $4 = __shgetc($0);
  }
  $6 = ($2 | 0) == 45;
  $3 = $4 - 48 | 0;
  if (!(!HEAP32[$0 + 104 >> 2] | (!$1 | $3 >>> 0 < 10))) {
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
  }
  $2 = $4;
 }
 label$9 : {
  if ($3 >>> 0 < 10) {
   $3 = 0;
   while (1) {
    $3 = Math_imul($3, 10) + $2 | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    label$12 : {
     if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
      HEAP32[$0 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$12;
     }
     $2 = __shgetc($0);
    }
    $4 = $2 - 48 | 0;
    $3 = $3 - 48 | 0;
    if (($3 | 0) < 214748364 ? $4 >>> 0 <= 9 : 0) {
     continue;
    }
    break;
   }
   $5 = $3;
   $3 = $3 >> 31;
   $1 = $3;
   label$14 : {
    if ($4 >>> 0 >= 10) {
     break label$14;
    }
    while (1) {
     $3 = $1;
     $4 = __wasm_i64_mul($5, $3, 10, 0);
     $3 = i64toi32_i32$HIGH_BITS;
     $1 = $3;
     $2 = $2 + $4 | 0;
     $5 = $2;
     $1 = $2 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
     $2 = HEAP32[$0 + 4 >> 2];
     label$16 : {
      if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $2 + 1;
       $4 = HEAPU8[$2 | 0];
       break label$16;
      }
      $4 = __shgetc($0);
     }
     $3 = $5;
     $5 = $3 - 48 | 0;
     $2 = $3 >>> 0 < 48;
     $2 = $1 - $2 | 0;
     $1 = $2;
     $2 = $4;
     $4 = $2 - 48 | 0;
     if ($4 >>> 0 > 9) {
      break label$14;
     }
     if (($1 | 0) < 21474836 ? 1 : ($1 | 0) <= 21474836 ? $5 >>> 0 < 2061584302 : 0) {
      continue;
     }
     break;
    }
   }
   if ($4 >>> 0 < 10) {
    while (1) {
     $2 = HEAP32[$0 + 4 >> 2];
     label$20 : {
      if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$20;
      }
      $2 = __shgetc($0);
     }
     if ($2 - 48 >>> 0 < 10) {
      continue;
     }
     break;
    }
   }
   if (HEAP32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
   }
   $0 = 0 - ($1 + (($5 | 0) != 0) | 0) | 0;
   $2 = $6;
   $3 = $2 ? 0 - $5 | 0 : $5;
   $5 = $3;
   $1 = $2 ? $0 : $1;
   break label$9;
  }
  $1 = -2147483648;
  if (!HEAP32[$0 + 104 >> 2]) {
   break label$9;
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 1;
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $5;
}
function jpeg_calc_output_dimensions($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[$0 + 20 >> 2];
 if (($1 | 0) != 202) {
  $6 = HEAP32[$0 >> 2];
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = 21;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 jpeg_core_output_dimensions($0);
 $4 = HEAP32[$0 + 36 >> 2];
 label$2 : {
  if (($4 | 0) < 1) {
   break label$2;
  }
  $6 = HEAP32[$0 + 76 >> 2] ? 8 : 4;
  $9 = HEAP32[$0 + 328 >> 2];
  $10 = HEAP32[$0 + 324 >> 2];
  $2 = HEAP32[$0 + 216 >> 2];
  $5 = $2;
  while (1) {
   $7 = $10;
   label$4 : {
    if (($7 | 0) > ($6 | 0)) {
     break label$4;
    }
    $3 = HEAP32[$0 + 316 >> 2];
    $8 = HEAP32[$5 + 8 >> 2];
    if (($3 | 0) % ($8 << 1) | 0) {
     break label$4;
    }
    $1 = 2;
    while (1) {
     $7 = Math_imul($1, $10);
     if (($7 | 0) > ($6 | 0)) {
      break label$4;
     }
     $1 = $1 << 1;
     if (!(($3 | 0) % (Math_imul($8, $1) | 0) | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$5 + 36 >> 2] = $7;
   $3 = $9;
   label$6 : {
    if (($6 | 0) < ($3 | 0)) {
     break label$6;
    }
    $8 = HEAP32[$0 + 320 >> 2];
    $11 = HEAP32[$5 + 12 >> 2];
    if (($8 | 0) % ($11 << 1) | 0) {
     break label$6;
    }
    $1 = 2;
    while (1) {
     $3 = Math_imul($1, $9);
     if (($6 | 0) < ($3 | 0)) {
      break label$6;
     }
     $1 = $1 << 1;
     if (!(($8 | 0) % (Math_imul($11, $1) | 0) | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$5 + 40 >> 2] = $3;
   $1 = $3 << 1;
   label$8 : {
    if (($7 | 0) > ($1 | 0)) {
     HEAP32[$5 + 36 >> 2] = $1;
     break label$8;
    }
    $1 = $7 << 1;
    if (($3 | 0) <= ($1 | 0)) {
     break label$8;
    }
    HEAP32[$5 + 40 >> 2] = $1;
   }
   $5 = $5 + 88 | 0;
   $12 = $12 + 1 | 0;
   if (($12 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
  if (($4 | 0) < 1) {
   break label$2;
  }
  $1 = 0;
  while (1) {
   wasm2js_i32$0 = $2, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$2 + 36 >> 2], Math_imul(HEAP32[$2 + 8 >> 2], HEAP32[$0 + 28 >> 2])), Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 316 >> 2])), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
   wasm2js_i32$0 = $2, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[$2 + 40 >> 2], Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[$0 + 32 >> 2])), Math_imul(HEAP32[$0 + 428 >> 2], HEAP32[$0 + 320 >> 2])), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
   $2 = $2 + 88 | 0;
   $1 = $1 + 1 | 0;
   $4 = HEAP32[$0 + 36 >> 2];
   if (($1 | 0) < ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 44 >> 2] - 1 | 0;
 if ($1 >>> 0 <= 6) {
  $4 = HEAP32[($1 << 2) + 18144 >> 2];
 }
 HEAP32[$0 + 120 >> 2] = $4;
 $1 = 1;
 HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 84 >> 2] ? 1 : $4;
 if (use_merged_upsample($0)) {
  $1 = HEAP32[$0 + 320 >> 2];
 }
 HEAP32[$0 + 128 >> 2] = $1;
}
function get_interesting_appn($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $4 = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$4 + 4 >> 2];
 label$1 : {
  if (!$2) {
   if (!(FUNCTION_TABLE[HEAP32[$4 + 12 >> 2]]($0) | 0)) {
    $2 = 0;
    break label$1;
   }
   $2 = HEAP32[$4 + 4 >> 2];
  }
  $6 = HEAP32[$4 >> 2];
  $5 = HEAPU8[$6 | 0];
  $2 = $2 - 1 | 0;
  $1 = $6 + 1 | 0;
  label$4 : {
   if ($2) {
    break label$4;
   }
   if (!(FUNCTION_TABLE[HEAP32[$4 + 12 >> 2]]($0) | 0)) {
    $2 = 0;
    break label$1;
   }
   $2 = HEAP32[$4 + 4 >> 2];
   $1 = HEAP32[$4 >> 2];
  }
  $6 = $1 + 1 | 0;
  $2 = $2 - 1 | 0;
  $1 = HEAPU8[$1 | 0] | $5 << 8;
  $5 = $1 - 2 | 0;
  $1 = $1 >>> 0 > 15 ? 14 : $1 >>> 0 < $5 >>> 0 ? 0 : $5;
  if ($1) {
   while (1) {
    if (!$2) {
     if (!(FUNCTION_TABLE[HEAP32[$4 + 12 >> 2]]($0) | 0)) {
      $2 = 0;
      break label$1;
     }
     $6 = HEAP32[$4 >> 2];
     $2 = HEAP32[$4 + 4 >> 2];
    }
    HEAP8[($3 + 2 | 0) + $7 | 0] = HEAPU8[$6 | 0];
    $6 = $6 + 1 | 0;
    $2 = $2 - 1 | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  $7 = $5 - $1 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     $8 = HEAP32[$0 + 440 >> 2];
     $9 = $8 - 224 | 0;
     if ($9) {
      if (($9 | 0) == 14) {
       break label$12;
      }
      break label$11;
     }
     examine_app0($0, $3 + 2 | 0, $1, $7);
     break label$10;
    }
    label$16 : {
     if (HEAPU8[$3 + 2 | 0] != 65 | $1 >>> 0 < 12 | (HEAPU8[$3 + 3 | 0] != 100 | HEAPU8[$3 + 4 | 0] != 111)) {
      break label$16;
     }
     if (HEAPU8[$3 + 5 | 0] != 98 | HEAPU8[$3 + 6 | 0] != 101) {
      break label$16;
     }
     $8 = HEAPU8[$3 + 8 | 0];
     $10 = HEAPU8[$3 + 7 | 0];
     $11 = HEAPU8[$3 + 10 | 0];
     $12 = HEAPU8[$3 + 9 | 0];
     $13 = HEAPU8[$3 + 12 | 0];
     $9 = HEAPU8[$3 + 11 | 0];
     $5 = HEAPU8[$3 + 13 | 0];
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 20 >> 2] = 78;
     HEAP32[$1 + 36 >> 2] = $5;
     HEAP32[$1 + 32 >> 2] = $9 << 8 | $13;
     HEAP32[$1 + 28 >> 2] = $12 << 8 | $11;
     HEAP32[$1 + 24 >> 2] = $10 << 8 | $8;
     FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, 1);
     HEAP8[$0 + 300 | 0] = $5;
     HEAP32[$0 + 296 >> 2] = 1;
     break label$10;
    }
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 24 >> 2] = $5;
    HEAP32[$1 + 20 >> 2] = 80;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
    break label$10;
   }
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 24 >> 2] = $8;
   HEAP32[$1 + 20 >> 2] = 70;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $6;
  $2 = 1;
  if (($7 | 0) < 1) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 16 >> 2]]($0, $7);
 }
 __stack_pointer = $3 + 16 | 0;
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = 0;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1 + 28 | 0)) {
   break label$1;
  }
  $3 = HEAP32[$1 + 28 >> 2];
  if ($3 - 1 >>> 0 >= $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0) {
   break label$1;
  }
  $2 = HEAP32[$0 >> 2];
  $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($1 + 16 | 0, $2, $2 + $3 | 0);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $3;
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1 + 8 | 0, 26694);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $4;
  if ($28anonymous_20namespace_29__itanium_demangle__StringView__startsWith_28_28anonymous_20namespace_29__itanium_demangle__StringView_29_20const($2, $1)) {
   $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b22_5d__28char_20const_20_28__29_20_5b22_5d_29($0);
   break label$1;
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $2);
 }
 __stack_pointer = $1 + 32 | 0;
 return $2;
}
function arith_decode($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = HEAP32[$0 + 468 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 label$1 : {
  if (($3 | 0) >= 32768) {
   $2 = HEAP32[$4 + 20 >> 2];
   break label$1;
  }
  $2 = HEAP32[$4 + 20 >> 2];
  while (1) {
   $3 = $2 - 1 | 0;
   HEAP32[$4 + 20 >> 2] = $3;
   label$4 : {
    if (($2 | 0) > 0) {
     $2 = $3;
     break label$4;
    }
    $5 = 0;
    if (!HEAP32[$0 + 440 >> 2]) {
     $2 = HEAP32[$0 + 24 >> 2];
     label$7 : {
      if (HEAP32[$2 + 4 >> 2]) {
       break label$7;
      }
      if (FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0) {
       break label$7;
      }
      $3 = HEAP32[$0 >> 2];
      HEAP32[$3 + 20 >> 2] = 25;
      FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
     }
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
     $3 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $3 + 1;
     $5 = HEAPU8[$3 | 0];
     label$8 : {
      if (($5 | 0) != 255) {
       break label$8;
      }
      while (1) {
       $2 = HEAP32[$0 + 24 >> 2];
       label$10 : {
        if (HEAP32[$2 + 4 >> 2]) {
         break label$10;
        }
        if (FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0) {
         break label$10;
        }
        $3 = HEAP32[$0 >> 2];
        HEAP32[$3 + 20 >> 2] = 25;
        FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
       }
       HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
       $3 = HEAP32[$2 >> 2];
       HEAP32[$2 >> 2] = $3 + 1;
       $5 = 255;
       $2 = HEAPU8[$3 | 0];
       if (($2 | 0) == 255) {
        continue;
       }
       break;
      }
      if (!$2) {
       break label$8;
      }
      HEAP32[$0 + 440 >> 2] = $2;
      $5 = 0;
     }
     $3 = HEAP32[$4 + 20 >> 2];
    }
    $2 = $3 + 8 | 0;
    HEAP32[$4 + 20 >> 2] = $2;
    HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] << 8 | $5;
    if (($3 | 0) > -9) {
     break label$4;
    }
    $2 = $3 + 9 | 0;
    HEAP32[$4 + 20 >> 2] = $2;
    if ($2) {
     break label$4;
    }
    HEAP32[$4 + 16 >> 2] = 32768;
    $2 = 0;
   }
   $3 = HEAP32[$4 + 16 >> 2] << 1;
   HEAP32[$4 + 16 >> 2] = $3;
   if (($3 | 0) < 32768) {
    continue;
   }
   break;
  }
 }
 $0 = HEAPU8[$1 | 0];
 $5 = HEAP32[(($0 & 127) << 2) + 16768 >> 2];
 $6 = $5 >> 16;
 $3 = $3 - $6 | 0;
 HEAP32[$4 + 16 >> 2] = $3;
 $7 = $5 >> 8;
 $2 = $3 << $2;
 $8 = HEAP32[$4 + 12 >> 2];
 label$11 : {
  if (($2 | 0) <= ($8 | 0)) {
   HEAP32[$4 + 16 >> 2] = $6;
   HEAP32[$4 + 12 >> 2] = $8 - $2;
   $2 = $0 & 128;
   if (($3 | 0) < ($6 | 0)) {
    HEAP8[$1 | 0] = $2 ^ $7;
    break label$11;
   }
   HEAP8[$1 | 0] = $2 ^ $5;
   $0 = $0 ^ 128;
   break label$11;
  }
  if (($3 | 0) > 32767) {
   break label$11;
  }
  $2 = $0 & 128;
  if (($3 | 0) < ($6 | 0)) {
   HEAP8[$1 | 0] = $2 ^ $5;
   $0 = $0 ^ 128;
   break label$11;
  }
  HEAP8[$1 | 0] = $2 ^ $7;
 }
 return $0 >>> 7 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDecltype_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 68)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 116)) {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 84)) {
    break label$1;
   }
  }
  $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
  HEAP32[$1 + 12 >> 2] = $2;
  if (!$2) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, 23368, $1 + 12 | 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return $3;
}
function start_pass_2_quant($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 484 >> 2];
 $2 = HEAP32[$3 + 24 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    if (!HEAP32[$0 + 88 >> 2]) {
     if ($1) {
      break label$2;
     }
     $1 = 128;
     break label$3;
    }
    HEAP32[$0 + 88 >> 2] = 2;
    if ($1) {
     break label$2;
    }
    $1 = 129;
   }
   HEAP32[$3 + 8 >> 2] = 130;
   HEAP32[$3 + 4 >> 2] = $1;
   $1 = HEAP32[$0 + 132 >> 2];
   label$5 : {
    if (($1 | 0) <= 0) {
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 20 >> 2] = 58;
     HEAP32[$1 + 24 >> 2] = 1;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
     break label$5;
    }
    if (($1 | 0) < 257) {
     break label$5;
    }
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 59;
    HEAP32[$1 + 24 >> 2] = 256;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   }
   if (HEAP32[$0 + 88 >> 2] != 2) {
    break label$1;
   }
   $1 = Math_imul(HEAP32[$0 + 112 >> 2], 6) + 12 | 0;
   $4 = HEAP32[$3 + 32 >> 2];
   if (!$4) {
    $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, $1) | 0;
    HEAP32[$3 + 32 >> 2] = $4;
   }
   memset($4, 0, $1);
   if (!HEAP32[$3 + 40 >> 2]) {
    init_error_limit($0);
   }
   HEAP32[$3 + 36 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = 1;
  HEAP32[$3 + 8 >> 2] = 131;
  HEAP32[$3 + 4 >> 2] = 132;
 }
 if (HEAP32[$3 + 28 >> 2]) {
  memset(HEAP32[$2 >> 2], 0, 4096);
  memset(HEAP32[$2 + 4 >> 2], 0, 4096);
  memset(HEAP32[$2 + 8 >> 2], 0, 4096);
  memset(HEAP32[$2 + 12 >> 2], 0, 4096);
  memset(HEAP32[$2 + 16 >> 2], 0, 4096);
  memset(HEAP32[$2 + 20 >> 2], 0, 4096);
  memset(HEAP32[$2 + 24 >> 2], 0, 4096);
  memset(HEAP32[$2 + 28 >> 2], 0, 4096);
  memset(HEAP32[$2 + 32 >> 2], 0, 4096);
  memset(HEAP32[$2 + 36 >> 2], 0, 4096);
  memset(HEAP32[$2 + 40 >> 2], 0, 4096);
  memset(HEAP32[$2 + 44 >> 2], 0, 4096);
  memset(HEAP32[$2 + 48 >> 2], 0, 4096);
  memset(HEAP32[$2 + 52 >> 2], 0, 4096);
  memset(HEAP32[$2 + 56 >> 2], 0, 4096);
  memset(HEAP32[$2 + 60 >> 2], 0, 4096);
  memset(HEAP32[$2 + 64 >> 2], 0, 4096);
  memset(HEAP32[$2 + 68 >> 2], 0, 4096);
  memset(HEAP32[$2 + 72 >> 2], 0, 4096);
  memset(HEAP32[$2 + 76 >> 2], 0, 4096);
  memset(HEAP32[$2 + 80 >> 2], 0, 4096);
  memset(HEAP32[$2 + 84 >> 2], 0, 4096);
  memset(HEAP32[$2 + 88 >> 2], 0, 4096);
  memset(HEAP32[$2 + 92 >> 2], 0, 4096);
  memset(HEAP32[$2 + 96 >> 2], 0, 4096);
  memset(HEAP32[$2 + 100 >> 2], 0, 4096);
  memset(HEAP32[$2 + 104 >> 2], 0, 4096);
  memset(HEAP32[$2 + 108 >> 2], 0, 4096);
  memset(HEAP32[$2 + 112 >> 2], 0, 4096);
  memset(HEAP32[$2 + 116 >> 2], 0, 4096);
  memset(HEAP32[$2 + 120 >> 2], 0, 4096);
  memset(HEAP32[$2 + 124 >> 2], 0, 4096);
  HEAP32[$3 + 28 >> 2] = 0;
 }
}
function __trunctfsf2($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $12 = __stack_pointer - 32 | 0;
 __stack_pointer = $12;
 $4 = $3 & 2147483647;
 $9 = $4;
 $8 = $2;
 $5 = $8;
 $7 = 1065418752;
 $7 = $4 - $7 | 0;
 $6 = $7;
 $7 = $4;
 $5 = 1082064896;
 $5 = $7 - $5 | 0;
 $4 = $5;
 $5 = $6;
 $6 = $8;
 label$1 : {
  if (($4 | 0) == ($5 | 0) & $6 >>> 0 > $6 >>> 0 | $4 >>> 0 > $5 >>> 0) {
   $7 = $3;
   $6 = $2;
   $11 = ($7 & 33554431) << 7 | $6 >>> 25;
   $6 = 0;
   $9 = $6;
   $5 = $1;
   $13 = !($5 | $0);
   $7 = $2;
   $8 = $7 & 33554431;
   $5 = $8;
   $5 = !$6 & $5 >>> 0 < 16777216;
   $4 = $8;
   if (!(!$6 & ($4 | 0) == 16777216 ? $13 : $5)) {
    $10 = $11 + 1073741825 | 0;
    break label$1;
   }
   $10 = $11 + 1073741824 | 0;
   $7 = $8;
   $6 = $7 ^ 16777216;
   $5 = $1;
   $4 = $9;
   $7 = $5 | $4;
   $4 = $0;
   $5 = $6 | $4;
   if ($5 | $7) {
    break label$1;
   }
   $10 = ($11 & 1) + $10 | 0;
   break label$1;
  }
  $5 = $1;
  $7 = !($5 | $0);
  $5 = $9;
  $5 = $5 >>> 0 < 2147418112;
  $4 = $8;
  $6 = $9;
  if (!(!$4 & ($6 | 0) == 2147418112 ? $7 : $5)) {
   $4 = $3;
   $7 = $2;
   $10 = (($4 & 33554431) << 7 | $7 >>> 25) & 4194303 | 2143289344;
   break label$1;
  }
  $10 = 2139095040;
  if ($9 >>> 0 > 1082064895) {
   break label$1;
  }
  $10 = 0;
  $4 = $9;
  $11 = $4 >>> 16 | 0;
  if ($11 >>> 0 < 16145) {
   break label$1;
  }
  $6 = $3;
  $5 = $6 & 65535;
  $4 = $2;
  $8 = $4;
  $4 = $5 | 65536;
  $9 = $4;
  $4 = $1;
  $6 = $9;
  __ashlti3($12 + 16 | 0, $0, $4, $8, $6, $11 - 16129 | 0);
  $6 = $4;
  $4 = $9;
  __lshrti3($12, $0, $6, $8, $4, 16257 - $11 | 0);
  $5 = $12;
  $4 = HEAP32[$5 + 8 >> 2];
  $8 = $4;
  $6 = HEAP32[$5 + 12 >> 2];
  $9 = $6;
  $5 = $8;
  $10 = ($6 & 33554431) << 7 | $5 >>> 25;
  $6 = $12;
  $4 = HEAP32[$6 >> 2];
  $11 = $4;
  $5 = HEAP32[$6 + 4 >> 2];
  $13 = $5;
  $5 = HEAP32[$6 + 16 >> 2];
  $1 = $5;
  $4 = HEAP32[$6 + 20 >> 2];
  $0 = $4;
  $4 = HEAP32[$6 + 24 >> 2];
  $7 = $4;
  $5 = HEAP32[$6 + 28 >> 2];
  $4 = $5;
  $5 = $0;
  $4 = $4 | $5;
  $6 = $1;
  $5 = $6 | $7;
  $6 = ($5 | 0) != 0 | ($4 | 0) != 0;
  $5 = $13;
  $4 = $5;
  $1 = $4;
  $7 = $11;
  $0 = $6 | $7;
  $13 = !($4 | $0);
  $5 = $8;
  $8 = $5 & 33554431;
  $7 = 0;
  $9 = $7;
  $4 = $8;
  $5 = !$7 & $4 >>> 0 < 16777216;
  $4 = $7;
  $6 = $8;
  if (!(!$4 & ($6 | 0) == 16777216 ? $13 : $5)) {
   $10 = $10 + 1 | 0;
   break label$1;
  }
  $5 = $8;
  $7 = $5 ^ 16777216;
  $4 = $1;
  $6 = $9;
  $5 = $4 | $6;
  $6 = $0;
  $4 = $7 | $6;
  if ($4 | $5) {
   break label$1;
  }
  $10 = ($10 & 1) + $10 | 0;
 }
 __stack_pointer = $12 + 32 | 0;
 $4 = $3;
 return wasm2js_scratch_store_i32(2, $4 & -2147483648 | $10), wasm2js_scratch_load_f32();
}
function jpeg_idct_8x4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $11 = HEAP32[$0 + 336 >> 2];
 $1 = HEAP32[$1 + 84 >> 2];
 $5 = __stack_pointer;
 $8 = $5 - 128 | 0;
 $0 = $8;
 while (1) {
  $5 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $7 = Math_imul(HEAP32[$1 >> 2], HEAP16[$2 >> 1]);
  $9 = $5 + $7 << 2;
  $6 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $13 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $10 = Math_imul($6 + $13 | 0, 4433) + 1024 | 0;
  $6 = $10 + Math_imul($6, 6270) >> 11;
  HEAP32[$0 + 96 >> 2] = $9 - $6;
  HEAP32[$0 >> 2] = $6 + $9;
  $5 = $7 - $5 << 2;
  $7 = Math_imul($13, -15137) + $10 >> 11;
  HEAP32[$0 + 64 >> 2] = $5 - $7;
  HEAP32[$0 + 32 >> 2] = $5 + $7;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $2 = $2 + 2 | 0;
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 8) {
   continue;
  }
  break;
 }
 $1 = $11 - 384 | 0;
 $12 = 0;
 $2 = $8;
 while (1) {
  $5 = HEAP32[$2 + 4 >> 2];
  $7 = HEAP32[$2 + 28 >> 2];
  $13 = Math_imul($5 + $7 | 0, -7373);
  $0 = HEAP32[($12 << 2) + $3 >> 2] + $4 | 0;
  $8 = $13 + Math_imul($5, 12299) | 0;
  $9 = HEAP32[$2 + 20 >> 2];
  $6 = $9 + $5 | 0;
  $5 = HEAP32[$2 + 12 >> 2];
  $10 = $7 + $5 | 0;
  $11 = Math_imul($6 + $10 | 0, 9633);
  $6 = $11 + Math_imul($6, -3196) | 0;
  $8 = $8 + $6 | 0;
  $14 = HEAP32[$2 + 24 >> 2];
  $15 = HEAP32[$2 + 8 >> 2];
  $16 = Math_imul($14 + $15 | 0, 4433);
  $15 = $16 + Math_imul($15, 6270) | 0;
  $18 = HEAP32[$2 >> 2] + 16400 | 0;
  $19 = HEAP32[$2 + 16 >> 2];
  $20 = $18 + $19 << 13;
  $17 = $15 + $20 | 0;
  HEAP8[$0 | 0] = HEAPU8[($8 + $17 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 7 | 0] = HEAPU8[($17 - $8 >>> 18 & 1023) + $1 | 0];
  $8 = Math_imul($5 + $9 | 0, -20995);
  $17 = $8 + Math_imul($5, 25172) | 0;
  $5 = Math_imul($10, -16069) + $11 | 0;
  $10 = $17 + $5 | 0;
  $11 = Math_imul($14, -15137) + $16 | 0;
  $14 = $18 - $19 << 13;
  $16 = $11 + $14 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($10 + $16 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 6 | 0] = HEAPU8[($16 - $10 >>> 18 & 1023) + $1 | 0];
  $9 = (Math_imul($9, 16819) + $8 | 0) + $6 | 0;
  $6 = $14 - $11 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($9 + $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($6 - $9 >>> 18 & 1023) + $1 | 0];
  $5 = (Math_imul($7, 2446) + $13 | 0) + $5 | 0;
  $7 = $20 - $15 | 0;
  HEAP8[$0 + 3 | 0] = HEAPU8[($5 + $7 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($7 - $5 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 32 | 0;
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 4) {
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 $8 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($2 + 48 | 0, $1 + 12 | 0);
 $9 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($2 + 32 | 0, $1 + 16 | 0);
 $5 = $28anonymous_20namespace_29__itanium_demangle__OutputStream__getCurrentPosition_28_29_20const($1);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     $3 = HEAP32[$1 + 16 >> 2];
     switch ($3 + 1 | 0) {
     case 0:
      break label$2;
     case 1:
      break label$4;
     default:
      break label$3;
     }
    }
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__setCurrentPosition_28unsigned_20long_29($1, $5);
    break label$1;
   }
   $5 = $3 >>> 0 > 1 ? $3 : 1;
   $3 = 1;
   while (1) {
    if (($3 | 0) == ($5 | 0)) {
     break label$1;
    }
    $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 25130);
    $6 = HEAP32[$4 >> 2];
    $7 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 >> 2] = $6;
    HEAP32[$2 + 4 >> 2] = $7;
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
    HEAP32[$1 + 12 >> 2] = $3;
    $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
    $3 = $3 + 1 | 0;
    continue;
   }
  }
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 25252);
  $7 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $7;
  HEAP32[$2 + 12 >> 2] = $6;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20int____SwapAndRestore_28_29($9);
 $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20int____SwapAndRestore_28_29($8);
 __stack_pointer = $2 - -64 | 0;
}
function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $13 = 1;
 $9 = $0;
 $10 = $1;
 $15 = ($9 | 0) != 0 | ($10 | 0) != 0;
 $9 = $3;
 $10 = $9 & 2147483647;
 $12 = $10;
 $8 = $2;
 $14 = $8;
 $16 = ($10 | 0) == 2147418112 & ($8 | 0) != 0 | $10 >>> 0 > 2147418112;
 $9 = $10;
 $11 = $8;
 label$1 : {
  if (!$11 & ($9 | 0) == 2147418112 ? $15 : $16) {
   break label$1;
  }
  $8 = $4;
  $11 = $5;
  $17 = ($8 | 0) != 0 | ($11 | 0) != 0;
  $8 = $7;
  $11 = $8 & 2147483647;
  $15 = $11;
  $10 = $6;
  $16 = $10;
  $8 = $10;
  $18 = ($11 | 0) == 2147418112 & ($8 | 0) != 0 | $11 >>> 0 > 2147418112;
  $8 = $11;
  $9 = $10;
  if (!$9 & ($8 | 0) == 2147418112 ? $17 : $18) {
   break label$1;
  }
  $10 = $0;
  $11 = $4;
  $17 = $10 | $11;
  $9 = $1;
  $8 = $5;
  $8 = $9 | $8;
  $13 = $8;
  $10 = $15;
  $8 = $12;
  $10 = $10 | $8;
  $12 = $10;
  $11 = $16;
  $9 = $14;
  $11 = $11 | $9;
  $8 = $17;
  $10 = $13;
  $9 = $12;
  $9 = $10 | $9;
  if (!($11 | $8 | $9)) {
   return 0;
  }
  $9 = $3;
  $8 = $7;
  $8 = $9 & $8;
  $10 = $2;
  $11 = $6;
  if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0) {
   $13 = -1;
   $9 = $1;
   $8 = $5;
   $10 = $4;
   $11 = $0;
   $12 = ($9 | 0) == ($8 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 < $8 >>> 0;
   $10 = $2;
   $8 = $6;
   $11 = $3;
   $9 = $7;
   $14 = ($11 | 0) < ($9 | 0) ? 1 : ($11 | 0) <= ($9 | 0) ? $10 >>> 0 < $8 >>> 0 : 0;
   $9 = $8;
   $8 = $10;
   $10 = $11;
   $11 = $7;
   if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $14) {
    break label$1;
   }
   $11 = $4;
   $9 = $0;
   $4 = $11 ^ $9;
   $10 = $5;
   $8 = $1;
   $10 = $10 ^ $8;
   $0 = $10;
   $10 = $3;
   $9 = $7;
   $9 = $10 ^ $9;
   $1 = $9;
   $11 = $6;
   $8 = $2;
   $11 = $11 ^ $8;
   $9 = $0;
   $8 = $1;
   $8 = $9 | $8;
   $10 = $4;
   $9 = $11 | $10;
   return ($9 | 0) != 0 | ($8 | 0) != 0;
  }
  $13 = -1;
  $9 = $1;
  $8 = $5;
  $10 = $4;
  $11 = $0;
  $12 = ($9 | 0) == ($8 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 > $8 >>> 0;
  $10 = $2;
  $8 = $6;
  $11 = $3;
  $9 = $7;
  $14 = ($11 | 0) > ($9 | 0) ? 1 : ($11 | 0) >= ($9 | 0) ? $10 >>> 0 > $8 >>> 0 : 0;
  $9 = $8;
  $8 = $10;
  $10 = $11;
  $11 = $7;
  if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $14) {
   break label$1;
  }
  $11 = $4;
  $9 = $0;
  $4 = $11 ^ $9;
  $10 = $5;
  $8 = $1;
  $10 = $10 ^ $8;
  $0 = $10;
  $10 = $3;
  $9 = $7;
  $9 = $10 ^ $9;
  $1 = $9;
  $11 = $6;
  $8 = $2;
  $11 = $11 ^ $8;
  $9 = $0;
  $8 = $1;
  $8 = $9 | $8;
  $10 = $4;
  $9 = $11 | $10;
  $13 = ($9 | 0) != 0 | ($8 | 0) != 0;
 }
 return $13;
}
function __getf2($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $18 = -1;
 $9 = $0;
 $10 = $1;
 $14 = ($9 | 0) != 0 | ($10 | 0) != 0;
 $9 = $3;
 $10 = $9 & 2147483647;
 $12 = $10;
 $8 = $2;
 $13 = $8;
 $15 = ($10 | 0) == 2147418112 & ($8 | 0) != 0 | $10 >>> 0 > 2147418112;
 $9 = $10;
 $11 = $8;
 label$1 : {
  if (!$11 & ($9 | 0) == 2147418112 ? $14 : $15) {
   break label$1;
  }
  $8 = $4;
  $11 = $5;
  $16 = ($8 | 0) != 0 | ($11 | 0) != 0;
  $8 = $7;
  $11 = $8 & 2147483647;
  $14 = $11;
  $10 = $6;
  $15 = $10;
  $8 = $10;
  $17 = ($11 | 0) == 2147418112 & ($8 | 0) != 0 | $11 >>> 0 > 2147418112;
  $8 = $11;
  $9 = $10;
  if (!$9 & ($8 | 0) == 2147418112 ? $16 : $17) {
   break label$1;
  }
  $10 = $0;
  $11 = $4;
  $17 = $10 | $11;
  $9 = $1;
  $8 = $5;
  $8 = $9 | $8;
  $16 = $8;
  $10 = $14;
  $8 = $12;
  $10 = $10 | $8;
  $12 = $10;
  $11 = $15;
  $9 = $13;
  $11 = $11 | $9;
  $8 = $17;
  $10 = $16;
  $9 = $12;
  $9 = $10 | $9;
  if (!($11 | $8 | $9)) {
   return 0;
  }
  $9 = $3;
  $8 = $7;
  $8 = $9 & $8;
  $10 = $2;
  $11 = $6;
  if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0) {
   $9 = $1;
   $8 = $5;
   $10 = $4;
   $11 = $0;
   $12 = ($9 | 0) == ($8 | 0) & $10 >>> 0 > $11 >>> 0 | $9 >>> 0 < $8 >>> 0;
   $10 = $2;
   $8 = $6;
   $11 = $3;
   $9 = $7;
   $13 = ($11 | 0) < ($9 | 0) ? 1 : ($11 | 0) <= ($9 | 0) ? $10 >>> 0 < $8 >>> 0 : 0;
   $9 = $8;
   $8 = $10;
   $10 = $11;
   $11 = $7;
   if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $13) {
    break label$1;
   }
   $11 = $4;
   $9 = $0;
   $4 = $11 ^ $9;
   $10 = $5;
   $8 = $1;
   $10 = $10 ^ $8;
   $0 = $10;
   $10 = $3;
   $9 = $7;
   $9 = $10 ^ $9;
   $1 = $9;
   $11 = $6;
   $8 = $2;
   $11 = $11 ^ $8;
   $9 = $0;
   $8 = $1;
   $8 = $9 | $8;
   $10 = $4;
   $9 = $11 | $10;
   return ($9 | 0) != 0 | ($8 | 0) != 0;
  }
  $9 = $1;
  $8 = $5;
  $10 = $4;
  $11 = $0;
  $12 = ($9 | 0) == ($8 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 > $8 >>> 0;
  $10 = $2;
  $8 = $6;
  $11 = $3;
  $9 = $7;
  $13 = ($11 | 0) > ($9 | 0) ? 1 : ($11 | 0) >= ($9 | 0) ? $10 >>> 0 > $8 >>> 0 : 0;
  $9 = $8;
  $8 = $10;
  $10 = $11;
  $11 = $7;
  if (($9 | 0) == ($8 | 0) & ($10 | 0) == ($11 | 0) ? $12 : $13) {
   break label$1;
  }
  $11 = $4;
  $9 = $0;
  $4 = $11 ^ $9;
  $10 = $5;
  $8 = $1;
  $10 = $10 ^ $8;
  $0 = $10;
  $10 = $3;
  $9 = $7;
  $9 = $10 ^ $9;
  $1 = $9;
  $11 = $6;
  $8 = $2;
  $11 = $11 ^ $8;
  $9 = $0;
  $8 = $1;
  $8 = $9 | $8;
  $10 = $4;
  $9 = $11 | $10;
  $18 = ($9 | 0) != 0 | ($8 | 0) != 0;
 }
 return $18;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $5 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 56 | 0, $0 + 16 | 0, 1);
  $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($2 + 48 | 0, $0, $1);
  $0 = HEAP32[$2 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  if ($28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$2 + 52 >> 2], $1)) {
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 24984);
   $0 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 16 >> 2] = $0;
   HEAP32[$2 + 20 >> 2] = $4;
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
  }
  label$3 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$2 + 52 >> 2], $1)) {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$2 + 52 >> 2], $1)) {
     break label$3;
    }
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 23852);
   $4 = HEAP32[$3 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = $4;
   HEAP32[$2 + 12 >> 2] = $0;
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, HEAP32[$2 + 48 >> 2] ? 23383 : 23386);
  $0 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($5);
 }
 __stack_pointer = $2 - -64 | 0;
}
function memcpy($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if ($2 >>> 0 >= 512) {
  emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
  return $0;
 }
 $4 = $0 + $2 | 0;
 label$2 : {
  if (!(($0 ^ $1) & 3)) {
   label$4 : {
    if (($2 | 0) < 1) {
     $2 = $0;
     break label$4;
    }
    if (!($0 & 3)) {
     $2 = $0;
     break label$4;
    }
    $2 = $0;
    while (1) {
     HEAP8[$2 | 0] = HEAPU8[$1 | 0];
     $1 = $1 + 1 | 0;
     $2 = $2 + 1 | 0;
     if ($4 >>> 0 <= $2 >>> 0) {
      break label$4;
     }
     if ($2 & 3) {
      continue;
     }
     break;
    }
   }
   $3 = $4 & -4;
   label$8 : {
    if ($3 >>> 0 < 64) {
     break label$8;
    }
    $5 = $3 + -64 | 0;
    if ($5 >>> 0 < $2 >>> 0) {
     break label$8;
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
     $1 = $1 - -64 | 0;
     $2 = $2 - -64 | 0;
     if ($5 >>> 0 >= $2 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$2;
   }
   while (1) {
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($3 >>> 0 > $2 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if ($4 >>> 0 < 4) {
   $2 = $0;
   break label$2;
  }
  $3 = $4 - 4 | 0;
  if ($3 >>> 0 < $0 >>> 0) {
   $2 = $0;
   break label$2;
  }
  $2 = $0;
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
   $1 = $1 + 4 | 0;
   $2 = $2 + 4 | 0;
   if ($3 >>> 0 >= $2 >>> 0) {
    continue;
   }
   break;
  }
 }
 if ($2 >>> 0 < $4 >>> 0) {
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   $1 = $1 + 1 | 0;
   $2 = $2 + 1 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___resolveForwardTemplateRefs_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = $0 + 360 | 0;
 $4 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___size_28_29_20const($3);
 $2 = HEAP32[$1 + 12 >> 2];
 $8 = $2 >>> 0 < $4 >>> 0 ? $4 : $2;
 $6 = $0 + 332 | 0;
 $0 = $2;
 label$1 : {
  while (1) {
   if (($0 | 0) != ($8 | 0)) {
    $7 = HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___operator_5b_5d_28unsigned_20long_29($3, $0) >> 2];
    $1 = HEAP32[$7 + 8 >> 2];
    if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___empty_28_29_20const($6)) {
     break label$1;
    }
    $5 = HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___operator_5b_5d_28unsigned_20long_29($6, 0) >> 2];
    if (!$5) {
     break label$1;
    }
    if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___size_28_29_20const($5) >>> 0 <= $1 >>> 0) {
     break label$1;
    }
    wasm2js_i32$0 = $7, wasm2js_i32$1 = HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___operator_5b_5d_28unsigned_20long_29($5, $1) >> 2], HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  }
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___dropBack_28unsigned_20long_29($3, $2);
 }
 return $0 >>> 0 < $4 >>> 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSourceName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29($3);
 HEAP32[$2 + 12 >> 2] = $1;
 label$1 : {
  if (!$1) {
   $1 = 0;
   break label$1;
  }
  if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) | 0) != 73) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateArgs_28bool_29($3, 0);
  HEAP32[$2 + 8 >> 2] = $1;
  if ($1) {
   $4 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2 + 8 | 0);
  }
  $1 = $4;
 }
 __stack_pointer = $2 + 16 | 0;
 return $1;
}
function h2v2_merged_upsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $4 = $2 << 2;
 $9 = HEAP32[$4 + HEAP32[$1 + 8 >> 2] >> 2];
 $11 = HEAP32[HEAP32[$1 + 4 >> 2] + $4 >> 2];
 $1 = HEAP32[$1 >> 2];
 $2 = $2 << 3;
 $8 = HEAP32[$1 + $2 >> 2];
 $10 = HEAP32[($2 | 4) + $1 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 $3 = HEAP32[$3 >> 2];
 $1 = HEAP32[$0 + 336 >> 2];
 $4 = HEAP32[$0 + 476 >> 2];
 $13 = HEAP32[$4 + 28 >> 2];
 $14 = HEAP32[$4 + 24 >> 2];
 $15 = HEAP32[$4 + 20 >> 2];
 $16 = HEAP32[$4 + 16 >> 2];
 $4 = HEAP32[$0 + 112 >> 2];
 $12 = $4 >>> 1 | 0;
 if ($12) {
  while (1) {
   $5 = HEAPU8[$11 | 0] << 2;
   $4 = HEAP32[$15 + $5 >> 2];
   $7 = HEAPU8[$9 | 0] << 2;
   $17 = HEAP32[$14 + $7 >> 2];
   $18 = HEAP32[$5 + $13 >> 2];
   $5 = HEAP32[$7 + $16 >> 2];
   $6 = HEAPU8[$8 | 0];
   HEAP8[$3 | 0] = HEAPU8[($5 + $6 | 0) + $1 | 0];
   $7 = $17 + $18 >> 16;
   HEAP8[$3 + 1 | 0] = HEAPU8[($7 + $6 | 0) + $1 | 0];
   HEAP8[$3 + 2 | 0] = HEAPU8[($4 + $6 | 0) + $1 | 0];
   $6 = HEAPU8[$8 + 1 | 0];
   HEAP8[$3 + 3 | 0] = HEAPU8[($6 + $5 | 0) + $1 | 0];
   HEAP8[$3 + 4 | 0] = HEAPU8[($6 + $7 | 0) + $1 | 0];
   HEAP8[$3 + 5 | 0] = HEAPU8[($4 + $6 | 0) + $1 | 0];
   $6 = HEAPU8[$10 | 0];
   HEAP8[$2 | 0] = HEAPU8[($6 + $5 | 0) + $1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[($6 + $7 | 0) + $1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[($4 + $6 | 0) + $1 | 0];
   $6 = HEAPU8[$10 + 1 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[($6 + $5 | 0) + $1 | 0];
   HEAP8[$2 + 4 | 0] = HEAPU8[($6 + $7 | 0) + $1 | 0];
   HEAP8[$2 + 5 | 0] = HEAPU8[($4 + $6 | 0) + $1 | 0];
   $2 = $2 + 6 | 0;
   $10 = $10 + 2 | 0;
   $3 = $3 + 6 | 0;
   $8 = $8 + 2 | 0;
   $9 = $9 + 1 | 0;
   $11 = $11 + 1 | 0;
   $12 = $12 - 1 | 0;
   if ($12) {
    continue;
   }
   break;
  }
  $4 = HEAP32[$0 + 112 >> 2];
 }
 if ($4 & 1) {
  $5 = HEAPU8[$11 | 0] << 2;
  $4 = HEAP32[$15 + $5 >> 2];
  $7 = HEAPU8[$9 | 0] << 2;
  $9 = HEAP32[$14 + $7 >> 2];
  $5 = HEAP32[$5 + $13 >> 2];
  $7 = HEAP32[$7 + $16 >> 2];
  $8 = HEAPU8[$8 | 0];
  HEAP8[$3 | 0] = HEAPU8[($7 + $8 | 0) + $1 | 0];
  $5 = $5 + $9 >> 16;
  HEAP8[$3 + 1 | 0] = HEAPU8[($8 + $5 | 0) + $1 | 0];
  HEAP8[$3 + 2 | 0] = HEAPU8[($4 + $8 | 0) + $1 | 0];
  $3 = HEAPU8[$10 | 0];
  HEAP8[$2 | 0] = HEAPU8[($7 + $3 | 0) + $1 | 0];
  HEAP8[$2 + 1 | 0] = HEAPU8[($3 + $5 | 0) + $1 | 0];
  HEAP8[$2 + 2 | 0] = HEAPU8[($3 + $4 | 0) + $1 | 0];
 }
}
function jpeg_idct_6x6($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $15 = __stack_pointer - 144 | 0;
 __stack_pointer = $15;
 $16 = HEAP32[$0 + 336 >> 2];
 $1 = HEAP32[$1 + 84 >> 2];
 $0 = $15;
 while (1) {
  $8 = HEAP32[$1 + 64 >> 2];
  $11 = HEAP16[$2 + 32 >> 1];
  $9 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $10 = Math_imul(Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$1 + 128 >> 2]), 5793);
  $13 = $9 - ($10 << 1) >> 11;
  $5 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $6 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $7 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $14 = ($5 - $6 | 0) - $7 << 2;
  HEAP32[$0 + 96 >> 2] = $13 - $14;
  HEAP32[$0 + 24 >> 2] = $13 + $14;
  $8 = Math_imul(Math_imul($8, $11), 10033);
  $11 = $9 + $10 | 0;
  $9 = $8 + $11 | 0;
  $10 = Math_imul($5 + $7 | 0, 2998);
  $5 = $10 + ($5 + $6 << 13) | 0;
  HEAP32[$0 + 120 >> 2] = $9 - $5 >> 11;
  HEAP32[$0 >> 2] = $5 + $9 >> 11;
  $5 = $11 - $8 | 0;
  $6 = ($7 - $6 << 13) + $10 | 0;
  HEAP32[$0 + 72 >> 2] = $5 - $6 >> 11;
  HEAP32[$0 + 48 >> 2] = $5 + $6 >> 11;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $2 = $2 + 2 | 0;
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 6) {
   continue;
  }
  break;
 }
 $1 = $16 - 384 | 0;
 $5 = 0;
 $2 = $15;
 while (1) {
  $0 = HEAP32[($5 << 2) + $3 >> 2] + $4 | 0;
  $6 = HEAP32[$2 + 20 >> 2];
  $7 = HEAP32[$2 + 4 >> 2];
  $11 = Math_imul($6 + $7 | 0, 2998);
  $12 = HEAP32[$2 + 12 >> 2];
  $9 = $11 + ($12 + $7 << 13) | 0;
  $8 = Math_imul(HEAP32[$2 + 16 >> 2], 5793);
  $10 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
  $13 = $8 + $10 | 0;
  $14 = Math_imul(HEAP32[$2 + 8 >> 2], 10033);
  $16 = $13 + $14 | 0;
  HEAP8[$0 | 0] = HEAPU8[($9 + $16 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 5 | 0] = HEAPU8[($16 - $9 >>> 18 & 1023) + $1 | 0];
  $7 = ($7 - $12 | 0) - $6 << 13;
  $8 = ($10 - $8 | 0) - $8 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($7 + $8 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($8 - $7 >>> 18 & 1023) + $1 | 0];
  $6 = ($6 - $12 << 13) + $11 | 0;
  $7 = $13 - $14 | 0;
  HEAP8[$0 + 2 | 0] = HEAPU8[($6 + $7 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[($7 - $6 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 24 | 0;
  $5 = $5 + 1 | 0;
  if (($5 | 0) != 6) {
   continue;
  }
  break;
 }
 __stack_pointer = $15 + 144 | 0;
}
function std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20_____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____29($0, $1, $2) {
 std____2____compressed_pair_elem_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_200_2c_20false_____compressed_pair_elem_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20void__28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____29($0, std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20std____2__forward_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______28std____2__remove_reference_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______type__29($1));
 std____2____compressed_pair_elem_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__2c_201_2c_20false_____compressed_pair_elem_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__2c_20void__28std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____29($0 + 4 | 0, std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____20std____2__forward_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__28std____2__remove_reference_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___type__29($2));
 return $0;
}
function start_pass_main($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $2 = HEAP32[$0 + 448 >> 2];
 label$1 : {
  label$2 : {
   switch ($1 | 0) {
   case 0:
    if (!HEAP32[HEAP32[$0 + 476 >> 2] + 8 >> 2]) {
     break label$1;
    }
    HEAP32[$2 + 4 >> 2] = 134;
    $12 = HEAP32[$0 + 36 >> 2];
    if (($12 | 0) >= 1) {
     $7 = HEAP32[$0 + 328 >> 2];
     $13 = $7 - 2 | 0;
     $14 = $7 + 2 | 0;
     $8 = HEAP32[$0 + 216 >> 2];
     while (1) {
      $0 = $9 << 2;
      $1 = HEAP32[$0 + HEAP32[$2 + 64 >> 2] >> 2];
      $10 = HEAP32[HEAP32[$2 + 60 >> 2] + $0 >> 2];
      $11 = HEAP32[($0 + $2 | 0) + 8 >> 2];
      $0 = 0;
      $4 = (Math_imul(HEAP32[$8 + 40 >> 2], HEAP32[$8 + 12 >> 2]) | 0) / ($7 | 0) | 0;
      $5 = Math_imul($14, $4);
      if (($5 | 0) > 0) {
       while (1) {
        $3 = $0 << 2;
        $6 = HEAP32[$11 + $3 >> 2];
        HEAP32[$1 + $3 >> 2] = $6;
        HEAP32[$3 + $10 >> 2] = $6;
        $0 = $0 + 1 | 0;
        if (($5 | 0) != ($0 | 0)) {
         continue;
        }
        break;
       }
      }
      if (($4 | 0) >= 1) {
       $0 = $4 << 1;
       $15 = ($0 | 0) > 1 ? $0 : 1;
       $16 = Math_imul($4, $13);
       $17 = Math_imul($4, $7);
       $3 = 0;
       $0 = 0;
       while (1) {
        $6 = $0 + $16 << 2;
        $5 = $0 + $17 << 2;
        HEAP32[$6 + $1 >> 2] = HEAP32[$5 + $11 >> 2];
        HEAP32[$1 + $5 >> 2] = HEAP32[$6 + $11 >> 2];
        $0 = $0 + 1 | 0;
        if (($15 | 0) != ($0 | 0)) {
         continue;
        }
        break;
       }
       while (1) {
        HEAP32[($3 - $4 << 2) + $10 >> 2] = HEAP32[$10 >> 2];
        $3 = $3 + 1 | 0;
        if (($3 | 0) != ($4 | 0)) {
         continue;
        }
        break;
       }
      }
      $8 = $8 + 88 | 0;
      $9 = $9 + 1 | 0;
      if (($12 | 0) != ($9 | 0)) {
       continue;
      }
      break;
     }
    }
    HEAP32[$2 + 76 >> 2] = 0;
    HEAP32[$2 + 68 >> 2] = 0;
    HEAP32[$2 + 72 >> 2] = 0;
    HEAP32[$2 + 56 >> 2] = 0;
    return;
   default:
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 3;
    FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
    return;
   case 2:
    break label$2;
   }
  }
  HEAP32[$2 + 4 >> 2] = 135;
  return;
 }
 HEAP32[$2 + 4 >> 2] = 136;
 HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 52 >> 2];
}
function jinit_upsampler($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 160) | 0;
 HEAP32[$0 + 476 >> 2] = $1;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 144;
 HEAP32[$1 >> 2] = 145;
 if (HEAP32[$0 + 308 >> 2]) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = 26;
  FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
 }
 if (HEAP32[$0 + 36 >> 2] >= 1) {
  $10 = $1 + 12 | 0;
  $11 = $1 + 150 | 0;
  $12 = $1 + 140 | 0;
  $8 = $1 + 52 | 0;
  $13 = $1 + 100 | 0;
  $1 = HEAP32[$0 + 216 >> 2];
  $3 = 0;
  while (1) {
   $9 = HEAP32[$0 + 320 >> 2];
   $2 = HEAP32[$0 + 316 >> 2];
   $6 = HEAP32[$0 + 324 >> 2];
   $4 = HEAP32[$1 + 36 >> 2];
   $14 = HEAP32[$1 + 8 >> 2];
   $5 = $3 << 2;
   $7 = (Math_imul(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 12 >> 2]) | 0) / HEAP32[$0 + 328 >> 2] | 0;
   HEAP32[$13 + $5 >> 2] = $7;
   $6 = (Math_imul($4, $14) | 0) / ($6 | 0) | 0;
   label$4 : {
    if (!HEAP32[$1 + 52 >> 2]) {
     HEAP32[$5 + $8 >> 2] = 146;
     break label$4;
    }
    if (!(($2 | 0) != ($6 | 0) | ($9 | 0) != ($7 | 0))) {
     HEAP32[$5 + $8 >> 2] = 147;
     break label$4;
    }
    $4 = $6 << 1 != ($2 | 0);
    label$7 : {
     if (!($4 | ($9 | 0) != ($7 | 0))) {
      HEAP32[$5 + $8 >> 2] = 148;
      break label$7;
     }
     if (!($7 << 1 != ($9 | 0) | $4)) {
      HEAP32[$5 + $8 >> 2] = 149;
      break label$7;
     }
     label$10 : {
      $4 = ($2 | 0) / ($6 | 0) | 0;
      if ($2 - Math_imul($4, $6) | 0) {
       break label$10;
      }
      $2 = ($9 | 0) / ($7 | 0) | 0;
      if ($9 - Math_imul($7, $2) | 0) {
       break label$10;
      }
      HEAP32[$5 + $8 >> 2] = 150;
      HEAP8[$3 + $12 | 0] = $4;
      HEAP8[$3 + $11 | 0] = $2;
      break label$7;
     }
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 20 >> 2] = 39;
     FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
    }
    $2 = HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2];
    wasm2js_i32$0 = $5 + $10 | 0, wasm2js_i32$1 = FUNCTION_TABLE[$2 | 0]($0, 1, jround_up(HEAP32[$0 + 112 >> 2], HEAP32[$0 + 316 >> 2]), HEAP32[$0 + 320 >> 2]) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   $1 = $1 + 88 | 0;
   $3 = $3 + 1 | 0;
   if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function decode_mcu_DC_first($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $5 = HEAP32[$0 + 468 >> 2];
 if (HEAP32[$0 + 280 >> 2]) {
  $2 = HEAP32[$5 + 56 >> 2];
  if (!$2) {
   process_restart($0);
   $2 = HEAP32[$5 + 56 >> 2];
  }
  HEAP32[$5 + 56 >> 2] = $2 - 1;
 }
 if (!(HEAP32[$5 + 20 >> 2] == -1 | HEAP32[$0 + 368 >> 2] < 1)) {
  while (1) {
   $2 = $9 << 2;
   $13 = HEAP32[$2 + $1 >> 2];
   $2 = HEAP32[($0 + $2 | 0) + 372 >> 2] << 2;
   $7 = HEAP32[HEAP32[($2 + $0 | 0) + 344 >> 2] + 20 >> 2];
   $11 = ($7 << 2) + $5 | 0;
   $8 = $2 + $5 | 0;
   $12 = $8;
   $6 = $8 + 40 | 0;
   $3 = HEAP32[$11 + 60 >> 2] + HEAP32[$6 >> 2] | 0;
   label$5 : {
    if (!arith_decode($0, $3)) {
     HEAP32[$12 + 40 >> 2] = 0;
     $2 = HEAP32[$8 + 24 >> 2];
     break label$5;
    }
    $6 = 0;
    $2 = 0;
    $10 = arith_decode($0, $3 + 1 | 0);
    $4 = ($10 + $3 | 0) + 2 | 0;
    $3 = arith_decode($0, $4);
    label$7 : {
     if (!$3) {
      break label$7;
     }
     $2 = $3;
     $4 = HEAP32[$11 + 60 >> 2] + 20 | 0;
     if (!arith_decode($0, $4)) {
      break label$7;
     }
     while (1) {
      $2 = $2 << 1;
      if (($2 | 0) == 32768) {
       $2 = HEAP32[$0 >> 2];
       HEAP32[$2 + 20 >> 2] = 117;
       FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, -1);
       HEAP32[$5 + 20 >> 2] = -1;
       return 1;
      }
      $4 = $4 + 1 | 0;
      if (arith_decode($0, $4)) {
       continue;
      }
      break;
     }
    }
    $3 = $0 + $7 | 0;
    label$10 : {
     if (1 << HEAPU8[$3 + 232 | 0] >> 1 > ($2 | 0)) {
      break label$10;
     }
     $7 = $10 << 2;
     if (1 << HEAPU8[$3 + 248 | 0] >> 1 < ($2 | 0)) {
      $6 = $7 + 12 | 0;
      break label$10;
     }
     $6 = $7 + 4 | 0;
    }
    HEAP32[$12 + 40 >> 2] = $6;
    $3 = $2 >> 1;
    if ($3) {
     $6 = $4 + 14 | 0;
     while (1) {
      $2 = (arith_decode($0, $6) ? $3 : 0) | $2;
      $4 = $3 >> 1;
      $3 = $4;
      if ($3) {
       continue;
      }
      break;
     }
    }
    $3 = $8 + 24 | 0;
    $2 = HEAP32[$8 + 24 >> 2] + ($10 ? $2 ^ -1 : $2 + 1 | 0) | 0;
    HEAP32[$3 >> 2] = $2;
   }
   HEAP16[$13 >> 1] = $2 << HEAP32[$0 + 424 >> 2];
   $9 = $9 + 1 | 0;
   if (($9 | 0) < HEAP32[$0 + 368 >> 2]) {
    continue;
   }
   break;
  }
 }
 return 1;
}
function decode_mcu_AC_first($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $5 = HEAP32[$0 + 468 >> 2];
 if (HEAP32[$0 + 280 >> 2]) {
  $2 = HEAP32[$5 + 56 >> 2];
  if (!$2) {
   process_restart($0);
   $2 = HEAP32[$5 + 56 >> 2];
  }
  HEAP32[$5 + 56 >> 2] = $2 - 1;
 }
 label$3 : {
  label$4 : {
   if (HEAP32[$5 + 20 >> 2] == -1) {
    break label$4;
   }
   $7 = $5 + 188 | 0;
   $2 = HEAP32[$0 + 412 >> 2] - 1 | 0;
   $3 = HEAP32[HEAP32[$0 + 344 >> 2] + 24 >> 2];
   $8 = $3 + $0 | 0;
   $6 = ($3 << 2) + $5 | 0;
   $9 = HEAP32[$1 >> 2];
   $10 = HEAP32[$0 + 432 >> 2];
   while (1) {
    $3 = $2;
    $1 = HEAP32[$6 + 124 >> 2] + Math_imul($2, 3) | 0;
    if (arith_decode($0, $1)) {
     break label$4;
    }
    label$6 : {
     while (1) {
      $2 = $3 + 1 | 0;
      if (arith_decode($0, $1 + 1 | 0)) {
       break label$6;
      }
      $1 = $1 + 3 | 0;
      $3 = $2;
      if (HEAP32[$0 + 416 >> 2] > ($2 | 0)) {
       continue;
      }
      break;
     }
     break label$3;
    }
    $11 = arith_decode($0, $7);
    $4 = $1 + 2 | 0;
    $1 = arith_decode($0, $4);
    label$8 : {
     if (!$1) {
      $1 = 0;
      break label$8;
     }
     label$10 : {
      if (!arith_decode($0, $4)) {
       break label$10;
      }
      $1 = $1 << 1;
      $4 = HEAP32[$6 + 124 >> 2] + (HEAPU8[$8 + 264 | 0] > ($3 | 0) ? 189 : 217) | 0;
      if (!arith_decode($0, $4)) {
       break label$10;
      }
      while (1) {
       $1 = $1 << 1;
       if (($1 | 0) == 32768) {
        break label$3;
       }
       $4 = $4 + 1 | 0;
       if (arith_decode($0, $4)) {
        continue;
       }
       break;
      }
     }
     $3 = $1 >> 1;
     if (!$3) {
      break label$8;
     }
     $12 = $4 + 14 | 0;
     while (1) {
      $1 = (arith_decode($0, $12) ? $3 : 0) | $1;
      $4 = $3 >> 1;
      $3 = $4;
      if ($3) {
       continue;
      }
      break;
     }
    }
    HEAP16[(HEAP32[($2 << 2) + $10 >> 2] << 1) + $9 >> 1] = ($11 ? $1 ^ -1 : $1 + 1 | 0) << HEAP32[$0 + 424 >> 2];
    if (HEAP32[$0 + 416 >> 2] > ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  return 1;
 }
 $2 = HEAP32[$0 >> 2];
 HEAP32[$2 + 20 >> 2] = 117;
 FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, -1);
 HEAP32[$5 + 20 >> 2] = -1;
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePointerToMemberType_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 77)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($3);
  HEAP32[$2 + 12 >> 2] = $1;
  label$2 : {
   if (!$1) {
    break label$2;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseType_28_29($3);
   HEAP32[$2 + 8 >> 2] = $1;
   if (!$1) {
    break label$2;
   }
   $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PointerToMemberType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $2 + 8 | 0);
   break label$1;
  }
  $1 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 56 | 0, 23852);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 48 | 0, 28800);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $5;
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 28806);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 - -64 | 0;
}
function ar2GenImageLayer2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $4 = HEAP32[$0 + 4 >> 2];
 $5 = HEAPF32[$0 + 12 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 $6 = dlmalloc(16);
 $2 = lroundf(Math_fround(Math_fround(Math_fround($2 | 0) * $1) / $5));
 $3 = lroundf(Math_fround(Math_fround(Math_fround($4 | 0) * $1) / $5));
 if ($6) {
  label$2 : {
   HEAPF32[$6 + 12 >> 2] = $1;
   HEAP32[$6 + 8 >> 2] = $2;
   HEAP32[$6 + 4 >> 2] = $3;
   $7 = dlmalloc(Math_imul($2, $3));
   HEAP32[$6 >> 2] = $7;
   if (!$7) {
    break label$2;
   }
   $4 = 0;
   $15 = ($2 | 0) > 0 ? $2 : 0;
   $16 = ($3 | 0) > 0 ? $3 : 0;
   label$3 : while (1) {
    if (($4 | 0) != ($15 | 0)) {
     $2 = HEAP32[$0 + 8 >> 2];
     $5 = HEAPF32[$0 + 12 >> 2];
     $12 = $4 + 1 | 0;
     $3 = lroundf(Math_fround(Math_fround($5 * Math_fround($12 | 0)) / $1));
     $9 = lroundf(Math_fround(Math_fround($5 * Math_fround($4 | 0)) / $1));
     $4 = ($2 | 0) < ($3 | 0) ? $2 : $3;
     $17 = ($4 | 0) < ($9 | 0) ? $9 : $4;
     $2 = 0;
     while (1) {
      if (($2 | 0) == ($16 | 0)) {
       $4 = $12;
       continue label$3;
      }
      $4 = 0;
      $10 = HEAP32[$0 + 4 >> 2];
      $5 = HEAPF32[$0 + 12 >> 2];
      $13 = $2 + 1 | 0;
      $3 = lroundf(Math_fround(Math_fround($5 * Math_fround($13 | 0)) / $1));
      $3 = ($3 | 0) > ($10 | 0) ? $10 : $3;
      $11 = lroundf(Math_fround(Math_fround($5 * Math_fround($2 | 0)) / $1));
      $18 = ($3 | 0) < ($11 | 0) ? 0 : $3 - $11 | 0;
      $8 = $9;
      $3 = 0;
      while (1) {
       if (($8 | 0) != ($17 | 0)) {
        $14 = $4 + $18 | 0;
        $2 = HEAP32[$0 >> 2] + (Math_imul($8, $10) + $11 | 0) | 0;
        while (1) {
         if (($4 | 0) != ($14 | 0)) {
          $4 = $4 + 1 | 0;
          $3 = HEAPU8[$2 | 0] + $3 | 0;
          $2 = $2 + 1 | 0;
          continue;
         }
         break;
        }
        $8 = $8 + 1 | 0;
        $4 = $14;
        continue;
       }
       break;
      }
      HEAP8[$7 | 0] = ($3 | 0) / ($4 | 0);
      $7 = $7 + 1 | 0;
      $2 = $13;
      continue;
     }
    }
    break;
   }
   return $6;
  }
 }
 arLog(0, 3, 1837, 0);
 exit(1);
 abort();
}
function jpeg_idct_5x5($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $15 = HEAP32[$0 + 336 >> 2];
 $1 = HEAP32[$1 + 84 >> 2];
 $6 = __stack_pointer;
 $14 = $6 - 112 | 0;
 $0 = $14;
 while (1) {
  $6 = HEAP32[$1 + 96 >> 2];
  $5 = HEAP16[$2 + 48 >> 1];
  $10 = HEAP32[$1 + 32 >> 2];
  $11 = HEAP16[$2 + 16 >> 1];
  $13 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $7 = Math_imul(HEAP32[$1 + 64 >> 2], HEAP16[$2 + 32 >> 1]);
  $8 = Math_imul(HEAP32[$1 + 128 >> 2], HEAP16[$2 + 64 >> 1]);
  $9 = $7 - $8 | 0;
  HEAP32[$0 + 40 >> 2] = $13 + Math_imul($9, -11584) >> 11;
  $6 = Math_imul($5, $6);
  $7 = Math_imul($7 + $8 | 0, 6476);
  $9 = Math_imul($9, 2896) + $13 | 0;
  $8 = $7 + $9 | 0;
  $5 = Math_imul($10, $11);
  $10 = Math_imul($6 + $5 | 0, 6810);
  $5 = $10 + Math_imul($5, 4209) | 0;
  HEAP32[$0 + 80 >> 2] = $8 - $5 >> 11;
  HEAP32[$0 >> 2] = $5 + $8 >> 11;
  $5 = $9 - $7 | 0;
  $6 = Math_imul($6, -17828) + $10 | 0;
  HEAP32[$0 + 60 >> 2] = $5 - $6 >> 11;
  HEAP32[$0 + 20 >> 2] = $5 + $6 >> 11;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $2 = $2 + 2 | 0;
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 5) {
   continue;
  }
  break;
 }
 $1 = $15 - 384 | 0;
 $12 = 0;
 $2 = $14;
 while (1) {
  $9 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
  $11 = HEAP32[$2 + 8 >> 2];
  $7 = HEAP32[$2 + 16 >> 2];
  $8 = $11 - $7 | 0;
  $13 = $9 + Math_imul($8, 2896) | 0;
  $0 = HEAP32[($12 << 2) + $3 >> 2] + $4 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  $6 = HEAP32[$2 + 12 >> 2];
  $10 = Math_imul($5 + $6 | 0, 6810);
  $5 = $10 + Math_imul($5, 4209) | 0;
  $11 = Math_imul($7 + $11 | 0, 6476);
  $7 = $13 + $11 | 0;
  HEAP8[$0 | 0] = HEAPU8[($5 + $7 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 4 | 0] = HEAPU8[($7 - $5 >>> 18 & 1023) + $1 | 0];
  $5 = $13 - $11 | 0;
  $6 = Math_imul($6, -17828) + $10 | 0;
  HEAP8[$0 + 1 | 0] = HEAPU8[($5 + $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 3 | 0] = HEAPU8[($5 - $6 >>> 18 & 1023) + $1 | 0];
  HEAP8[$0 + 2 | 0] = HEAPU8[(Math_imul($8, -11584) + $9 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 20 | 0;
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 5) {
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printDeclarator_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 $6 = $0 + 8 | 0;
 if (!$28anonymous_20namespace_29__itanium_demangle__NodeArray__empty_28_29_20const($6)) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 56 | 0, 23466);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = $4;
  HEAP32[$2 + 28 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
  $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($6, $1);
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 48 | 0, 23454);
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = $5;
  HEAP32[$2 + 20 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23852);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 16 | 0, $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_long_20double__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0 < 33) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 8 | 0, $1, $1 + 32 | 0);
  $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($3);
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($3);
  label$2 : {
   while (1) {
    if (($1 | 0) == ($4 | 0)) {
     break label$2;
    }
    $5 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if (isxdigit($5)) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 32;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $3);
 }
 __stack_pointer = $2 + 16 | 0;
 return $1;
}
function std____2__enable_if__CheckArrayPointerConversion_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________value_2c_20void___type_20std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___reset_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = HEAP32[std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if ($2) {
  std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___operator_28_29_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______29(std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___second_28_29($0), $2);
 }
}
function jpeg_idct_3x3($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $1 = HEAP32[$1 + 84 >> 2];
 $8 = Math_imul(Math_imul(HEAP16[$2 + 16 >> 1], HEAP32[$1 + 32 >> 2]), 10033);
 $6 = Math_imul(Math_imul(HEAP16[$2 + 32 >> 1], HEAP32[$1 + 64 >> 2]), 5793);
 $7 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
 $9 = $6 + $7 | 0;
 $10 = ($8 + $9 << 2) + 134348800 & -8192;
 $11 = Math_imul(Math_imul(HEAP16[$2 + 20 >> 1], HEAP32[$1 + 40 >> 2]), 10033);
 $12 = Math_imul(Math_imul(HEAP16[$2 + 36 >> 1], HEAP32[$1 + 72 >> 2]), 5793);
 $13 = Math_imul(HEAP16[$2 + 4 >> 1], HEAP32[$1 + 8 >> 2]) << 13 | 1024;
 $14 = $12 + $13 | 0;
 $15 = $11 + $14 >> 11;
 $16 = $10 + Math_imul($15, 5793) | 0;
 $17 = Math_imul(Math_imul(HEAP16[$2 + 34 >> 1], HEAP32[$1 + 68 >> 2]), 5793);
 $5 = HEAP32[$3 >> 2] + $4 | 0;
 $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
 $18 = Math_imul(Math_imul(HEAP16[$2 + 18 >> 1], HEAP32[$1 + 36 >> 2]), 10033);
 $1 = Math_imul(HEAP16[$2 + 2 >> 1], HEAP32[$1 + 4 >> 2]) << 13 | 1024;
 $19 = $17 + $1 | 0;
 $2 = Math_imul($18 + $19 >> 11, 10033);
 HEAP8[$5 | 0] = HEAPU8[$0 + ($16 + $2 >>> 18 & 1023) | 0];
 HEAP8[$5 + 2 | 0] = HEAPU8[($16 - $2 >>> 18 & 1023) + $0 | 0];
 HEAP8[$5 + 1 | 0] = HEAPU8[(Math_imul($15, -11586) + $10 >>> 18 & 1023) + $0 | 0];
 $2 = HEAP32[$3 + 4 >> 2] + $4 | 0;
 $1 = Math_imul($1 - ($17 << 1) >> 11, 10033);
 $5 = ($7 - ($6 << 1) << 2) + 134348800 & -8192;
 $6 = $13 - ($12 << 1) >> 11;
 $7 = $5 + Math_imul($6, 5793) | 0;
 HEAP8[$2 | 0] = HEAPU8[($1 + $7 >>> 18 & 1023) + $0 | 0];
 HEAP8[$2 + 2 | 0] = HEAPU8[($7 - $1 >>> 18 & 1023) + $0 | 0];
 HEAP8[$2 + 1 | 0] = HEAPU8[(Math_imul($6, -11586) + $5 >>> 18 & 1023) + $0 | 0];
 $2 = HEAP32[$3 + 8 >> 2] + $4 | 0;
 $1 = ($9 - $8 << 2) + 134348800 & -8192;
 $4 = $14 - $11 >> 11;
 $3 = $1 + Math_imul($4, 5793) | 0;
 $5 = Math_imul($19 - $18 >> 11, 10033);
 HEAP8[$2 | 0] = HEAPU8[($3 + $5 >>> 18 & 1023) + $0 | 0];
 HEAP8[$2 + 2 | 0] = HEAPU8[($3 - $5 >>> 18 & 1023) + $0 | 0];
 HEAP8[$2 + 1 | 0] = HEAPU8[(Math_imul($4, -11586) + $1 >>> 18 & 1023) + $0 | 0];
}
function quantize_fs_dither($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 if (($3 | 0) >= 1) {
  $21 = HEAP32[$0 + 336 >> 2];
  $5 = HEAP32[$0 + 484 >> 2];
  $7 = HEAP32[$0 + 120 >> 2];
  $22 = 0 - $7 | 0;
  $8 = HEAP32[$0 + 112 >> 2];
  $17 = $8 - 1 | 0;
  $23 = Math_imul($17, $7);
  $24 = $8 + 1 << 1;
  while (1) {
   $0 = $14 << 2;
   $18 = $2 + $0 | 0;
   memset(HEAP32[$18 >> 2], 0, $8);
   if (($7 | 0) >= 1) {
    $25 = $0 + $1 | 0;
    $6 = 0;
    while (1) {
     $9 = HEAP32[$25 >> 2] + $6 | 0;
     $0 = HEAP32[$18 >> 2];
     label$5 : {
      if (HEAP32[$5 + 84 >> 2]) {
       $0 = $0 + $17 | 0;
       $9 = $9 + $23 | 0;
       $19 = $22;
       $10 = HEAP32[(($6 << 2) + $5 | 0) + 68 >> 2] + $24 | 0;
       $15 = -1;
       break label$5;
      }
      $19 = $7;
      $10 = HEAP32[(($6 << 2) + $5 | 0) + 68 >> 2];
      $15 = 1;
     }
     $11 = 0;
     label$7 : {
      if (!$8) {
       $12 = $10;
       $13 = 0;
       break label$7;
      }
      $4 = $6 << 2;
      $26 = HEAP32[$4 + HEAP32[$5 + 16 >> 2] >> 2];
      $27 = HEAP32[HEAP32[$5 + 24 >> 2] + $4 >> 2];
      $20 = 0;
      $16 = $8;
      $13 = 0;
      while (1) {
       $12 = ($15 << 1) + $10 | 0;
       $4 = HEAPU8[(HEAPU8[$9 | 0] + ((HEAP16[$12 >> 1] + $11 | 0) + 8 >> 4) | 0) + $21 | 0];
       $11 = HEAPU8[$27 + $4 | 0];
       HEAP8[$0 | 0] = $11 + HEAPU8[$0 | 0];
       $4 = $4 - HEAPU8[$11 + $26 | 0] | 0;
       HEAP16[$10 >> 1] = Math_imul($4, 3) + $13;
       $11 = Math_imul($4, 7);
       $13 = Math_imul($4, 5) + $20 | 0;
       $0 = $0 + $15 | 0;
       $9 = $9 + $19 | 0;
       $20 = $4;
       $10 = $12;
       $16 = $16 - 1 | 0;
       if ($16) {
        continue;
       }
       break;
      }
     }
     HEAP16[$12 >> 1] = $13;
     $6 = $6 + 1 | 0;
     if (($7 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$5 + 84 >> 2] = !HEAP32[$5 + 84 >> 2];
   $14 = $14 + 1 | 0;
   if (($14 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_double__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0 < 17) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 8 | 0, $1, $1 + 16 | 0);
  $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($3);
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($3);
  label$2 : {
   while (1) {
    if (($1 | 0) == ($4 | 0)) {
     break label$2;
    }
    $5 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if (isxdigit($5)) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 16;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $3);
 }
 __stack_pointer = $2 + 16 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseFloatingLiteral_float__28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) >>> 0 < 9) {
   break label$1;
  }
  $1 = HEAP32[$0 >> 2];
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 8 | 0, $1, $1 + 8 | 0);
  $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($3);
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($3);
  label$2 : {
   while (1) {
    if (($1 | 0) == ($4 | 0)) {
     break label$2;
    }
    $5 = HEAP8[$1 | 0];
    $1 = $1 + 1 | 0;
    if (isxdigit($5)) {
     continue;
    }
    break;
   }
   $1 = 0;
   break label$1;
  }
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
  $1 = 0;
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $3);
 }
 __stack_pointer = $2 + 16 | 0;
 return $1;
}
function jinit_d_main_controller($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 80) | 0;
 HEAP32[$0 + 448 >> 2] = $6;
 HEAP32[$6 >> 2] = 133;
 if ($1) {
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 3;
  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
 }
 $2 = HEAP32[$0 + 328 >> 2];
 label$2 : {
  if (HEAP32[HEAP32[$0 + 476 >> 2] + 8 >> 2]) {
   if (($2 | 0) <= 1) {
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 48;
    FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
    $2 = HEAP32[$0 + 328 >> 2];
   }
   $5 = HEAP32[$0 + 448 >> 2];
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, HEAP32[$0 + 36 >> 2] << 3) | 0;
   HEAP32[$5 + 60 >> 2] = $1;
   $3 = HEAP32[$0 + 36 >> 2];
   HEAP32[$5 - -64 >> 2] = ($3 << 2) + $1;
   if (($3 | 0) >= 1) {
    $8 = $2 + 4 | 0;
    $1 = HEAP32[$0 + 216 >> 2];
    while (1) {
     $2 = (Math_imul(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 12 >> 2]) | 0) / HEAP32[$0 + 328 >> 2] | 0;
     $3 = Math_imul($8, $2);
     $2 = (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, $3 << 3) | 0) + ($2 << 2) | 0;
     $7 = $4 << 2;
     HEAP32[$7 + HEAP32[$5 + 60 >> 2] >> 2] = $2;
     HEAP32[HEAP32[$5 + 64 >> 2] + $7 >> 2] = ($3 << 2) + $2;
     $1 = $1 + 88 | 0;
     $3 = HEAP32[$0 + 36 >> 2];
     $4 = $4 + 1 | 0;
     if (($3 | 0) > ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 328 >> 2];
   $1 = $2 + 2 | 0;
   break label$2;
  }
  HEAP32[$6 + 52 >> 2] = $2;
  $3 = HEAP32[$0 + 36 >> 2];
  $1 = $2;
 }
 $5 = $1;
 label$7 : {
  if (($3 | 0) < 1) {
   break label$7;
  }
  $3 = $6 + 8 | 0;
  $1 = HEAP32[$0 + 216 >> 2];
  $4 = 0;
  while (1) {
   wasm2js_i32$0 = ($4 << 2) + $3 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]]($0, 1, Math_imul(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 28 >> 2]), Math_imul((Math_imul(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 12 >> 2]) | 0) / ($2 | 0) | 0, $5)) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $4 = $4 + 1 | 0;
   if (($4 | 0) >= HEAP32[$0 + 36 >> 2]) {
    break label$7;
   }
   $1 = $1 + 88 | 0;
   $2 = HEAP32[$0 + 328 >> 2];
   continue;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $4 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
 HEAP32[$2 + 12 >> 2] = $3;
 label$1 : {
  label$2 : {
   if (!$3) {
    break label$2;
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($4);
   HEAP32[$2 + 8 >> 2] = $3;
   if (!$3) {
    break label$2;
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BinaryExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0, $1, $2 + 8 | 0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function jinit_merged_upsampler($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 48) | 0;
 HEAP32[$0 + 476 >> 2] = $1;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 >> 2] = 48;
 $3 = Math_imul(HEAP32[$0 + 120 >> 2], HEAP32[$0 + 112 >> 2]);
 HEAP32[$1 + 40 >> 2] = $3;
 label$1 : {
  if (HEAP32[$0 + 320 >> 2] == 2) {
   HEAP32[$1 + 12 >> 2] = 49;
   HEAP32[$1 + 4 >> 2] = 50;
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, $3) | 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 51;
  HEAP32[$1 + 4 >> 2] = 52;
 }
 HEAP32[$1 + 32 >> 2] = $2;
 $2 = HEAP32[$0 + 40 >> 2];
 $1 = HEAP32[$0 + 476 >> 2];
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
 HEAP32[$1 + 28 >> 2] = $3;
 $4 = HEAP32[$1 + 24 >> 2];
 $5 = HEAP32[$1 + 20 >> 2];
 $6 = HEAP32[$1 + 16 >> 2];
 $1 = 0;
 $0 = -128;
 label$3 : {
  if (($2 | 0) == 7) {
   while (1) {
    $2 = $1 << 2;
    HEAP32[$6 + $2 >> 2] = Math_imul($0, 183763) + 32768 >> 16;
    HEAP32[$2 + $5 >> 2] = Math_imul($0, 232260) + 32768 >> 16;
    HEAP32[$2 + $4 >> 2] = Math_imul($0, -93603);
    HEAP32[$2 + $3 >> 2] = Math_imul($0, -45107) + 32768;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) != 256) {
     continue;
    }
    break label$3;
   }
  }
  while (1) {
   $2 = $1 << 2;
   HEAP32[$6 + $2 >> 2] = Math_imul($0, 91881) + 32768 >> 16;
   HEAP32[$2 + $5 >> 2] = Math_imul($0, 116130) + 32768 >> 16;
   HEAP32[$2 + $4 >> 2] = Math_imul($0, -46802);
   HEAP32[$2 + $3 >> 2] = Math_imul($0, -22553) + 32768;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 256) {
    continue;
   }
   break;
  }
 }
}
function __cxa_demangle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $5 = __stack_pointer - 4560 | 0;
 __stack_pointer = $5;
 label$1 : {
  if (!(!$1 | $2 ? $0 : 0)) {
   $0 = 0;
   if (!$3) {
    break label$1;
   }
   HEAP32[$3 >> 2] = -3;
   break label$1;
  }
  $7 = $28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator___ManglingParser_28char_20const__2c_20char_20const__29($5 + 32 | 0, $0, strlen($0) + $0 | 0);
  $0 = 0;
  $4 = $28anonymous_20namespace_29__itanium_demangle__OutputStream__OutputStream_28_29($5 + 8 | 0);
  $8 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parse_28_29($7);
  label$3 : {
   if (!$8) {
    $6 = -2;
    break label$3;
   }
   $6 = -1;
   if (!$28anonymous_20namespace_29__itanium_demangle__initializeOutputStream_28char__2c_20unsigned_20long__2c_20_28anonymous_20namespace_29__itanium_demangle__OutputStream__2c_20unsigned_20long_29($1, $2, $4)) {
    break label$3;
   }
   $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($8, $4);
   $6 = 0;
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($4, 0);
   if ($2) {
    wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__OutputStream__getCurrentPosition_28_29_20const($4), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__OutputStream__getBuffer_28_29($4);
  }
  if ($3) {
   HEAP32[$3 >> 2] = $6;
  }
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator____AbstractManglingParser_28_29($7);
 }
 __stack_pointer = $5 + 4560 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____20std____2__copy__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($0, $1, $2) {
 std____2__enable_if__28is_same_std____2__remove_const__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____type_2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____value_29_20___20_28is_trivially_copy_assignable__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____value_29_2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______type_20std____2____copy__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($0, $1, $2);
}
function decompress_data($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $11 = HEAP32[$0 + 332 >> 2] - 1 | 0;
 $12 = HEAP32[$0 + 452 >> 2];
 label$1 : {
  while (1) {
   $2 = HEAP32[$0 + 144 >> 2];
   $3 = HEAP32[$0 + 152 >> 2];
   if (($2 | 0) != ($3 | 0) | HEAPU32[$0 + 148 >> 2] > HEAPU32[$0 + 156 >> 2] ? ($2 | 0) >= ($3 | 0) : 0) {
    break label$1;
   }
   if (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] >> 2]]($0) | 0) {
    continue;
   }
   break;
  }
  return 0;
 }
 if (HEAP32[$0 + 36 >> 2] >= 1) {
  $2 = HEAP32[$0 + 216 >> 2];
  while (1) {
   label$6 : {
    if (!HEAP32[$2 + 52 >> 2]) {
     break label$6;
    }
    $3 = $7 << 2;
    $4 = HEAP32[$2 + 12 >> 2];
    $13 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 32 >> 2]]($0, HEAP32[($12 + $3 | 0) + 72 >> 2], Math_imul($4, HEAP32[$0 + 156 >> 2]), $4, 0) | 0;
    if (HEAPU32[$0 + 156 >> 2] < $11 >>> 0) {
     $8 = HEAP32[$2 + 12 >> 2];
    } else {
     $4 = HEAP32[$2 + 12 >> 2];
     $5 = HEAPU32[$2 + 32 >> 2] % ($4 >>> 0) | 0;
     $8 = $5 ? $5 : $4;
    }
    if (($8 | 0) < 1) {
     break label$6;
    }
    $14 = HEAP32[(HEAP32[$0 + 472 >> 2] + $3 | 0) + 4 >> 2];
    $9 = HEAP32[$1 + $3 >> 2];
    $3 = HEAP32[$2 + 28 >> 2];
    $6 = 0;
    while (1) {
     $10 = 0;
     if ($3) {
      $3 = HEAP32[($6 << 2) + $13 >> 2];
      $4 = 0;
      $5 = 0;
      while (1) {
       FUNCTION_TABLE[$14 | 0]($0, $2, $3, $9, $4);
       $3 = $3 + 128 | 0;
       $4 = HEAP32[$2 + 36 >> 2] + $4 | 0;
       $5 = $5 + 1 | 0;
       $10 = HEAP32[$2 + 28 >> 2];
       if ($5 >>> 0 < $10 >>> 0) {
        continue;
       }
       break;
      }
     }
     $9 = (HEAP32[$2 + 40 >> 2] << 2) + $9 | 0;
     $3 = $10;
     $6 = $6 + 1 | 0;
     if (($8 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = $2 + 88 | 0;
   $7 = $7 + 1 | 0;
   if (($7 | 0) < HEAP32[$0 + 36 >> 2]) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 156 >> 2] + 1 | 0;
 HEAP32[$0 + 156 >> 2] = $2;
 return (HEAPU32[$0 + 332 >> 2] > $2 >>> 0 ? 3 : 4) | 0;
}
function readNFTMarker($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___find_28int_20const__29(33832, $3 + 44 | 0), HEAP32[wasm2js_i32$0 + 40 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___end_28_29(33832), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
 if (!std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20__20const__29($3 + 40 | 0, $3 + 32 | 0)) {
  $1 = std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___operator_5b_5d_28int_20const__29(33832, $3 + 44 | 0);
  loadNFTMarker($1, $3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($2));
  HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 12 >> 2];
  arLog(0, 1, 8995, $3 + 16 | 0);
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 12 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  HEAP32[$3 >> 2] = $2;
  emscripten_asm_const_int(9026, 9206, $3 | 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 + 28 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 36 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $3 + 48 | 0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0, $1) {
 var $2 = 0;
 $0 = std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____node_alloc_28_29($0);
 while (1) {
  if ($1) {
   $2 = HEAP32[$1 >> 2];
   $1 = std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________upcast_28_29($1);
   void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___destroy_std____2__pair_int_20const_2c_20arIset__20__28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___29($0, std____2____hash_key_value_types_std____2____hash_value_type_int_2c_20arIset__20_____get_ptr_28std____2____hash_value_type_int_2c_20arIset___29($1 + 8 | 0));
   std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___deallocate_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20unsigned_20long_29($0, $1, 1);
   $1 = $2;
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0, $1, $2, $3, $4, $5, $6) {
 return $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0 + 416 | 0, $1, $2, $3, $4, $5, $6);
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseDestructorName_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0);
 $4 = $2;
 label$1 : {
  if ($1 - 48 >>> 0 <= 9) {
   $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSimpleId_28_29($3);
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseUnresolvedType_28_29($3);
 }
 HEAP32[$4 + 12 >> 2] = $1;
 if ($1) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $2 + 12 | 0);
 } else {
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function __multi3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $11 = $2;
 $9 = $8;
 $9 = __wasm_i64_mul($1, $11, $7, $9);
 $8 = $9;
 $11 = i64toi32_i32$HIGH_BITS;
 $7 = $11;
 $11 = $4;
 $9 = $6;
 $9 = __wasm_i64_mul($3, $11, $5, $9);
 $13 = $9;
 $11 = i64toi32_i32$HIGH_BITS;
 $9 = $11;
 $11 = $7;
 $12 = $11 + $9 | 0;
 $9 = $8;
 $10 = $9 + $13 | 0;
 $14 = $10;
 $12 = $10 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
 $10 = $12;
 $9 = 0;
 $8 = $9;
 $11 = 0;
 $4 = $11;
 $12 = $6;
 $7 = $12;
 $9 = $2;
 $3 = $9;
 $12 = __wasm_i64_mul($6, $8, $9, $11);
 $13 = $12;
 $11 = i64toi32_i32$HIGH_BITS;
 $12 = $11;
 $11 = $10;
 $10 = $11 + $12 | 0;
 $9 = $14;
 $9 = $9 + $13 | 0;
 $10 = $9 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
 $15 = $9;
 $16 = $10;
 $11 = $5;
 $5 = $11;
 $9 = 0;
 $6 = $9;
 $10 = $1;
 $1 = $10;
 $11 = 0;
 $2 = $11;
 $11 = $6;
 $10 = $2;
 $10 = __wasm_i64_mul($5, $11, $1, $10);
 $14 = $10;
 $11 = i64toi32_i32$HIGH_BITS;
 $10 = 0;
 $12 = $10;
 $10 = $4;
 $9 = $6;
 $9 = __wasm_i64_mul($3, $10, $5, $9);
 $13 = $9;
 $10 = i64toi32_i32$HIGH_BITS;
 $9 = $10;
 $10 = $12;
 $9 = $9 + $10 | 0;
 $12 = $11 + $13 | 0;
 $5 = $12;
 $9 = $12 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
 $6 = $9;
 $11 = 0;
 $10 = $11;
 $11 = $16;
 $12 = $11 + $10 | 0;
 $9 = $15;
 $13 = $6;
 $9 = $9 + $13 | 0;
 $12 = $9 >>> 0 < $13 >>> 0 ? $12 + 1 | 0 : $12;
 $4 = $9;
 $3 = $12;
 $12 = $2;
 $9 = $8;
 $9 = __wasm_i64_mul($1, $12, $7, $9);
 $12 = i64toi32_i32$HIGH_BITS;
 $1 = $12;
 $11 = $5;
 $13 = $11;
 $12 = $9;
 $10 = $11 + $12 | 0;
 $9 = 0;
 $11 = $9;
 $9 = $1;
 $9 = $11 + $9 | 0;
 $5 = $10;
 $9 = $10 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
 $6 = $9;
 $12 = 0;
 $9 = $12;
 $12 = $3;
 $10 = $9 + $12 | 0;
 $9 = $4;
 $13 = $6;
 $11 = $9 + $13 | 0;
 $10 = $11 >>> 0 < $13 >>> 0 ? $10 + 1 | 0 : $10;
 $9 = $0;
 HEAP32[$9 + 8 >> 2] = $11;
 HEAP32[$9 + 12 >> 2] = $10;
 $9 = 0;
 $1 = $9;
 $12 = $14;
 $9 = $12;
 $13 = 0;
 $2 = $9 | $13;
 $9 = $0;
 HEAP32[$9 >> 2] = $2;
 $10 = $5;
 $12 = $1;
 $10 = $10 | $12;
 HEAP32[$9 + 4 >> 2] = $10;
}
function decode_mcu_AC_refine($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $3 = HEAP32[$0 + 468 >> 2];
 if (HEAP32[$0 + 280 >> 2]) {
  $2 = HEAP32[$3 + 56 >> 2];
  if (!$2) {
   process_restart($0);
   $2 = HEAP32[$3 + 56 >> 2];
  }
  HEAP32[$3 + 56 >> 2] = $2 - 1;
 }
 label$3 : {
  if (HEAP32[$3 + 20 >> 2] == -1) {
   break label$3;
  }
  $2 = HEAP32[$0 + 424 >> 2];
  $6 = -1 << $2;
  $7 = 1 << $2;
  $4 = HEAP32[$0 + 416 >> 2];
  $8 = HEAP32[$1 >> 2];
  $9 = HEAP32[$0 + 432 >> 2];
  $2 = HEAP32[HEAP32[$0 + 344 >> 2] + 24 >> 2];
  label$4 : {
   while (1) {
    if (HEAPU16[(HEAP32[($4 << 2) + $9 >> 2] << 1) + $8 >> 1]) {
     break label$4;
    }
    $4 = $4 - 1 | 0;
    if ($4) {
     continue;
    }
    break;
   }
   $4 = 0;
  }
  $10 = $3 + 188 | 0;
  $1 = HEAP32[$0 + 412 >> 2] - 1 | 0;
  $11 = ($2 << 2) + $3 | 0;
  while (1) {
   $2 = HEAP32[$11 + 124 >> 2] + Math_imul($1, 3) | 0;
   if (($1 | 0) >= ($4 | 0)) {
    if (arith_decode($0, $2)) {
     break label$3;
    }
   }
   label$8 : {
    label$9 : {
     label$10 : {
      while (1) {
       $1 = $1 + 1 | 0;
       $5 = (HEAP32[($1 << 2) + $9 >> 2] << 1) + $8 | 0;
       if (HEAPU16[$5 >> 1]) {
        if (!arith_decode($0, $2 + 2 | 0)) {
         break label$8;
        }
        $2 = HEAP16[$5 >> 1];
        if (($2 | 0) > -1) {
         break label$10;
        }
        $2 = $2 + $6 | 0;
        break label$9;
       }
       if (arith_decode($0, $2 + 1 | 0)) {
        $2 = arith_decode($0, $10) ? $6 : $7;
        break label$9;
       }
       $2 = $2 + 3 | 0;
       if (HEAP32[$0 + 416 >> 2] > ($1 | 0)) {
        continue;
       }
       break;
      }
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 20 >> 2] = 117;
      FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
      HEAP32[$3 + 20 >> 2] = -1;
      return 1;
     }
     $2 = $2 + $7 | 0;
    }
    HEAP16[$5 >> 1] = $2;
   }
   if (HEAP32[$0 + 416 >> 2] > ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 return 1;
}
function decode_mcu_DC_refine_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 $3 = HEAP32[$0 + 468 >> 2];
 label$1 : {
  label$2 : {
   if (HEAP32[$3 + 44 >> 2] | !HEAP32[$0 + 280 >> 2]) {
    break label$2;
   }
   $2 = HEAP32[$0 + 464 >> 2];
   $4 = $3 + 16 | 0;
   HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + (HEAP32[$4 >> 2] / 8 | 0);
   HEAP32[$3 + 16 >> 2] = 0;
   if (!(FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0) | 0)) {
    break label$1;
   }
   if (HEAP32[$0 + 340 >> 2] >= 1) {
    $2 = 0;
    while (1) {
     HEAP32[(($2 << 2) + $3 | 0) + 24 >> 2] = 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) < HEAP32[$0 + 340 >> 2]) {
      continue;
     }
     break;
    }
   }
   HEAP32[$3 + 20 >> 2] = 0;
   HEAP32[$3 + 44 >> 2] = HEAP32[$0 + 280 >> 2];
   if (HEAP32[$0 + 440 >> 2]) {
    break label$2;
   }
   HEAP32[$3 + 40 >> 2] = 0;
  }
  HEAP32[$5 + 24 >> 2] = $0;
  $4 = HEAP32[$0 + 24 >> 2];
  $6 = HEAP32[$4 >> 2];
  HEAP32[$5 + 8 >> 2] = $6;
  $7 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 + 12 >> 2] = $7;
  $9 = 1;
  $2 = HEAP32[$3 + 16 >> 2];
  $8 = HEAP32[$3 + 12 >> 2];
  if (HEAP32[$0 + 368 >> 2] >= 1) {
   $7 = 1 << HEAP32[$0 + 424 >> 2];
   $4 = 0;
   while (1) {
    if (($2 | 0) <= 0) {
     if (!jpeg_fill_bit_buffer($5 + 8 | 0, $8, $2, 1)) {
      $9 = 0;
      break label$1;
     }
     $8 = HEAP32[$5 + 16 >> 2];
     $2 = HEAP32[$5 + 20 >> 2];
    }
    $2 = $2 - 1 | 0;
    if ($8 >>> $2 & 1) {
     $6 = HEAP32[($4 << 2) + $1 >> 2];
     HEAP16[$6 >> 1] = HEAPU16[$6 >> 1] | $7;
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) < HEAP32[$0 + 368 >> 2]) {
     continue;
    }
    break;
   }
   $7 = HEAP32[$5 + 12 >> 2];
   $6 = HEAP32[$5 + 8 >> 2];
   $4 = HEAP32[$0 + 24 >> 2];
  }
  HEAP32[$4 + 4 >> 2] = $7;
  HEAP32[$4 >> 2] = $6;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $8;
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] - 1;
 }
 __stack_pointer = $5 + 32 | 0;
 return $9 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) >>> 0 >= $2 >>> 0) {
  label$2 : {
   if ($2 >>> 0 <= 10) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0);
    break label$2;
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2);
   $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0);
   $5 = $3 + 1 | 0;
   $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($6, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
  }
  std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(char__20std____2____to_address_char__28char__29($3), $1, $2);
  HEAP8[$4 + 15 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 std____2____basic_string_common_true_____throw_length_error_28_29_20const($0);
 abort();
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___unique_ptr_true_2c_20void__28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20_____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____29($0, $3 + 12 | 0, std____2__remove_reference_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____type___20std____2__move_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____28std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___29($2));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseAbiTags_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 label$1 : {
  label$2 : {
   while (1) {
    if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 66)) {
     break label$2;
    }
    $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($2, $0);
    if (!$28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($2)) {
     wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__AbiTagAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $2 + 12 | 0, $2), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     continue;
    }
    break;
   }
   $0 = 0;
   break label$1;
  }
  $0 = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $7 = HEAPU8[$1 + 53 | 0];
 $6 = HEAP32[$0 + 12 >> 2];
 HEAP8[$1 + 53 | 0] = 0;
 $8 = HEAPU8[$1 + 52 | 0];
 HEAP8[$1 + 52 | 0] = 0;
 $9 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($9, $1, $2, $3, $4, $5);
 $10 = HEAPU8[$1 + 53 | 0];
 $7 = $10 | $7;
 $11 = HEAPU8[$1 + 52 | 0];
 $8 = $11 | $8;
 label$2 : {
  if (($6 | 0) < 2) {
   break label$2;
  }
  $9 = ($6 << 3) + $9 | 0;
  $6 = $0 + 24 | 0;
  while (1) {
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   label$4 : {
    if ($11) {
     if (HEAP32[$1 + 24 >> 2] == 1) {
      break label$2;
     }
     if (HEAPU8[$0 + 8 | 0] & 2) {
      break label$4;
     }
     break label$2;
    }
    if (!$10) {
     break label$4;
    }
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$2;
    }
   }
   HEAP16[$1 + 52 >> 1] = 0;
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
   $10 = HEAPU8[$1 + 53 | 0];
   $7 = $10 | $7;
   $11 = HEAPU8[$1 + 52 | 0];
   $8 = $11 | $8;
   $6 = $6 + 8 | 0;
   if ($9 >>> 0 > $6 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP8[$1 + 53 | 0] = ($7 & 255) != 0;
 HEAP8[$1 + 52 | 0] = ($8 & 255) != 0;
}
function jpeg_idct_2x4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $1 = HEAP32[$1 + 84 >> 2];
 $5 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
 $7 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
 $8 = Math_imul($5 + $7 | 0, 4433);
 $7 = $8 + Math_imul($7, 6270) | 0;
 $9 = Math_imul(HEAP32[$1 + 64 >> 2], HEAPU16[$2 + 32 >> 1]);
 $10 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]);
 $13 = $9 + $10 << 13;
 $11 = ($7 + $13 | 0) + 33587200 | 0;
 $12 = Math_imul(HEAP32[$1 + 36 >> 2], HEAP16[$2 + 18 >> 1]);
 $14 = Math_imul(HEAP32[$1 + 100 >> 2], HEAP16[$2 + 50 >> 1]);
 $15 = Math_imul($12 + $14 | 0, 4433);
 $12 = $15 + Math_imul($12, 6270) | 0;
 $16 = Math_imul(HEAP32[$1 + 68 >> 2], HEAPU16[$2 + 34 >> 1]);
 $6 = HEAP32[$3 >> 2] + $4 | 0;
 $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
 $2 = Math_imul(HEAP32[$1 + 4 >> 2], HEAPU16[$2 + 2 >> 1]);
 $1 = $16 + $2 << 13;
 $17 = $12 + $1 | 0;
 HEAP8[$6 | 0] = HEAPU8[$0 + ($17 + $11 >>> 16 & 1023) | 0];
 HEAP8[$6 + 1 | 0] = HEAPU8[($11 - $17 >>> 16 & 1023) + $0 | 0];
 $6 = HEAP32[$3 + 4 >> 2] + $4 | 0;
 $5 = Math_imul($5, -15137) + $8 | 0;
 $8 = $10 - $9 << 13;
 $9 = ($5 + $8 | 0) + 33587200 | 0;
 $2 = $2 - $16 << 13;
 $10 = Math_imul($14, -15137) + $15 | 0;
 $11 = $2 + $10 | 0;
 HEAP8[$6 | 0] = HEAPU8[($9 + $11 >>> 16 & 1023) + $0 | 0];
 HEAP8[$6 + 1 | 0] = HEAPU8[($9 - $11 >>> 16 & 1023) + $0 | 0];
 $6 = HEAP32[$3 + 8 >> 2] + $4 | 0;
 $2 = $2 - $10 | 0;
 $5 = ($8 - $5 | 0) + 33587200 | 0;
 HEAP8[$6 | 0] = HEAPU8[($2 + $5 >>> 16 & 1023) + $0 | 0];
 HEAP8[$6 + 1 | 0] = HEAPU8[($5 - $2 >>> 16 & 1023) + $0 | 0];
 $2 = HEAP32[$3 + 12 >> 2] + $4 | 0;
 $1 = $1 - $12 | 0;
 $4 = ($13 - $7 | 0) + 33587200 | 0;
 HEAP8[$2 | 0] = HEAPU8[($1 + $4 >>> 16 & 1023) + $0 | 0];
 HEAP8[$2 + 1 | 0] = HEAPU8[($4 - $1 >>> 16 & 1023) + $0 | 0];
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___reserve_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___size_28_29_20const($0);
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___isInline_28_29_20const($0)) {
    $2 = dlmalloc($1 << 2);
    if (!$2) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____20std____2__copy__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
    HEAP32[$0 >> 2] = $2;
    break label$2;
   }
   $2 = dlrealloc(HEAP32[$0 >> 2], $1 << 2);
   HEAP32[$0 >> 2] = $2;
   if (!$2) {
    break label$1;
   }
  }
  HEAP32[$0 + 8 >> 2] = ($1 << 2) + $2;
  HEAP32[$0 + 4 >> 2] = ($3 << 2) + $2;
  return;
 }
 std__terminate_28_29();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionEncoding_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 36);
 $2 = HEAP32[$2 >> 2];
 $1 = HEAP32[$1 >> 2];
 $8 = HEAP32[$3 + 4 >> 2];
 $3 = HEAP32[$3 >> 2];
 HEAP32[$7 + 8 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $8;
 $6 = HEAPU8[$6 | 0];
 $5 = HEAP32[$5 >> 2];
 $4 = HEAP32[$4 >> 2];
 HEAP32[$7 >> 2] = $3;
 HEAP32[$7 + 4 >> 2] = $8;
 $4 = $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__FunctionEncoding_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_29($0, $1, $2, $7, $4, $5, $6);
 __stack_pointer = $7 + 16 | 0;
 return $4;
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20_____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____default_init_tag__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_200_2c_20false_____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20void__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________29($0, std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________20std____2__forward_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________28std____2__remove_reference_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________type__29($1));
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__2c_201_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0 + 4 | 0);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 $5 = HEAP32[$0 + 12 >> 2];
 $3 = $0;
 $4 = HEAP32[$3 + 8 >> 2];
 $3 = $4;
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $5;
 HEAP32[$2 + 56 >> 2] = $3;
 HEAP32[$2 + 60 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 24 | 0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 48 | 0, 23466);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $5;
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $4 = HEAP32[$0 + 16 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 26352);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $0 = HEAP32[$0 + 20 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 - -64 | 0;
}
function jpeg_idct_3x6($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $16 = HEAP32[$0 + 336 >> 2];
 $1 = HEAP32[$1 + 84 >> 2];
 $5 = __stack_pointer;
 $13 = $5 - 80 | 0;
 $0 = $13;
 while (1) {
  $7 = HEAP32[$1 + 64 >> 2];
  $12 = HEAP16[$2 + 32 >> 1];
  $9 = Math_imul(HEAP16[$2 >> 1], HEAP32[$1 >> 2]) << 13 | 1024;
  $10 = Math_imul(Math_imul(HEAP16[$2 + 64 >> 1], HEAP32[$1 + 128 >> 2]), 5793);
  $14 = $9 - ($10 << 1) >> 11;
  $5 = Math_imul(HEAP32[$1 + 32 >> 2], HEAP16[$2 + 16 >> 1]);
  $6 = Math_imul(HEAP32[$1 + 96 >> 2], HEAP16[$2 + 48 >> 1]);
  $8 = Math_imul(HEAP32[$1 + 160 >> 2], HEAP16[$2 + 80 >> 1]);
  $15 = ($5 - $6 | 0) - $8 << 2;
  HEAP32[$0 + 48 >> 2] = $14 - $15;
  HEAP32[$0 + 12 >> 2] = $14 + $15;
  $7 = Math_imul(Math_imul($7, $12), 10033);
  $12 = $9 + $10 | 0;
  $9 = $7 + $12 | 0;
  $10 = Math_imul($5 + $8 | 0, 2998);
  $5 = $10 + ($5 + $6 << 13) | 0;
  HEAP32[$0 + 60 >> 2] = $9 - $5 >> 11;
  HEAP32[$0 >> 2] = $5 + $9 >> 11;
  $5 = $12 - $7 | 0;
  $6 = ($8 - $6 << 13) + $10 | 0;
  HEAP32[$0 + 36 >> 2] = $5 - $6 >> 11;
  HEAP32[$0 + 24 >> 2] = $5 + $6 >> 11;
  $0 = $0 + 4 | 0;
  $1 = $1 + 4 | 0;
  $2 = $2 + 2 | 0;
  $11 = $11 + 1 | 0;
  if (($11 | 0) != 3) {
   continue;
  }
  break;
 }
 $1 = $16 - 384 | 0;
 $0 = 0;
 $2 = $13;
 while (1) {
  $5 = HEAP32[($0 << 2) + $3 >> 2] + $4 | 0;
  $7 = Math_imul(HEAP32[$2 + 4 >> 2], 10033);
  $6 = (HEAP32[$2 >> 2] << 13) + 134348800 | 0;
  $8 = HEAP32[$2 + 8 >> 2];
  $11 = $6 + Math_imul($8, 5793) | 0;
  HEAP8[$5 | 0] = HEAPU8[($7 + $11 >>> 18 & 1023) + $1 | 0];
  HEAP8[$5 + 2 | 0] = HEAPU8[($11 - $7 >>> 18 & 1023) + $1 | 0];
  HEAP8[$5 + 1 | 0] = HEAPU8[(Math_imul($8, -11586) + $6 >>> 18 & 1023) + $1 | 0];
  $2 = $2 + 12 | 0;
  $0 = $0 + 1 | 0;
  if (($0 | 0) != 6) {
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $6 = $2;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
     break label$2;
    }
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23852);
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 24984);
 }
 $4 = $3;
 $5 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 $4 = $5;
 $5 = $6;
 HEAP32[$5 + 16 >> 2] = $4;
 HEAP32[$5 + 20 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 32724);
 $3 = HEAP32[$4 >> 2];
 $5 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 __stack_pointer = $2 + 48 | 0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____hash_table_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___unique_ptr_true_2c_20void__28_29($0);
 std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____compressed_pair_true_2c_20void__28_29($0 + 8 | 0);
 HEAP32[$1 + 12 >> 2] = 0;
 std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__20_____compressed_pair_int_2c_20std____2____default_init_tag__28int___2c_20std____2____default_init_tag___29($0 + 12 | 0, $1 + 12 | 0, $1 + 8 | 0);
 HEAP32[$1 + 4 >> 2] = 1065353216;
 std____2____compressed_pair_float_2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__20_____compressed_pair_float_2c_20std____2____default_init_tag__28float___2c_20std____2____default_init_tag___29($0 + 16 | 0, $1 + 4 | 0, $1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 91);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 28236);
 $5 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 93);
 $3 = HEAP32[$0 + 16 >> 2];
 if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($3) - 73 & 255) >>> 0 >= 2) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 28124);
  $3 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 >> 2] = $3;
  HEAP32[$2 + 4 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
  $3 = HEAP32[$0 + 16 >> 2];
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($3, $1);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3, $4, $5) {
 return $28anonymous_20namespace_29__itanium_demangle__FunctionType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2, $3, $4, $5);
}
function memmove($0, $1, $2) {
 var $3 = 0;
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  if (($1 - $0 | 0) - $2 >>> 0 <= 0 - ($2 << 1) >>> 0) {
   return memcpy($0, $1, $2);
  }
  $3 = ($0 ^ $1) & 3;
  label$3 : {
   label$4 : {
    if ($0 >>> 0 < $1 >>> 0) {
     if ($3) {
      $3 = $0;
      break label$3;
     }
     if (!($0 & 3)) {
      $3 = $0;
      break label$4;
     }
     $3 = $0;
     while (1) {
      if (!$2) {
       break label$1;
      }
      HEAP8[$3 | 0] = HEAPU8[$1 | 0];
      $1 = $1 + 1 | 0;
      $2 = $2 - 1 | 0;
      $3 = $3 + 1 | 0;
      if ($3 & 3) {
       continue;
      }
      break;
     }
     break label$4;
    }
    label$9 : {
     if ($3) {
      break label$9;
     }
     if ($0 + $2 & 3) {
      while (1) {
       if (!$2) {
        break label$1;
       }
       $2 = $2 - 1 | 0;
       $3 = $2 + $0 | 0;
       HEAP8[$3 | 0] = HEAPU8[$1 + $2 | 0];
       if ($3 & 3) {
        continue;
       }
       break;
      }
     }
     if ($2 >>> 0 <= 3) {
      break label$9;
     }
     while (1) {
      $2 = $2 - 4 | 0;
      HEAP32[$2 + $0 >> 2] = HEAP32[$1 + $2 >> 2];
      if ($2 >>> 0 > 3) {
       continue;
      }
      break;
     }
    }
    if (!$2) {
     break label$1;
    }
    while (1) {
     $2 = $2 - 1 | 0;
     HEAP8[$2 + $0 | 0] = HEAPU8[$1 + $2 | 0];
     if ($2) {
      continue;
     }
     break;
    }
    break label$1;
   }
   if ($2 >>> 0 <= 3) {
    break label$3;
   }
   while (1) {
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $3 = $3 + 4 | 0;
    $2 = $2 - 4 | 0;
    if ($2 >>> 0 > 3) {
     continue;
    }
    break;
   }
  }
  if (!$2) {
   break label$1;
  }
  while (1) {
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseCVQualifiers_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 114)) {
  $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($1 + 12 | 0, 4);
 }
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 86)) {
  $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($1 + 12 | 0, 2);
 }
 if ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 75)) {
  $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($1 + 12 | 0, 1);
 }
 __stack_pointer = $1 + 16 | 0;
 $0 = HEAP32[$1 + 12 >> 2];
 return $0;
}
function jpeg_idct_4x2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $1 = HEAP32[$1 + 84 >> 2];
 $6 = Math_imul(HEAP32[$1 + 44 >> 2], HEAP16[$2 + 22 >> 1]);
 $7 = Math_imul(HEAP32[$1 + 12 >> 2], HEAP16[$2 + 6 >> 1]);
 $8 = $6 + $7 | 0;
 $10 = Math_imul(HEAP32[$1 + 36 >> 2], HEAP16[$2 + 18 >> 1]);
 $11 = Math_imul(HEAP32[$1 + 4 >> 2], HEAP16[$2 + 2 >> 1]);
 $9 = $10 + $11 | 0;
 $12 = Math_imul($8 + $9 | 0, 4433);
 $9 = $12 + Math_imul($9, 6270) | 0;
 $13 = Math_imul(HEAP32[$1 + 32 >> 2], HEAPU16[$2 + 16 >> 1]);
 $14 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]);
 $15 = ($13 + $14 | 0) + 4100 | 0;
 $16 = Math_imul(HEAP32[$1 + 40 >> 2], HEAPU16[$2 + 20 >> 1]);
 $5 = HEAP32[$3 >> 2] + $4 | 0;
 $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
 $1 = Math_imul(HEAP32[$1 + 8 >> 2], HEAPU16[$2 + 4 >> 1]);
 $2 = $16 + $1 | 0;
 $17 = $15 + $2 << 13;
 HEAP8[$5 | 0] = HEAPU8[$0 + ($17 + $9 >>> 16 & 1023) | 0];
 HEAP8[$5 + 3 | 0] = HEAPU8[($17 - $9 >>> 16 & 1023) + $0 | 0];
 $2 = $15 - $2 << 13;
 $8 = Math_imul($8, -15137) + $12 | 0;
 HEAP8[$5 + 1 | 0] = HEAPU8[($2 + $8 >>> 16 & 1023) + $0 | 0];
 HEAP8[$5 + 2 | 0] = HEAPU8[($2 - $8 >>> 16 & 1023) + $0 | 0];
 $2 = HEAP32[$3 + 4 >> 2] + $4 | 0;
 $4 = $11 - $10 | 0;
 $5 = $7 - $6 | 0;
 $3 = Math_imul($4 + $5 | 0, 4433);
 $4 = $3 + Math_imul($4, 6270) | 0;
 $1 = $1 - $16 | 0;
 $6 = ($14 - $13 | 0) + 4100 | 0;
 $7 = $1 + $6 << 13;
 HEAP8[$2 | 0] = HEAPU8[($4 + $7 >>> 16 & 1023) + $0 | 0];
 HEAP8[$2 + 3 | 0] = HEAPU8[($7 - $4 >>> 16 & 1023) + $0 | 0];
 $1 = $6 - $1 << 13;
 $5 = Math_imul($5, -15137) + $3 | 0;
 HEAP8[$2 + 1 | 0] = HEAPU8[($1 + $5 >>> 16 & 1023) + $0 | 0];
 HEAP8[$2 + 2 | 0] = HEAPU8[($1 - $5 >>> 16 & 1023) + $0 | 0];
}
function jpeg_fill_bit_buffer($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $7 = HEAP32[$0 + 4 >> 2];
 $5 = HEAP32[$0 >> 2];
 $6 = HEAP32[$0 + 16 >> 2];
 $4 = $5;
 label$1 : {
  label$2 : {
   if (HEAP32[$6 + 440 >> 2]) {
    break label$2;
   }
   if (($2 | 0) > 24) {
    $8 = $2;
    $4 = $5;
    break label$1;
   }
   while (1) {
    if (!$7) {
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$6 + 24 >> 2] + 12 >> 2]]($6) | 0)) {
      return 0;
     }
     $4 = HEAP32[$6 + 24 >> 2];
     $7 = HEAP32[$4 + 4 >> 2];
     $5 = HEAP32[$4 >> 2];
    }
    $4 = $5 + 1 | 0;
    $7 = $7 - 1 | 0;
    label$7 : {
     $8 = HEAPU8[$5 | 0];
     if (($8 | 0) == 255) {
      while (1) {
       if (!$7) {
        if (!(FUNCTION_TABLE[HEAP32[HEAP32[$6 + 24 >> 2] + 12 >> 2]]($6) | 0)) {
         return 0;
        }
        $4 = HEAP32[$6 + 24 >> 2];
        $7 = HEAP32[$4 + 4 >> 2];
        $4 = HEAP32[$4 >> 2];
       }
       $7 = $7 - 1 | 0;
       $5 = HEAPU8[$4 | 0];
       $8 = 255;
       $9 = $4 + 1 | 0;
       $4 = $9;
       if (($5 | 0) == 255) {
        continue;
       }
       break;
      }
      if ($5) {
       break label$7;
      }
      $4 = $9;
     }
     $1 = $1 << 8 | $8;
     $9 = ($2 | 0) < 17;
     $5 = $4;
     $8 = $2 + 8 | 0;
     $2 = $8;
     if ($9) {
      continue;
     }
     break label$1;
    }
    break;
   }
   HEAP32[$6 + 440 >> 2] = $5;
   $4 = $9;
  }
  if (($2 | 0) >= ($3 | 0)) {
   $8 = $2;
   break label$1;
  }
  if (!HEAP32[HEAP32[$6 + 468 >> 2] + 40 >> 2]) {
   $5 = HEAP32[$6 >> 2];
   HEAP32[$5 + 20 >> 2] = 120;
   FUNCTION_TABLE[HEAP32[$5 + 4 >> 2]]($6, -1);
   HEAP32[HEAP32[$6 + 468 >> 2] + 40 >> 2] = 1;
  }
  $8 = 25;
  $1 = $1 << 25 - $2;
 }
 HEAP32[$0 + 12 >> 2] = $8;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $7;
 HEAP32[$0 >> 2] = $4;
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseTemplateParamDecl_28_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $0 = HEAP32[$0 >> 2];
 $3 = $0 + ($1 << 2) | 0;
 $1 = $3 + 396 | 0;
 $4 = $1;
 $1 = HEAP32[$3 + 396 >> 2];
 HEAP32[$4 >> 2] = $1 + 1;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName_2c_20_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind__2c_20unsigned_20int___28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind__2c_20unsigned_20int__29($0, $2 + 12 | 0, $2 + 8 | 0);
 HEAP32[$2 + 4 >> 2] = $1;
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29(HEAP32[$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___back_28_29($0 + 332 | 0) >> 2], $2 + 4 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $1;
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___reset_28std__nullptr_t_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___first_28_29($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if ($1) {
  std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___operator_28_29_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______29(std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___second_28_29($0), $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 32);
 $8 = $1;
 $7 = HEAP32[$8 >> 2];
 $1 = HEAP32[$8 + 4 >> 2];
 HEAP32[$6 + 24 >> 2] = $7;
 HEAP32[$6 + 28 >> 2] = $1;
 $2 = HEAP32[$2 >> 2];
 $8 = $3;
 $1 = HEAP32[$8 >> 2];
 $7 = HEAP32[$8 + 4 >> 2];
 HEAP32[$6 + 16 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $7;
 $4 = HEAPU8[bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($4) | 0];
 $5 = HEAPU8[bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($5) | 0];
 $1 = HEAP32[$6 + 28 >> 2];
 $7 = HEAP32[$6 + 24 >> 2];
 HEAP32[$6 + 8 >> 2] = $7;
 HEAP32[$6 + 12 >> 2] = $1;
 $7 = HEAP32[$6 + 20 >> 2];
 $1 = HEAP32[$6 + 16 >> 2];
 HEAP32[$6 >> 2] = $1;
 HEAP32[$6 + 4 >> 2] = $7;
 $5 = $28anonymous_20namespace_29__itanium_demangle__NewExpr__NewExpr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool_2c_20bool_29($0, $6 + 8 | 0, $2, $6, $4, $5);
 __stack_pointer = $6 + 32 | 0;
 return $5;
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 32);
 $8 = $1;
 $7 = HEAP32[$8 >> 2];
 $1 = HEAP32[$8 + 4 >> 2];
 HEAP32[$6 + 24 >> 2] = $7;
 HEAP32[$6 + 28 >> 2] = $1;
 $2 = HEAP32[$2 >> 2];
 $8 = $3;
 $1 = HEAP32[$8 >> 2];
 $7 = HEAP32[$8 + 4 >> 2];
 HEAP32[$6 + 16 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $7;
 $4 = HEAPU8[bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($4) | 0];
 $5 = HEAPU8[bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($5) | 0];
 $1 = HEAP32[$6 + 28 >> 2];
 $7 = HEAP32[$6 + 24 >> 2];
 HEAP32[$6 + 8 >> 2] = $7;
 HEAP32[$6 + 12 >> 2] = $1;
 $7 = HEAP32[$6 + 20 >> 2];
 $1 = HEAP32[$6 + 16 >> 2];
 HEAP32[$6 >> 2] = $1;
 HEAP32[$6 + 4 >> 2] = $7;
 $5 = $28anonymous_20namespace_29__itanium_demangle__NewExpr__NewExpr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool_2c_20bool_29($0, $6 + 8 | 0, $2, $6, $4, $5);
 __stack_pointer = $6 + 32 | 0;
 return $5;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 if (($28anonymous_20namespace_29__itanium_demangle__OutputStream__back_28_29_20const($1) | 0) != 93) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 24984);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 32608);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $4 = HEAP32[$0 + 12 >> 2];
 if ($4) {
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($4, $1);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 28015);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 __stack_pointer = $2 + 48 | 0;
}
function prepare_for_output_pass($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = HEAP32[$0 + 444 >> 2];
 label$1 : {
  if (HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 8 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] >> 2]]($0, 0);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] >> 2]]($0, 2);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 448 >> 2] >> 2]]($0, 2);
   break label$1;
  }
  label$3 : {
   if (HEAP32[$0 + 136 >> 2] | !HEAP32[$0 + 84 >> 2]) {
    break label$3;
   }
   if (!(!HEAP32[$0 + 92 >> 2] | !HEAP32[$0 + 108 >> 2])) {
    HEAP32[$0 + 484 >> 2] = HEAP32[$1 + 24 >> 2];
    HEAP32[$1 + 8 >> 2] = 1;
    break label$3;
   }
   if (HEAP32[$0 + 100 >> 2]) {
    HEAP32[$0 + 484 >> 2] = HEAP32[$1 + 20 >> 2];
    break label$3;
   }
   $2 = HEAP32[$0 >> 2];
   HEAP32[$2 + 20 >> 2] = 47;
   FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 472 >> 2] >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 452 >> 2] + 8 >> 2]]($0);
  if (HEAP32[$0 + 68 >> 2]) {
   break label$1;
  }
  if (!HEAP32[$1 + 16 >> 2]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 480 >> 2] >> 2]]($0);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 476 >> 2] >> 2]]($0);
  if (HEAP32[$0 + 84 >> 2]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] >> 2]]($0, HEAP32[$1 + 8 >> 2]);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] >> 2]]($0, HEAP32[$1 + 8 >> 2] ? 3 : 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 448 >> 2] >> 2]]($0, 0);
 }
 $2 = HEAP32[$0 + 8 >> 2];
 label$8 : {
  if (!$2) {
   break label$8;
  }
  $3 = HEAP32[$1 + 12 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  $1 = (HEAP32[$1 + 8 >> 2] ? 2 : 1) + $3 | 0;
  HEAP32[$2 + 16 >> 2] = $1;
  if (HEAP32[HEAP32[$0 + 460 >> 2] + 20 >> 2] | !HEAP32[$0 + 64 >> 2]) {
   break label$8;
  }
  HEAP32[$2 + 16 >> 2] = (HEAP32[$0 + 108 >> 2] ? 2 : 1) + $1;
 }
}
function format_message($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 $3 = HEAP32[$0 >> 2];
 $0 = HEAP32[$3 + 20 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    if (!(($0 | 0) < 1 | HEAP32[$3 + 116 >> 2] < ($0 | 0))) {
     $2 = HEAP32[$3 + 112 >> 2] + ($0 << 2) | 0;
     break label$3;
    }
    $2 = HEAP32[$3 + 120 >> 2];
    if (!$2) {
     break label$2;
    }
    $4 = HEAP32[$3 + 124 >> 2];
    if (HEAP32[$3 + 128 >> 2] < ($0 | 0) | ($4 | 0) > ($0 | 0)) {
     break label$2;
    }
    $2 = ($0 - $4 << 2) + $2 | 0;
   }
   $4 = HEAP32[$2 >> 2];
   if ($4) {
    break label$1;
   }
  }
  HEAP32[$3 + 24 >> 2] = $0;
  $4 = HEAP32[HEAP32[$3 + 112 >> 2] >> 2];
 }
 $0 = $4;
 label$5 : {
  label$6 : {
   while (1) {
    $2 = HEAPU8[$0 | 0];
    if (!$2) {
     break label$6;
    }
    $0 = $0 + 1 | 0;
    if (($2 | 0) != 37) {
     continue;
    }
    break;
   }
   if (HEAPU8[$0 | 0] != 115) {
    break label$6;
   }
   HEAP32[$5 + 32 >> 2] = $3 + 24;
   siprintf($1, $4, $5 + 32 | 0);
   break label$5;
  }
  $0 = HEAP32[$3 + 32 >> 2];
  $6 = $0;
  $2 = HEAP32[$3 + 36 >> 2];
  $7 = $2;
  $2 = HEAP32[$3 + 40 >> 2];
  $8 = $2;
  $0 = HEAP32[$3 + 44 >> 2];
  $9 = $0;
  $0 = HEAP32[$3 + 24 >> 2];
  $10 = $0;
  $2 = HEAP32[$3 + 28 >> 2];
  $11 = $2;
  $0 = HEAP32[$3 + 52 >> 2];
  $2 = HEAP32[$3 + 48 >> 2];
  $3 = $2;
  $2 = $5;
  HEAP32[$2 + 24 >> 2] = $3;
  HEAP32[$2 + 28 >> 2] = $0;
  HEAP32[$2 + 16 >> 2] = $8;
  $0 = $9;
  HEAP32[$2 + 20 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $6;
  $0 = $7;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 >> 2] = $10;
  $0 = $11;
  HEAP32[$2 + 4 >> 2] = $0;
  siprintf($1, $4, $2);
 }
 __stack_pointer = $5 + 48 | 0;
}
function mbrtowc($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 $5 = $3 ? $3 : 34984;
 $3 = HEAP32[$5 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    if (!$1) {
     if ($3) {
      break label$3;
     }
     break label$1;
    }
    $4 = -2;
    if (!$2) {
     break label$1;
    }
    $8 = $0 ? $0 : $7 + 12 | 0;
    label$5 : {
     if ($3) {
      $0 = $2;
      break label$5;
     }
     $3 = HEAPU8[$1 | 0];
     $0 = $3 << 24 >> 24;
     if (($0 | 0) >= 0) {
      HEAP32[$8 >> 2] = $3;
      $4 = ($0 | 0) != 0;
      break label$1;
     }
     $3 = HEAP32[HEAP32[__pthread_self() + 172 >> 2] >> 2];
     $0 = HEAP8[$1 | 0];
     if (!$3) {
      HEAP32[$8 >> 2] = $0 & 57343;
      $4 = 1;
      break label$1;
     }
     $3 = ($0 & 255) - 194 | 0;
     if ($3 >>> 0 > 50) {
      break label$3;
     }
     $3 = HEAP32[($3 << 2) + 20912 >> 2];
     $0 = $2 - 1 | 0;
     if (!$0) {
      break label$2;
     }
     $1 = $1 + 1 | 0;
    }
    $6 = HEAPU8[$1 | 0];
    $9 = $6 >>> 3 | 0;
    if (($9 - 16 | ($3 >> 26) + $9) >>> 0 > 7) {
     break label$3;
    }
    while (1) {
     $0 = $0 - 1 | 0;
     $3 = $6 - 128 | $3 << 6;
     if (($3 | 0) >= 0) {
      HEAP32[$5 >> 2] = 0;
      HEAP32[$8 >> 2] = $3;
      $4 = $2 - $0 | 0;
      break label$1;
     }
     if (!$0) {
      break label$2;
     }
     $1 = $1 + 1 | 0;
     $6 = HEAPU8[$1 | 0];
     if (($6 & 192) == 128) {
      continue;
     }
     break;
    }
   }
   HEAP32[$5 >> 2] = 0;
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $4 = -1;
   break label$1;
  }
  HEAP32[$5 >> 2] = $3;
 }
 __stack_pointer = $7 + 16 | 0;
 return $4;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseIntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($2 + 8 | 0, $0, 1);
 label$1 : {
  if ($28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($2 + 8 | 0)) {
   break label$1;
  }
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, 69)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__IntegerLiteral_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2 + 8 | 0);
 }
 __stack_pointer = $2 + 16 | 0;
 return $3;
}
function jinit_2pass_quantizer($0) {
 var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 44) | 0;
 HEAP32[$0 + 484 >> 2] = $1;
 HEAP32[$1 + 40 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 126;
 HEAP32[$1 >> 2] = 127;
 if (HEAP32[$0 + 120 >> 2] != 3) {
  $2 = HEAP32[$0 >> 2];
  HEAP32[$2 + 20 >> 2] = 48;
  FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
 }
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 128) | 0, HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 while (1) {
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, 4096) | 0;
  HEAP32[HEAP32[$1 + 24 >> 2] + ($3 << 2) >> 2] = $2;
  $3 = $3 + 1 | 0;
  if (($3 | 0) != 32) {
   continue;
  }
  break;
 }
 HEAP32[$1 + 28 >> 2] = 1;
 label$3 : {
  if (HEAP32[$0 + 108 >> 2]) {
   $3 = HEAP32[$0 + 96 >> 2];
   label$5 : {
    if (($3 | 0) <= 7) {
     $2 = HEAP32[$0 >> 2];
     HEAP32[$2 + 20 >> 2] = 58;
     HEAP32[$2 + 24 >> 2] = 8;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
     break label$5;
    }
    if (($3 | 0) < 257) {
     break label$5;
    }
    $2 = HEAP32[$0 >> 2];
    HEAP32[$2 + 20 >> 2] = 59;
    HEAP32[$2 + 24 >> 2] = 256;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   }
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]]($0, 1, $3, 3) | 0;
   HEAP32[$1 + 20 >> 2] = $3;
   HEAP32[$1 + 16 >> 2] = $2;
   break label$3;
  }
  HEAP32[$1 + 16 >> 2] = 0;
 }
 if (HEAP32[$0 + 88 >> 2]) {
  HEAP32[$0 + 88 >> 2] = 2;
  wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, Math_imul(HEAP32[$0 + 112 >> 2], 6) + 12 | 0) | 0, HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  init_error_limit($0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ClosureTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 32);
 $5 = $1;
 $4 = HEAP32[$5 >> 2];
 $7 = $4;
 $1 = HEAP32[$5 + 4 >> 2];
 $9 = $1;
 $4 = $6;
 HEAP32[$4 + 40 >> 2] = $7;
 HEAP32[$4 + 44 >> 2] = $1;
 $5 = $2;
 $1 = HEAP32[$5 >> 2];
 $8 = $1;
 $4 = HEAP32[$5 + 4 >> 2];
 $10 = $4;
 $1 = $6;
 HEAP32[$1 + 32 >> 2] = $8;
 HEAP32[$1 + 36 >> 2] = $4;
 $5 = $3;
 $4 = HEAP32[$5 >> 2];
 $3 = $4;
 $1 = HEAP32[$5 + 4 >> 2];
 $2 = $1;
 $4 = $6;
 HEAP32[$4 + 24 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $7;
 $1 = $9;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 8 >> 2] = $8;
 $1 = $10;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 >> 2] = $3;
 $1 = $2;
 HEAP32[$4 + 4 >> 2] = $1;
 $3 = $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__ClosureTypeName_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $4 + 16 | 0, $4 + 8 | 0, $4);
 __stack_pointer = $4 + 48 | 0;
 return $3;
}
function h2v1_merged_upsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $2 = $2 << 2;
 $7 = HEAP32[$2 + HEAP32[$1 + 8 >> 2] >> 2];
 $5 = HEAP32[HEAP32[$1 + 4 >> 2] + $2 >> 2];
 $6 = HEAP32[HEAP32[$1 >> 2] + $2 >> 2];
 $1 = HEAP32[$3 >> 2];
 $2 = HEAP32[$0 + 336 >> 2];
 $3 = HEAP32[$0 + 476 >> 2];
 $11 = HEAP32[$3 + 28 >> 2];
 $12 = HEAP32[$3 + 24 >> 2];
 $13 = HEAP32[$3 + 20 >> 2];
 $14 = HEAP32[$3 + 16 >> 2];
 $3 = HEAP32[$0 + 112 >> 2];
 $9 = $3 >>> 1 | 0;
 if ($9) {
  while (1) {
   $4 = HEAPU8[$5 | 0] << 2;
   $3 = HEAP32[$13 + $4 >> 2];
   $8 = HEAPU8[$7 | 0] << 2;
   $10 = HEAP32[$12 + $8 >> 2];
   $15 = HEAP32[$4 + $11 >> 2];
   $4 = HEAPU8[$6 | 0];
   $8 = HEAP32[$8 + $14 >> 2];
   HEAP8[$1 | 0] = HEAPU8[($4 + $8 | 0) + $2 | 0];
   $10 = $10 + $15 >> 16;
   HEAP8[$1 + 1 | 0] = HEAPU8[($10 + $4 | 0) + $2 | 0];
   HEAP8[$1 + 2 | 0] = HEAPU8[($3 + $4 | 0) + $2 | 0];
   $4 = HEAPU8[$6 + 1 | 0];
   HEAP8[$1 + 3 | 0] = HEAPU8[($8 + $4 | 0) + $2 | 0];
   HEAP8[$1 + 4 | 0] = HEAPU8[($4 + $10 | 0) + $2 | 0];
   HEAP8[$1 + 5 | 0] = HEAPU8[($3 + $4 | 0) + $2 | 0];
   $1 = $1 + 6 | 0;
   $6 = $6 + 2 | 0;
   $7 = $7 + 1 | 0;
   $5 = $5 + 1 | 0;
   $9 = $9 - 1 | 0;
   if ($9) {
    continue;
   }
   break;
  }
  $3 = HEAP32[$0 + 112 >> 2];
 }
 if ($3 & 1) {
  $5 = HEAPU8[$5 | 0] << 2;
  $3 = HEAP32[$13 + $5 >> 2];
  $7 = HEAPU8[$7 | 0] << 2;
  $4 = HEAP32[$12 + $7 >> 2];
  $5 = HEAP32[$5 + $11 >> 2];
  $6 = HEAPU8[$6 | 0];
  HEAP8[$1 | 0] = HEAPU8[($6 + HEAP32[$7 + $14 >> 2] | 0) + $2 | 0];
  HEAP8[$1 + 1 | 0] = HEAPU8[(($4 + $5 >> 16) + $6 | 0) + $2 | 0];
  HEAP8[$1 + 2 | 0] = HEAPU8[($3 + $6 | 0) + $2 | 0];
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNestedName_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 if ($1) {
  $3 = HEAP32[$0 >> 2];
  label$2 : {
   if (HEAP32[$3 >> 2]) {
    $1 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NestedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29(HEAP32[$0 + 4 >> 2], $3, $2 + 12 | 0);
    HEAP32[HEAP32[$0 >> 2] >> 2] = $1;
    break label$2;
   }
   HEAP32[$3 >> 2] = $1;
  }
  $1 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2];
  if ($1) {
   HEAP8[$1 + 1 | 0] = 0;
  }
  $0 = HEAP32[HEAP32[$0 >> 2] >> 2] != 0;
 } else {
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 24 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d($1));
 $2 = HEAP32[$2 >> 2];
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 16 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d($3));
 $5 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $5;
 $1 = HEAP32[$3 + 4 >> 2];
 $5 = HEAP32[$3 >> 2];
 HEAP32[$4 >> 2] = $5;
 HEAP32[$4 + 4 >> 2] = $1;
 $3 = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $4 + 8 | 0, $2, $4);
 __stack_pointer = $4 + 32 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 24 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d($1));
 $2 = HEAP32[$2 >> 2];
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 16 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d($3));
 $5 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $5;
 $1 = HEAP32[$3 + 4 >> 2];
 $5 = HEAP32[$3 >> 2];
 HEAP32[$4 >> 2] = $5;
 HEAP32[$4 + 4 >> 2] = $1;
 $3 = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $4 + 8 | 0, $2, $4);
 __stack_pointer = $4 + 32 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 24 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b10_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b10_5d___type__29_29_20_5b10_5d($1));
 $2 = HEAP32[$2 >> 2];
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 16 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d($3));
 $5 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $5;
 $1 = HEAP32[$3 + 4 >> 2];
 $5 = HEAP32[$3 >> 2];
 HEAP32[$4 >> 2] = $5;
 HEAP32[$4 + 4 >> 2] = $1;
 $3 = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $4 + 8 | 0, $2, $4);
 __stack_pointer = $4 + 32 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 24 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d($1));
 $2 = HEAP32[$2 >> 2];
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 16 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d($3));
 $5 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $5;
 $1 = HEAP32[$3 + 4 >> 2];
 $5 = HEAP32[$3 >> 2];
 HEAP32[$4 >> 2] = $5;
 HEAP32[$4 + 4 >> 2] = $1;
 $3 = $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $4 + 8 | 0, $2, $4);
 __stack_pointer = $4 + 32 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23852);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 26568);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 12 | 0, $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 23378);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23852);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 28012);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 28015);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 $4 = HEAP32[$0 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = $4;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$3 + 28 >> 2] = $2;
 HEAP32[$3 + 24 >> 2] = $1;
 $1 = $5 - $4 | 0;
 HEAP32[$3 + 20 >> 2] = $1;
 $8 = $1 + $2 | 0;
 $9 = 2;
 $1 = $3 + 16 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
     while (1) {
      $4 = HEAP32[$3 + 12 >> 2];
      if (($8 | 0) == ($4 | 0)) {
       break label$3;
      }
      if (($4 | 0) <= -1) {
       break label$2;
      }
      $6 = HEAP32[$1 + 4 >> 2];
      $5 = $6 >>> 0 < $4 >>> 0;
      $7 = ($5 << 3) + $1 | 0;
      $6 = $4 - ($5 ? $6 : 0) | 0;
      HEAP32[$7 >> 2] = $6 + HEAP32[$7 >> 2];
      $7 = ($5 ? 12 : 4) + $1 | 0;
      HEAP32[$7 >> 2] = HEAP32[$7 >> 2] - $6;
      $8 = $8 - $4 | 0;
      $1 = $5 ? $1 + 8 | 0 : $1;
      $9 = $9 - $5 | 0;
      if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, $9 | 0, $3 + 12 | 0) | 0)) {
       continue;
      }
      break;
     }
    }
    if (($8 | 0) != -1) {
     break label$2;
    }
   }
   $1 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 28 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
   $0 = $2;
   break label$1;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  $0 = 0;
  if (($9 | 0) == 2) {
   break label$1;
  }
  $0 = $2 - HEAP32[$1 + 4 >> 2] | 0;
 }
 __stack_pointer = $3 + 32 | 0;
 $4 = $0;
 return $4 | 0;
}
function start_output_pass($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $1 = HEAP32[$0 + 452 >> 2];
 if (HEAP32[$1 + 16 >> 2]) {
  $6 = $1;
  label$2 : {
   label$3 : {
    if (!HEAP32[$0 + 160 >> 2] | (!HEAP32[$0 + 80 >> 2] | !HEAP32[$0 + 224 >> 2])) {
     break label$3;
    }
    $2 = HEAP32[$1 + 112 >> 2];
    if (!$2) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, Math_imul(HEAP32[$0 + 36 >> 2], 24)) | 0;
     HEAP32[$1 + 112 >> 2] = $2;
    }
    if (HEAP32[$0 + 36 >> 2] < 1) {
     break label$3;
    }
    $3 = HEAP32[$0 + 216 >> 2];
    while (1) {
     $1 = HEAP32[$3 + 80 >> 2];
     if (!$1 | !HEAPU16[$1 >> 1] | (!HEAPU16[$1 + 2 >> 1] | !HEAPU16[$1 + 16 >> 1])) {
      break label$3;
     }
     if (!HEAPU16[$1 + 4 >> 1] | (!HEAPU16[$1 + 32 >> 1] | !HEAPU16[$1 + 18 >> 1])) {
      break label$3;
     }
     $1 = HEAP32[$0 + 160 >> 2] + ($4 << 8) | 0;
     if (HEAP32[$1 >> 2] < 0) {
      break label$3;
     }
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     $7 = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     $8 = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     $9 = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     $10 = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     $5 = HEAP32[$1 + 20 >> 2] | ($7 | $8 | $9 | $10) ? 1 : $5;
     $3 = $3 + 88 | 0;
     $2 = $2 + 24 | 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) < HEAP32[$0 + 36 >> 2]) {
      continue;
     }
     break;
    }
    $1 = 143;
    if ($5) {
     break label$2;
    }
   }
   $1 = 139;
  }
  HEAP32[$6 + 12 >> 2] = $1;
 }
 HEAP32[$0 + 156 >> 2] = 0;
}
function alloc_small($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 4 >> 2];
 if ($2 >>> 0 >= 999999985) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = 56;
  HEAP32[$3 + 24 >> 2] = 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $4 = $2 & 7;
 $4 = $4 ? 8 - $4 | 0 : 0;
 if ($1 >>> 0 >= 2) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = 15;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $4 = $2 + $4 | 0;
 $8 = ($1 << 2) + $7 | 0;
 $2 = HEAP32[$8 + 52 >> 2];
 label$3 : {
  if ($2) {
   while (1) {
    $5 = $2;
    if (HEAPU32[$2 + 8 >> 2] >= $4 >>> 0) {
     $1 = $5;
     break label$3;
    }
    $2 = HEAP32[$5 >> 2];
    if ($2) {
     continue;
    }
    break;
   }
  }
  $2 = 999999984 - $4 | 0;
  $1 = HEAP32[($1 << 2) + ($5 ? 18196 : 18188) >> 2];
  $2 = $1 >>> 0 > $2 >>> 0 ? $2 : $1;
  $3 = $4 + $2 | 0;
  $6 = $3 + 16 | 0;
  $1 = jpeg_get_small($0, $6);
  if (!$1) {
   while (1) {
    $1 = $2 >>> 1 | 0;
    if ($2 >>> 0 <= 99) {
     $3 = HEAP32[$0 >> 2];
     HEAP32[$3 + 20 >> 2] = 56;
     HEAP32[$3 + 24 >> 2] = 2;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
    }
    $2 = $1;
    $3 = $1 + $4 | 0;
    $6 = $3 + 16 | 0;
    $1 = jpeg_get_small($0, $6);
    if (!$1) {
     continue;
    }
    break;
   }
  }
  HEAP32[$7 + 76 >> 2] = HEAP32[$7 + 76 >> 2] + $6;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  if (!$5) {
   HEAP32[$8 + 52 >> 2] = $1;
   break label$3;
  }
  HEAP32[$5 >> 2] = $1;
 }
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = $4 + $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - $4;
 return ($0 + $1 | 0) + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 16 | 0;
 __stack_pointer = $6;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 32);
 $1 = HEAP32[$1 >> 2];
 $7 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$6 + 8 >> 2] = $2;
 HEAP32[$6 + 12 >> 2] = $7;
 $5 = HEAP32[$5 >> 2];
 $4 = HEAPU8[$4 | 0];
 $3 = HEAP32[$3 >> 2];
 HEAP32[$6 >> 2] = $2;
 HEAP32[$6 + 4 >> 2] = $7;
 $3 = $28anonymous_20namespace_29__itanium_demangle__FunctionType__FunctionType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $6, $3, $4, $5);
 __stack_pointer = $6 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 $0 = $0 + 8 | 0;
 $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($0);
 if (($28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($0) - $5 | 0) + 1 >>> 0 >= 33) {
  $4 = $2 + 96 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 32) {
    $3 = HEAP8[($0 | 1) + $5 | 0];
    $6 = $3 + ($3 - 48 >>> 0 < 10 ? -48 : -87) | 0;
    $3 = HEAP8[$0 + $5 | 0];
    HEAP8[$4 | 0] = $6 + ($3 + ($3 - 48 >>> 0 < 10 ? 0 : 9) << 4);
    $4 = $4 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 96 | 0, $4);
  memset($2 + 48 | 0, 0, 40);
  $0 = HEAP32[$2 + 100 >> 2];
  $3 = HEAP32[$2 + 96 >> 2];
  HEAP32[$2 + 16 >> 2] = $3;
  HEAP32[$2 + 20 >> 2] = $0;
  $3 = HEAP32[$2 + 108 >> 2];
  $0 = HEAP32[$2 + 104 >> 2];
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 28 >> 2] = $3;
  $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 40 | 0, $2 + 48 | 0, snprintf($2 + 48 | 0, 40, 24312, $2 + 16 | 0) + ($2 + 48 | 0) | 0);
  $3 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 __stack_pointer = $2 + 112 | 0;
}
function next_marker($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 $5 = HEAP32[$1 >> 2];
 while (1) {
  if (!$2) {
   if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
    return 0;
   }
   $5 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
  }
  $3 = $5 + 1 | 0;
  $2 = $2 - 1 | 0;
  if (HEAPU8[$5 | 0] != 255) {
   while (1) {
    $4 = HEAP32[$0 + 464 >> 2];
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
    HEAP32[$1 + 4 >> 2] = $2;
    HEAP32[$1 >> 2] = $3;
    if (!$2) {
     if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
      return 0;
     }
     $3 = HEAP32[$1 >> 2];
     $2 = HEAP32[$1 + 4 >> 2];
    }
    $2 = $2 - 1 | 0;
    $4 = HEAPU8[$3 | 0];
    $3 = $3 + 1 | 0;
    if (($4 | 0) != 255) {
     continue;
    }
    break;
   }
  }
  while (1) {
   if (!$2) {
    if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
     return 0;
    }
    $3 = HEAP32[$1 >> 2];
    $2 = HEAP32[$1 + 4 >> 2];
   }
   $2 = $2 - 1 | 0;
   $4 = HEAPU8[$3 | 0];
   $5 = $3 + 1 | 0;
   $3 = $5;
   if (($4 | 0) == 255) {
    continue;
   }
   break;
  }
  if (!$4) {
   $3 = HEAP32[$0 + 464 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 2;
   HEAP32[$1 + 4 >> 2] = $2;
   HEAP32[$1 >> 2] = $5;
   continue;
  }
  break;
 }
 $3 = HEAP32[HEAP32[$0 + 464 >> 2] + 24 >> 2];
 if ($3) {
  $6 = HEAP32[$0 >> 2];
  HEAP32[$6 + 24 >> 2] = $3;
  HEAP32[$6 + 20 >> 2] = 119;
  HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
  HEAP32[HEAP32[$0 + 464 >> 2] + 24 >> 2] = 0;
 }
 HEAP32[$0 + 440 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = $5;
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23466);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 8 | 0, $1);
 if (($28anonymous_20namespace_29__itanium_demangle__OutputStream__back_28_29_20const($1) | 0) == 62) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 24984);
  $5 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $5;
  HEAP32[$2 + 12 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 23454);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function pop_arg($0, $1, $2, $3) {
 label$1 : {
  if ($1 >>> 0 > 20) {
   break label$1;
  }
  label$2 : {
   switch ($1 - 9 | 0) {
   case 0:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
    return;
   case 1:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $1 = HEAP32[$1 >> 2];
    $2 = $1 >> 31;
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = $2;
    return;
   case 2:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $2 = HEAP32[$1 >> 2];
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = 0;
    return;
   case 3:
    $1 = HEAP32[$2 >> 2] + 7 & -8;
    HEAP32[$2 >> 2] = $1 + 8;
    $2 = HEAP32[$1 + 4 >> 2];
    $1 = HEAP32[$1 >> 2];
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = $2;
    return;
   case 4:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $2 = HEAP16[$1 >> 1];
    $1 = $2 >> 31;
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $1;
    return;
   case 5:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $1 = HEAPU16[$1 >> 1];
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = 0;
    return;
   case 6:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $2 = HEAP8[$1 | 0];
    $1 = $2 >> 31;
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $1;
    return;
   case 7:
    $1 = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $1 + 4;
    $1 = HEAPU8[$1 | 0];
    HEAP32[$0 >> 2] = $1;
    HEAP32[$0 + 4 >> 2] = 0;
    return;
   case 8:
    $1 = HEAP32[$2 >> 2] + 7 & -8;
    HEAP32[$2 >> 2] = $1 + 8;
    HEAPF64[$0 >> 3] = HEAPF64[$1 >> 3];
    return;
   case 9:
    break label$2;
   default:
    break label$1;
   }
  }
  FUNCTION_TABLE[$3 | 0]($0, $2);
 }
}
function __shgetc($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = HEAP32[$0 + 116 >> 2];
 $6 = $2;
 label$1 : {
  $1 = HEAP32[$0 + 112 >> 2];
  $4 = $1;
  label$2 : {
   if ($2 | $1) {
    $2 = HEAP32[$0 + 120 >> 2];
    $3 = $2;
    $1 = HEAP32[$0 + 124 >> 2];
    $2 = $6;
    if (($1 | 0) > ($2 | 0) ? 1 : ($1 | 0) >= ($2 | 0) ? $3 >>> 0 >= $4 >>> 0 : 0) {
     break label$2;
    }
   }
   $9 = __uflow($0);
   if (($9 | 0) > -1) {
    break label$1;
   }
  }
  HEAP32[$0 + 104 >> 2] = 0;
  return -1;
 }
 $11 = $0;
 $7 = HEAP32[$0 + 8 >> 2];
 $1 = HEAP32[$0 + 116 >> 2];
 $6 = $1;
 $3 = HEAP32[$0 + 112 >> 2];
 $4 = $3;
 $8 = $7;
 label$4 : {
  if (!($1 | $3)) {
   break label$4;
  }
  $1 = HEAP32[$0 + 120 >> 2];
  $8 = $1 ^ -1;
  $3 = HEAP32[$0 + 124 >> 2];
  $1 = $3 ^ -1;
  $2 = $1;
  $1 = $6;
  $5 = $1 + $2 | 0;
  $2 = $8;
  $3 = $4;
  $4 = $2 + $3 | 0;
  $5 = $2 >>> 0 > $4 >>> 0 ? $5 + 1 | 0 : $5;
  $6 = $5;
  $10 = HEAP32[$0 + 4 >> 2];
  $3 = $7 - $10 | 0;
  $5 = $3 >> 31;
  $1 = $4;
  $2 = $3;
  $3 = $5;
  $5 = $6;
  $8 = $7;
  if (($3 | 0) < ($5 | 0) ? 1 : ($3 | 0) <= ($5 | 0) ? $1 >>> 0 >= $2 >>> 0 : 0) {
   break label$4;
  }
  $8 = $4 + $10 | 0;
 }
 HEAP32[$11 + 104 >> 2] = $8;
 $6 = HEAP32[$0 + 4 >> 2];
 if ($7) {
  $5 = HEAP32[$0 + 124 >> 2];
  $4 = $5;
  $1 = HEAP32[$0 + 120 >> 2];
  $2 = $1;
  $1 = ($7 - $6 | 0) + 1 | 0;
  $5 = $1 >> 31;
  $3 = $1;
  $2 = $2 + $1 | 0;
  $1 = $5;
  $5 = $4;
  $4 = $1 + $5 | 0;
  HEAP32[$0 + 120 >> 2] = $2;
  $4 = $3 >>> 0 > $2 >>> 0 ? $4 + 1 | 0 : $4;
  HEAP32[$0 + 124 >> 2] = $4;
 }
 $0 = $6 - 1 | 0;
 if (HEAPU8[$0 | 0] != ($9 | 0)) {
  HEAP8[$0 | 0] = $9;
 }
 return $9;
}
function void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___construct_std____2__pair_int_20const_2c_20arIset__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2, $3, $4) {
 void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____construct_std____2__pair_int_20const_2c_20arIset__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, std____2__piecewise_construct_t_20const__20std____2__forward_std____2__piecewise_construct_t_20const___28std____2__remove_reference_std____2__piecewise_construct_t_20const____type__29($2), std____2__tuple_int_20const_____20std____2__forward_std____2__tuple_int_20const___20__28std____2__remove_reference_std____2__tuple_int_20const___20___type__29($3), std____2__tuple_____20std____2__forward_std____2__tuple___20__28std____2__remove_reference_std____2__tuple___20___type__29($4));
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 $0 = $0 + 8 | 0;
 $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($0);
 if (($28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($0) - $5 | 0) + 1 >>> 0 >= 17) {
  $4 = $2 + 72 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 16) {
    $3 = HEAP8[($0 | 1) + $5 | 0];
    $6 = $3 + ($3 - 48 >>> 0 < 10 ? -48 : -87) | 0;
    $3 = HEAP8[$0 + $5 | 0];
    HEAP8[$4 | 0] = $6 + ($3 + ($3 - 48 >>> 0 < 10 ? 0 : 9) << 4);
    $4 = $4 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 72 | 0, $4);
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 72 >> 3];
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 24 | 0, $2 + 32 | 0, snprintf($2 + 32 | 0, 32, 24196, $2 + 16 | 0) + ($2 + 32 | 0) | 0);
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 12 >> 2] = $0;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 __stack_pointer = $2 + 80 | 0;
}
function std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___operator_5b_5d_28int_20const__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__tuple_int_20const___20std____2__forward_as_tuple_int_20const___28int_20const__29($1), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 std____2__tuple___20std____2__forward_as_tuple___28_29();
 std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20bool__20std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____emplace_unique_key_args_int_2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28int_20const__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($2 + 24 | 0, $0, $1, 9300, $2 + 16 | 0, $2 + 8 | 0);
 $1 = std____2____hash_value_type_int_2c_20arIset_____get_value_28_29(std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______operator___28_29_20const($2 + 24 | 0));
 __stack_pointer = $2 + 32 | 0;
 return $1 + 4 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 $4 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    switch (HEAP32[$0 + 8 >> 2]) {
    case 0:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 56 | 0, 29392);
     break label$2;
    case 1:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 48 | 0, 29407);
     break label$2;
    case 2:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 29425);
     break label$2;
    case 3:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 29496);
     break label$2;
    case 4:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 29546);
     break label$2;
    case 5:
     break label$3;
    default:
     break label$1;
    }
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 29596);
  }
  $3 = HEAP32[$0 >> 2];
  $5 = HEAP32[$0 + 4 >> 2];
  $0 = $3;
  $3 = $4;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 __stack_pointer = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 if (HEAPU8[$0 + 12 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23240);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = $4;
  HEAP32[$2 + 20 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 26676);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 if (HEAPU8[$0 + 13 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 26683);
  $4 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = $4;
  HEAP32[$2 + 4 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 $4 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    switch (HEAP32[$0 + 8 >> 2]) {
    case 0:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 56 | 0, 29392);
     break label$2;
    case 1:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 48 | 0, 29407);
     break label$2;
    case 2:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 30288);
     break label$2;
    case 3:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 30300);
     break label$2;
    case 4:
     $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 30313);
     break label$2;
    case 5:
     break label$3;
    default:
     break label$1;
    }
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 30326);
  }
  $3 = HEAP32[$0 >> 2];
  $5 = HEAP32[$0 + 4 >> 2];
  $0 = $3;
  $3 = $4;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 __stack_pointer = $2 - -64 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___ScopedTemplateParamList__ScopedTemplateParamList_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = $1 + 332 | 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___size_28_29_20const($1), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_29($0 + 8 | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___20const__29($1, $2 + 12 | 0);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function free_pool($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 label$1 : {
  if ($1 >>> 0 >= 2) {
   $2 = HEAP32[$0 >> 2];
   HEAP32[$2 + 24 >> 2] = $1;
   HEAP32[$2 + 20 >> 2] = 15;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
   break label$1;
  }
  if (($1 | 0) != 1) {
   break label$1;
  }
  $2 = HEAP32[$3 + 68 >> 2];
  if ($2) {
   while (1) {
    if (HEAP32[$2 + 40 >> 2]) {
     HEAP32[$2 + 40 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[$2 + 56 >> 2]]($0, $2 + 48 | 0);
    }
    $2 = HEAP32[$2 + 44 >> 2];
    if ($2) {
     continue;
    }
    break;
   }
  }
  HEAP32[$3 + 68 >> 2] = 0;
  $2 = HEAP32[$3 + 72 >> 2];
  if ($2) {
   while (1) {
    if (HEAP32[$2 + 40 >> 2]) {
     HEAP32[$2 + 40 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[$2 + 56 >> 2]]($0, $2 + 48 | 0);
    }
    $2 = HEAP32[$2 + 44 >> 2];
    if ($2) {
     continue;
    }
    break;
   }
  }
  HEAP32[$3 + 72 >> 2] = 0;
 }
 $5 = ($1 << 2) + $3 | 0;
 $1 = $5 + 60 | 0;
 $2 = HEAP32[$1 >> 2];
 HEAP32[$5 + 60 >> 2] = 0;
 if ($2) {
  while (1) {
   $1 = HEAP32[$2 >> 2];
   $4 = (HEAP32[$2 + 4 >> 2] + HEAP32[$2 + 8 >> 2] | 0) + 16 | 0;
   jpeg_free_large($0, $2, $4);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] - $4;
   $2 = $1;
   if ($2) {
    continue;
   }
   break;
  }
 }
 $1 = $5 + 52 | 0;
 $2 = HEAP32[$1 >> 2];
 HEAP32[$5 + 52 >> 2] = 0;
 if ($2) {
  while (1) {
   $1 = HEAP32[$2 >> 2];
   $4 = (HEAP32[$2 + 4 >> 2] + HEAP32[$2 + 8 >> 2] | 0) + 16 | 0;
   jpeg_free_small($0, $2, $4);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] - $4;
   $2 = $1;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseExpr_28_29($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0));
 HEAP32[$2 + 12 >> 2] = $3;
 if ($3) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PrefixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2 + 12 | 0);
 } else {
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  if (HEAPU8[$0 + 16 | 0]) {
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 91);
   $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 93);
   break label$1;
  }
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 46);
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 }
 $3 = HEAP32[$0 + 12 >> 2];
 if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($3) - 73 & 255) >>> 0 >= 2) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 28124);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
  $3 = HEAP32[$0 + 12 >> 2];
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($3, $1);
 __stack_pointer = $2 + 16 | 0;
}
function scalbnl($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 80 | 0;
 __stack_pointer = $6;
 label$1 : {
  if (($5 | 0) >= 16384) {
   __multf3($6 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
   $7 = HEAP32[$6 + 40 >> 2];
   $3 = $7;
   $4 = HEAP32[$6 + 44 >> 2];
   $1 = HEAP32[$6 + 32 >> 2];
   $7 = HEAP32[$6 + 36 >> 2];
   $2 = $7;
   if (($5 | 0) < 32767) {
    $5 = $5 - 16383 | 0;
    break label$1;
   }
   $7 = $2;
   __multf3($6 + 16 | 0, $1, $7, $3, $4, 0, 0, 0, 2147352576);
   $5 = (($5 | 0) < 49149 ? $5 : 49149) - 32766 | 0;
   $2 = HEAP32[$6 + 24 >> 2];
   $3 = $2;
   $4 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 16 >> 2];
   $2 = HEAP32[$6 + 20 >> 2];
   break label$1;
  }
  if (($5 | 0) > -16383) {
   break label$1;
  }
  __multf3($6 - -64 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
  $7 = HEAP32[$6 + 72 >> 2];
  $3 = $7;
  $4 = HEAP32[$6 + 76 >> 2];
  $1 = HEAP32[$6 + 64 >> 2];
  $7 = HEAP32[$6 + 68 >> 2];
  $2 = $7;
  if (($5 | 0) > -32765) {
   $5 = $5 + 16382 | 0;
   break label$1;
  }
  $7 = $2;
  __multf3($6 + 48 | 0, $1, $7, $3, $4, 0, 0, 0, 65536);
  $5 = (($5 | 0) > -49146 ? $5 : -49146) + 32764 | 0;
  $2 = HEAP32[$6 + 56 >> 2];
  $3 = $2;
  $4 = HEAP32[$6 + 60 >> 2];
  $1 = HEAP32[$6 + 48 >> 2];
  $2 = HEAP32[$6 + 52 >> 2];
 }
 $7 = $5 + 16383 << 16;
 __multf3($6, $1, $2, $3, $4, 0, 0, 0, $7);
 $2 = HEAP32[$6 + 12 >> 2];
 $7 = HEAP32[$6 + 8 >> 2];
 $1 = $7;
 $7 = $0;
 HEAP32[$7 + 8 >> 2] = $1;
 HEAP32[$7 + 12 >> 2] = $2;
 $7 = HEAP32[$6 + 4 >> 2];
 $2 = HEAP32[$6 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $7;
 __stack_pointer = $6 + 80 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 $0 = $0 + 8 | 0;
 $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($0);
 if (($28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($0) - $5 | 0) + 1 >>> 0 >= 9) {
  $4 = $2 + 56 | 0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 8) {
    $3 = HEAP8[($0 | 1) + $5 | 0];
    $6 = $3 + ($3 - 48 >>> 0 < 10 ? -48 : -87) | 0;
    $3 = HEAP8[$0 + $5 | 0];
    HEAP8[$4 | 0] = $6 + ($3 + ($3 - 48 >>> 0 < 10 ? 0 : 9) << 4);
    $4 = $4 + 1 | 0;
    $0 = $0 + 2 | 0;
    continue;
   }
   break;
  }
  void_20std____2__reverse_char___28char__2c_20char__29($2 + 56 | 0, $4);
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAPF64[$2 + 16 >> 3] = HEAPF32[$2 + 56 >> 2];
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 24 | 0, $2 + 32 | 0, snprintf($2 + 32 | 0, 24, 24080, $2 + 16 | 0) + ($2 + 32 | 0) | 0);
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 12 >> 2] = $0;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 __stack_pointer = $2 - -64 | 0;
}
function arLogv($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1 : {
  if (!HEAPU8[$2 | 0] | (!$2 | HEAP32[8316] > ($1 | 0))) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP32[$4 + 8 >> 2] = $0;
  $3 = 0;
  $5 = vsnprintf(0, 0, $2, $0);
  if (!$5) {
   break label$1;
  }
  if ($1 >>> 0 <= 3) {
   $3 = strlen(HEAP32[($1 << 2) + 8752 >> 2]) + 3 | 0;
  }
  $6 = $3 + $5 | 0;
  $7 = $6 + 1 | 0;
  $0 = dlmalloc($7);
  if ($3) {
   HEAP32[$4 >> 2] = HEAP32[($1 << 2) + 8752 >> 2];
   snprintf($0, $3 + 1 | 0, 5459, $4);
  }
  vsnprintf($3 + $0 | 0, $5 + 1 | 0, $2, HEAP32[$4 + 12 >> 2]);
  $2 = HEAP32[8452];
  label$5 : {
   if ($2) {
    if (!HEAP32[8453]) {
     FUNCTION_TABLE[$2 | 0]($0);
     break label$5;
    }
    if ((__pthread_self_internal() | 0) != HEAP32[8454]) {
     $1 = HEAP32[8455];
     if (!$1) {
      break label$5;
     }
     $2 = HEAP32[8457];
     $3 = HEAPU8[33824] ? 4096 : 0;
     if ($2 >>> 0 >= $3 >>> 0) {
      break label$5;
     }
     $1 = $1 + $2 | 0;
     if (($3 - $2 | 0) - 4 >>> 0 >= $6 >>> 0) {
      strncpy($1, $0, $7);
      HEAP32[8457] = $2 + $6;
      break label$5;
     }
     HEAP8[$1 | 0] = 46;
     HEAP8[$1 + 1 | 0] = 46;
     HEAP8[$1 + 2 | 0] = 46;
     HEAP8[$1 + 3 | 0] = 0;
     HEAP32[8457] = $3;
     break label$5;
    }
    if (HEAP32[8457]) {
     FUNCTION_TABLE[HEAP32[8452]](HEAP32[8455]);
     HEAP32[8457] = 0;
    }
    FUNCTION_TABLE[HEAP32[8452]]($0);
    break label$5;
   }
   fputs($0, HEAP32[4956]);
  }
  dlfree($0);
 }
 __stack_pointer = $4 + 16 | 0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20______hash_table_28_29($0) {
 std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____deallocate_node_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0, HEAP32[std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___first_28_29($0 + 8 | 0) >> 2]);
 std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20____unique_ptr_28_29($0);
 return $0;
}
function __extenddftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $8 = __stack_pointer - 16 | 0;
 __stack_pointer = $8;
 wasm2js_scratch_store_f64(+$1);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $7 = wasm2js_scratch_load_i32(0) | 0;
 $11 = $2;
 $6 = $2 & 2147483647;
 $4 = 1048576;
 $4 = $6 - $4 | 0;
 $5 = $7;
 label$1 : {
  if (($4 | 0) == 2145386495 | $4 >>> 0 < 2145386495) {
   $2 = $5;
   $4 = $2 << 28;
   $9 = $4;
   $4 = $6;
   $2 = $4 >>> 4 | 0;
   $4 = ($4 & 15) << 28 | $5 >>> 4;
   $10 = $4;
   $3 = $2 + 1006632960 | 0;
   break label$1;
  }
  $3 = $6;
  if (($3 | 0) == 2146435072 | $3 >>> 0 > 2146435072) {
   $2 = $7;
   $3 = $2 << 28;
   $9 = $3;
   $3 = $11;
   $2 = $3 >>> 4 | 0;
   $3 = ($3 & 15) << 28 | $7 >>> 4;
   $10 = $3;
   $2 = $2 | 2147418112;
   $3 = $2;
   break label$1;
  }
  $2 = $6;
  if (!($2 | $5)) {
   $3 = 0;
   break label$1;
  }
  $7 = $6 >>> 0 < 1 ? Math_clz32($7) + 32 | 0 : Math_clz32($6);
  __ashlti3($8, $5, $6, 0, 0, $7 + 49 | 0);
  $4 = $8;
  $3 = HEAP32[$4 >> 2];
  $12 = $3;
  $2 = HEAP32[$4 + 4 >> 2];
  $9 = $2;
  $3 = HEAP32[$4 + 12 >> 2];
  $2 = HEAP32[$4 + 8 >> 2];
  $4 = $2;
  $2 = $3 ^ 65536;
  $5 = $2;
  $2 = 0;
  $10 = $2 | $4;
  $3 = 15372 - $7 | 0;
  $4 = $3 << 16;
  $3 = $4;
  $4 = $5;
  $3 = $3 | $4;
 }
 $6 = $3;
 $2 = $0;
 HEAP32[$2 >> 2] = $12;
 $3 = $9;
 HEAP32[$2 + 4 >> 2] = $3;
 $3 = $11;
 $2 = $3 & -2147483648;
 $4 = $2;
 $2 = 0;
 $5 = $10;
 $3 = $5;
 $2 = $2 | $3;
 $3 = $0;
 HEAP32[$3 + 8 >> 2] = $2;
 $2 = $6;
 $4 = $2 | $4;
 HEAP32[$3 + 12 >> 2] = $4;
 __stack_pointer = $8 + 16 | 0;
}
function EmscriptenBindingInitializer_constant_bindings__EmscriptenBindingInitializer_constant_bindings_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29(9234, 13);
 void_20emscripten__function_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const__2c_20nftMarker_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_29(9240, 14);
 $2 = emscripten__value_object_nftMarker___value_object_28char_20const__29($1 + 8 | 0, 9255);
 emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29(emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29(emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29(emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29(emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29($2, 9265, 0), 9271, 4), 9278, 8), 9282, 12), 9292, 16);
 emscripten__value_object_nftMarker____value_object_28_29($2);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}
function jpeg_start_decompress($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      $1 = HEAP32[$0 + 20 >> 2];
      switch ($1 - 202 | 0) {
      case 2:
       break label$2;
      case 1:
       break label$4;
      case 0:
       break label$5;
      default:
       break label$3;
      }
     }
     jinit_master_decompress($0);
     if (HEAP32[$0 + 64 >> 2]) {
      HEAP32[$0 + 20 >> 2] = 207;
      return 1;
     }
     HEAP32[$0 + 20 >> 2] = 203;
    }
    label$7 : {
     if (!HEAP32[HEAP32[$0 + 460 >> 2] + 16 >> 2]) {
      break label$7;
     }
     $1 = HEAP32[$0 + 8 >> 2];
     while (1) {
      if ($1) {
       FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
      }
      label$10 : {
       $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 460 >> 2] >> 2]]($0) | 0;
       switch ($2 | 0) {
       case 0:
        break label$1;
       case 2:
        break label$7;
       default:
        break label$10;
       }
      }
      $1 = HEAP32[$0 + 8 >> 2];
      if (!$1 | ($2 & -3) != 1) {
       continue;
      }
      $2 = HEAP32[$1 + 4 >> 2] + 1 | 0;
      HEAP32[$1 + 4 >> 2] = $2;
      $3 = HEAP32[$1 + 8 >> 2];
      if (($3 | 0) > ($2 | 0)) {
       continue;
      }
      HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 332 >> 2] + $3;
      continue;
     }
    }
    HEAP32[$0 + 152 >> 2] = HEAP32[$0 + 144 >> 2];
    break label$2;
   }
   $2 = HEAP32[$0 >> 2];
   HEAP32[$2 + 24 >> 2] = $1;
   HEAP32[$2 + 20 >> 2] = 21;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
  }
  $2 = output_pass_setup($0);
 }
 return $2 | 0;
}
function jinit_d_coef_controller($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 116) | 0;
 HEAP32[$0 + 452 >> 2] = $2;
 HEAP32[$2 + 112 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 137;
 HEAP32[$2 >> 2] = 138;
 if ($1) {
  if (HEAP32[$0 + 36 >> 2] >= 1) {
   $5 = $2 + 72 | 0;
   $1 = HEAP32[$0 + 216 >> 2];
   while (1) {
    $4 = HEAP32[$1 + 12 >> 2];
    $6 = HEAP32[$0 + 224 >> 2];
    $7 = HEAP32[HEAP32[$0 + 4 >> 2] + 20 >> 2];
    wasm2js_i32$0 = ($3 << 2) + $5 | 0, wasm2js_i32$1 = FUNCTION_TABLE[$7 | 0]($0, 1, 1, jround_up(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 8 >> 2]), jround_up(HEAP32[$1 + 32 >> 2], HEAP32[$1 + 12 >> 2]), $6 ? Math_imul($4, 3) : $4) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1 = $1 + 88 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 12 >> 2] = 139;
  HEAP32[$2 + 4 >> 2] = 140;
  HEAP32[$2 + 16 >> 2] = $2 + 72;
  return;
 }
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2]]($0, 1, 1280) | 0;
 HEAP32[$2 + 32 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = $1 + 1152;
 HEAP32[$2 + 64 >> 2] = $1 + 1024;
 HEAP32[$2 + 60 >> 2] = $1 + 896;
 HEAP32[$2 + 56 >> 2] = $1 + 768;
 HEAP32[$2 + 52 >> 2] = $1 + 640;
 HEAP32[$2 + 48 >> 2] = $1 + 512;
 HEAP32[$2 + 44 >> 2] = $1 + 384;
 HEAP32[$2 + 40 >> 2] = $1 + 256;
 HEAP32[$2 + 36 >> 2] = $1 + 128;
 if (!HEAP32[$0 + 436 >> 2]) {
  memset($1, 0, 1280);
 }
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 141;
 HEAP32[$2 + 4 >> 2] = 142;
}
function create_colorindex($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = HEAP32[$0 + 484 >> 2];
 $2 = HEAP32[$0 + 88 >> 2];
 $1 = ($2 | 0) == 1;
 HEAP32[$3 + 28 >> 2] = $1;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]]($0, 1, $1 ? 766 : 256, HEAP32[$0 + 120 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
 if (HEAP32[$0 + 120 >> 2] >= 1) {
  $6 = HEAP32[$3 + 20 >> 2];
  $8 = ($2 | 0) != 1;
  while (1) {
   $2 = $7 << 2;
   $1 = HEAP32[($3 + $2 | 0) + 32 >> 2];
   $6 = ($6 | 0) / ($1 | 0) | 0;
   if (!$8) {
    $4 = HEAP32[$3 + 24 >> 2] + $2 | 0;
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 255;
   }
   $9 = $1 - 1 | 0;
   $10 = $9 << 1;
   $4 = ($1 + 254 | 0) / ($10 | 0) | 0;
   $5 = HEAP32[HEAP32[$3 + 24 >> 2] + $2 >> 2];
   $1 = 0;
   $2 = 0;
   while (1) {
    if (($2 | 0) > ($4 | 0)) {
     while (1) {
      $1 = $1 + 1 | 0;
      $4 = (Math_imul($1 << 1 | 1, 255) + $9 | 0) / ($10 | 0) | 0;
      if (($4 | 0) < ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    HEAP8[$2 + $5 | 0] = Math_imul($1, $6);
    $2 = $2 + 1 | 0;
    if (($2 | 0) != 256) {
     continue;
    }
    break;
   }
   if (!$8) {
    $1 = 1;
    while (1) {
     HEAP8[$5 - $1 | 0] = HEAPU8[$5 | 0];
     HEAP8[($1 + $5 | 0) + 255 | 0] = HEAPU8[$5 + 255 | 0];
     $1 = $1 + 1 | 0;
     if (($1 | 0) != 256) {
      continue;
     }
     break;
    }
   }
   $7 = $7 + 1 | 0;
   if (($7 | 0) < HEAP32[$0 + 120 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 24 | 0, $0 + 16 | 0, 1);
  $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($2 + 16 | 0, $0, $1);
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$2 + 20 >> 2], $1)) {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$2 + 20 >> 2], $1)) {
     break label$2;
    }
   }
   $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 23378);
   $4 = HEAP32[$0 + 4 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
  }
  $0 = HEAP32[$2 + 20 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 __stack_pointer = $2 + 32 | 0;
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___reset_28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = HEAP32[std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 if ($2) {
  std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___operator_28_29_28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____29(std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___second_28_29($0), $2);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseNumber_28bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = HEAP32[$1 >> 2];
 if ($2) {
  $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($1, 110);
 }
 label$2 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1)) {
   break label$2;
  }
  $2 = HEAP32[$1 >> 2];
  if (HEAP8[$2 | 0] - 48 >>> 0 >= 10) {
   break label$2;
  }
  while (1) {
   if (!(!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1) | HEAP8[$2 | 0] - 48 >>> 0 > 9)) {
    $2 = $2 + 1 | 0;
    HEAP32[$1 >> 2] = $2;
    continue;
   }
   break;
  }
  $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($0, $3, $2);
  return;
 }
 $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28_29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5) {
 return $28anonymous_20namespace_29__itanium_demangle__NewExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20bool__2c_20bool__29($0 + 416 | 0, $1, $2, $3, bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($4), bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($5));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20bool__2c_20bool__29($0, $1, $2, $3, $4, $5) {
 return $28anonymous_20namespace_29__itanium_demangle__NewExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NewExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool__2c_20bool___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___2c_20bool__2c_20bool__29($0 + 416 | 0, $1, $2, $3, bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($4), bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($5));
}
function memset($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = $0 + $2 | 0;
  HEAP8[$3 - 1 | 0] = $1;
  HEAP8[$0 | 0] = $1;
  if ($2 >>> 0 < 3) {
   break label$1;
  }
  HEAP8[$3 - 2 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1;
  HEAP8[$3 - 3 | 0] = $1;
  HEAP8[$0 + 2 | 0] = $1;
  if ($2 >>> 0 < 7) {
   break label$1;
  }
  HEAP8[$3 - 4 | 0] = $1;
  HEAP8[$0 + 3 | 0] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  $4 = 0 - $0 & 3;
  $3 = $4 + $0 | 0;
  $1 = Math_imul($1 & 255, 16843009);
  HEAP32[$3 >> 2] = $1;
  $4 = $2 - $4 & -4;
  $2 = $4 + $3 | 0;
  HEAP32[$2 - 4 >> 2] = $1;
  if ($4 >>> 0 < 9) {
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$2 - 8 >> 2] = $1;
  HEAP32[$2 - 12 >> 2] = $1;
  if ($4 >>> 0 < 25) {
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$2 - 16 >> 2] = $1;
  HEAP32[$2 - 20 >> 2] = $1;
  HEAP32[$2 - 24 >> 2] = $1;
  HEAP32[$2 - 28 >> 2] = $1;
  $6 = $3 & 4 | 24;
  $2 = $4 - $6 | 0;
  if ($2 >>> 0 < 32) {
   break label$1;
  }
  $5 = $1;
  $4 = $1;
  $1 = $3 + $6 | 0;
  while (1) {
   HEAP32[$1 + 24 >> 2] = $5;
   $3 = $4;
   HEAP32[$1 + 28 >> 2] = $3;
   HEAP32[$1 + 16 >> 2] = $5;
   HEAP32[$1 + 20 >> 2] = $3;
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 12 >> 2] = $3;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $3;
   $1 = $1 + 32 | 0;
   $2 = $2 - 32 | 0;
   if ($2 >>> 0 > 31) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   label$6 : {
    if (HEAP32[$1 + 44 >> 2] == 4) {
     break label$6;
    }
    HEAP16[$1 + 52 >> 1] = 0;
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
    if (HEAPU8[$1 + 53 | 0]) {
     HEAP32[$1 + 44 >> 2] = 3;
     if (!HEAPU8[$1 + 52 | 0]) {
      break label$6;
     }
     break label$2;
    }
    HEAP32[$1 + 44 >> 2] = 4;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 25364);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $3 = $0;
 $5 = HEAP32[$3 + 24 >> 2];
 $4 = HEAP32[$3 + 28 >> 2];
 $3 = $5;
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 32 >> 2] = $3;
 HEAP32[$2 + 36 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 24585);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printDeclarator_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 __stack_pointer = $2 + 48 | 0;
}
function void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____construct_std____2__pair_int_20const_2c_20arIset__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2, $3, $4) {
 void_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___construct_std____2__pair_int_20const_2c_20arIset__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28std____2__pair_int_20const_2c_20arIset___2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, std____2__piecewise_construct_t_20const__20std____2__forward_std____2__piecewise_construct_t_20const___28std____2__remove_reference_std____2__piecewise_construct_t_20const____type__29($2), std____2__tuple_int_20const_____20std____2__forward_std____2__tuple_int_20const___20__28std____2__remove_reference_std____2__tuple_int_20const___20___type__29($3), std____2__tuple_____20std____2__forward_std____2__tuple___20__28std____2__remove_reference_std____2__tuple___20___type__29($4));
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23852);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $3 = $0;
 $4 = HEAP32[$3 + 12 >> 2];
 $5 = HEAP32[$3 + 16 >> 2];
 $0 = $4;
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 28 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23466);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $3 = $0;
 $5 = HEAP32[$3 + 12 >> 2];
 $4 = HEAP32[$3 + 16 >> 2];
 $0 = $5;
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 23454);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 23852);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $3 = $0;
 $4 = HEAP32[$3 + 12 >> 2];
 $5 = HEAP32[$3 + 16 >> 2];
 $0 = $4;
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 28 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printQuals_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 if ($3 & 1) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 31180);
  $3 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = $3;
  HEAP32[$2 + 20 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
  $3 = HEAP32[$0 + 8 >> 2];
 }
 if ($3 & 2) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 31187);
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $5;
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
  $3 = HEAP32[$0 + 8 >> 2];
 }
 if ($3 & 4) {
  $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 31197);
  $3 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 >> 2] = $3;
  HEAP32[$2 + 4 >> 2] = $5;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 }
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $0;
 $4 = HEAP32[$3 + 8 >> 2];
 $5 = HEAP32[$3 + 12 >> 2];
 $3 = $4;
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 HEAP32[$2 + 40 >> 2] = $3;
 HEAP32[$2 + 44 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 32 | 0, 23852);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 23378);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 26143);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $3 = $0;
 $5 = HEAP32[$3 + 12 >> 2];
 $4 = HEAP32[$3 + 16 >> 2];
 $0 = $5;
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 23378);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function init_error_limit($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = HEAP32[$0 + 484 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 2044) | 0;
 $2 = $0 + 1020 | 0;
 HEAP32[$1 + 40 >> 2] = $2;
 HEAP32[$0 + 1016 >> 2] = -1;
 HEAP32[$0 + 1020 >> 2] = 0;
 HEAP32[$0 + 1024 >> 2] = 1;
 HEAP32[$0 + 1028 >> 2] = 2;
 HEAP32[$0 + 1032 >> 2] = 3;
 HEAP32[$0 + 1036 >> 2] = 4;
 HEAP32[$0 + 1008 >> 2] = -3;
 HEAP32[$0 + 1012 >> 2] = -2;
 HEAP32[$0 + 1040 >> 2] = 5;
 HEAP32[$0 + 1044 >> 2] = 6;
 HEAP32[$0 + 1e3 >> 2] = -5;
 HEAP32[$0 + 1004 >> 2] = -4;
 HEAP32[$0 + 1048 >> 2] = 7;
 HEAP32[$0 + 1052 >> 2] = 8;
 HEAP32[$0 + 992 >> 2] = -7;
 HEAP32[$0 + 996 >> 2] = -6;
 HEAP32[$0 + 1056 >> 2] = 9;
 HEAP32[$0 + 1060 >> 2] = 10;
 HEAP32[$0 + 984 >> 2] = -9;
 HEAP32[$0 + 988 >> 2] = -8;
 HEAP32[$0 + 1064 >> 2] = 11;
 HEAP32[$0 + 1068 >> 2] = 12;
 HEAP32[$0 + 976 >> 2] = -11;
 HEAP32[$0 + 980 >> 2] = -10;
 HEAP32[$0 + 1072 >> 2] = 13;
 HEAP32[$0 + 1076 >> 2] = 14;
 HEAP32[$0 + 968 >> 2] = -13;
 HEAP32[$0 + 972 >> 2] = -12;
 HEAP32[$0 + 1080 >> 2] = 15;
 HEAP32[$0 + 960 >> 2] = -15;
 HEAP32[$0 + 964 >> 2] = -14;
 $0 = 16;
 $1 = 16;
 while (1) {
  $3 = $1 << 2;
  HEAP32[$3 + $2 >> 2] = $0;
  HEAP32[$2 - $3 >> 2] = 0 - $0;
  $1 = $1 + 1 | 0;
  $0 = (($1 ^ -1) & 1) + $0 | 0;
  if (($1 | 0) != 48) {
   continue;
  }
  break;
 }
 $4 = 0 - $0 | 0;
 $1 = 48;
 while (1) {
  $3 = $1 << 2;
  HEAP32[$3 + $2 >> 2] = $0;
  HEAP32[$2 - $3 >> 2] = $4;
  $1 = $1 + 1 | 0;
  if (($1 | 0) != 256) {
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___AbstractManglingParser_28char_20const__2c_20char_20const__29($0, $1, $2) {
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___PODSmallVector_28_29($0 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___PODSmallVector_28_29($0 + 148 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_29($0 + 288 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___PODSmallVector_28_29($0 + 332 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___PODSmallVector_28_29($0 + 360 | 0);
 HEAP32[$0 + 396 >> 2] = 0;
 HEAP32[$0 + 400 >> 2] = 0;
 HEAP32[$0 + 392 >> 2] = -1;
 HEAP16[$0 + 388 >> 1] = 1;
 HEAP32[$0 + 404 >> 2] = 0;
 $28anonymous_20namespace_29__DefaultAllocator__DefaultAllocator_28_29($0 + 416 | 0);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseBareSourceName_28_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = 0;
 label$1 : {
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($1, $2 + 12 | 0)) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1);
    $4 = HEAP32[$2 + 12 >> 2];
    if ($3 >>> 0 >= $4 >>> 0) {
     break label$2;
    }
   }
   $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28_29($0);
   break label$1;
  }
  $3 = HEAP32[$1 >> 2];
  $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($2, $3, $4 + $3 | 0);
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $4;
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
 }
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__collapse_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1, $2) {
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 std____2__pair_std____2____unwrap_ref_decay__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const____type_2c_20std____2____unwrap_ref_decay__28anonymous_20namespace_29__itanium_demangle__Node_20const__20const____type__20std____2__make_pair__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__20const___28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__20const__29($0, $1 + 12 | 0, $1 + 8 | 0);
 $1 = HEAP32[$0 + 4 >> 2];
 while (1) {
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $2) | 0;
  if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($3) | 0) == 12) {
   $1 = HEAP32[$3 + 8 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
   wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__20std____2__min__28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__29($0, $3 + 12 | 0) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___reserve_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___size_28_29_20const($0);
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($0)) {
    $2 = dlmalloc($1 << 2);
    if (!$2) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
    HEAP32[$0 >> 2] = $2;
    break label$2;
   }
   $2 = dlrealloc(HEAP32[$0 >> 2], $1 << 2);
   HEAP32[$0 >> 2] = $2;
   if (!$2) {
    break label$1;
   }
  }
  HEAP32[$0 + 8 >> 2] = ($1 << 2) + $2;
  HEAP32[$0 + 4 >> 2] = ($3 << 2) + $2;
  return;
 }
 std__terminate_28_29();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $4 = 1;
 while (1) {
  if (HEAP32[$0 + 4 >> 2] != ($5 | 0)) {
   $7 = $28anonymous_20namespace_29__itanium_demangle__OutputStream__getCurrentPosition_28_29_20const($1);
   if (!($4 & 1)) {
    $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 25130);
    $6 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
   }
   $6 = $28anonymous_20namespace_29__itanium_demangle__OutputStream__getCurrentPosition_28_29_20const($1);
   $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[HEAP32[$0 >> 2] + ($5 << 2) >> 2], $1);
   $3 = 0;
   if (($28anonymous_20namespace_29__itanium_demangle__OutputStream__getCurrentPosition_28_29_20const($1) | 0) == ($6 | 0)) {
    $28anonymous_20namespace_29__itanium_demangle__OutputStream__setCurrentPosition_28unsigned_20long_29($1, $7);
    $3 = $4;
   }
   $5 = $5 + 1 | 0;
   $4 = $3;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}
function jinit_memory_mgr($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$0 + 4 >> 2] = 0;
 $3 = jpeg_mem_init($0);
 HEAP32[$2 + 12 >> 2] = $3;
 $1 = jpeg_get_small($0, 84);
 if (!$1) {
  jpeg_mem_term($0);
  $4 = HEAP32[$0 >> 2];
  HEAP32[$4 + 20 >> 2] = 56;
  HEAP32[$4 + 24 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 HEAP32[$1 + 48 >> 2] = 1e9;
 HEAP32[$1 + 40 >> 2] = 115;
 HEAP32[$1 + 36 >> 2] = 116;
 HEAP32[$1 + 32 >> 2] = 117;
 HEAP32[$1 + 28 >> 2] = 118;
 HEAP32[$1 + 24 >> 2] = 119;
 HEAP32[$1 + 20 >> 2] = 120;
 HEAP32[$1 + 16 >> 2] = 121;
 HEAP32[$1 + 12 >> 2] = 122;
 HEAP32[$1 + 8 >> 2] = 123;
 HEAP32[$1 + 4 >> 2] = 124;
 HEAP32[$1 >> 2] = 125;
 HEAP32[$1 + 44 >> 2] = $3;
 HEAP32[$1 + 76 >> 2] = 84;
 HEAP32[$1 + 68 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = 0;
 HEAP32[$1 + 60 >> 2] = 0;
 HEAP32[$1 + 64 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = getenv(18172);
 label$2 : {
  if (!$0) {
   break label$2;
  }
  HEAP8[$2 + 11 | 0] = 120;
  HEAP32[$2 >> 2] = $2 + 12;
  HEAP32[$2 + 4 >> 2] = $2 + 11;
  if ((sscanf($0, 18180, $2) | 0) < 1) {
   break label$2;
  }
  label$3 : {
   if ((HEAPU8[$2 + 11 | 0] | 32) != 109) {
    $0 = HEAP32[$2 + 12 >> 2];
    break label$3;
   }
   $0 = Math_imul(HEAP32[$2 + 12 >> 2], 1e3);
   HEAP32[$2 + 12 >> 2] = $0;
  }
  HEAP32[$1 + 44 >> 2] = Math_imul($0, 1e3);
 }
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 29928);
 $3 = HEAP32[$4 >> 2];
 $5 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $4 = $0;
 $5 = HEAP32[$4 + 12 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 $0 = $5;
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $3;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $4 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 28015);
 $3 = HEAP32[$4 >> 2];
 $5 = HEAP32[$4 + 4 >> 2];
 HEAP32[$2 >> 2] = $3;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function __vfprintf_internal($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $2;
 $2 = 0;
 memset($5 + 160 | 0, 0, 40);
 HEAP32[$5 + 200 >> 2] = HEAP32[$5 + 204 >> 2];
 label$1 : {
  if ((printf_core(0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4) | 0) < 0) {
   $1 = -1;
   break label$1;
  }
  if (HEAP32[$0 + 76 >> 2] >= 0) {
   $2 = __lockfile($0);
  }
  $6 = HEAP32[$0 >> 2];
  if (HEAP8[$0 + 74 | 0] <= 0) {
   HEAP32[$0 >> 2] = $6 & -33;
  }
  $6 = $6 & 32;
  label$5 : {
   if (HEAP32[$0 + 48 >> 2]) {
    $4 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
    break label$5;
   }
   HEAP32[$0 + 48 >> 2] = 80;
   HEAP32[$0 + 16 >> 2] = $5 + 80;
   HEAP32[$0 + 28 >> 2] = $5;
   HEAP32[$0 + 20 >> 2] = $5;
   $7 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 44 >> 2] = $5;
   $1 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
   $4 = $1;
   if (!$7) {
    break label$5;
   }
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = $7;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   $3 = HEAP32[$0 + 20 >> 2];
   HEAP32[$0 + 20 >> 2] = 0;
   $4 = $3 ? $1 : -1;
  }
  $3 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $6 | $3;
  $1 = $4;
  $1 = $3 & 32 ? -1 : $1;
  if (!$2) {
   break label$1;
  }
  __unlockfile($0);
 }
 __stack_pointer = $5 + 208 | 0;
 return $1;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b10_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b10_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b10_5d___type__29_29_20_5b10_5d($1), $2, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d(23378));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d(23568), $1, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d(23378));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d(23484), $1, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d(23378));
}
function ycck_cmyk_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 if (($4 | 0) >= 1) {
  $6 = HEAP32[$0 + 336 >> 2];
  $8 = HEAP32[$0 + 112 >> 2];
  $0 = HEAP32[$0 + 480 >> 2];
  $11 = HEAP32[$0 + 20 >> 2];
  $12 = HEAP32[$0 + 16 >> 2];
  $13 = HEAP32[$0 + 12 >> 2];
  $14 = HEAP32[$0 + 8 >> 2];
  while (1) {
   $9 = $4;
   if ($8) {
    $4 = $2 << 2;
    $15 = HEAP32[$4 + HEAP32[$1 + 12 >> 2] >> 2];
    $16 = HEAP32[HEAP32[$1 + 8 >> 2] + $4 >> 2];
    $17 = HEAP32[HEAP32[$1 + 4 >> 2] + $4 >> 2];
    $18 = HEAP32[HEAP32[$1 >> 2] + $4 >> 2];
    $4 = HEAP32[$3 >> 2];
    $0 = 0;
    while (1) {
     $5 = HEAPU8[$0 + $17 | 0];
     $7 = HEAPU8[$0 + $18 | 0] ^ 255;
     $10 = HEAPU8[$0 + $16 | 0] << 2;
     HEAP8[$4 | 0] = HEAPU8[($7 - HEAP32[$10 + $14 >> 2] | 0) + $6 | 0];
     $5 = $5 << 2;
     HEAP8[$4 + 1 | 0] = HEAPU8[($7 - (HEAP32[$12 + $10 >> 2] + HEAP32[$11 + $5 >> 2] >> 16) | 0) + $6 | 0];
     HEAP8[$4 + 2 | 0] = HEAPU8[($7 - HEAP32[$5 + $13 >> 2] | 0) + $6 | 0];
     HEAP8[$4 + 3 | 0] = HEAPU8[$0 + $15 | 0];
     $4 = $4 + 4 | 0;
     $0 = $0 + 1 | 0;
     if (($8 | 0) != ($0 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $3 + 4 | 0;
   $2 = $2 + 1 | 0;
   $4 = $9 - 1 | 0;
   if (($9 | 0) >= 2) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnclosingExpr_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d__28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d($1), $2, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d(23378));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FoldExpr_2c_20bool__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28bool__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3, $4) {
 return $28anonymous_20namespace_29__itanium_demangle__FoldExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FoldExpr_2c_20bool__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28bool__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($1), $2, $3, $4);
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $2 = HEAP32[$0 + 8 >> 2];
 label$1 : {
  if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($2) | 0) == 10) {
   if ($28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($2)) {
    break label$1;
   }
   $2 = HEAP32[$0 + 8 >> 2];
  }
  label$2 : {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($2, $1)) {
    if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
     break label$2;
    }
   }
   $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, 23378);
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $3);
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
 __stack_pointer = $3 + 16 | 0;
}
function __fdopen($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!strchr(20752, HEAP8[$1 | 0])) {
     wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$3;
    }
    $2 = dlmalloc(1176);
    if ($2) {
     break label$2;
    }
   }
   $2 = 0;
   break label$1;
  }
  memset($2, 0, 144);
  if (!strchr($1, 43)) {
   HEAP32[$2 >> 2] = HEAPU8[$1 | 0] == 114 ? 8 : 4;
  }
  label$6 : {
   if (HEAPU8[$1 | 0] != 97) {
    $1 = HEAP32[$2 >> 2];
    break label$6;
   }
   $1 = __syscall221($0 | 0, 3, 0) | 0;
   if (!($1 & 1024)) {
    HEAP32[$3 + 16 >> 2] = $1 | 1024;
    __syscall221($0 | 0, 4, $3 + 16 | 0) | 0;
   }
   $1 = HEAP32[$2 >> 2] | 128;
   HEAP32[$2 >> 2] = $1;
  }
  HEAP8[$2 + 75 | 0] = 255;
  HEAP32[$2 + 48 >> 2] = 1024;
  HEAP32[$2 + 60 >> 2] = $0;
  HEAP32[$2 + 44 >> 2] = $2 + 152;
  label$9 : {
   if ($1 & 8) {
    break label$9;
   }
   HEAP32[$3 >> 2] = $3 + 24;
   if (__syscall54($0 | 0, 21523, $3 | 0) | 0) {
    break label$9;
   }
   HEAP8[$2 + 75 | 0] = 10;
  }
  HEAP32[$2 + 40 >> 2] = 158;
  HEAP32[$2 + 36 >> 2] = 157;
  HEAP32[$2 + 32 >> 2] = 164;
  HEAP32[$2 + 12 >> 2] = 156;
  if (!HEAP32[8467]) {
   HEAP32[$2 + 76 >> 2] = -1;
  }
  $2 = __ofl_add($2);
 }
 __stack_pointer = $3 + 32 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b3_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b3_5d___type__29_29_20_5b3_5d($2));
 $3 = HEAP32[$3 >> 2];
 $5 = HEAP32[$2 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 + 4 >> 2] = $5;
 $2 = $28anonymous_20namespace_29__itanium_demangle__MemberExpr__MemberExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $4, $3);
 __stack_pointer = $4 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d($2));
 $3 = HEAP32[$3 >> 2];
 $5 = HEAP32[$2 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 + 4 >> 2] = $5;
 $2 = $28anonymous_20namespace_29__itanium_demangle__MemberExpr__MemberExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $4, $3);
 __stack_pointer = $4 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b17_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b17_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b17_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b17_5d___type__29_29_20_5b17_5d($1));
 $3 = HEAP32[$3 >> 2];
 $2 = HEAP32[$2 >> 2];
 $5 = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = $5;
 $2 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $4, $2, $3);
 __stack_pointer = $4 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b13_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b13_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b13_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b13_5d___type__29_29_20_5b13_5d($1));
 $3 = HEAP32[$3 >> 2];
 $2 = HEAP32[$2 >> 2];
 $5 = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = $5;
 $2 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $4, $2, $3);
 __stack_pointer = $4 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d($1));
 $3 = HEAP32[$3 >> 2];
 $2 = HEAP32[$2 >> 2];
 $5 = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = $5;
 $2 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $4, $2, $3);
 __stack_pointer = $4 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($4 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d($1));
 $3 = HEAP32[$3 >> 2];
 $2 = HEAP32[$2 >> 2];
 $5 = HEAP32[$1 + 4 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = $5;
 $2 = $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $4, $2, $3);
 __stack_pointer = $4 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 28924);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($2 + 24 | 0, HEAP32[$0 + 8 >> 2]), $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FoldExpr_2c_20bool__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28bool__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 28);
 $1 = HEAPU8[bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($1) | 0];
 $6 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$5 + 8 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $6;
 $4 = HEAP32[$4 >> 2];
 $3 = HEAP32[$3 >> 2];
 HEAP32[$5 >> 2] = $2;
 HEAP32[$5 + 4 >> 2] = $6;
 $3 = $28anonymous_20namespace_29__itanium_demangle__FoldExpr__FoldExpr_28bool_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $5, $3, $4);
 __stack_pointer = $5 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parsePositiveInteger_28unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 HEAP32[$1 >> 2] = 0;
 label$1 : {
  $2 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 48 & 255) >>> 0 > 9;
  if ($2) {
   break label$1;
  }
  while (1) {
   if (($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0) - 48 & 255) >>> 0 > 9) {
    break label$1;
   }
   HEAP32[$1 >> 2] = Math_imul($3, 10);
   $3 = ($28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consume_28_29($0) + HEAP32[$1 >> 2] | 0) - 48 | 0;
   HEAP32[$1 >> 2] = $3;
   continue;
  }
 }
 return $2;
}
function jinit_marker_reader($0) {
 var $1 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 172) | 0;
 HEAP32[$0 + 464 >> 2] = $1;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 26;
 HEAP32[$1 + 8 >> 2] = 27;
 HEAP32[$1 + 4 >> 2] = 28;
 HEAP32[$1 >> 2] = 29;
 HEAP32[$1 + 104 >> 2] = 0;
 HEAP32[$1 + 36 >> 2] = 26;
 HEAP32[$1 + 40 >> 2] = 26;
 HEAP32[$1 + 108 >> 2] = 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = 26;
 HEAP32[$1 + 48 >> 2] = 26;
 HEAP32[$1 + 116 >> 2] = 0;
 HEAP32[$1 + 120 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = 26;
 HEAP32[$1 + 56 >> 2] = 26;
 HEAP32[$1 + 124 >> 2] = 0;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 60 >> 2] = 26;
 HEAP32[$1 + 132 >> 2] = 0;
 HEAP32[$1 + 64 >> 2] = 26;
 HEAP32[$1 + 136 >> 2] = 0;
 HEAP32[$1 + 140 >> 2] = 0;
 HEAP32[$1 + 68 >> 2] = 26;
 HEAP32[$1 + 72 >> 2] = 26;
 HEAP32[$1 + 76 >> 2] = 26;
 HEAP32[$1 + 80 >> 2] = 26;
 HEAP32[$1 + 144 >> 2] = 0;
 HEAP32[$1 + 148 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 26;
 HEAP32[$1 + 152 >> 2] = 0;
 HEAP32[$1 + 156 >> 2] = 0;
 HEAP32[$1 + 160 >> 2] = 0;
 HEAP32[$1 + 92 >> 2] = 26;
 HEAP32[$1 + 32 >> 2] = 30;
 HEAP32[$1 + 88 >> 2] = 30;
 HEAP32[$0 + 440 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 216 >> 2] = 0;
 $1 = HEAP32[$0 + 464 >> 2];
 HEAP32[$1 + 164 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
}
function std____2__enable_if__28is_same_std____2__remove_const__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____type_2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____value_29_20___20_28is_trivially_copy_assignable__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____value_29_2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______type_20std____2____copy__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____29($0, $1, $2) {
 $1 = $1 - $0 | 0;
 if ($1) {
  memmove($2, $0, $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 32492);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $0 = HEAP32[$0 + 12 >> 2];
 if ($0) {
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 28015);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 40 | 0, 24576);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 16 | 0);
 $3 = $0;
 $5 = HEAP32[$3 + 8 >> 2];
 $4 = HEAP32[$3 + 12 >> 2];
 $0 = $5;
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 32 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 24585);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 22996);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 23021);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseSeqId_28unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = 1;
 label$1 : {
  $3 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
  if (($3 | 0) < 48 | (($3 - 65 & 255) >>> 0 > 25 ? ($3 | 0) >= 58 : 0)) {
   break label$1;
  }
  while (1) {
   label$3 : {
    $2 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, 0);
    if (($2 | 0) >= 48) {
     $3 = -48;
     if (($2 | 0) < 58) {
      break label$3;
     }
     $3 = -55;
     if (($2 - 65 & 255) >>> 0 < 26) {
      break label$3;
     }
    }
    HEAP32[$1 >> 2] = $4;
    $2 = 0;
    break label$1;
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   $4 = (Math_imul($4, 36) + $3 | 0) + ($2 & 255) | 0;
   continue;
  }
 }
 return $2;
}
function loadNFTMarker($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 puts(9574);
 ar2UtilRemoveExt($2);
 $1 = ar2ReadImageSet($2);
 HEAP32[$0 + 20 >> 2] = $1;
 if ($1) {
  puts(9589);
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$2 + 4 >> 2];
  $2 = HEAP32[HEAP32[$2 >> 2] >> 2];
  HEAP32[$0 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$2 + 8 >> 2];
  $5 = $0;
  $4 = HEAPF32[$2 + 12 >> 2];
  label$2 : {
   if (Math_fround(Math_abs($4)) < Math_fround(2147483648)) {
    $1 = ~~$4;
    break label$2;
   }
   $1 = -2147483648;
  }
  HEAP32[$5 + 36 >> 2] = $1;
  $2 = HEAP32[$2 >> 2];
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$3 + 96 >> 2] = $2;
  arLog(0, 1, 8800, $3 + 96 | 0);
  HEAP32[$3 + 80 >> 2] = HEAP32[$0 + 24 >> 2];
  arLog(0, 1, 8828, $3 + 80 | 0);
  HEAP32[$3 + 64 >> 2] = HEAP32[$0 + 28 >> 2];
  arLog(0, 1, 8856, $3 - -64 | 0);
  HEAP32[$3 + 48 >> 2] = HEAP32[$0 + 32 >> 2];
  arLog(0, 1, 8878, $3 + 48 | 0);
  HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  arLog(0, 1, 8901, $3 + 32 | 0);
  arLog(0, 1, 8921, 0);
  arLog(0, 1, 8935, 0);
  HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  arLog(0, 1, 8944, $3 + 16 | 0);
  arLog(0, 1, 8964, 0);
  __stack_pointer = $3 + 112 | 0;
  return 1;
 }
 HEAP32[$3 >> 2] = $2;
 arLog(0, 3, 8774, $3);
 exit(0);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 23852);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 12 | 0, $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b3_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b3_5d___type__29_29_20_5b3_5d($2), $3);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b17_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b17_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b17_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b17_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b17_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b17_5d___type__29_29_20_5b17_5d(23518), $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b13_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b13_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b13_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b13_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b13_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b13_5d___type__29_29_20_5b13_5d(23418), $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d(23547), $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__CastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CastExpr_2c_20char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b11_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d(23403), $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__MemberExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__MemberExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b2_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d(23436), $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ClosureTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ClosureTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29($0, $1, $2) {
 std____2__enable_if__28is_same_std____2__remove_const__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____type_2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____value_29_20___20_28is_trivially_copy_assignable__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____value_29_2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference_____type_20std____2____copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29($0, $1, $2);
}
function emscripten__internal__Invoker_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___invoke_28nftMarker_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 $1 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29($1);
 emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($3 + 8 | 0, $2);
 FUNCTION_TABLE[$0 | 0]($3 + 24 | 0, $1, $3 + 8 | 0);
 $0 = emscripten__internal__GenericBindingType_nftMarker___toWireType_28nftMarker___29($3 + 24 | 0);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 48 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__LambdaExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 25476);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $0 = HEAP32[$0 + 8 >> 2];
 if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($0) | 0) == 45) {
  $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printDeclarator_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 }
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 25479);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function ycc_rgb_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 if (($4 | 0) >= 1) {
  $6 = HEAP32[$0 + 336 >> 2];
  $8 = HEAP32[$0 + 112 >> 2];
  $0 = HEAP32[$0 + 480 >> 2];
  $11 = HEAP32[$0 + 20 >> 2];
  $12 = HEAP32[$0 + 16 >> 2];
  $13 = HEAP32[$0 + 12 >> 2];
  $14 = HEAP32[$0 + 8 >> 2];
  while (1) {
   $9 = $4;
   if ($8) {
    $4 = $2 << 2;
    $15 = HEAP32[$4 + HEAP32[$1 + 8 >> 2] >> 2];
    $16 = HEAP32[HEAP32[$1 + 4 >> 2] + $4 >> 2];
    $17 = HEAP32[HEAP32[$1 >> 2] + $4 >> 2];
    $4 = HEAP32[$3 >> 2];
    $0 = 0;
    while (1) {
     $5 = HEAPU8[$0 + $16 | 0];
     $7 = HEAPU8[$0 + $17 | 0];
     $10 = HEAPU8[$0 + $15 | 0] << 2;
     HEAP8[$4 | 0] = HEAPU8[($7 + HEAP32[$10 + $14 >> 2] | 0) + $6 | 0];
     $5 = $5 << 2;
     HEAP8[$4 + 1 | 0] = HEAPU8[((HEAP32[$12 + $10 >> 2] + HEAP32[$11 + $5 >> 2] >> 16) + $7 | 0) + $6 | 0];
     HEAP8[$4 + 2 | 0] = HEAPU8[(HEAP32[$5 + $13 >> 2] + $7 | 0) + $6 | 0];
     $4 = $4 + 3 | 0;
     $0 = $0 + 1 | 0;
     if (($8 | 0) != ($0 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $3 + 4 | 0;
   $2 = $2 + 1 | 0;
   $4 = $9 - 1 | 0;
   if (($9 | 0) >= 2) {
    continue;
   }
   break;
  }
 }
}
function merged_2v_upsample($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $7 = HEAP32[$0 + 476 >> 2];
 label$1 : {
  label$2 : {
   if (HEAP32[$7 + 36 >> 2]) {
    jcopy_sample_rows($7 + 32 | 0, 0, (HEAP32[$5 >> 2] << 2) + $4 | 0, 0, 1, HEAP32[$7 + 40 >> 2]);
    HEAP32[$7 + 36 >> 2] = 0;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
    HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] - 1;
    break label$2;
   }
   $8 = HEAP32[$7 + 44 >> 2];
   $9 = HEAP32[$5 >> 2];
   $10 = ($9 << 2) + $4 | 0;
   HEAP32[$3 + 8 >> 2] = HEAP32[$10 >> 2];
   $11 = $3;
   $4 = $6 - $9 | 0;
   $6 = $8 >>> 0 < 2 ? $8 : 2;
   $4 = $4 >>> 0 < $6 >>> 0 ? $4 : $6;
   $6 = HEAP32[$10 + 4 >> 2];
   label$4 : {
    if ($4 >>> 0 >= 2) {
     break label$4;
    }
    HEAP32[$7 + 36 >> 2] = 1;
    $6 = HEAP32[$7 + 32 >> 2];
   }
   HEAP32[$11 + 12 >> 2] = $6;
   FUNCTION_TABLE[HEAP32[$7 + 12 >> 2]]($0, $1, HEAP32[$2 >> 2], $3 + 8 | 0);
   $0 = HEAP32[$7 + 36 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $4;
   HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] - $4;
   if ($0) {
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
 }
 __stack_pointer = $3 + 16 | 0;
}
function quantize_ord_dither($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 if (($3 | 0) >= 1) {
  $6 = HEAP32[$0 + 112 >> 2];
  $5 = HEAP32[$0 + 484 >> 2];
  $7 = HEAP32[$0 + 120 >> 2];
  $14 = ($7 | 0) < 1;
  while (1) {
   $0 = $8 << 2;
   $12 = $2 + $0 | 0;
   memset(HEAP32[$12 >> 2], 0, $6);
   $13 = HEAP32[$5 + 48 >> 2];
   if (!$14) {
    $15 = $0 + $1 | 0;
    $4 = 0;
    while (1) {
     if ($6) {
      $0 = $4 << 2;
      $16 = HEAP32[$0 + HEAP32[$5 + 24 >> 2] >> 2];
      $17 = HEAP32[($0 + $5 | 0) + 52 >> 2];
      $9 = HEAP32[$15 >> 2] + $4 | 0;
      $0 = HEAP32[$12 >> 2];
      $10 = 0;
      $11 = $6;
      while (1) {
       HEAP8[$0 | 0] = HEAPU8[$0 | 0] + HEAPU8[(HEAP32[(($13 << 6) + $17 | 0) + ($10 << 2) >> 2] + HEAPU8[$9 | 0] | 0) + $16 | 0];
       $0 = $0 + 1 | 0;
       $9 = $9 + $7 | 0;
       $10 = $10 + 1 & 15;
       $11 = $11 - 1 | 0;
       if ($11) {
        continue;
       }
       break;
      }
     }
     $4 = $4 + 1 | 0;
     if (($7 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$5 + 48 >> 2] = $13 + 1 & 15;
   $8 = $8 + 1 | 0;
   if (($8 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function __lshrti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 label$1 : {
  if ($5 & 64) {
   $7 = $4;
   $8 = $3;
   $9 = $5 + -64 | 0;
   $6 = $9 & 31;
   if (($9 & 63) >>> 0 >= 32) {
    $1 = $7 >>> $6 | 0;
   } else {
    $10 = $7 >>> $6 | 0;
    $1 = ((1 << $6) - 1 & $7) << 32 - $6 | $8 >>> $6;
   }
   $2 = $10;
   $3 = 0;
   $4 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $10 = $4;
  $7 = $3;
  $9 = 64 - $5 | 0;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $8 = $7 << $6;
   $11 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $10 << $6;
   $11 = $7 << $6;
  }
  $12 = $8;
  $8 = $2;
  $10 = $1;
  $7 = 0;
  $13 = $5;
  $9 = $5;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $9 = $8 >>> $6 | 0;
  } else {
   $7 = $8 >>> $6 | 0;
   $9 = ((1 << $6) - 1 & $8) << 32 - $6 | $10 >>> $6;
  }
  $10 = $7;
  $8 = $11;
  $1 = $8 | $9;
  $7 = $12;
  $10 = $7 | $10;
  $2 = $10;
  $10 = $4;
  $7 = $3;
  $8 = 0;
  $9 = $13;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $3 = $10 >>> $6 | 0;
  } else {
   $8 = $10 >>> $6 | 0;
   $3 = ((1 << $6) - 1 & $10) << 32 - $6 | $7 >>> $6;
  }
  $4 = $8;
 }
 $7 = $0;
 HEAP32[$7 >> 2] = $1;
 $8 = $2;
 HEAP32[$7 + 4 >> 2] = $8;
 HEAP32[$7 + 8 >> 2] = $3;
 $8 = $4;
 HEAP32[$7 + 12 >> 2] = $8;
}
function $28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $4 = $2;
 $5 = $2;
 label$1 : {
  label$2 : {
   label$3 : {
    switch (HEAP32[$0 + 8 >> 2]) {
    case 0:
     $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 24724);
     break label$2;
    case 1:
     $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 24727);
     break label$2;
    case 2:
     break label$3;
    default:
     break label$1;
    }
   }
   $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 24730);
  }
  $6 = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 }
 $0 = HEAP32[$0 + 12 >> 2];
 if ($0) {
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28unsigned_20int_29($1, $0 - 1 | 0);
 }
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerLiteral_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $3 = HEAP32[$1 >> 2];
 $5 = $3;
 $1 = HEAP32[$1 + 4 >> 2];
 $7 = $1;
 $3 = $4;
 HEAP32[$3 + 24 >> 2] = $5;
 HEAP32[$3 + 28 >> 2] = $1;
 $1 = HEAP32[$2 >> 2];
 $6 = $1;
 $3 = HEAP32[$2 + 4 >> 2];
 $2 = $3;
 $1 = $4;
 HEAP32[$1 + 16 >> 2] = $6;
 HEAP32[$1 + 20 >> 2] = $3;
 HEAP32[$1 + 8 >> 2] = $5;
 $3 = $7;
 HEAP32[$1 + 12 >> 2] = $3;
 HEAP32[$1 >> 2] = $6;
 $3 = $2;
 HEAP32[$1 + 4 >> 2] = $3;
 $2 = $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__IntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1 + 8 | 0, $1);
 __stack_pointer = $1 + 32 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BinaryExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BinaryExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2, $3);
}
function sep_upsample($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $3 = HEAP32[$0 + 320 >> 2];
 $8 = HEAP32[$0 + 476 >> 2];
 $9 = HEAP32[$8 + 92 >> 2];
 if (($3 | 0) <= ($9 | 0)) {
  if (HEAP32[$0 + 36 >> 2] >= 1) {
   $3 = HEAP32[$0 + 216 >> 2];
   $9 = 0;
   while (1) {
    $7 = $9 << 2;
    $10 = HEAP32[$7 + $1 >> 2];
    $7 = $8 + $7 | 0;
    FUNCTION_TABLE[HEAP32[$7 + 52 >> 2]]($0, $3, $10 + (Math_imul(HEAP32[$7 + 100 >> 2], HEAP32[$2 >> 2]) << 2) | 0, $7 + 12 | 0);
    $3 = $3 + 88 | 0;
    $9 = $9 + 1 | 0;
    if (($9 | 0) < HEAP32[$0 + 36 >> 2]) {
     continue;
    }
    break;
   }
   $3 = HEAP32[$0 + 320 >> 2];
  }
  HEAP32[$8 + 92 >> 2] = 0;
  $9 = 0;
 }
 $7 = HEAP32[$5 >> 2];
 $4 = ($7 << 2) + $4 | 0;
 $7 = $6 - $7 | 0;
 $1 = HEAP32[$8 + 96 >> 2];
 $3 = $3 - $9 | 0;
 $3 = $1 >>> 0 < $3 >>> 0 ? $1 : $3;
 $3 = $3 >>> 0 > $7 >>> 0 ? $7 : $3;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 480 >> 2] + 4 >> 2]]($0, $8 + 12 | 0, $9, $4, $3);
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $3;
 HEAP32[$8 + 96 >> 2] = HEAP32[$8 + 96 >> 2] - $3;
 $3 = HEAP32[$8 + 92 >> 2] + $3 | 0;
 HEAP32[$8 + 92 >> 2] = $3;
 if (HEAP32[$0 + 320 >> 2] <= ($3 | 0)) {
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__writeUnsigned_28unsigned_20long_20long_2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 $3 = $2;
 label$1 : {
  if (!($3 | $1)) {
   $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29_1($0);
   break label$1;
  }
  $5 = char__20std____2__end_char_2c_2021ul__28char_20_28__29_20_5b21ul_5d_29($4 + 16 | 0);
  while (1) {
   $3 = $2;
   if ($3 | $1) {
    $5 = $5 - 1 | 0;
    $6 = __wasm_i64_udiv($1, $2, 10, 0);
    $3 = i64toi32_i32$HIGH_BITS;
    $8 = $3;
    $7 = __wasm_i64_mul($6, $3, 10, 0);
    $3 = i64toi32_i32$HIGH_BITS;
    HEAP8[$5 | 0] = $1 - $7 | 48;
    $1 = $6;
    $2 = $8;
    continue;
   }
   break;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($4 + 8 | 0, $5, char__20std____2__end_char_2c_2021ul__28char_20_28__29_20_5b21ul_5d_29($4 + 16 | 0));
  $2 = HEAP32[$3 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $1;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29_1($0, $4);
 }
 __stack_pointer = $4 + 48 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___reserve_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0);
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___isInline_28_29_20const($0)) {
    $2 = dlmalloc($1 << 2);
    if (!$2) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__Node___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
    HEAP32[$0 >> 2] = $2;
    break label$2;
   }
   $2 = dlrealloc(HEAP32[$0 >> 2], $1 << 2);
   HEAP32[$0 >> 2] = $2;
   if (!$2) {
    break label$1;
   }
  }
  HEAP32[$0 + 8 >> 2] = ($1 << 2) + $2;
  HEAP32[$0 + 4 >> 2] = ($3 << 2) + $2;
  return;
 }
 std__terminate_28_29();
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConditionalExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConditionalExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___reserve_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___size_28_29_20const($0);
 label$1 : {
  label$2 : {
   if ($28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___isInline_28_29_20const($0)) {
    $2 = dlmalloc($1 << 2);
    if (!$2) {
     break label$1;
    }
    $28anonymous_20namespace_29__itanium_demangle__Node___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
    HEAP32[$0 >> 2] = $2;
    break label$2;
   }
   $2 = dlrealloc(HEAP32[$0 >> 2], $1 << 2);
   HEAP32[$0 >> 2] = $2;
   if (!$2) {
    break label$1;
   }
  }
  HEAP32[$0 + 8 >> 2] = ($1 << 2) + $2;
  HEAP32[$0 + 4 >> 2] = ($3 << 2) + $2;
  return;
 }
 std__terminate_28_29();
 abort();
}
function quantize3_ord_dither($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 if (($3 | 0) >= 1) {
  $12 = HEAP32[$0 + 112 >> 2];
  $4 = HEAP32[$0 + 484 >> 2];
  $0 = HEAP32[$4 + 24 >> 2];
  $13 = HEAP32[$0 + 8 >> 2];
  $14 = HEAP32[$0 + 4 >> 2];
  $15 = HEAP32[$0 >> 2];
  $6 = HEAP32[$4 + 48 >> 2];
  while (1) {
   if ($12) {
    $16 = HEAP32[$4 + 60 >> 2];
    $17 = HEAP32[$4 + 56 >> 2];
    $18 = HEAP32[$4 + 52 >> 2];
    $5 = $7 << 2;
    $0 = HEAP32[$5 + $1 >> 2];
    $5 = HEAP32[$2 + $5 >> 2];
    $8 = 0;
    $9 = $12;
    while (1) {
     $10 = $8 << 2;
     $11 = $6 << 6;
     HEAP8[$5 | 0] = (HEAPU8[(HEAP32[$10 + ($17 + $11 | 0) >> 2] + HEAPU8[$0 + 1 | 0] | 0) + $14 | 0] + HEAPU8[(HEAP32[($11 + $18 | 0) + $10 >> 2] + HEAPU8[$0 | 0] | 0) + $15 | 0] | 0) + HEAPU8[(HEAP32[($11 + $16 | 0) + $10 >> 2] + HEAPU8[$0 + 2 | 0] | 0) + $13 | 0];
     $5 = $5 + 1 | 0;
     $0 = $0 + 3 | 0;
     $8 = $8 + 1 & 15;
     $9 = $9 - 1 | 0;
     if ($9) {
      continue;
     }
     break;
    }
   }
   $6 = $6 + 1 & 15;
   HEAP32[$4 + 48 >> 2] = $6;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function jpeg_resync_to_restart($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = HEAP32[$0 >> 2];
 $2 = HEAP32[$0 + 440 >> 2];
 HEAP32[$3 + 24 >> 2] = $2;
 HEAP32[$3 + 20 >> 2] = 124;
 HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, -1);
 $4 = $1 + 6 & 7 | 208;
 $5 = $1 - 1 & 7 | 208;
 $6 = $1 + 2 & 7 | 208;
 $7 = $1 + 1 & 7 | 208;
 label$1 : {
  while (1) {
   $8 = ($2 | 0) == ($7 | 0) | ($2 & -8) != 208 | ($2 | 0) == ($6 | 0);
   $9 = ($2 | 0) == ($4 | 0) ? 2 : 1;
   label$3 : {
    while (1) {
     label$5 : {
      $1 = HEAP32[$0 >> 2];
      HEAP32[$1 + 24 >> 2] = $2;
      HEAP32[$1 + 20 >> 2] = 99;
      $1 = ($2 | 0) < 192;
      $3 = $1 ? 2 : 3;
      $1 = $1 ? $3 : $8 ? $3 : ($2 | 0) == ($5 | 0) ? 2 : $9;
      HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 4);
      switch ($1 - 1 | 0) {
      case 2:
       break label$1;
      case 0:
       break label$3;
      case 1:
       break label$5;
      default:
       continue;
      }
     }
     break;
    }
    if (!next_marker($0)) {
     return 0;
    }
    $2 = HEAP32[$0 + 440 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$0 + 440 >> 2] = 0;
 }
 return 1;
}
function __stpncpy($0, $1, $2) {
 var $3 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($0 ^ $1) & 3) {
     break label$3;
    }
    $3 = ($2 | 0) != 0;
    label$4 : {
     if (!$2 | !($1 & 3)) {
      break label$4;
     }
     while (1) {
      $3 = HEAPU8[$1 | 0];
      HEAP8[$0 | 0] = $3;
      if (!$3) {
       break label$1;
      }
      $0 = $0 + 1 | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 - 1 | 0;
      $3 = ($2 | 0) != 0;
      if (!$2) {
       break label$4;
      }
      if ($1 & 3) {
       continue;
      }
      break;
     }
    }
    if (!$3) {
     break label$2;
    }
    if (!HEAPU8[$1 | 0]) {
     break label$1;
    }
    if ($2 >>> 0 < 4) {
     break label$3;
    }
    while (1) {
     $3 = HEAP32[$1 >> 2];
     if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
      break label$3;
     }
     HEAP32[$0 >> 2] = $3;
     $0 = $0 + 4 | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 - 4 | 0;
     if ($2 >>> 0 > 3) {
      continue;
     }
     break;
    }
   }
   if (!$2) {
    break label$2;
   }
   while (1) {
    $3 = HEAPU8[$1 | 0];
    HEAP8[$0 | 0] = $3;
    if (!$3) {
     break label$1;
    }
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue;
    }
    break;
   }
  }
  $2 = 0;
 }
 memset($0, 0, $2);
 return $0;
}
function unsigned_20int_20const__20std____2____lower_bound_std____2____less_unsigned_20int_2c_20unsigned_20long___2c_20unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $1 = std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2__distance_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__29($0, $1);
 while (1) {
  if ($1) {
   $5 = std____2__enable_if_is_integral_long___value_2c_20long___type_20std____2____half_positive_long__28long_29($1);
   HEAP32[$4 + 12 >> 2] = $0;
   void_20std____2__advance_unsigned_20int_20const___28unsigned_20int_20const___2c_20std____2__iterator_traits_unsigned_20int_20const____difference_type_29($4 + 12 | 0, $5);
   $1 = ($5 ^ -1) + $1 | 0;
   $6 = std____2____less_unsigned_20int_2c_20unsigned_20long___operator_28_29_28unsigned_20int_20const__2c_20unsigned_20long_20const__29_20const($3, HEAP32[$4 + 12 >> 2], $2);
   $1 = $6 ? $1 : $5;
   $0 = $6 ? HEAP32[$4 + 12 >> 2] + 4 | 0 : $0;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 16 | 0;
 return $0;
}
function __ashlti3($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 label$1 : {
  if ($5 & 64) {
   $7 = $2;
   $8 = $1;
   $9 = $5 + -64 | 0;
   $6 = $9 & 31;
   if (($9 & 63) >>> 0 >= 32) {
    $10 = $8 << $6;
    $3 = 0;
   } else {
    $10 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
    $3 = $8 << $6;
   }
   $4 = $10;
   $1 = 0;
   $2 = 0;
   break label$1;
  }
  if (!$5) {
   break label$1;
  }
  $10 = $4;
  $7 = $3;
  $11 = $5;
  $9 = $5;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $8 = $7 << $6;
   $3 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $10 << $6;
   $3 = $7 << $6;
  }
  $4 = $8;
  $8 = $2;
  $10 = $1;
  $7 = 0;
  $9 = 64 - $5 | 0;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $9 = $8 >>> $6 | 0;
  } else {
   $7 = $8 >>> $6 | 0;
   $9 = ((1 << $6) - 1 & $8) << 32 - $6 | $10 >>> $6;
  }
  $10 = $7;
  $8 = $3;
  $3 = $8 | $9;
  $7 = $4;
  $10 = $7 | $10;
  $4 = $10;
  $10 = $2;
  $7 = $1;
  $9 = $11;
  $6 = $9 & 31;
  if (($9 & 63) >>> 0 >= 32) {
   $8 = $7 << $6;
   $1 = 0;
  } else {
   $8 = (1 << $6) - 1 & $7 >>> 32 - $6 | $10 << $6;
   $1 = $7 << $6;
  }
  $2 = $8;
 }
 $7 = $0;
 HEAP32[$7 >> 2] = $1;
 $8 = $2;
 HEAP32[$7 + 4 >> 2] = $8;
 HEAP32[$7 + 8 >> 2] = $3;
 $8 = $4;
 HEAP32[$7 + 12 >> 2] = $8;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator____AbstractManglingParser_28_29($0) {
 $28anonymous_20namespace_29__DefaultAllocator___DefaultAllocator_28_29($0 + 416 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0 + 360 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul____PODSmallVector_28_29($0 + 332 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____PODSmallVector_28_29($0 + 288 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul____PODSmallVector_28_29($0 + 148 | 0);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul____PODSmallVector_28_29($0 + 8 | 0);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___popTrailingNodeArray_28unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = $1 + 8 | 0;
 $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___begin_28_29($3) + ($2 << 2) | 0, $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___end_28_29($3));
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___dropBack_28unsigned_20long_29($3, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BinaryExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 24);
 $1 = HEAP32[$1 >> 2];
 $5 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $5;
 $3 = HEAP32[$3 >> 2];
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $5;
 $3 = $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__BinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $4, $3);
 __stack_pointer = $4 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b11_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b11_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d($2));
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__PostfixQualifiedType_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function __dynamic_cast($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 $6 = HEAP32[$0 >> 2];
 $5 = HEAP32[$6 - 4 >> 2];
 $6 = HEAP32[$6 - 8 >> 2];
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $2;
 $1 = 0;
 memset($4 + 24 | 0, 0, 39);
 $0 = $0 + $6 | 0;
 label$1 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($5, $2, 0)) {
   HEAP32[$4 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 20 >> 2]]($5, $4 + 8 | 0, $0, $0, 1, 0);
   $1 = HEAP32[$4 + 32 >> 2] == 1 ? $0 : 0;
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, $4 + 8 | 0, $0, 1, 0);
  label$3 : {
   switch (HEAP32[$4 + 44 >> 2]) {
   case 0:
    $1 = HEAP32[$4 + 48 >> 2] == 1 ? HEAP32[$4 + 36 >> 2] == 1 ? HEAP32[$4 + 40 >> 2] == 1 ? HEAP32[$4 + 28 >> 2] : 0 : 0 : 0;
    break label$1;
   case 1:
    break label$3;
   default:
    break label$1;
   }
  }
  if (HEAP32[$4 + 32 >> 2] != 1) {
   if (HEAP32[$4 + 48 >> 2] | HEAP32[$4 + 36 >> 2] != 1 | HEAP32[$4 + 40 >> 2] != 1) {
    break label$1;
   }
  }
  $1 = HEAP32[$4 + 24 >> 2];
 }
 __stack_pointer = $4 - -64 | 0;
 return $1;
}
function output_pass_setup($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 if (HEAP32[$0 + 20 >> 2] != 204) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 444 >> 2] >> 2]]($0);
  HEAP32[$0 + 20 >> 2] = 204;
  HEAP32[$0 + 140 >> 2] = 0;
 }
 label$2 : {
  if (HEAP32[HEAP32[$0 + 444 >> 2] + 8 >> 2]) {
   $5 = $0 + 140 | 0;
   $1 = HEAP32[$0 + 140 >> 2];
   while (1) {
    $3 = HEAP32[$0 + 116 >> 2];
    if ($3 >>> 0 > $1 >>> 0) {
     $2 = HEAP32[$0 + 8 >> 2];
     $4 = $1;
     label$6 : {
      if (!$2) {
       break label$6;
      }
      HEAP32[$2 + 8 >> 2] = $3;
      HEAP32[$2 + 4 >> 2] = $1;
      FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
      $4 = HEAP32[$0 + 140 >> 2];
     }
     $3 = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 + 448 >> 2] + 4 >> 2]]($0, 0, $5, 0);
     $1 = HEAP32[$0 + 140 >> 2];
     $2 = $4;
     if (($1 | 0) != ($2 | 0)) {
      continue;
     }
     break label$2;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 444 >> 2] + 4 >> 2]]($0);
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 444 >> 2] >> 2]]($0);
    $1 = 0;
    HEAP32[$0 + 140 >> 2] = 0;
    if (HEAP32[HEAP32[$0 + 444 >> 2] + 8 >> 2]) {
     continue;
    }
    break;
   }
  }
  HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 68 >> 2] ? 206 : 205;
  $3 = 1;
 }
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d($2));
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__PostfixQualifiedType_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function __extendsftf2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $8 = __stack_pointer - 16 | 0;
 __stack_pointer = $8;
 $9 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
 $5 = $9 & 2147483647;
 label$1 : {
  if ($5 - 8388608 >>> 0 <= 2130706431) {
   $2 = $5 >>> 7 | 0;
   $3 = $5 << 25;
   $6 = $3;
   $4 = $2 + 1065353216 | 0;
   $7 = $4;
   break label$1;
  }
  if ($5 >>> 0 >= 2139095040) {
   $2 = $9;
   $3 = $2 >>> 7 | 0;
   $4 = $2 << 25;
   $6 = $4;
   $2 = $3 | 2147418112;
   $7 = $2;
   break label$1;
  }
  if (!$5) {
   $7 = 0;
   break label$1;
  }
  $2 = $5;
  $5 = Math_clz32($5);
  __ashlti3($8, $2, 0, 0, 0, $5 + 81 | 0);
  $3 = $8;
  $4 = HEAP32[$3 >> 2];
  $10 = $4;
  $2 = HEAP32[$3 + 4 >> 2];
  $11 = $2;
  $4 = HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 8 >> 2];
  $6 = $2;
  $2 = $4 ^ 65536;
  $7 = $2;
  $4 = 16265 - $5 | 0;
  $3 = $4 << 16;
  $4 = $3;
  $2 = $6;
  $6 = $2;
  $3 = $7;
  $4 = $3 | $4;
  $7 = $4;
 }
 $2 = $0;
 HEAP32[$2 >> 2] = $10;
 $4 = $11;
 HEAP32[$2 + 4 >> 2] = $4;
 $4 = $2;
 HEAP32[$2 + 8 >> 2] = $6;
 $3 = $9 & -2147483648;
 $2 = $7;
 $3 = $3 | $2;
 HEAP32[$4 + 12 >> 2] = $3;
 __stack_pointer = $8 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 25108);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 12 | 0, $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 25118);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function start_pass_dpost($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = HEAP32[$0 + 456 >> 2];
 label$1 : {
  label$2 : {
   switch ($1 | 0) {
   case 0:
    if (HEAP32[$0 + 84 >> 2]) {
     HEAP32[$2 + 4 >> 2] = 152;
     if (HEAP32[$2 + 12 >> 2]) {
      break label$1;
     }
     wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 28 >> 2]]($0, HEAP32[$2 + 8 >> 2], 0, HEAP32[$2 + 16 >> 2], 1) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
     break label$1;
    }
    HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$0 + 476 >> 2] + 4 >> 2];
    break label$1;
   case 3:
    if (!HEAP32[$2 + 8 >> 2]) {
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 20 >> 2] = 3;
     FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
    }
    HEAP32[$2 + 4 >> 2] = 153;
    break label$1;
   case 2:
    if (!HEAP32[$2 + 8 >> 2]) {
     $1 = HEAP32[$0 >> 2];
     HEAP32[$1 + 20 >> 2] = 3;
     FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
    }
    HEAP32[$2 + 4 >> 2] = 154;
    break label$1;
   default:
    break label$2;
   }
  }
  $1 = HEAP32[$0 >> 2];
  HEAP32[$1 + 20 >> 2] = 3;
  FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
 }
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b41_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b41_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b41_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b41_5d___type__29_29_20_5b41_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b34_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b34_5d___type__29_29_20_5b34_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b27_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b27_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b27_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b27_5d___type__29_29_20_5b27_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b25_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b25_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b25_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b25_5d___type__29_29_20_5b25_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b22_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b22_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b22_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b22_5d___type__29_29_20_5b22_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b20_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b20_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b20_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b20_5d___type__29_29_20_5b20_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b19_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b19_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b19_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b19_5d___type__29_29_20_5b19_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b18_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b18_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b18_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b18_5d___type__29_29_20_5b18_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b14_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b14_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b14_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b14_5d___type__29_29_20_5b14_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___operator_28_29_28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____29($0, $1) {
 if (HEAPU8[$0 + 4 | 0]) {
  void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___destroy_std____2__pair_int_20const_2c_20arIset__20__28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___29(HEAP32[$0 >> 2], std____2____hash_key_value_types_std____2____hash_value_type_int_2c_20arIset__20_____get_ptr_28std____2____hash_value_type_int_2c_20arIset___29($1 + 8 | 0));
 }
 if ($1) {
  std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___deallocate_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20unsigned_20long_29(HEAP32[$0 >> 2], $1, 1);
 }
}
function jpeg_CreateDecompress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 if (($1 | 0) != 90) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = 13;
  HEAP32[$3 + 24 >> 2] = 90;
  HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 if (($2 | 0) != 488) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 20 >> 2] = 22;
  HEAP32[$3 + 24 >> 2] = 488;
  HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $2;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $2 = HEAP32[$0 >> 2];
 $1 = HEAP32[$0 + 12 >> 2];
 memset($0 + 4 | 0, 0, 484);
 HEAP32[$0 + 16 >> 2] = 1;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 >> 2] = $2;
 jinit_memory_mgr($0);
 HEAP32[$0 + 312 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP32[$0 + 172 >> 2] = 0;
 HEAP32[$0 + 176 >> 2] = 0;
 HEAP32[$0 + 180 >> 2] = 0;
 HEAP32[$0 + 184 >> 2] = 0;
 HEAP32[$0 + 188 >> 2] = 0;
 HEAP32[$0 + 192 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 HEAP32[$0 + 200 >> 2] = 0;
 HEAP32[$0 + 204 >> 2] = 0;
 HEAP32[$0 + 208 >> 2] = 0;
 jinit_marker_reader($0);
 jinit_input_controller($0);
 HEAP32[$0 + 20 >> 2] = 200;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d($1));
 $2 = HEAP32[$2 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $0 = $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($3 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b3_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b3_5d___type__29_29_20_5b3_5d($2));
 $4 = HEAP32[$2 + 4 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 + 4 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__PostfixExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 32372);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 28015);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 29260);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29_1($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29_1($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__StringLiteral__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 24428);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 24431);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 31684);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 16 | 0, 23378);
 $5 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray_20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___makeNodeArray__28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = $1 + 416 | 0;
 $1 = $3 - $2 >> 2;
 $4 = $28anonymous_20namespace_29__DefaultAllocator__allocateNodeArray_28unsigned_20long_29($4, $1);
 $28anonymous_20namespace_29__itanium_demangle__Node___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($2, $3, $4);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20unsigned_20long_29($0, $4, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($2 + 24 | 0, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
 $4 = HEAP32[$1 + 4 >> 2];
 $5 = HEAP32[$1 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 HEAP32[$2 + 16 >> 2] = $5;
 HEAP32[$2 + 20 >> 2] = $4;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__startsWith_28_28anonymous_20namespace_29__itanium_demangle__StringView_29_20const($3, $2 + 8 | 0);
 if ($3) {
  wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$0 >> 2] + $28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($1) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 __stack_pointer = $2 + 32 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__BracedExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0 + 416 | 0, $1, $2, bool___20std____2__forward_bool__28std____2__remove_reference_bool___type__29($3));
}
function std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___find_28int_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = HEAP32[std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____29($2 + 8 | 0, std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___find_int__28int_20const__29($0, $1)) >> 2];
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___unique_ptr_true_2c_20void__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20_____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____default_init_tag__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________2c_20std____2____default_init_tag___29($0, $1 + 12 | 0, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 label$1 : {
  if (!$3) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
  if ($28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1)) {
   break label$1;
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 24984);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 }
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 24984);
 $4 = HEAP32[$3 >> 2];
 $3 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $4 = HEAP32[$0 + 16 >> 2];
 $3 = HEAP32[$0 + 12 >> 2];
 $0 = $3;
 HEAP32[$2 >> 2] = $3;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b11_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b11_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b11_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b11_5d_29($0 + 416 | 0, $1, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d(31537));
}
function std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___operator_28_29_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______29($0, $1) {
 std____2__allocator_traits_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___deallocate_28std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________2c_20std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20unsigned_20long_29(std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20_____alloc_28_29($0), $1, HEAP32[std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___size_28_29($0) >> 2]);
}
function build_ycc_rgb_table($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[$0 + 480 >> 2];
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0, HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 1024) | 0;
 HEAP32[$1 + 20 >> 2] = $3;
 $4 = HEAP32[$1 + 16 >> 2];
 $5 = HEAP32[$1 + 12 >> 2];
 $6 = HEAP32[$1 + 8 >> 2];
 $0 = -128;
 while (1) {
  $1 = $2 << 2;
  HEAP32[$6 + $1 >> 2] = Math_imul($0, 91881) + 32768 >> 16;
  HEAP32[$1 + $5 >> 2] = Math_imul($0, 116130) + 32768 >> 16;
  HEAP32[$1 + $4 >> 2] = Math_imul($0, -46802);
  HEAP32[$1 + $3 >> 2] = Math_imul($0, -22553) + 32768;
  $0 = $0 + 1 | 0;
  $2 = $2 + 1 | 0;
  if (($2 | 0) != 256) {
   continue;
  }
  break;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b9_5d_29($0 + 416 | 0, $1, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d(31528));
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 $3 = $0;
 $2 = HEAP32[$3 + 8 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 $4 = $2;
 $2 = $5;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $0;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$3 + 16 >> 2], $1);
 $2 = HEAP32[$3 + 24 >> 2];
 $0 = HEAP32[$3 + 20 >> 2];
 $4 = $0;
 $0 = $5;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP32[$0 + 20 >> 2] = $2;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $0);
 __stack_pointer = $0 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
   if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
    break label$1;
   }
  }
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 23378);
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 }
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 __stack_pointer = $2 + 16 | 0;
}
function std____2____compressed_pair_elem_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__2c_201_2c_20false_____compressed_pair_elem_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__2c_20void__28std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____29($0, $1) {
 var $2 = 0;
 $1 = std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____20std____2__forward_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__28std____2__remove_reference_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___type__29($1);
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___parseEncoding_28_29___lambda__28_29__operator_28_29_28_29_20const($0) {
 var $1 = 0;
 label$1 : {
  $1 = HEAP32[$0 >> 2];
  $0 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($1);
  if (!$0) {
   break label$1;
  }
  $1 = $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($1, 0) - 46 | 0;
  if (($1 & 255) >>> 0 > 49) {
   break label$1;
  }
  $0 = $1 & 31;
  return (($1 & 63) >>> 0 >= 32 ? 131072 >>> $0 | 0 : ((1 << $0) - 1 & 131072) << 32 - $0 | 8388609 >>> $0) & 1;
 }
 return !$0;
}
function std____2__pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20bool___pair_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20bool__2c_20false__28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20bool__29($0, $1, $2) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20std____2__forward_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20__28std____2__remove_reference_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20___type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAPU8[bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($2) | 0], HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b34_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b34_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b34_5d___type__29_29_20_5b34_5d($1), $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b41_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b41_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b41_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b41_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b41_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b41_5d___type__29_29_20_5b41_5d(22555), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b27_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b27_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b27_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b27_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b27_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b27_5d___type__29_29_20_5b27_5d(22494), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b25_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b25_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b25_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b25_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b25_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b25_5d___type__29_29_20_5b25_5d(22656), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b22_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b22_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b22_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b22_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b22_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b22_5d___type__29_29_20_5b22_5d(22614), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b20_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b20_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b20_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b20_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b20_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b20_5d___type__29_29_20_5b20_5d(22636), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b19_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b19_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b19_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b19_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b19_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b19_5d___type__29_29_20_5b19_5d(22475), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b18_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b18_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b18_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b18_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b18_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b18_5d___type__29_29_20_5b18_5d(22596), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b14_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b14_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b14_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b14_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b14_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b14_5d___type__29_29_20_5b14_5d(22461), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b12_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d(22440), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PostfixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20char_20const_20_28__29_20_5b3_5d_29($0 + 416 | 0, $1, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b3_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b3_5d___type__29_29_20_5b3_5d($2));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialName_2c_20char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28char_20const_20_28__29_20_5b9_5d_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d(22452), $1);
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__FunctionEncoding_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_29($0, $1, $2, $3, $4, $5, $6) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 18, 0, 1, 0);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 31076;
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP8[$0 + 32 | 0] = $6;
 HEAP32[$0 + 28 >> 2] = $5;
 HEAP32[$0 + 24 >> 2] = $4;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $1;
 return $0;
}
function void_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___construct_std____2__pair_int_20const_2c_20arIset__2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const___2c_20std____2__tuple___20__28std____2__pair_int_20const_2c_20arIset___2c_20std____2__piecewise_construct_t_20const__2c_20std____2__tuple_int_20const_____2c_20std____2__tuple_____29($0, $1, $2, $3, $4) {
 std____2__piecewise_construct_t_20const__20std____2__forward_std____2__piecewise_construct_t_20const___28std____2__remove_reference_std____2__piecewise_construct_t_20const____type__29($2);
 $3 = HEAP32[std____2__tuple_int_20const_____20std____2__forward_std____2__tuple_int_20const___20__28std____2__remove_reference_std____2__tuple_int_20const___20___type__29($3) >> 2];
 std____2__tuple_____20std____2__forward_std____2__tuple___20__28std____2__remove_reference_std____2__tuple___20___type__29($4);
 std____2__pair_int_20const_2c_20arIset___pair_int_20const___28std____2__piecewise_construct_t_2c_20std____2__tuple_int_20const___2c_20std____2__tuple___29($1, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0 + 416 | 0, $1, $2);
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0, $3 = 0;
 while (1) {
  $2 = ($0 | 0) == ($1 | 0);
  if (!$2) {
   $3 = HEAP32[$0 >> 2];
   $0 = $0 + 4 | 0;
   if ($28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($3)) {
    continue;
   }
  }
  break;
 }
 return $2;
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0, $3 = 0;
 while (1) {
  $2 = ($0 | 0) == ($1 | 0);
  if (!$2) {
   $3 = HEAP32[$0 >> 2];
   $0 = $0 + 4 | 0;
   if ($28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($3)) {
    continue;
   }
  }
  break;
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function bool_20std____2__all_of__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29_29($0, $1) {
 var $2 = 0, $3 = 0;
 while (1) {
  $2 = ($0 | 0) == ($1 | 0);
  if (!$2) {
   $3 = HEAP32[$0 >> 2];
   $0 = $0 + 4 | 0;
   if ($28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($3)) {
    continue;
   }
  }
  break;
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName_2c_20_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind__2c_20unsigned_20int___28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind__2c_20unsigned_20int__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName_2c_20_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind__2c_20unsigned_20int___28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind__2c_20unsigned_20int__29($0 + 416 | 0, $1, unsigned_20int__20std____2__forward_unsigned_20int___28std____2__remove_reference_unsigned_20int____type__29($2));
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl__TemplateTemplateParamDecl_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
  return;
 }
 $4 = HEAP32[$0 + 12 >> 2];
 $5 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
 label$2 : {
  if (($4 | 0) < 2) {
   break label$2;
  }
  $4 = ($4 << 3) + $5 | 0;
  $0 = $0 + 24 | 0;
  while (1) {
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
   $0 = $0 + 8 | 0;
   if ($4 >>> 0 <= $0 >>> 0) {
    break label$2;
   }
   if (!HEAPU8[$1 + 54 | 0]) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__IntegerLiteral_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerLiteral_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $4 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__ElaboratedTypeSpefType_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VendorExtQualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VendorExtQualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ReferenceType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0 + 416 | 0, $1, $2);
}
function post_process_2pass($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0;
 $1 = HEAP32[$0 + 456 >> 2];
 $2 = HEAP32[$1 + 24 >> 2];
 label$1 : {
  if ($2) {
   $3 = HEAP32[$1 + 12 >> 2];
   break label$1;
  }
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 28 >> 2]]($0, HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], 0) | 0;
  HEAP32[$1 + 12 >> 2] = $3;
  $2 = HEAP32[$1 + 24 >> 2];
 }
 $7 = ($2 << 2) + $3 | 0;
 $3 = HEAP32[$5 >> 2];
 $8 = ($3 << 2) + $4 | 0;
 $4 = HEAP32[$0 + 116 >> 2] - HEAP32[$1 + 20 >> 2] | 0;
 $6 = $6 - $3 | 0;
 $2 = HEAP32[$1 + 16 >> 2] - $2 | 0;
 $2 = $6 >>> 0 < $2 >>> 0 ? $6 : $2;
 $2 = $4 >>> 0 < $2 >>> 0 ? $4 : $2;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] + 4 >> 2]]($0, $7, $8, $2);
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $2;
 $0 = HEAP32[$1 + 24 >> 2] + $2 | 0;
 HEAP32[$1 + 24 >> 2] = $0;
 $5 = HEAP32[$1 + 16 >> 2];
 if ($5 >>> 0 <= $0 >>> 0) {
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + $5;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VendorExtQualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__VendorExtQualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ObjCProtoName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ObjCProtoName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PointerToMemberType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PointerToMemberType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__IntegerCastExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__AbiTagAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__AbiTagAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1, $2);
}



function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1, $2);
}
function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   break label$2;
  }
  if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
   if (($3 | 0) != 1) {
    break label$2;
   }
   HEAP32[$1 + 32 >> 2] = 1;
   return;
  }
  HEAP32[$1 + 20 >> 2] = $2;
  HEAP32[$1 + 32 >> 2] = $3;
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
  if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
   HEAP8[$1 + 54 | 0] = 1;
  }
  HEAP32[$1 + 44 >> 2] = 4;
 }
}
function memchr($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = ($2 | 0) != 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if (!$2 | !($0 & 3)) {
     break label$3;
    }
    $4 = $1 & 255;
    while (1) {
     if (HEAPU8[$0 | 0] == ($4 | 0)) {
      break label$2;
     }
     $0 = $0 + 1 | 0;
     $2 = $2 - 1 | 0;
     $3 = ($2 | 0) != 0;
     if (!$2) {
      break label$3;
     }
     if ($0 & 3) {
      continue;
     }
     break;
    }
   }
   if (!$3) {
    break label$1;
   }
  }
  label$5 : {
   if (HEAPU8[$0 | 0] == ($1 & 255) | $2 >>> 0 < 4) {
    break label$5;
   }
   $4 = Math_imul($1 & 255, 16843009);
   while (1) {
    $3 = HEAP32[$0 >> 2] ^ $4;
    if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
     break label$5;
    }
    $0 = $0 + 4 | 0;
    $2 = $2 - 4 | 0;
    if ($2 >>> 0 > 3) {
     continue;
    }
    break;
   }
  }
  if (!$2) {
   break label$1;
  }
  $3 = $1 & 255;
  while (1) {
   if (HEAPU8[$0 | 0] == ($3 | 0)) {
    return $0;
   }
   $0 = $0 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PrefixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PrefixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0 + 416 | 0, $1, bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($2), bool___20std____2__forward_bool__28std____2__remove_reference_bool___type__29($3));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0 + 416 | 0, $1, bool___20std____2__forward_bool__28std____2__remove_reference_bool___type__29($2), int__20std____2__forward_int___28std____2__remove_reference_int____type__29($3));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DotSuffix_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__DotSuffix__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DotSuffix_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__ConversionExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__ConversionExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ObjCProtoName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__ObjCProtoName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20std__nullptr_t_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28std__nullptr_t___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($1);
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $1;
 $2 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, 0, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__QualType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__QualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 if (HEAPU8[$0 + 12 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 23416);
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $4;
  HEAP32[$2 + 12 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($2 + 16 | 0, $0);
 $4 = HEAP32[$2 + 20 >> 2];
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$2 >> 2] = $3;
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__CallExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__CallExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CallExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__QualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node___20std____2__copy__28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 std____2__enable_if__28is_same_std____2__remove_const__28anonymous_20namespace_29__itanium_demangle__Node____type_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_trivially_copy_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_____type_20std____2____copy__28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2);
}
function wcrtomb($0, $1, $2) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = 1;
 label$1 : {
  if ($0) {
   if ($1 >>> 0 <= 127) {
    break label$1;
   }
   label$3 : {
    if (!HEAP32[HEAP32[__pthread_self() + 172 >> 2] >> 2]) {
     if (($1 & -128) == 57216) {
      break label$1;
     }
     break label$3;
    }
    if ($1 >>> 0 <= 2047) {
     HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 6 | 192;
     return 2;
    }
    if (!(($1 & -8192) != 57344 ? $1 >>> 0 >= 55296 : 0)) {
     HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 12 | 224;
     HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
     return 3;
    }
    if ($1 - 65536 >>> 0 <= 1048575) {
     HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 18 | 240;
     HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
     HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
     return 4;
    }
   }
   wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $2 = -1;
  }
  return $2;
 }
 HEAP8[$0 | 0] = $1;
 return 1;
}
function jpeg_finish_decompress($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 20 >> 2];
 label$1 : {
  if (!(HEAP32[$0 + 64 >> 2] | $1 - 205 >>> 0 > 1)) {
   if (HEAPU32[$0 + 140 >> 2] < HEAPU32[$0 + 116 >> 2]) {
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 20 >> 2] = 69;
    FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 + 444 >> 2] + 4 >> 2]]($0);
   HEAP32[$0 + 20 >> 2] = 210;
   break label$1;
  }
  label$4 : {
   switch ($1 - 207 | 0) {
   case 0:
    HEAP32[$0 + 20 >> 2] = 210;
    break label$1;
   case 3:
    break label$1;
   default:
    break label$4;
   }
  }
  $2 = HEAP32[$0 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = 21;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 label$6 : {
  while (1) {
   $1 = HEAP32[$0 + 460 >> 2];
   if (HEAP32[$1 + 20 >> 2]) {
    break label$6;
   }
   if (FUNCTION_TABLE[HEAP32[$1 >> 2]]($0) | 0) {
    continue;
   }
   break;
  }
  return 0;
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 24 >> 2]]($0);
 jpeg_abort($0);
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NestedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__NestedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NestedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DotSuffix_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__DotSuffix__DotSuffix_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__LocalName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ArrayType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ArrayType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ArrayType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PrefixExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__StringView__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $4 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__PrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $3, $2);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__AbiTagAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__AbiTagAttr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CallExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20);
 $1 = HEAP32[$1 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $4;
 $2 = $28anonymous_20namespace_29__itanium_demangle__CallExpr__CallExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $3);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function post_process_prepass($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0;
 $4 = HEAP32[$0 + 456 >> 2];
 $8 = $4 + 24 | 0;
 $6 = HEAP32[$4 + 24 >> 2];
 label$1 : {
  if ($6) {
   $7 = HEAP32[$4 + 12 >> 2];
   break label$1;
  }
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], 1) | 0;
  HEAP32[$4 + 12 >> 2] = $7;
  $6 = HEAP32[$4 + 24 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 476 >> 2] + 4 >> 2]]($0, $1, $2, $3, $7, $8, HEAP32[$4 + 16 >> 2]);
 $1 = HEAP32[$4 + 24 >> 2];
 if ($6 >>> 0 < $1 >>> 0) {
  $2 = HEAP32[$4 + 12 >> 2] + ($6 << 2) | 0;
  $6 = $1 - $6 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] + 4 >> 2]]($0, $2, 0, $6);
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + $6;
  $1 = HEAP32[$4 + 24 >> 2];
 }
 $0 = HEAP32[$4 + 16 >> 2];
 if ($1 >>> 0 >= $0 >>> 0) {
  HEAP32[$4 + 24 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + $0;
 }
}
function rgb1_gray_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 if (($4 | 0) >= 1) {
  $6 = HEAP32[$0 + 112 >> 2];
  $0 = HEAP32[HEAP32[$0 + 480 >> 2] + 24 >> 2];
  while (1) {
   $7 = $4;
   if ($6) {
    $4 = $2 << 2;
    $8 = HEAP32[$4 + HEAP32[$1 + 8 >> 2] >> 2];
    $9 = HEAP32[HEAP32[$1 + 4 >> 2] + $4 >> 2];
    $10 = HEAP32[HEAP32[$1 >> 2] + $4 >> 2];
    $11 = HEAP32[$3 >> 2];
    $4 = 0;
    while (1) {
     $5 = HEAPU8[$4 + $9 | 0];
     $12 = HEAP32[($5 << 2 | 1024) + $0 >> 2];
     $5 = $5 + 128 | 0;
     HEAP8[$4 + $11 | 0] = ($12 + HEAP32[(($5 + HEAPU8[$4 + $10 | 0] & 255) << 2) + $0 >> 2] | 0) + HEAP32[((HEAPU8[$4 + $8 | 0] + $5 & 255) << 2 | 2048) + $0 >> 2] >>> 16;
     $4 = $4 + 1 | 0;
     if (($6 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $3 + 4 | 0;
   $2 = $2 + 1 | 0;
   $4 = $7 - 1 | 0;
   if (($7 | 0) >= 2) {
    continue;
   }
   break;
  }
 }
}
function std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___end_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = HEAP32[std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____29($1 + 8 | 0, std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___end_28_29($0)) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20std__nullptr_t_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28std__nullptr_t___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__InitListExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__InitListExpr_2c_20std__nullptr_t_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28std__nullptr_t___2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($1), $2);
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__ClosureTypeName_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 45, 1, 1, 1);
 HEAP32[$0 >> 2] = 25264;
 $4 = $1;
 $1 = HEAP32[$4 >> 2];
 $5 = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $5;
 $4 = $2;
 $5 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = $5;
 HEAP32[$0 + 20 >> 2] = $1;
 $4 = $3;
 $1 = HEAP32[$4 >> 2];
 $5 = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 24 >> 2] = $1;
 HEAP32[$0 + 28 >> 2] = $5;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__find_28char_2c_20unsigned_20long_29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = 0;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
 $2 = unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 12 | 0, $3 + 8 | 0);
 $4 = -1;
 $5 = $28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($0);
 $2 = HEAP32[$2 >> 2];
 label$1 : {
  if ($5 >>> 0 <= $2 >>> 0) {
   break label$1;
  }
  $2 = memchr_28void_20const__2c_20int_2c_20unsigned_20long_29_20_5benable_if_true_5d(HEAP32[$0 >> 2] + $2 | 0, $1, $5 - $2 | 0);
  if (!$2) {
   break label$1;
  }
  $4 = $2 - HEAP32[$0 >> 2] | 0;
 }
 __stack_pointer = $3 + 16 | 0;
 return $4;
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($1);
 std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___20const__29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 if (($2 | 0) == HEAP32[$0 + 8 >> 2]) {
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___reserve_28unsigned_20long_29($0, $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___size_28_29_20const($0) << 1);
  $2 = HEAP32[$0 + 4 >> 2];
 }
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 4;
 HEAP32[$2 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__FunctionType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_2c_20_28anonymous_20namespace_29__itanium_demangle__FunctionRefQual_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3, $4, $5) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 15, 0, 1, 0);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 31828;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 28 >> 2] = $5;
 HEAP8[$0 + 24 | 0] = $4;
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionParam__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 24 | 0, 25596);
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2 + 8 | 0);
 $3 = $0;
 $5 = HEAP32[$3 + 8 >> 2];
 $4 = HEAP32[$3 + 12 >> 2];
 $0 = $5;
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 32 | 0;
}
function __stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 16 >> 2] = $1;
 $4 = HEAP32[$0 + 48 >> 2];
 HEAP32[$3 + 20 >> 2] = $2 - (($4 | 0) != 0);
 $5 = HEAP32[$0 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = $4;
 HEAP32[$3 + 24 >> 2] = $5;
 $4 = -1;
 label$1 : {
  label$2 : {
   if (!__wasi_syscall_ret(__wasi_fd_read(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
    $4 = HEAP32[$3 + 12 >> 2];
    if (($4 | 0) > 0) {
     break label$2;
    }
   }
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $4 & 48 ^ 16;
   break label$1;
  }
  $6 = HEAP32[$3 + 20 >> 2];
  if ($6 >>> 0 >= $4 >>> 0) {
   break label$1;
  }
  $5 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 4 >> 2] = $5;
  HEAP32[$0 + 8 >> 2] = ($4 - $6 | 0) + $5;
  if (HEAP32[$0 + 48 >> 2]) {
   HEAP32[$0 + 4 >> 2] = $5 + 1;
   HEAP8[($1 + $2 | 0) - 1 | 0] = HEAPU8[$5 | 0];
  }
  $4 = $2;
 }
 __stack_pointer = $3 + 32 | 0;
 return $4 | 0;
}
function use_merged_upsample($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  if (HEAP32[$0 + 308 >> 2]) {
   break label$1;
  }
  label$2 : {
   switch (HEAP32[$0 + 40 >> 2] - 3 | 0) {
   case 0:
   case 4:
    break label$2;
   default:
    break label$1;
   }
  }
  if (HEAP32[$0 + 36 >> 2] != 3 | HEAP32[$0 + 44 >> 2] != 2 | (HEAP32[$0 + 304 >> 2] | HEAP32[$0 + 120 >> 2] != 3)) {
   break label$1;
  }
  $1 = HEAP32[$0 + 216 >> 2];
  if (HEAP32[$1 + 8 >> 2] != 2 | HEAP32[$1 + 96 >> 2] != 1 | (HEAP32[$1 + 184 >> 2] != 1 | HEAP32[$1 + 12 >> 2] > 2)) {
   break label$1;
  }
  if (HEAP32[$1 + 100 >> 2] != 1 | HEAP32[$1 + 188 >> 2] != 1) {
   break label$1;
  }
  $2 = HEAP32[$1 + 36 >> 2];
  if (($2 | 0) != HEAP32[$0 + 324 >> 2] | HEAP32[$1 + 124 >> 2] != ($2 | 0) | HEAP32[$1 + 212 >> 2] != ($2 | 0)) {
   break label$1;
  }
  $2 = HEAP32[$1 + 40 >> 2];
  if (($2 | 0) != HEAP32[$0 + 328 >> 2] | HEAP32[$1 + 128 >> 2] != ($2 | 0)) {
   break label$1;
  }
  return HEAP32[$1 + 216 >> 2] == ($2 | 0);
 }
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20std__nullptr_t__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20std__nullptr_t___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20std__nullptr_t__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20std__nullptr_t___29($0 + 416 | 0, $1, std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($2));
}
function void_20emscripten__function_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__28char_20const__2c_20nftMarker_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 _embind_register_function($0 | 0, emscripten__internal__WithPolicies____ArgTypeList_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___getCount_28_29_20const($2 + 8 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___getTypes_28_29_20const($2 + 8 | 0) | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, 16, $1 | 0);
 __stack_pointer = $2 + 16 | 0;
}
function emscripten__value_object_nftMarker___20emscripten__value_object_nftMarker___field_nftMarker_2c_20int__28char_20const__2c_20int_20nftMarker____29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 _embind_register_value_object_field(emscripten__internal__TypeID_nftMarker_2c_20void___get_28_29() | 0, $1 | 0, emscripten__internal__TypeID_int_2c_20void___get_28_29() | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() | 0, 19, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($3 + 12 | 0) | 0, emscripten__internal__TypeID_int_2c_20void___get_28_29() | 0, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() | 0, 20, int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($3 + 12 | 0) | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function jpeg_huff_decode($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 if (($2 | 0) < ($4 | 0)) {
  if (!jpeg_fill_bit_buffer($0, $1, $2, $4)) {
   return -1;
  }
  $2 = HEAP32[$0 + 12 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
 }
 $6 = $4 << 2;
 $2 = $2 - $4 | 0;
 $5 = HEAP32[$6 + 18080 >> 2] & $1 >> $2;
 if (($5 | 0) > HEAP32[$3 + $6 >> 2]) {
  while (1) {
   if (($2 | 0) <= 0) {
    if (!jpeg_fill_bit_buffer($0, $1, $2, 1)) {
     return -1;
    }
    $2 = HEAP32[$0 + 12 >> 2];
    $1 = HEAP32[$0 + 8 >> 2];
   }
   $2 = $2 - 1 | 0;
   $5 = $1 >>> $2 & 1 | $5 << 1;
   $4 = $4 + 1 | 0;
   if (($5 | 0) > HEAP32[($4 << 2) + $3 >> 2]) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 if (($4 | 0) >= 17) {
  $2 = HEAP32[$0 + 16 >> 2];
  $4 = HEAP32[$2 >> 2];
  HEAP32[$4 + 20 >> 2] = 121;
  FUNCTION_TABLE[HEAP32[$4 + 4 >> 2]]($2, -1);
  return 0;
 }
 return HEAPU8[(HEAP32[$3 + 140 >> 2] + (HEAP32[(($4 << 2) + $3 | 0) + 72 >> 2] + $5 | 0) | 0) + 17 | 0];
}
function pass2_no_dither($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 if (($3 | 0) >= 1) {
  $9 = HEAP32[$0 + 112 >> 2];
  $14 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
  while (1) {
   if ($9) {
    $4 = $6 << 2;
    $5 = HEAP32[$4 + $1 >> 2];
    $4 = HEAP32[$2 + $4 >> 2];
    $7 = $9;
    while (1) {
     $10 = HEAPU8[$5 | 0] >>> 3 | 0;
     $11 = HEAPU8[$5 + 1 | 0] >>> 2 | 0;
     $12 = HEAPU8[$5 + 2 | 0] >>> 3 | 0;
     $13 = (HEAP32[($10 << 2) + $14 >> 2] + ($11 << 6) | 0) + ($12 << 1) | 0;
     $8 = HEAPU16[$13 >> 1];
     if (!$8) {
      fill_inverse_cmap($0, $10, $11, $12);
      $8 = HEAPU8[$13 | 0];
     }
     $5 = $5 + 3 | 0;
     HEAP8[$4 | 0] = $8 - 1;
     $4 = $4 + 1 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue;
     }
     break;
    }
   }
   $6 = $6 + 1 | 0;
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___bucket_count_28_29_20const($0) {
 return std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___size_28_29_20const(std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___get_deleter_28_29_20const($0));
}
function color_quantize($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 if (($3 | 0) >= 1) {
  $4 = HEAP32[$0 + 120 >> 2];
  $11 = HEAP32[$0 + 112 >> 2];
  $12 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
  while (1) {
   if ($11) {
    $0 = $5 << 2;
    $6 = HEAP32[$1 + $0 >> 2];
    $7 = HEAP32[$0 + $2 >> 2];
    $8 = $11;
    while (1) {
     $9 = 0;
     $0 = 0;
     $10 = $6;
     if (($4 | 0) >= 1) {
      while (1) {
       $9 = HEAPU8[HEAP32[($0 << 2) + $12 >> 2] + HEAPU8[$10 | 0] | 0] + $9 | 0;
       $10 = $10 + 1 | 0;
       $0 = $0 + 1 | 0;
       if (($4 | 0) != ($0 | 0)) {
        continue;
       }
       break;
      }
      $6 = $6 + $4 | 0;
     }
     HEAP8[$7 | 0] = $9;
     $7 = $7 + 1 | 0;
     $8 = $8 - 1 | 0;
     if ($8) {
      continue;
     }
     break;
    }
   }
   $5 = $5 + 1 | 0;
   if (($5 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConditionalExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__ConditionalExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20), HEAP32[$1 >> 2], HEAP32[$2 >> 2], HEAP32[$3 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__BracedRangeExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20), HEAP32[$1 >> 2], HEAP32[$2 >> 2], HEAP32[$3 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr__NewExpr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 56, 1, 1, 1);
 HEAP32[$0 >> 2] = 28476;
 $6 = HEAP32[$1 >> 2];
 $7 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $6;
 HEAP32[$0 + 12 >> 2] = $7;
 $1 = $3;
 $7 = HEAP32[$1 >> 2];
 $6 = HEAP32[$1 + 4 >> 2];
 HEAP8[$0 + 29 | 0] = $5;
 HEAP8[$0 + 28 | 0] = $4;
 HEAP32[$0 + 20 >> 2] = $7;
 HEAP32[$0 + 24 >> 2] = $6;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b22_5d__28char_20const_20_28__29_20_5b22_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b22_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b22_5d___type__29_29_20_5b22_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b19_5d__28char_20const_20_28__29_20_5b19_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b19_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b19_5d___type__29_29_20_5b19_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b18_5d__28char_20const_20_28__29_20_5b18_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b18_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b18_5d___type__29_29_20_5b18_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b16_5d__28char_20const_20_28__29_20_5b16_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b16_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b16_5d___type__29_29_20_5b16_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b15_5d__28char_20const_20_28__29_20_5b15_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b15_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b15_5d___type__29_29_20_5b15_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b14_5d__28char_20const_20_28__29_20_5b14_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b14_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b14_5d___type__29_29_20_5b14_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b13_5d__28char_20const_20_28__29_20_5b13_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b13_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b13_5d___type__29_29_20_5b13_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b10_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b10_5d___type__29_29_20_5b10_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___release_28_29($0) {
 var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___first_28_29($0) >> 2];
 wasm2js_i32$0 = std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___first_28_29($0), wasm2js_i32$1 = 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $1;
}
function jpeg_read_scanlines($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $3 = HEAP32[$0 + 20 >> 2];
 if (($3 | 0) != 205) {
  $5 = HEAP32[$0 >> 2];
  HEAP32[$5 + 24 >> 2] = $3;
  HEAP32[$5 + 20 >> 2] = 21;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $5 = HEAP32[$0 + 140 >> 2];
 $6 = HEAP32[$0 + 116 >> 2];
 label$2 : {
  if ($5 >>> 0 >= $6 >>> 0) {
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 126;
   FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]($0, -1);
   $1 = 0;
   break label$2;
  }
  $3 = HEAP32[$0 + 8 >> 2];
  if ($3) {
   HEAP32[$3 + 8 >> 2] = $6;
   HEAP32[$3 + 4 >> 2] = $5;
   FUNCTION_TABLE[HEAP32[$3 >> 2]]($0);
  }
  HEAP32[$4 + 12 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 448 >> 2] + 4 >> 2]]($0, $1, $4 + 12 | 0, $2);
  $1 = HEAP32[$4 + 12 >> 2];
  HEAP32[$0 + 140 >> 2] = $1 + HEAP32[$0 + 140 >> 2];
 }
 __stack_pointer = $4 + 16 | 0;
 return $1 | 0;
}
function std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_200_2c_20false_____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20void__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________20std____2__forward_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________28std____2__remove_reference_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b9_5d__28char_20const_20_28__29_20_5b9_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b8_5d__28char_20const_20_28__29_20_5b8_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b8_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b8_5d___type__29_29_20_5b8_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b7_5d__28char_20const_20_28__29_20_5b7_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b7_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b7_5d___type__29_29_20_5b7_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b6_5d__28char_20const_20_28__29_20_5b6_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b6_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b6_5d___type__29_29_20_5b6_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b5_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b5_5d___type__29_29_20_5b5_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b4_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b4_5d___type__29_29_20_5b4_5d($1));
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualifiedName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 23240);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 23240);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__LocalName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 23240);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__20std____2__min__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20std____2____less__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__20__28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20std____2____less__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__29($0, $1) {
 return std____2____less__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__29_20const($1, $0) ? $1 : $0;
}
function __strchrnul($0, $1) {
 var $2 = 0, $3 = 0;
 label$1 : {
  $3 = $1 & 255;
  if ($3) {
   if ($0 & 3) {
    while (1) {
     $2 = HEAPU8[$0 | 0];
     if (!$2 | ($1 & 255) == ($2 | 0)) {
      break label$1;
     }
     $0 = $0 + 1 | 0;
     if ($0 & 3) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 >> 2];
   label$5 : {
    if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
     break label$5;
    }
    $3 = Math_imul($3, 16843009);
    while (1) {
     $2 = $2 ^ $3;
     if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
      break label$5;
     }
     $2 = HEAP32[$0 + 4 >> 2];
     $0 = $0 + 4 | 0;
     if (!($2 - 16843009 & ($2 ^ -1) & -2139062144)) {
      continue;
     }
     break;
    }
   }
   while (1) {
    $2 = $0;
    $3 = HEAPU8[$2 | 0];
    if ($3) {
     $0 = $2 + 1 | 0;
     if (($1 & 255) != ($3 | 0)) {
      continue;
     }
    }
    break;
   }
   return $2;
  }
  return strlen($0) + $0 | 0;
 }
 return $0;
}
function fread($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 if (HEAP32[$3 + 76 >> 2] >= 0) {
  $7 = __lockfile($3);
 }
 $4 = HEAPU8[$3 + 74 | 0];
 HEAP8[$3 + 74 | 0] = $4 | $4 - 1;
 $6 = Math_imul($1, $2);
 $8 = HEAP32[$3 + 4 >> 2];
 $4 = HEAP32[$3 + 8 >> 2] - $8 | 0;
 $5 = $6;
 label$2 : {
  if (($4 | 0) < 1) {
   break label$2;
  }
  $5 = $4 >>> 0 < $6 >>> 0 ? $4 : $6;
  memcpy($0, $8, $5);
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + $5;
  $0 = $0 + $5 | 0;
  $5 = $6 - $5 | 0;
 }
 $4 = $5;
 if ($4) {
  while (1) {
   label$5 : {
    if (!__toread($3)) {
     $5 = FUNCTION_TABLE[HEAP32[$3 + 32 >> 2]]($3, $0, $4) | 0;
     if ($5 + 1 >>> 0 > 1) {
      break label$5;
     }
    }
    if ($7) {
     __unlockfile($3);
    }
    return ($6 - $4 >>> 0) / ($1 >>> 0) | 0;
   }
   $0 = $0 + $5 | 0;
   $4 = $4 - $5 | 0;
   if ($4) {
    continue;
   }
   break;
  }
 }
 $0 = $1 ? $2 : 0;
 if ($7) {
  __unlockfile($3);
 }
 return $0;
}
function alloc_large($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = HEAP32[$0 + 4 >> 2];
 if ($2 >>> 0 >= 999999985) {
  $4 = HEAP32[$0 >> 2];
  HEAP32[$4 + 20 >> 2] = 56;
  HEAP32[$4 + 24 >> 2] = 3;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $5 = $2 & 7;
 $5 = ($5 ? 8 - $5 | 0 : 0) + $2 | 0;
 if ($1 >>> 0 >= 2) {
  $2 = HEAP32[$0 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = 15;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $6 = $5 + 16 | 0;
 $2 = jpeg_get_large($0, $6);
 if (!$2) {
  $4 = HEAP32[$0 >> 2];
  HEAP32[$4 + 20 >> 2] = 56;
  HEAP32[$4 + 24 >> 2] = 4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + $6;
 $1 = ($1 << 2) + $3 | 0;
 $0 = $1 + 60 | 0;
 $3 = HEAP32[$0 >> 2];
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = $5;
 HEAP32[$2 >> 2] = $3;
 HEAP32[$1 + 60 >> 2] = $2;
 return $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__parse_discriminator_28char_20const__2c_20char_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  $2 = HEAP8[$0 | 0];
  if (($2 | 0) == 95) {
   $2 = $0 + 1 | 0;
   if (($2 | 0) == ($1 | 0)) {
    break label$1;
   }
   $2 = HEAP8[$0 + 1 | 0];
   if ($2 - 48 >>> 0 <= 9) {
    return $0 + 2 | 0;
   }
   if (($2 | 0) != 95) {
    break label$1;
   }
   $2 = $0 + 2 | 0;
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1;
    }
    $3 = HEAP8[$2 | 0];
    if ($3 - 48 >>> 0 <= 9) {
     $2 = $2 + 1 | 0;
     continue;
    }
    break;
   }
   return ($3 | 0) == 95 ? $2 + 1 | 0 : $0;
  }
  if ($2 - 48 >>> 0 > 9) {
   break label$1;
  }
  $2 = $0;
  while (1) {
   $2 = $2 + 1 | 0;
   if (($2 | 0) == ($1 | 0)) {
    return $1;
   }
   if (HEAP8[$2 | 0] - 48 >>> 0 < 10) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function skip_variable($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 if (!$2) {
  if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
   return 0;
  }
  $2 = HEAP32[$1 + 4 >> 2];
 }
 $3 = HEAP32[$1 >> 2];
 $5 = HEAPU8[$3 | 0];
 $4 = $3 + 1 | 0;
 $2 = $2 - 1 | 0;
 label$3 : {
  if ($2) {
   break label$3;
  }
  if (!(FUNCTION_TABLE[HEAP32[$1 + 12 >> 2]]($0) | 0)) {
   return 0;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  $4 = HEAP32[$1 >> 2];
 }
 $3 = HEAPU8[$4 | 0];
 $6 = HEAP32[$0 >> 2];
 HEAP32[$6 + 20 >> 2] = 93;
 HEAP32[$6 + 24 >> 2] = HEAP32[$0 + 440 >> 2];
 $5 = $5 << 8 | $3;
 $3 = $5 - 2 | 0;
 HEAP32[HEAP32[$0 >> 2] + 28 >> 2] = $3;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 1);
 HEAP32[$1 + 4 >> 2] = $2 - 1;
 HEAP32[$1 >> 2] = $4 + 1;
 if ($5 >>> 0 >= 3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 16 >> 2]]($0, $3);
 }
 return 1;
}
function rgb1_rgb_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 if (($4 | 0) >= 1) {
  $6 = HEAP32[$0 + 112 >> 2];
  while (1) {
   $7 = $4;
   if ($6) {
    $4 = $2 << 2;
    $8 = HEAP32[$4 + HEAP32[$1 + 8 >> 2] >> 2];
    $9 = HEAP32[HEAP32[$1 + 4 >> 2] + $4 >> 2];
    $10 = HEAP32[HEAP32[$1 >> 2] + $4 >> 2];
    $4 = HEAP32[$3 >> 2];
    $0 = 0;
    while (1) {
     $11 = HEAPU8[$0 + $10 | 0];
     $12 = HEAPU8[$0 + $8 | 0];
     $5 = HEAPU8[$0 + $9 | 0];
     HEAP8[$4 + 1 | 0] = $5;
     HEAP8[$4 + 2 | 0] = $5 + $12 ^ 128;
     HEAP8[$4 | 0] = $5 + $11 ^ 128;
     $4 = $4 + 3 | 0;
     $0 = $0 + 1 | 0;
     if (($6 | 0) != ($0 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $3 + 4 | 0;
   $2 = $2 + 1 | 0;
   $4 = $7 - 1 | 0;
   if (($7 | 0) >= 2) {
    continue;
   }
   break;
  }
 }
}
function rgb_gray_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 if (($4 | 0) >= 1) {
  $5 = HEAP32[$0 + 112 >> 2];
  $0 = HEAP32[HEAP32[$0 + 480 >> 2] + 24 >> 2];
  while (1) {
   $6 = $4;
   if ($5) {
    $4 = $2 << 2;
    $7 = HEAP32[$4 + HEAP32[$1 + 8 >> 2] >> 2];
    $8 = HEAP32[HEAP32[$1 + 4 >> 2] + $4 >> 2];
    $9 = HEAP32[HEAP32[$1 >> 2] + $4 >> 2];
    $10 = HEAP32[$3 >> 2];
    $4 = 0;
    while (1) {
     HEAP8[$4 + $10 | 0] = HEAP32[(HEAPU8[$4 + $7 | 0] << 2 | 2048) + $0 >> 2] + (HEAP32[(HEAPU8[$4 + $8 | 0] << 2 | 1024) + $0 >> 2] + HEAP32[(HEAPU8[$4 + $9 | 0] << 2) + $0 >> 2] | 0) >>> 16;
     $4 = $4 + 1 | 0;
     if (($5 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $3 + 4 | 0;
   $2 = $2 + 1 | 0;
   $4 = $6 - 1 | 0;
   if (($6 | 0) >= 2) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 if (!$28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1)) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 24984);
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 }
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__20std____2__min__28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__20std____2__min__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20std____2____less__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__20__28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20std____2____less__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__29($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $3 = HEAP32[$0 + 16 >> 2];
 $4 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 20 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function int_upsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 if (HEAP32[$0 + 320 >> 2] >= 1) {
  $1 = HEAP32[$0 + 476 >> 2] + HEAP32[$1 + 4 >> 2] | 0;
  $5 = HEAPU8[$1 + 140 | 0];
  $6 = HEAP32[$3 >> 2];
  $7 = HEAPU8[$1 + 150 | 0];
  $9 = $7 - 1 | 0;
  while (1) {
   $3 = HEAP32[$0 + 112 >> 2];
   if (($3 | 0) >= 1) {
    $1 = HEAP32[($4 << 2) + $6 >> 2];
    $10 = $3 + $1 | 0;
    $3 = HEAP32[($8 << 2) + $2 >> 2];
    while (1) {
     if ($5) {
      $1 = memset($1, HEAPU8[$3 | 0], $5) + $5 | 0;
     }
     $3 = $3 + 1 | 0;
     if ($1 >>> 0 < $10 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($7 >>> 0 >= 2) {
    jcopy_sample_rows($6, $4, $6, $4 + 1 | 0, $9, HEAP32[$0 + 112 >> 2]);
   }
   $8 = $8 + 1 | 0;
   $4 = $4 + $7 | 0;
   if (($4 | 0) < HEAP32[$0 + 320 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20_____compressed_pair_int_2c_20std____2____default_init_tag__28int___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_int_2c_20void__28int___29($0, int___20std____2__forward_int__28std____2__remove_reference_int___type__29($1));
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__EnclosingExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 52, 1, 1, 1);
 HEAP32[$0 >> 2] = 28592;
 $4 = HEAP32[$1 >> 2];
 $5 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $5;
 $1 = $3;
 $5 = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = $5;
 HEAP32[$0 + 24 >> 2] = $4;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 31812);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 41);
 __stack_pointer = $2 + 16 | 0;
}
function std____2__enable_if__28is_same_std____2__remove_const__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____type_2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____value_29_20___20_28is_trivially_copy_assignable__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference____value_29_2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference_____type_20std____2____copy__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___2c_20_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___29($0, $1, $2) {
 $1 = $1 - $0 | 0;
 if ($1) {
  memmove($2, $0, $1);
 }
}
function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 $4 = 1;
 label$1 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
   break label$1;
  }
  $4 = 0;
  if (!$1) {
   break label$1;
  }
  $1 = __dynamic_cast($1, 21840, 21888, 0);
  if (!$1) {
   break label$1;
  }
  memset($3 + 8 | 4, 0, 52);
  HEAP32[$3 + 56 >> 2] = 1;
  HEAP32[$3 + 20 >> 2] = -1;
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
  $4 = HEAP32[$3 + 32 >> 2];
  if (($4 | 0) == 1) {
   HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
  }
  $4 = ($4 | 0) == 1;
 }
 __stack_pointer = $3 - -64 | 0;
 return $4 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 31052);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 93);
 __stack_pointer = $2 + 16 | 0;
}
function std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__20_____compressed_pair_int_2c_20std____2____default_init_tag__28int___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_int_2c_20void__28int___29($0, int___20std____2__forward_int__28std____2__remove_reference_int___type__29($1));
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 return $0;
}
function std____2____compressed_pair_float_2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__20_____compressed_pair_float_2c_20std____2____default_init_tag__28float___2c_20std____2____default_init_tag___29($0, $1, $2) {
 std____2____compressed_pair_elem_float_2c_200_2c_20false_____compressed_pair_elem_float_2c_20void__28float___29($0, float___20std____2__forward_float__28std____2__remove_reference_float___type__29($1));
 std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($2);
 std____2____compressed_pair_elem_std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 return $0;
}
function null_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 if (($4 | 0) >= 1) {
  $9 = HEAP32[$0 + 112 >> 2];
  $6 = HEAP32[$0 + 36 >> 2];
  $10 = ($6 | 0) < 1;
  while (1) {
   $5 = 0;
   if (!$10) {
    while (1) {
     if ($9) {
      $0 = HEAP32[HEAP32[($5 << 2) + $1 >> 2] + ($2 << 2) >> 2];
      $7 = HEAP32[$3 >> 2] + $5 | 0;
      $8 = 0;
      while (1) {
       HEAP8[$7 | 0] = HEAPU8[$0 | 0];
       $7 = $7 + $6 | 0;
       $0 = $0 + 1 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($9 | 0)) {
        continue;
       }
       break;
      }
     }
     $5 = $5 + 1 | 0;
     if (($6 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $3 + 4 | 0;
   $2 = $2 + 1 | 0;
   $0 = ($4 | 0) > 1;
   $4 = $4 - 1 | 0;
   if ($0) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___FloatLiteralImpl_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function vsniprintf($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 160 | 0;
 __stack_pointer = $4;
 memcpy($4 + 8 | 0, 20760, 144);
 label$1 : {
  label$2 : {
   if ($1 - 1 >>> 0 >= 2147483647) {
    if ($1) {
     break label$2;
    }
    $1 = 1;
    $0 = $4 + 159 | 0;
   }
   HEAP32[$4 + 52 >> 2] = $0;
   HEAP32[$4 + 28 >> 2] = $0;
   $5 = -2 - $0 | 0;
   $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
   HEAP32[$4 + 56 >> 2] = $1;
   $0 = $0 + $1 | 0;
   HEAP32[$4 + 36 >> 2] = $0;
   HEAP32[$4 + 24 >> 2] = $0;
   $0 = vfiprintf($4 + 8 | 0, $2, $3);
   if (!$1) {
    break label$1;
   }
   $1 = HEAP32[$4 + 28 >> 2];
   HEAP8[$1 - (HEAP32[$4 + 24 >> 2] == ($1 | 0)) | 0] = 0;
   break label$1;
  }
  wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 61, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = -1;
 }
 __stack_pointer = $4 + 160 | 0;
 return $0;
}
function vsnprintf($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $4 = __stack_pointer - 160 | 0;
 __stack_pointer = $4;
 memcpy($4 + 8 | 0, 20760, 144);
 label$1 : {
  label$2 : {
   if ($1 - 1 >>> 0 >= 2147483647) {
    if ($1) {
     break label$2;
    }
    $1 = 1;
    $0 = $4 + 159 | 0;
   }
   HEAP32[$4 + 52 >> 2] = $0;
   HEAP32[$4 + 28 >> 2] = $0;
   $5 = -2 - $0 | 0;
   $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
   HEAP32[$4 + 56 >> 2] = $1;
   $0 = $0 + $1 | 0;
   HEAP32[$4 + 36 >> 2] = $0;
   HEAP32[$4 + 24 >> 2] = $0;
   $0 = vfprintf($4 + 8 | 0, $2, $3);
   if (!$1) {
    break label$1;
   }
   $1 = HEAP32[$4 + 28 >> 2];
   HEAP8[$1 - (HEAP32[$4 + 24 >> 2] == ($1 | 0)) | 0] = 0;
   break label$1;
  }
  wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 61, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = -1;
 }
 __stack_pointer = $4 + 160 | 0;
 return $0;
}
function std____2__pair_std____2____unwrap_ref_decay__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const____type_2c_20std____2____unwrap_ref_decay__28anonymous_20namespace_29__itanium_demangle__Node_20const__20const____type__20std____2__make_pair__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__20const___28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__20const__29($0, $1, $2) {
 std____2__pair__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const____pair_true_2c_20false__28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__20const__29($0, $1, $2);
}
function __fwritex($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = HEAP32[$2 + 16 >> 2];
 label$1 : {
  if (!$3) {
   if (__towrite($2)) {
    break label$1;
   }
   $3 = HEAP32[$2 + 16 >> 2];
  }
  $5 = HEAP32[$2 + 20 >> 2];
  if ($3 - $5 >>> 0 < $1 >>> 0) {
   return FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0;
  }
  label$5 : {
   if (HEAP8[$2 + 75 | 0] < 0) {
    $3 = 0;
    break label$5;
   }
   $4 = $1;
   while (1) {
    $3 = $4;
    if (!$3) {
     $3 = 0;
     break label$5;
    }
    $4 = $3 - 1 | 0;
    if (HEAPU8[$4 + $0 | 0] != 10) {
     continue;
    }
    break;
   }
   $4 = FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $3) | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    break label$1;
   }
   $0 = $0 + $3 | 0;
   $1 = $1 - $3 | 0;
   $5 = HEAP32[$2 + 20 >> 2];
  }
  memcpy($5, $0, $1);
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
  $4 = $1 + $3 | 0;
 }
 return $4;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___NameState__NameState_28_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 HEAP8[$0 + 8 | 0] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP16[$0 >> 1] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___size_28_29_20const($1 + 360 | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 return $0;
}
function jinit_huff_decoder($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 220) | 0;
 HEAP32[$0 + 468 >> 2] = $1;
 HEAP32[$1 + 8 >> 2] = 105;
 HEAP32[$1 >> 2] = 106;
 if (!HEAP32[$0 + 224 >> 2]) {
  HEAP32[$1 + 68 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = 0;
  HEAP32[$1 + 92 >> 2] = 0;
  HEAP32[$1 + 96 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 88 >> 2] = 0;
  return;
 }
 $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, HEAP32[$0 + 36 >> 2] << 8) | 0;
 HEAP32[$0 + 160 >> 2] = $2;
 if (HEAP32[$0 + 36 >> 2] >= 1) {
  while (1) {
   $2 = memset($2, 255, 256) + 256 | 0;
   $3 = $3 + 1 | 0;
   if (($3 | 0) < HEAP32[$0 + 36 >> 2]) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$1 + 60 >> 2] = 0;
}
function jinit_d_post_controller($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 28) | 0;
 HEAP32[$0 + 456 >> 2] = $2;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 >> 2] = 151;
 if (HEAP32[$0 + 84 >> 2]) {
  $3 = HEAP32[$0 + 320 >> 2];
  HEAP32[$2 + 16 >> 2] = $3;
  $4 = HEAP32[$0 + 4 >> 2];
  if ($1) {
   $1 = HEAP32[$4 + 16 >> 2];
   wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[$1 | 0]($0, 1, 0, Math_imul(HEAP32[$0 + 120 >> 2], HEAP32[$0 + 112 >> 2]), jround_up(HEAP32[$0 + 116 >> 2], $3), HEAP32[$2 + 16 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
   return;
  }
  wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$4 + 8 >> 2]]($0, 1, Math_imul(HEAP32[$0 + 120 >> 2], HEAP32[$0 + 112 >> 2]), $3) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 }
}
function alloc_barray($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $8 = $2 << 7;
 $4 = 999999984 / ($8 >>> 0) | 0;
 $6 = HEAP32[$0 + 4 >> 2];
 if ($8 >>> 0 >= 999999985) {
  $7 = HEAP32[$0 >> 2];
  HEAP32[$7 + 20 >> 2] = 72;
  FUNCTION_TABLE[HEAP32[$7 >> 2]]($0);
 }
 $5 = ($3 | 0) > ($4 | 0) ? $4 : $3;
 HEAP32[$6 + 80 >> 2] = $5;
 $7 = alloc_small($0, $1, $3 << 2);
 if ($3) {
  $4 = 0;
  $9 = $2 << 7;
  while (1) {
   $2 = $3 - $4 | 0;
   $5 = $2 >>> 0 > $5 >>> 0 ? $5 : $2;
   $2 = alloc_large($0, $1, Math_imul($8, $5));
   if ($5) {
    $6 = $5;
    while (1) {
     HEAP32[($4 << 2) + $7 >> 2] = $2;
     $4 = $4 + 1 | 0;
     $2 = $2 + $9 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue;
     }
     break;
    }
   }
   if ($3 >>> 0 > $4 >>> 0) {
    continue;
   }
   break;
  }
 }
 return $7 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BracedExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__BracedExpr__BracedExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20), HEAP32[$1 >> 2], HEAP32[$2 >> 2], HEAPU8[bool___20std____2__forward_bool__28std____2__remove_reference_bool___type__29($3) | 0]);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__29($0 + 416 | 0, $1);
}
function std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul______value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____28_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____2c_20_28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul_____29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = $2;
}
function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
 HEAP8[$1 + 53 | 0] = 1;
 label$1 : {
  if (HEAP32[$1 + 4 >> 2] != ($3 | 0)) {
   break label$1;
  }
  HEAP8[$1 + 52 | 0] = 1;
  $3 = HEAP32[$1 + 16 >> 2];
  if (!$3) {
   HEAP32[$1 + 36 >> 2] = 1;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 16 >> 2] = $2;
   if (($4 | 0) != 1 | HEAP32[$1 + 48 >> 2] != 1) {
    break label$1;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  if (($2 | 0) == ($3 | 0)) {
   $3 = HEAP32[$1 + 24 >> 2];
   if (($3 | 0) == 2) {
    HEAP32[$1 + 24 >> 2] = $4;
    $3 = $4;
   }
   if (HEAP32[$1 + 48 >> 2] != 1 | ($3 | 0) != 1) {
    break label$1;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  HEAP8[$1 + 54 | 0] = 1;
  HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___FloatLiteralImpl_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___FloatLiteralImpl_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const___lambda__28_29__operator_28_29_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $2 = HEAP32[$0 + 4 >> 2];
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29(HEAP32[$0 >> 2], 40);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($1, HEAP32[$2 + 8 >> 2]), HEAP32[$0 >> 2]);
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29(HEAP32[$0 >> 2], 41);
 __stack_pointer = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b18_5d__28char_20const_20_28__29_20_5b18_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b18_5d__28char_20const_20_28__29_20_5b18_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b18_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b18_5d___type__29_29_20_5b18_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b16_5d__28char_20const_20_28__29_20_5b16_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b16_5d__28char_20const_20_28__29_20_5b16_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b16_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b16_5d___type__29_29_20_5b16_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b15_5d__28char_20const_20_28__29_20_5b15_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b15_5d__28char_20const_20_28__29_20_5b15_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b15_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b15_5d___type__29_29_20_5b15_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b14_5d__28char_20const_20_28__29_20_5b14_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b14_5d__28char_20const_20_28__29_20_5b14_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b14_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b14_5d___type__29_29_20_5b14_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b13_5d__28char_20const_20_28__29_20_5b13_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b13_5d__28char_20const_20_28__29_20_5b13_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b13_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b13_5d___type__29_29_20_5b13_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b12_5d__28char_20const_20_28__29_20_5b12_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b11_5d__28char_20const_20_28__29_20_5b11_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b10_5d__28char_20const_20_28__29_20_5b10_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b10_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b10_5d___type__29_29_20_5b10_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StructuredBindingName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__StructuredBindingName_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b22_5d__28char_20const_20_28__29_20_5b22_5d_29($0) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b22_5d__28char_20const_20_28__29_20_5b22_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b22_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b22_5d___type__29_29_20_5b22_5d(26705));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b19_5d__28char_20const_20_28__29_20_5b19_5d_29($0) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b19_5d__28char_20const_20_28__29_20_5b19_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b19_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b19_5d___type__29_29_20_5b19_5d(31376));
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__TemplateArgumentPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__DynamicExceptionSpec_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b9_5d__28char_20const_20_28__29_20_5b9_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b9_5d__28char_20const_20_28__29_20_5b9_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b8_5d__28char_20const_20_28__29_20_5b8_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b8_5d__28char_20const_20_28__29_20_5b8_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b8_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b8_5d___type__29_29_20_5b8_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b6_5d__28char_20const_20_28__29_20_5b6_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b6_5d__28char_20const_20_28__29_20_5b6_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b6_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b6_5d___type__29_29_20_5b6_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b5_5d__28char_20const_20_28__29_20_5b5_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b5_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b5_5d___type__29_29_20_5b5_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b4_5d__28char_20const_20_28__29_20_5b4_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b4_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b4_5d___type__29_29_20_5b4_5d($1));
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b7_5d__28char_20const_20_28__29_20_5b7_5d_29($0) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20char_20const_20_28__29_20_5b7_5d__28char_20const_20_28__29_20_5b7_5d_29($0 + 416 | 0, char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b7_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b7_5d___type__29_29_20_5b7_5d(31401));
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 32);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function h2v2_upsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 if (HEAP32[$0 + 320 >> 2] >= 1) {
  $1 = HEAP32[$3 >> 2];
  while (1) {
   $8 = $1;
   $9 = $5;
   $10 = $1;
   $11 = $5 | 1;
   $4 = HEAP32[$0 + 112 >> 2];
   if (($4 | 0) >= 1) {
    $3 = HEAP32[($5 << 2) + $1 >> 2];
    $12 = $4 + $3 | 0;
    $4 = HEAP32[($6 << 2) + $2 >> 2];
    while (1) {
     $7 = HEAPU8[$4 | 0];
     HEAP8[$3 + 1 | 0] = $7;
     HEAP8[$3 | 0] = $7;
     $4 = $4 + 1 | 0;
     $3 = $3 + 2 | 0;
     if ($12 >>> 0 > $3 >>> 0) {
      continue;
     }
     break;
    }
    $4 = HEAP32[$0 + 112 >> 2];
   }
   jcopy_sample_rows($8, $9, $10, $11, 1, $4);
   $6 = $6 + 1 | 0;
   $5 = $5 + 2 | 0;
   if (($5 | 0) < HEAP32[$0 + 320 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__UnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function alloc_sarray($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = 999999984 / ($2 >>> 0) | 0;
 $5 = HEAP32[$0 + 4 >> 2];
 if ($2 >>> 0 >= 999999985) {
  $7 = HEAP32[$0 >> 2];
  HEAP32[$7 + 20 >> 2] = 72;
  FUNCTION_TABLE[HEAP32[$7 >> 2]]($0);
 }
 $6 = ($3 | 0) > ($4 | 0) ? $4 : $3;
 HEAP32[$5 + 80 >> 2] = $6;
 $8 = alloc_small($0, $1, $3 << 2);
 if ($3) {
  $4 = 0;
  while (1) {
   $5 = $3 - $4 | 0;
   $6 = $5 >>> 0 > $6 >>> 0 ? $6 : $5;
   $5 = alloc_large($0, $1, Math_imul($6, $2));
   $7 = $6;
   if ($6) {
    while (1) {
     HEAP32[($4 << 2) + $8 >> 2] = $5;
     $5 = $2 + $5 | 0;
     $4 = $4 + 1 | 0;
     $7 = $7 - 1 | 0;
     if ($7) {
      continue;
     }
     break;
    }
   }
   if ($3 >>> 0 > $4 >>> 0) {
    continue;
   }
   break;
  }
 }
 return $8 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr__FoldExpr_28bool_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3, $4) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 62, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 >> 2] = 25816;
 $3 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP8[$0 + 24 | 0] = $1;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $3;
 return $0;
}
function std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = HEAPU8[std____2__remove_reference_char____type___20std____2__move_char___28char__29($0) | 0], HEAP8[wasm2js_i32$0 + 15 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAPU8[std____2__remove_reference_char____type___20std____2__move_char___28char__29($1) | 0], HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
 wasm2js_i32$0 = $1, wasm2js_i32$1 = HEAPU8[std____2__remove_reference_char____type___20std____2__move_char___28char__29($2 + 15 | 0) | 0], HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
 __stack_pointer = $2 + 16 | 0;
}
function jpeg_idct_2x2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $1 = HEAP32[$1 + 84 >> 2];
 $5 = Math_imul(HEAP32[$1 + 36 >> 2], HEAPU16[$2 + 18 >> 1]);
 $6 = Math_imul(HEAP32[$1 + 4 >> 2], HEAPU16[$2 + 2 >> 1]);
 $7 = $5 + $6 | 0;
 $8 = Math_imul(HEAP32[$1 + 32 >> 2], HEAPU16[$2 + 16 >> 1]);
 $9 = HEAP32[$3 >> 2] + $4 | 0;
 $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
 $2 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]) + 4100 | 0;
 $1 = $8 + $2 | 0;
 HEAP8[$9 | 0] = HEAPU8[$0 + ($7 + $1 >>> 3 & 1023) | 0];
 HEAP8[$9 + 1 | 0] = HEAPU8[($1 - $7 >>> 3 & 1023) + $0 | 0];
 $1 = HEAP32[$3 + 4 >> 2] + $4 | 0;
 $2 = $2 - $8 | 0;
 $4 = $6 - $5 | 0;
 HEAP8[$1 | 0] = HEAPU8[($2 + $4 >>> 3 & 1023) + $0 | 0];
 HEAP8[$1 + 1 | 0] = HEAPU8[($2 - $4 >>> 3 & 1023) + $0 | 0];
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__StructuredBindingName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StructuredBindingName_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray___28_28anonymous_20namespace_29__itanium_demangle__NodeArray__29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionParam__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__FunctionParam__FunctionParam_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ParameterPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NodeArrayNode_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__NodeArrayNode_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName_2c_20_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind__2c_20unsigned_20int___28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind__2c_20unsigned_20int__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName__SyntheticTemplateParamName_28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_2c_20unsigned_20int_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[unsigned_20int__20std____2__forward_unsigned_20int___28std____2__remove_reference_unsigned_20int____type__29($2) >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__TemplateArgs_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnableIfAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__EnableIfAttr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__IntegerLiteral_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 69, 1, 1, 1);
 HEAP32[$0 >> 2] = 23752;
 $3 = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4;
 $1 = $2;
 $4 = HEAP32[$1 >> 2];
 $3 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP32[$0 + 20 >> 2] = $3;
 return $0;
}
function rgb_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($4 | 0) >= 1) {
  $5 = HEAP32[$0 + 112 >> 2];
  while (1) {
   $6 = $4;
   if ($5) {
    $4 = $2 << 2;
    $7 = HEAP32[$4 + HEAP32[$1 + 8 >> 2] >> 2];
    $8 = HEAP32[HEAP32[$1 + 4 >> 2] + $4 >> 2];
    $9 = HEAP32[HEAP32[$1 >> 2] + $4 >> 2];
    $4 = HEAP32[$3 >> 2];
    $0 = 0;
    while (1) {
     HEAP8[$4 | 0] = HEAPU8[$0 + $9 | 0];
     HEAP8[$4 + 1 | 0] = HEAPU8[$0 + $8 | 0];
     HEAP8[$4 + 2 | 0] = HEAPU8[$0 + $7 | 0];
     $4 = $4 + 3 | 0;
     $0 = $0 + 1 | 0;
     if (($5 | 0) != ($0 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $3 + 4 | 0;
   $2 = $2 + 1 | 0;
   $4 = $6 - 1 | 0;
   if (($6 | 0) >= 2) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__FunctionParam__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__FunctionParam_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ParameterPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ParameterPack__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ParameterPack_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NodeArrayNode_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NodeArrayNode_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__StringView___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $0 = $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr__CastExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 var $4 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 53, 1, 1, 1);
 HEAP32[$0 >> 2] = 26260;
 $4 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $4;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < $28anonymous_20namespace_29__itanium_demangle__NodeArray__size_28_29_20const($0) >>> 0) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2), $1);
 }
 return $3 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__TemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__EnableIfAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__EnableIfAttr_2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray__28_28anonymous_20namespace_29__itanium_demangle__NodeArray___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CtorDtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool_2c_20int___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool___2c_20int__29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__CtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_2c_20int_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20), HEAP32[$1 >> 2], HEAPU8[bool___20std____2__forward_bool__28std____2__remove_reference_bool___type__29($2) | 0], HEAP32[int__20std____2__forward_int___28std____2__remove_reference_int____type__29($3) >> 2]);
}
function color_quantize3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 if (($3 | 0) >= 1) {
  $7 = HEAP32[$0 + 112 >> 2];
  $0 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
  $8 = HEAP32[$0 + 8 >> 2];
  $9 = HEAP32[$0 + 4 >> 2];
  $10 = HEAP32[$0 >> 2];
  while (1) {
   if ($7) {
    $4 = $5 << 2;
    $0 = HEAP32[$4 + $1 >> 2];
    $4 = HEAP32[$2 + $4 >> 2];
    $6 = $7;
    while (1) {
     HEAP8[$4 | 0] = HEAPU8[HEAPU8[$0 + 2 | 0] + $8 | 0] + (HEAPU8[HEAPU8[$0 + 1 | 0] + $9 | 0] + HEAPU8[HEAPU8[$0 | 0] + $10 | 0] | 0);
     $4 = $4 + 1 | 0;
     $0 = $0 + 3 | 0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue;
     }
     break;
    }
   }
   $5 = $5 + 1 | 0;
   if (($5 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 27552);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__StdQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StdQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 23240);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PixelVectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PixelVectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LiteralOperator_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LiteralOperator_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < $28anonymous_20namespace_29__itanium_demangle__NodeArray__size_28_29_20const($0) >>> 0) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2), $1);
 }
 return $3 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView___28_28anonymous_20namespace_29__itanium_demangle__StringView__29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__StringView___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NameType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameType_2c_20_28anonymous_20namespace_29__itanium_demangle__StringView__28_28anonymous_20namespace_29__itanium_demangle__StringView___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr__MemberExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 51, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27804;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__BinaryExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 47, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26044;
 $1 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$2 >> 2];
 HEAP32[$0 + 20 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 30820);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 27672);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $2 = HEAP32[8463];
 HEAP32[8463] = $2 + 1;
 HEAP32[$3 + 12 >> 2] = $2;
 $2 = std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___operator_5b_5d_28int_20const__29(33832, $3 + 12 | 0);
 $4 = HEAP32[$3 + 12 >> 2];
 $0 = Math_imul($0, $1) << 2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 >> 2] = $4;
 wasm2js_i32$0 = $2, wasm2js_i32$1 = dlmalloc($0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 HEAP32[$3 >> 2] = HEAP32[$2 + 16 >> 2];
 arLog(0, 1, 9210, $3);
 __stack_pointer = $3 + 16 | 0;
 $2 = HEAP32[$2 >> 2];
 return $2 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DeleteExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20bool__2c_20bool___29($0, $1, $2, $3) {
 return $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__DeleteExpr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20bool_2c_20bool_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAPU8[bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($2) | 0], HEAPU8[bool___20std____2__forward_bool__28std____2__remove_reference_bool___type__29($3) | 0]);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__StringLiteral_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__StringLiteral__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StringLiteral_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < $28anonymous_20namespace_29__itanium_demangle__NodeArray__size_28_29_20const($0) >>> 0) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2), $1);
 }
 return $3 | 0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___end_28_29($0) {
 var $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 $1 = std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_iterator_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0 + 8 | 0, 0);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$1 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference_2c_20unsigned_20long___28unsigned_20long__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference_2c_20unsigned_20long___28unsigned_20long__29($0 + 416 | 0, unsigned_20long__20std____2__forward_unsigned_20long___28std____2__remove_reference_unsigned_20long____type__29($1));
}
function $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 29148);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__NoexceptSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NoexceptSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__CtorVtableSpecialName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function prescan_quantize($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($3 | 0) >= 1) {
  $6 = HEAP32[$0 + 112 >> 2];
  $7 = HEAP32[HEAP32[$0 + 484 >> 2] + 24 >> 2];
  while (1) {
   if ($6) {
    $0 = HEAP32[($4 << 2) + $1 >> 2];
    $5 = $6;
    while (1) {
     $2 = (HEAP32[(HEAPU8[$0 | 0] >>> 1 & 124) + $7 >> 2] + (HEAPU8[$0 + 1 | 0] << 4 & 4032) | 0) + (HEAPU8[$0 + 2 | 0] >>> 2 & 62) | 0;
     $8 = $2;
     $2 = HEAPU16[$2 >> 1];
     $9 = $2;
     $2 = $2 + 1 | 0;
     HEAP16[$8 >> 1] = ($2 & 65535) != ($2 | 0) ? $9 : $2;
     $0 = $0 + 3 | 0;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue;
     }
     break;
    }
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__PointerType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PointerType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PointerType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function std____2____compressed_pair_elem_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_200_2c_20false_____compressed_pair_elem_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20void__28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20std____2__forward_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______28std____2__remove_reference_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl__NonTypeTemplateParamDecl_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__LambdaExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__LambdaExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LambdaExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_20const__29($0, $1) {
 var $2 = 0;
 if (($28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($0) | 0) == ($28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($1) | 0)) {
  $2 = bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29($28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($0), $28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($0), $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($1));
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__20const__29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 if (($2 | 0) == HEAP32[$0 + 8 >> 2]) {
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___reserve_28unsigned_20long_29($0, $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___size_28_29_20const($0) << 1);
  $2 = HEAP32[$0 + 4 >> 2];
 }
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 4;
 HEAP32[$2 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20std__nullptr_t__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20std__nullptr_t___29($0, $1, $2) {
 $0 = $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16);
 $1 = HEAP32[$1 >> 2];
 std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($2);
 return $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, 0);
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PointerToMemberType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__PointerToMemberType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__ThrowExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ThrowExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__DtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__DtorName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0 + 416 | 0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__ArraySubscriptExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ReferenceType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind__28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ReferenceType__ReferenceType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__NameWithTemplateArgs_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 __stack_pointer = $2 + 16 | 0;
 return $4 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0));
 }
 return $0;
}
function __fseeko_unlocked($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 if (($3 | 0) == 1) {
  $4 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 + 4 >> 2] | 0;
  $5 = $4;
  $4 = $4 >> 31;
  $4 = $4 + ($1 >>> 0 < $5 >>> 0) | 0;
  $1 = $1 - $5 | 0;
  $4 = $2 - $4 | 0;
  $2 = $4;
 }
 label$2 : {
  if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   if (!HEAP32[$0 + 20 >> 2]) {
    break label$2;
   }
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $4 = $2;
  FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $4, $3) | 0;
  if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
   break label$2;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
  return 0;
 }
 return -1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $3 + 8 | 0, $3);
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 __stack_pointer = $2 + 16 | 0;
 return $4 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__QualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__QualifiedName__QualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function roundf($0) {
 var $1 = Math_fround(0), $2 = Math_fround(0), $3 = 0, $4 = 0;
 $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
 $4 = $3 >>> 23 & 255;
 if ($4 >>> 0 <= 149) {
  if ($4 >>> 0 <= 125) {
   return Math_fround($0 * Math_fround(0));
  }
  $0 = ($3 | 0) > -1 ? $0 : Math_fround(-$0);
  $1 = Math_fround(Math_fround(Math_fround($0 + Math_fround(8388608)) + Math_fround(-8388608)) - $0);
  label$3 : {
   if (!($1 > Math_fround(.5) ^ 1)) {
    $2 = Math_fround(Math_fround($0 + $1) + Math_fround(-1));
    break label$3;
   }
   $0 = Math_fround($0 + $1);
   $2 = $0;
   if ($1 <= Math_fround(-.5) ^ 1) {
    break label$3;
   }
   $2 = Math_fround($0 + Math_fround(1));
  }
  $0 = $2;
  $0 = ($3 | 0) > -1 ? $0 : Math_fround(-$0);
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $4 = $28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 __stack_pointer = $2 + 16 | 0;
 return $4 | 0;
}
function void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___destroy_std____2__pair_int_20const_2c_20arIset__20__28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___29($0, $1) {
 void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____destroy_std____2__pair_int_20const_2c_20arIset__20__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___29($0, $1);
}
function unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__20__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $0 = unsigned_20int_20const__20std____2____lower_bound_std____2____less_unsigned_20int_2c_20unsigned_20long___2c_20unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long___29($0, $1, $2, $3 + 8 | 0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 16 >> 2], $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__isObjCObject_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = HEAP32[$0 + 8 >> 2];
 if (($28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($0) | 0) == 7) {
  $28anonymous_20namespace_29__itanium_demangle__NameType__getName_28_29_20const($1 + 8 | 0, $0);
  $2 = $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_20const__29($1 + 8 | 0, $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($1, 32980));
 }
 __stack_pointer = $1 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__QualType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers__29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__QualType__QualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function fflush($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 label$1 : {
  if ($0) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    return __fflush_unlocked($0) | 0;
   }
   $2 = __lockfile($0);
   $1 = __fflush_unlocked($0);
   if (!$2) {
    break label$1;
   }
   __unlockfile($0);
   return $1 | 0;
  }
  if (HEAP32[8446]) {
   $1 = fflush(HEAP32[8446]);
  }
  $0 = HEAP32[__ofl_lock() >> 2];
  if ($0) {
   while (1) {
    $2 = 0;
    if (HEAP32[$0 + 76 >> 2] >= 0) {
     $2 = __lockfile($0);
    }
    if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
     $1 = __fflush_unlocked($0) | $1;
    }
    if ($2) {
     __unlockfile($0);
    }
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0) {
     continue;
    }
    break;
   }
  }
  __ofl_unlock();
 }
 return $1 | 0;
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return HEAP32[std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___first_28_29_20const($0) >> 2] + ($1 << 2) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__VectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function std____2__allocator_traits_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___deallocate_28std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________2c_20std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20unsigned_20long_29($0, $1, $2) {
 std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________deallocate_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20unsigned_20long_29($0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__ConditionalExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 50, 1, 1, 1);
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28700;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__BracedRangeExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 74, 1, 1, 1);
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28136;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ArrayType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__ArrayType__ArrayType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__AbiTagAttr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 8, HEAPU8[$1 + 5 | 0], HEAPU8[$1 + 6 | 0], HEAPU8[$1 + 7 | 0]);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 29832;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___ScopedTemplateParamList___ScopedTemplateParamList_28_29($0) {
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___dropBack_28unsigned_20long_29(HEAP32[$0 >> 2] + 332 | 0, HEAP32[$0 + 4 >> 2]);
 $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____PODSmallVector_28_29($0 + 8 | 0);
 return $0;
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____compressed_pair_true_2c_20void__28_29($0) {
 std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_200_2c_20false_____compressed_pair_elem_28std____2____value_init_tag_29($0);
 std____2____compressed_pair_elem_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__2c_201_2c_20true_____compressed_pair_elem_28std____2____value_init_tag_29($0);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NestedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__NestedName__NestedName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__ElaboratedTypeSpefType_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 var $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 6, 1, 1, 1);
 HEAP32[$0 >> 2] = 32764;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LocalName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LocalName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 return $28anonymous_20namespace_29__itanium_demangle__LocalName__LocalName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 16), HEAP32[$1 >> 2], HEAP32[$2 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__startsWith_28_28anonymous_20namespace_29__itanium_demangle__StringView_29_20const($0, $1) {
 var $2 = 0;
 if ($28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($1) >>> 0 <= $28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($0) >>> 0) {
  $2 = bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29($28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($1), $28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($1), $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($0));
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__getSyntaxNode_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = $0 + 8 | 0;
 if ($2 >>> 0 < $28anonymous_20namespace_29__itanium_demangle__NodeArray__size_28_29_20const($3) >>> 0) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($3, $2);
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
 }
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 25252);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 16 | 0;
}
function post_process_1pass($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = __stack_pointer - 16 | 0;
 __stack_pointer = $7;
 $8 = HEAP32[$0 + 456 >> 2];
 $9 = HEAP32[$8 + 16 >> 2];
 $10 = HEAP32[$5 >> 2];
 HEAP32[$7 + 12 >> 2] = 0;
 $6 = $6 - $10 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 476 >> 2] + 4 >> 2]]($0, $1, $2, $3, HEAP32[$8 + 12 >> 2], $7 + 12 | 0, $6 >>> 0 > $9 >>> 0 ? $9 : $6);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] + 4 >> 2]]($0, HEAP32[$8 + 12 >> 2], (HEAP32[$5 >> 2] << 2) + $4 | 0, HEAP32[$7 + 12 >> 2]);
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + HEAP32[$7 + 12 >> 2];
 __stack_pointer = $7 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 8 >> 2];
 if ($2) {
  $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($2, $1);
 }
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 123);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 12 | 0, $1);
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 125);
}
function $28anonymous_20namespace_29__itanium_demangle__DtorName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 23416);
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$2 + 4 >> 2] = $4;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName__SpecialName_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 var $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 20, 1, 1, 1);
 HEAP32[$0 >> 2] = 22692;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function std____2__enable_if__28is_same_std____2__remove_const__28anonymous_20namespace_29__itanium_demangle__Node____type_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_trivially_copy_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_____type_20std____2____copy__28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1, $2) {
 $1 = $1 - $0 | 0;
 if ($1) {
  memmove($2, $0, $1);
 }
}
function read_restart_marker($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 label$1 : {
  $1 = HEAP32[$0 + 440 >> 2];
  label$2 : {
   if (!$1) {
    if (!next_marker($0)) {
     break label$2;
    }
    $1 = HEAP32[$0 + 440 >> 2];
   }
   $2 = HEAP32[HEAP32[$0 + 464 >> 2] + 20 >> 2];
   if (($2 + 208 | 0) == ($1 | 0)) {
    $1 = HEAP32[$0 >> 2];
    HEAP32[$1 + 24 >> 2] = $2;
    HEAP32[$1 + 20 >> 2] = 100;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, 3);
    HEAP32[$0 + 440 >> 2] = 0;
    break label$1;
   }
   if (FUNCTION_TABLE[HEAP32[HEAP32[$0 + 24 >> 2] + 20 >> 2]]($0, $2) | 0) {
    break label$1;
   }
  }
  return 0;
 }
 $0 = HEAP32[$0 + 464 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + 1 & 7;
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, 24984);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl__TemplateTemplateParamDecl_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 30, 0, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24996;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function __floatsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 $6 = $0;
 label$1 : {
  if (!$1) {
   break label$1;
  }
  $2 = $1 >> 31;
  $2 = $2 ^ $1 + $2;
  $4 = $2;
  $2 = Math_clz32($2);
  __ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
  $2 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2 << 16) | 0;
  $4 = 0 + HEAP32[$3 + 8 >> 2] | 0;
  $2 = $8 >>> 0 > $4 >>> 0 ? $2 + 1 | 0 : $2;
  $5 = $2;
  $2 = $4;
  $7 = 0 | $2;
  $4 = $1 & -2147483648 | $5;
  $5 = HEAP32[$3 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
 }
 HEAP32[$6 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $7;
 $2 = $4;
 HEAP32[$0 + 12 >> 2] = $2;
 __stack_pointer = $3 + 16 | 0;
}
function __overflow($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 15 | 0] = $1;
 $2 = HEAP32[$0 + 16 >> 2];
 label$1 : {
  if (!$2) {
   $2 = -1;
   if (__towrite($0)) {
    break label$1;
   }
   $2 = HEAP32[$0 + 16 >> 2];
  }
  label$3 : {
   $4 = HEAP32[$0 + 20 >> 2];
   if ($4 >>> 0 >= $2 >>> 0) {
    break label$3;
   }
   $2 = $1 & 255;
   if (($2 | 0) == HEAP8[$0 + 75 | 0]) {
    break label$3;
   }
   HEAP32[$0 + 20 >> 2] = $4 + 1;
   HEAP8[$4 | 0] = $1;
   break label$1;
  }
  $2 = -1;
  if ((FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, $3 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
  $2 = HEAPU8[$3 + 15 | 0];
 }
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__PrefixExpr_28_28anonymous_20namespace_29__itanium_demangle__StringView_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 var $3 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 58, 1, 1, 1);
 HEAP32[$0 >> 2] = 26156;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 if (($2 | 0) == HEAP32[$0 + 8 >> 2]) {
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___reserve_28unsigned_20long_29($0, $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0) << 1);
  $2 = HEAP32[$0 + 4 >> 2];
 }
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 4;
 HEAP32[$2 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__VendorExtQualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 2, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 32056;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___push_back_28_28anonymous_20namespace_29__itanium_demangle__Node__20const__29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 if (($2 | 0) == HEAP32[$0 + 8 >> 2]) {
  $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___reserve_28unsigned_20long_29($0, $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___size_28_29_20const($0) << 1);
  $2 = HEAP32[$0 + 4 >> 2];
 }
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 4;
 HEAP32[$2 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__PostfixQualifiedType_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 5, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 33108;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__IntegerCastExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 68, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 25496;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____node_alloc_28_29($0) {
 return std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___second_28_29($0 + 8 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__ConversionExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 60, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26468;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__ObjCProtoName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 10, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 31948;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function fclose($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 if (HEAP32[$0 + 76 >> 2] >= 0) {
  $5 = __lockfile($0);
 }
 dummy_1($0);
 $4 = HEAP32[$0 >> 2] & 1;
 if (!$4) {
  $3 = __ofl_lock();
  $2 = HEAP32[$0 + 52 >> 2];
  if ($2) {
   HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 56 >> 2];
  }
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   HEAP32[$1 + 52 >> 2] = $2;
  }
  if (HEAP32[$3 >> 2] == ($0 | 0)) {
   HEAP32[$3 >> 2] = $1;
  }
  __ofl_unlock();
 }
 $3 = fflush($0);
 $2 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($0) | 0;
 $1 = HEAP32[$0 + 96 >> 2];
 if ($1) {
  dlfree($1);
 }
 label$7 : {
  if (!$4) {
   dlfree($0);
   break label$7;
  }
  if (!$5) {
   break label$7;
  }
  __unlockfile($0);
 }
 return $3 | $2;
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20____unique_ptr_28_29($0) {
 std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___reset_28std__nullptr_t_29($0, 0);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr__InitListExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 61, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28252;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__PostfixExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 49, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28360;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function h2v1_upsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $1 = HEAP32[$0 + 320 >> 2];
 if (($1 | 0) >= 1) {
  $6 = HEAP32[$3 >> 2];
  while (1) {
   $3 = HEAP32[$0 + 112 >> 2];
   if (($3 | 0) >= 1) {
    $4 = $5 << 2;
    $1 = HEAP32[$6 + $4 >> 2];
    $7 = $1 + $3 | 0;
    $3 = HEAP32[$2 + $4 >> 2];
    while (1) {
     $4 = HEAPU8[$3 | 0];
     HEAP8[$1 + 1 | 0] = $4;
     HEAP8[$1 | 0] = $4;
     $3 = $3 + 1 | 0;
     $1 = $1 + 2 | 0;
     if ($7 >>> 0 > $1 >>> 0) {
      continue;
     }
     break;
    }
    $1 = HEAP32[$0 + 320 >> 2];
   }
   $5 = $5 + 1 | 0;
   if (($5 | 0) < ($1 | 0)) {
    continue;
   }
   break;
  }
 }
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___get_deleter_28_29_20const($0) {
 return std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___second_28_29_20const($0);
}
function std____2__pair_int_20const_2c_20arIset___pair_int_20const__2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_int_20const____2c_20std____2__tuple____2c_20std____2____tuple_indices_0ul__2c_20std____2____tuple_indices___29($0, $1, $2) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[int_20const__20std____2__forward_int_20const___28std____2__remove_reference_int_20const____type__29(std____2__tuple_element_0ul_2c_20std____2__tuple_int_20const___20___type__20std____2__get_0ul_2c_20int_20const___28std____2__tuple_int_20const____29($1)) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 arIset__arIset_28_29(memset($0 + 4 | 0, 0, 44));
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix__DotSuffix_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 1, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 31224;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < $28anonymous_20namespace_29__itanium_demangle__NodeArray__size_28_29_20const($0) >>> 0) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = $0 + 8 | 0;
 if ($2 >>> 0 < $28anonymous_20namespace_29__itanium_demangle__NodeArray__size_28_29_20const($0) >>> 0) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr__CallExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 55, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26364;
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 return $0;
}
function gray_rgb_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 if (($4 | 0) >= 1) {
  $6 = HEAP32[$0 + 112 >> 2];
  while (1) {
   $7 = $4;
   if ($6) {
    $8 = HEAP32[HEAP32[$1 >> 2] + ($2 << 2) >> 2];
    $4 = HEAP32[$3 >> 2];
    $0 = 0;
    while (1) {
     $5 = HEAPU8[$0 + $8 | 0];
     HEAP8[$4 + 1 | 0] = $5;
     HEAP8[$4 + 2 | 0] = $5;
     HEAP8[$4 | 0] = $5;
     $4 = $4 + 3 | 0;
     $0 = $0 + 1 | 0;
     if (($6 | 0) != ($0 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $3 + 4 | 0;
   $2 = $2 + 1 | 0;
   $4 = $7 - 1 | 0;
   if (($7 | 0) >= 2) {
    continue;
   }
   break;
  }
 }
}
function fmt_u($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  if ($1 >>> 0 < 1) {
   $5 = $0;
   $3 = $1;
   $6 = $3;
   break label$1;
  }
  while (1) {
   $2 = $2 - 1 | 0;
   $3 = $1;
   $5 = __wasm_i64_udiv($0, $3, 10, 0);
   $3 = i64toi32_i32$HIGH_BITS;
   $6 = $3;
   $4 = __wasm_i64_mul($5, $3, 10, 0);
   $3 = $1;
   HEAP8[$2 | 0] = $0 - $4 | 48;
   $4 = $3 >>> 0 > 9;
   $0 = $5;
   $3 = $6;
   $1 = $3;
   if ($4) {
    continue;
   }
   break;
  }
 }
 $4 = $5;
 if ($4) {
  while (1) {
   $2 = $2 - 1 | 0;
   $0 = ($4 >>> 0) / 10 | 0;
   HEAP8[$2 | 0] = $4 - Math_imul($0, 10) | 48;
   $1 = $4 >>> 0 > 9;
   $4 = $0;
   if ($1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function emscripten__internal__Invoker_int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 wasm2js_i32$0 = $3, wasm2js_i32$1 = FUNCTION_TABLE[$0 | 0](emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29($1), emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29($2)) | 0, HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 $1 = emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($3 + 12 | 0);
 __stack_pointer = $3 + 16 | 0;
 return $1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__getSyntaxNode_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
 $3 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 12 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__ReferenceType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 12, HEAPU8[$1 + 5 | 0], 1, 1);
 HEAP8[$0 + 16 | 0] = 0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 33e3;
 return $0;
}
function strlen($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 label$1 : {
  label$2 : {
   $1 = $0;
   if (!($1 & 3)) {
    break label$2;
   }
   if (!HEAPU8[$0 | 0]) {
    return 0;
   }
   while (1) {
    $1 = $1 + 1 | 0;
    if (!($1 & 3)) {
     break label$2;
    }
    if (HEAPU8[$1 | 0]) {
     continue;
    }
    break;
   }
   break label$1;
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = HEAP32[$2 >> 2];
   if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  if (!($3 & 255)) {
   return $2 - $0 | 0;
  }
  while (1) {
   $3 = HEAPU8[$2 + 1 | 0];
   $1 = $2 + 1 | 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}
function std____2__unique_ptr_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20_5b_5d_2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___get_deleter_28_29($0) {
 return std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___second_28_29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__QualType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 3, HEAPU8[$1 + 5 | 0], HEAPU8[$1 + 6 | 0], HEAPU8[$1 + 7 | 0]);
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 >> 2] = 32168;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BracedExpr__BracedExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 73, 1, 1, 1);
 HEAP8[$0 + 16 | 0] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28028;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__PointerToMemberType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 13, HEAPU8[$2 + 5 | 0], 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 32620;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__20_28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___make__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__BoolExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0 + 416 | 0, int___20std____2__forward_int__28std____2__remove_reference_int___type__29($1));
}
function saveSetjmp($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0;
 $5 = HEAP32[8752] + 1 | 0;
 HEAP32[8752] = $5;
 HEAP32[$0 >> 2] = $5;
 label$1 : {
  if ($3) {
   while (1) {
    $6 = ($4 << 3) + $2 | 0;
    if (!HEAP32[$6 >> 2]) {
     break label$1;
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
  }
  $2 = dlrealloc($2, $3 << 4 | 8);
  $4 = $3 << 1;
  $3 = saveSetjmp($0, $1, $2, $4);
  setTempRet0($4 | 0);
  return $3 | 0;
 }
 HEAP32[$6 >> 2] = $5;
 $4 = ($4 << 3) + $2 | 0;
 HEAP32[$4 + 4 >> 2] = $1;
 HEAP32[$4 + 8 >> 2] = 0;
 setTempRet0($3 | 0);
 return $2 | 0;
}
function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
}
function std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20_____bucket_list_deallocator_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = 0;
 std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20_____compressed_pair_int_2c_20std____2____default_init_tag__28int___2c_20std____2____default_init_tag___29($0, $1 + 12 | 0, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__BoolExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $0 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($2 + 8 | 0, HEAPU8[$0 + 8 | 0] ? 23956 : 23961);
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 if (!HEAPU8[$0 + 16 | 0]) {
  $3 = $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($2 + 8 | 0, $0 + 16 | 0, 1);
  $0 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
  $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($3);
 }
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__CtorVtableSpecialName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 21, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 22888;
 return $0;
}
function scalbn($0, $1) {
 label$1 : {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 8.98846567431158e+307;
   if (($1 | 0) < 2047) {
    $1 = $1 - 1023 | 0;
    break label$1;
   }
   $0 = $0 * 8.98846567431158e+307;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) - 2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  if (($1 | 0) > -2045) {
   $1 = $1 + 1022 | 0;
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $1 = (($1 | 0) > -3066 ? $1 : -3066) + 2044 | 0;
 }
 $1 = $1 + 1023 << 20;
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 | 0);
 return $0 * +wasm2js_scratch_load_f64();
}
function __floatunsitf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $5 = $0;
 label$1 : {
  if (!$1) {
   $4 = 0;
   break label$1;
  }
  $3 = $1;
  $1 = Math_clz32($1);
  __ashlti3($2, $3, 0, 0, 0, $1 + 81 | 0);
  $1 = (HEAP32[$2 + 12 >> 2] ^ 65536) + (16414 - $1 << 16) | 0;
  $3 = 0 + HEAP32[$2 + 8 >> 2] | 0;
  $6 = $3;
  $1 = $4 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
  $3 = $1;
  $7 = HEAP32[$2 + 4 >> 2];
  $1 = HEAP32[$2 >> 2];
  $4 = $1;
 }
 $1 = $5;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $7;
 HEAP32[$0 + 8 >> 2] = $6;
 HEAP32[$1 + 12 >> 2] = $3;
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__ArraySubscriptExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 48, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27908;
 return $0;
}
function jinit_arith_decoder($0) {
 var $1 = 0, $2 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 192) | 0;
 HEAP32[$0 + 468 >> 2] = $1;
 HEAP32[$1 + 8 >> 2] = 98;
 HEAP32[$1 >> 2] = 99;
 memset($1 + 60 | 0, 0, 128);
 HEAP8[$1 + 188 | 0] = 113;
 label$1 : {
  if (!HEAP32[$0 + 224 >> 2]) {
   break label$1;
  }
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, HEAP32[$0 + 36 >> 2] << 8) | 0;
  HEAP32[$0 + 160 >> 2] = $1;
  if (HEAP32[$0 + 36 >> 2] < 1) {
   break label$1;
  }
  while (1) {
   $1 = memset($1, 255, 256) + 256 | 0;
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 36 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function fopen($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 label$1 : {
  label$2 : {
   if (!strchr(19828, HEAP8[$1 | 0])) {
    wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 28, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    break label$2;
   }
   $4 = __fmodeflags($1);
   HEAP32[$2 >> 2] = 438;
   $0 = __syscall_ret(__syscall5($0 | 0, $4 | 32768, $2 | 0) | 0);
   if (($0 | 0) < 0) {
    break label$1;
   }
   $3 = __fdopen($0, $1);
   if ($3) {
    break label$1;
   }
   __wasi_fd_close($0 | 0) | 0;
  }
  $3 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl__NonTypeTemplateParamDecl_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 29, 0, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24872;
 return $0;
}
function bool_20std____2__equal_char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__20__28char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 while (1) {
  label$2 : {
   $4 = ($0 | 0) == ($1 | 0);
   if ($4) {
    break label$2;
   }
   if (!std____2____equal_to_char_2c_20char___operator_28_29_28char_20const__2c_20char_20const__29_20const($3 + 8 | 0, $0, $2)) {
    break label$2;
   }
   $2 = $2 + 1 | 0;
   $0 = $0 + 1 | 0;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 16 | 0;
 return $4;
}
function $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($0 + 8 | 0, 24852);
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $0);
 __stack_pointer = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___FloatLiteralImpl_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 72, 1, 1, 1);
 HEAP32[$0 >> 2] = 24208;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualifiedName__QualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 22, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26736;
 return $0;
}
function jpeg_stdio_src($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = HEAP32[$0 + 24 >> 2];
 if (!$2) {
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 40) | 0;
  HEAP32[$0 + 24 >> 2] = $2;
  wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 4096) | 0, HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  $2 = HEAP32[$0 + 24 >> 2];
 }
 HEAP32[$2 + 28 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = 21;
 HEAP32[$2 + 20 >> 2] = 22;
 HEAP32[$2 + 16 >> 2] = 23;
 HEAP32[$2 + 12 >> 2] = 24;
 HEAP32[$2 + 8 >> 2] = 25;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__NameWithTemplateArgs_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 37, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 30596;
 return $0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___hash_function_28_29($0) {
 return std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__20___second_28_29($0 + 12 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__ExpandedSpecialSubstitution_28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__StructuredBindingName_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 46, 1, 1, 1);
 HEAP32[$0 >> 2] = 29948;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___FloatLiteralImpl_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 71, 1, 1, 1);
 HEAP32[$0 >> 2] = 24092;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__TemplateArgumentPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 33, 1, 1, 1);
 HEAP32[$0 >> 2] = 30836;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___FloatLiteralImpl_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 70, 1, 1, 1);
 HEAP32[$0 >> 2] = 23976;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__DynamicExceptionSpec_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 17, 1, 1, 1);
 HEAP32[$0 >> 2] = 31704;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20____unordered_map_28_29($0) {
 std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20______hash_table_28_29($0);
 return $0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___max_load_factor_28_29($0) {
 return std____2____compressed_pair_float_2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__20___first_28_29($0 + 16 | 0);
}
function std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___unordered_map_28_29($0) {
 std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20_____hash_table_28_29($0);
 return $0;
}
function std____2__pointer_traits_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________pointer_to_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0) {
 return std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20std____2__addressof_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0);
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20____unique_ptr_28_29($0) {
 std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___reset_28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____29($0, 0);
 return $0;
}
function decode_mcu_DC_refine($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[$0 + 468 >> 2];
 if (HEAP32[$0 + 280 >> 2]) {
  $3 = HEAP32[$2 + 56 >> 2];
  if (!$3) {
   process_restart($0);
   $3 = HEAP32[$2 + 56 >> 2];
  }
  HEAP32[$2 + 56 >> 2] = $3 - 1;
 }
 if (HEAP32[$0 + 368 >> 2] >= 1) {
  $4 = $2 + 188 | 0;
  $5 = 1 << HEAP32[$0 + 424 >> 2];
  $2 = 0;
  while (1) {
   if (arith_decode($0, $4)) {
    $3 = HEAP32[($2 << 2) + $1 >> 2];
    HEAP16[$3 >> 1] = HEAPU16[$3 >> 1] | $5;
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 368 >> 2]) {
    continue;
   }
   break;
  }
 }
 return 1;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___size_28_29($0) {
 return std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__20___first_28_29($0 + 12 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType__VectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 25, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 32396;
 return $0;
}
function getenv($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $4 = strlen($0);
 label$1 : {
  if (!HEAP32[8747] | !HEAPU8[$0 | 0]) {
   break label$1;
  }
  if (strchr($0, 61)) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[8747] >> 2];
  if (!$1) {
   break label$1;
  }
  label$2 : {
   while (1) {
    $3 = strncmp($0, $1, $4);
    $1 = HEAP32[8747];
    if (!$3) {
     $3 = HEAP32[($2 << 2) + $1 >> 2] + $4 | 0;
     if (HEAPU8[$3 | 0] == 61) {
      break label$2;
     }
    }
    $2 = $2 + 1 | 0;
    $1 = HEAP32[($2 << 2) + $1 >> 2];
    if ($1) {
     continue;
    }
    break;
   }
   return 0;
  }
  $2 = $3 + 1 | 0;
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__UnnamedTypeName_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 44, 1, 1, 1);
 HEAP32[$0 >> 2] = 24476;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName__SyntheticTemplateParamName_28_28anonymous_20namespace_29__itanium_demangle__TemplateParamKind_2c_20unsigned_20int_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 27, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24612;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__ArrayType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 14, 0, 0, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 32512;
 return $0;
}
function std____2____hash_table_std____2____hash_value_type_int_2c_20arIset__2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_20std____2__allocator_std____2____hash_value_type_int_2c_20arIset__20__20___key_eq_28_29($0) {
 return std____2____compressed_pair_float_2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__20___second_28_29($0 + 16 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__CtorDtorName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__2c_20bool_2c_20int_29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 42, 1, 1, 1);
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 29724;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionParam__FunctionParam_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 59, 1, 1, 1);
 HEAP32[$0 >> 2] = 25612;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__NodeArrayNode_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 0, 1, 1, 1);
 HEAP32[$0 >> 2] = 28944;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__NestedName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 23, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23144;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__TemplateArgs_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 35, 1, 1, 1);
 HEAP32[$0 >> 2] = 30488;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LocalName__LocalName_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 24, 1, 1, 1);
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 30080;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__EnableIfAttr_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 9, 1, 1, 1);
 HEAP32[$0 >> 2] = 30952;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function std____2__operator___28std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20__20const__2c_20std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20__20const__29($0, $1) {
 return std____2__operator___28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20const__2c_20std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20const__29($0, $1);
}
function request_virt_sarray($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 if (($1 | 0) != 1) {
  $7 = HEAP32[$0 >> 2];
  HEAP32[$7 + 24 >> 2] = $1;
  HEAP32[$7 + 20 >> 2] = 15;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $0 = alloc_small($0, $1, 128);
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $5;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = HEAP32[$6 + 68 >> 2];
 HEAP32[$6 + 68 >> 2] = $0;
 return $0 | 0;
}
function request_virt_barray($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 if (($1 | 0) != 1) {
  $7 = HEAP32[$0 >> 2];
  HEAP32[$7 + 24 >> 2] = $1;
  HEAP32[$7 + 20 >> 2] = 15;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $0 = alloc_small($0, $1, 128);
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $5;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = HEAP32[$6 + 72 >> 2];
 HEAP32[$6 + 72 >> 2] = $0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__NameType_28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 7, 1, 1, 1);
 HEAP32[$0 >> 2] = 23044;
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 12 >> 2] = $2;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__DeleteExpr_28_28anonymous_20namespace_29__itanium_demangle__Node__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 57, 1, 1, 1);
 HEAP8[$0 + 13 | 0] = $3;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26580;
 return $0;
}
function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   $3 = $1;
   if ($0 == 0) {
    $2 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $2 = HEAP32[$1 >> 2] + -64 | 0;
   }
   HEAP32[$3 >> 2] = $2;
   return $0;
  }
  HEAP32[$1 >> 2] = $2 - 1022;
  $2 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}
function __emscripten_environ_constructor() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1 : {
  if (__wasi_environ_sizes_get($0 + 12 | 0, $0 + 8 | 0) | 0) {
   break label$1;
  }
  $1 = dlmalloc((HEAP32[$0 + 12 >> 2] << 2) + 4 | 0);
  HEAP32[8747] = $1;
  if (!$1) {
   break label$1;
  }
  $1 = dlmalloc(HEAP32[$0 + 8 >> 2]);
  if (!$1) {
   HEAP32[8747] = 0;
   break label$1;
  }
  HEAP32[HEAP32[8747] + (HEAP32[$0 + 12 >> 2] << 2) >> 2] = 0;
  if (!(__wasi_environ_get(HEAP32[8747], $1 | 0) | 0)) {
   break label$1;
  }
  HEAP32[8747] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution_2c_20_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind__28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__SpecialSubstitution_28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___deallocate_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20unsigned_20long_29($0, $1, $2) {
 std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___deallocate_28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20unsigned_20long_29($0, $1, $2);
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___second_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__2c_201_2c_20false_____get_28_29_20const($0 + 4 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference_2c_20unsigned_20long___28unsigned_20long__29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__ForwardTemplateReference_28unsigned_20long_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 20), HEAP32[unsigned_20long__20std____2__forward_unsigned_20long___28std____2__remove_reference_unsigned_20long____type__29($1) >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__ConversionOperatorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function dlrealloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if (!$0) {
  return dlmalloc($1) | 0;
 }
 if ($1 >>> 0 >= 4294967232) {
  wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return 0;
 }
 $2 = try_realloc_chunk($0 - 8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8);
 if ($2) {
  return $2 + 8 | 0;
 }
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 $3 = HEAP32[$0 - 4 >> 2];
 $3 = ($3 & 3 ? -4 : -8) + ($3 & -8) | 0;
 memcpy($2, $0, $1 >>> 0 > $3 >>> 0 ? $3 : $1);
 dlfree($0);
 return $2 | 0;
}
function void_20emscripten__function_int_2c_20int_2c_20int__28char_20const__2c_20int_20_28__29_28int_2c_20int_29_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 _embind_register_function($0 | 0, emscripten__internal__WithPolicies____ArgTypeList_int_2c_20int_2c_20int___getCount_28_29_20const($2 + 8 | 0) | 0, emscripten__internal__WithPolicies____ArgTypeList_int_2c_20int_2c_20int___getTypes_28_29_20const($2 + 8 | 0) | 0, char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() | 0, 15, $1 | 0);
 __stack_pointer = $2 + 16 | 0;
}
function fill_input_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 24 >> 2];
 $2 = fread(HEAP32[$1 + 32 >> 2], 1, 4096, HEAP32[$1 + 28 >> 2]);
 if (!$2) {
  if (HEAP32[$1 + 36 >> 2]) {
   $2 = HEAP32[$0 >> 2];
   HEAP32[$2 + 20 >> 2] = 43;
   FUNCTION_TABLE[HEAP32[$2 >> 2]]($0);
  }
  $2 = HEAP32[$0 >> 2];
  HEAP32[$2 + 20 >> 2] = 123;
  FUNCTION_TABLE[HEAP32[$2 + 4 >> 2]]($0, -1);
  HEAP8[HEAP32[$1 + 32 >> 2]] = 255;
  HEAP8[HEAP32[$1 + 32 >> 2] + 1 | 0] = 217;
  $2 = 2;
 }
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 >> 2] = HEAP32[$1 + 32 >> 2];
 return 1;
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl__TypeTemplateParamDecl_28_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl__TemplateParamPackDecl_28_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__SizeofParamPackExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($1, $2);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $1 = $1 + 15 & -16;
 $2 = HEAP32[$0 + 4096 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 $4 = $1 + $3 | 0;
 if ($4 >>> 0 >= 4088) {
  if ($1 >>> 0 >= 4089) {
   return $28anonymous_20namespace_29__BumpPointerAllocator__allocateMassive_28unsigned_20long_29($0, $1);
  }
  $28anonymous_20namespace_29__BumpPointerAllocator__grow_28_29($0);
  $2 = HEAP32[$0 + 4096 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $3 + $1 | 0;
 }
 HEAP32[$2 + 4 >> 2] = $4;
 return ($2 + $3 | 0) + 8 | 0;
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___operator___28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___first_28_29_20const($0) >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__GlobalQualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___get_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___first_28_29_20const($0) >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__ForwardTemplateReference_28unsigned_20long_29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 36, 2, 2, 2);
 HEAP8[$0 + 16 | 0] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 23256;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__ExpandedSpecialSubstitution_28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind_29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 40, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 29280;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PixelVectorType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__PixelVectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LiteralOperator_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__LiteralOperator_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function __fflush_unlocked($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  if (HEAPU32[$0 + 20 >> 2] <= HEAPU32[$0 + 28 >> 2]) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
  if (HEAP32[$0 + 20 >> 2]) {
   break label$1;
  }
  return -1;
 }
 $1 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 if ($1 >>> 0 < $2 >>> 0) {
  $1 = $1 - $2 | 0;
  FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StdQualifiedName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__StdQualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20long___SwapAndRestore_28unsigned_20long__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 8 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = $1;
 $1 = std____2__remove_reference_unsigned_20long____type___20std____2__move_unsigned_20long___28unsigned_20long__29($3 + 12 | 0);
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StringLiteral__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__StringLiteral_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__StringLiteral__StringLiteral_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__ParameterPackExpansion_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 34, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 25928;
 return $0;
}
function std____2__pair_int_20const_2c_20arIset___pair_int_20const___28std____2__piecewise_construct_t_2c_20std____2__tuple_int_20const___2c_20std____2__tuple___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__pair_int_20const_2c_20arIset___pair_int_20const__2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_int_20const____2c_20std____2__tuple____2c_20std____2____tuple_indices_0ul__2c_20std____2____tuple_indices___29($0, $2 + 8 | 0, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__ConversionOperatorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 4, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27444;
 return $0;
}
function jinit_inverse_dct($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 84) | 0;
 HEAP32[$0 + 472 >> 2] = $1;
 HEAP32[$1 >> 2] = 63;
 if (HEAP32[$0 + 36 >> 2] >= 1) {
  $4 = $1 + 44 | 0;
  $1 = HEAP32[$0 + 216 >> 2];
  while (1) {
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 1, 256) | 0;
   HEAP32[$1 + 84 >> 2] = $3;
   memset($3, 0, 256);
   HEAP32[($2 << 2) + $4 >> 2] = -1;
   $1 = $1 + 88 | 0;
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 36 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
}
function $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__NoexceptSpec_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__NoexceptSpec_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__SpecialSubstitution_28_28anonymous_20namespace_29__itanium_demangle__SpecialSubKind_29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 41, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 30184;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__PointerType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 11, HEAPU8[$1 + 5 | 0], 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 32880;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__SizeofParamPackExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 54, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 28820;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__PointerType_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PointerType__PointerType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function std____2__unique_ptr_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___get_deleter_28_29($0) {
 return std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___second_28_29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20int___SwapAndRestore_28unsigned_20int__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = -1;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 8 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = $1;
 $1 = std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($2 + 12 | 0);
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 __stack_pointer = $2 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl__TypeTemplateParamDecl_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 28, 0, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24744;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl__TemplateParamPackDecl_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 31, 0, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 25144;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_char_20const____SwapAndRestore_28char_20const___2c_20char_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAP32[$1 >> 2];
 HEAP8[$0 + 8 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = $1;
 $1 = std____2__remove_reference_char_20const_____type___20std____2__move_char_20const____28char_20const___29($3 + 12 | 0);
 HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LambdaExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__LambdaExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__LambdaExpr__LambdaExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) {
 if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0);
 }
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0);
}
function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29_1($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$1 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $3;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $3;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $2);
 __stack_pointer = $2 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__PixelVectorType_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 26, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 32272;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__LiteralOperator_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 19, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27572;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__GlobalQualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 38, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 27692;
 return $0;
}
function puts($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = HEAP32[5187];
 if (HEAP32[$1 + 76 >> 2] >= 0) {
  $2 = __lockfile($1);
 }
 $3 = (fputs($0, $1) | 0) < 0;
 $0 = -1;
 label$2 : {
  if ($3) {
   break label$2;
  }
  label$3 : {
   if (HEAPU8[$1 + 75 | 0] == 10) {
    break label$3;
   }
   $0 = HEAP32[$1 + 20 >> 2];
   if ($0 >>> 0 >= HEAPU32[$1 + 16 >> 2]) {
    break label$3;
   }
   HEAP32[$1 + 20 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 10;
   $0 = 0;
   break label$2;
  }
  $0 = __overflow($1, 10) >> 31;
 }
 if ($2) {
  __unlockfile($1);
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__ThrowExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__ThrowExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0, $1) {
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $2 = strlen($1);
 $3 = operator_20new_28unsigned_20long_29($2 + 13 | 0);
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = $2;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = memcpy(std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($3), $1, $2 + 1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28_28anonymous_20namespace_29__itanium_demangle__StringView_29($0, $1) {
 var $2 = 0;
 $2 = $28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($1);
 if ($2) {
  $28anonymous_20namespace_29__itanium_demangle__OutputStream__grow_28unsigned_20long_29($0, $2);
  memmove(HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0, $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($1), $2);
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $2;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__StringLiteral__StringLiteral_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 66, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 24328;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr__UUIDOfExpr_28_28anonymous_20namespace_29__itanium_demangle__Node__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__DtorName__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__DtorName_2c_20_28anonymous_20namespace_29__itanium_demangle__Node____28_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__DtorName__DtorName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[$1 >> 2]);
}
function unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 8 | 0, $1, $0);
 __stack_pointer = $2 + 16 | 0;
 return $3 ? $1 : $0;
}
function unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($2 + 8 | 0, $0, $1);
 __stack_pointer = $2 + 16 | 0;
 return $3 ? $1 : $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__StdQualifiedName_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 39, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 30716;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__NoexceptSpec_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 16, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 31584;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__LambdaExpr__LambdaExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 67, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 25380;
 return $0;
}
function std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________allocate_28unsigned_20long_2c_20void_20const__29($0, $1, $2) {
 if (std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
  std____2____throw_length_error_28char_20const__29(9301);
  abort();
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1 << 2, 4);
}
function $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__ThrowExpr_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 63, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 29052;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 91);
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 8 | 0, $1);
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($1, 93);
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_200_2c_20false_____get_28_29_20const($0);
}
function $28anonymous_20namespace_29__itanium_demangle__DtorName__DtorName_28_28anonymous_20namespace_29__itanium_demangle__Node_20const__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 43, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 26852;
 return $0;
}
function std____2__allocator_traits_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___allocate_28std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________2c_20unsigned_20long_29($0, $1) {
 return std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________allocate_28unsigned_20long_2c_20void_20const__29($0, $1, 0);
}
function std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20int_20const______tuple_impl_0ul_2c_20int_20const__2c_20int_20const___28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_int_20const___2c_20std____2____tuple_indices___2c_20std____2____tuple_types___2c_20int_20const__29($0, $1) {
 std____2____tuple_leaf_0ul_2c_20int_20const__2c_20false_____tuple_leaf_int_20const__2c_20void__28int_20const__29($0, int_20const__20std____2__forward_int_20const___28std____2__remove_reference_int_20const____type__29($1));
 return $0;
}
function emscripten__internal__GenericBindingType_nftMarker___toWireType_28nftMarker___29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = operator_20new_28unsigned_20long_29(20);
 $0 = nftMarker___20std____2__forward_nftMarker__28std____2__remove_reference_nftMarker___type__29($0);
 $2 = HEAP32[$0 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $3;
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 $2 = HEAP32[$0 + 12 >> 2];
 $3 = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 8 >> 2] = $3;
 HEAP32[$1 + 12 >> 2] = $2;
 return $1;
}
function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = HEAP32[$1 + 16 >> 2];
 if (!$0) {
  HEAP32[$1 + 36 >> 2] = 1;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 16 >> 2] = $2;
  return;
 }
 label$2 : {
  if (($2 | 0) == ($0 | 0)) {
   if (HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP32[$1 + 24 >> 2] = $3;
   return;
  }
  HEAP8[$1 + 54 | 0] = 1;
  HEAP32[$1 + 24 >> 2] = 2;
  HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr__UUIDOfExpr_28_28anonymous_20namespace_29__itanium_demangle__Node__29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 64, 1, 1, 1);
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 >> 2] = 29164;
 return $0;
}
function std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arIset__20const__2c_20std____2____hash_value_type_int_2c_20arIset__20const__29_20const($0, $1, $2) {
 return std____2__equal_to_int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, std____2____hash_value_type_int_2c_20arIset_____get_value_28_29_20const($1), std____2____hash_value_type_int_2c_20arIset_____get_value_28_29_20const($2));
}
function strncmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if (!$2) {
  return 0;
 }
 $3 = HEAPU8[$0 | 0];
 label$2 : {
  if (!$3) {
   break label$2;
  }
  while (1) {
   label$4 : {
    $4 = HEAPU8[$1 | 0];
    if (($4 | 0) != ($3 | 0)) {
     break label$4;
    }
    $2 = $2 - 1 | 0;
    if (!$2 | !$4) {
     break label$4;
    }
    $1 = $1 + 1 | 0;
    $3 = HEAPU8[$0 + 1 | 0];
    $0 = $0 + 1 | 0;
    if ($3) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $5 = $3;
 }
 return ($5 & 255) - HEAPU8[$1 | 0] | 0;
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_200_2c_20false_____get_28_29($0);
}
function unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__29($0, $1, $2) {
 return unsigned_20int_20const__20std____2__lower_bound_unsigned_20int_20const__2c_20unsigned_20long_2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__20__28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20int_2c_20unsigned_20long__29($0, $1, $2);
}
function process_data_simple_main($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 label$1 : {
  $4 = HEAP32[$0 + 448 >> 2];
  $5 = HEAP32[$4 + 52 >> 2];
  if ($5 >>> 0 <= HEAPU32[$4 + 48 >> 2]) {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0 + 452 >> 2] + 12 >> 2]]($0, $4 + 8 | 0) | 0)) {
    break label$1;
   }
   HEAP32[$4 + 48 >> 2] = 0;
   $5 = HEAP32[$4 + 52 >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] + 4 >> 2]]($0, $4 + 8 | 0, $4 + 48 | 0, $5, $1, $2, $3);
 }
}
function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $6 = $0;
 $7 = $1;
 $1 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $5 = $4 >> 8;
  $1 = $5;
  if (!($4 & 1)) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[$2 >> 2] + $5 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6, $7, $2 + $1 | 0, $4 & 2 ? $3 : 2);
}
function std____2__enable_if__28is_move_constructible__28anonymous_20namespace_29__itanium_demangle__Node____value_29_20___20_28is_move_assignable__28anonymous_20namespace_29__itanium_demangle__Node____value_29_2c_20void___type_20std____2__swap__28anonymous_20namespace_29__itanium_demangle__Node___28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20_28anonymous_20namespace_29__itanium_demangle__Node___29($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$0 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$1 >> 2] = $2;
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1);
}
function std____2____libcpp_refstring_____libcpp_refstring_28_29($0) {
 var $1 = 0;
 label$1 : {
  if (!std____2____libcpp_refstring____uses_refcount_28_29_20const($0)) {
   break label$1;
  }
  $1 = std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29(HEAP32[$0 >> 2]);
  if ((int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29($1 + 8 | 0) | 0) > -1) {
   break label$1;
  }
  operator_20delete_28void__29($1);
 }
 return $0;
}
function emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1) {
 std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__2c_20unsigned_20long_29($0, $1 + 4 | 0, HEAP32[$1 >> 2]);
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20short__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20short__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____20std____2__forward_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20__28std____2__remove_reference_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___type__29($0) {
 return $0;
}
function std____2____compressed_pair_elem_std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__2c_201_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20_____bucket_list_deallocator_28_29($0);
 return $0;
}
function __toread($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 | $1 - 1;
 if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
  FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 4) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 $2 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $2;
 return $1 << 27 >> 31;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20long__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20long__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20char__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul____PODSmallVector_28_29($0) {
 if (!$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___isInline_28_29_20const($0)) {
  dlfree(HEAP32[$0 >> 2]);
 }
 return $0;
}
function std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__2c_201_2c_20false_____get_28_29($0 + 4 | 0);
}
function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_unsigned_20int__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20int__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function std____2__remove_reference_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____type___20std____2__move_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20____28std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___29($0) {
 return $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_signed_20char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_signed_20char__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, $2) {
 if (std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
  std____2____throw_length_error_28char_20const__29(9301);
  abort();
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29(Math_imul($1, 56), 4);
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__OutputStream_28_29($0) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__numeric_limits_unsigned_20int___max_28_29(), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = std____2__numeric_limits_unsigned_20int___max_28_29(), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator___ManglingParser_28char_20const__2c_20char_20const__29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___AbstractManglingParser_28char_20const__2c_20char_20const__29($0, $1, $2);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___PODSmallVector_28_29($0) {
 var $1 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 44;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 return $0;
}
function sbrk($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 $1 = HEAP32[8448];
 $2 = $0 + 3 & -4;
 $0 = $1 + $2 | 0;
 label$1 : {
  if ($0 >>> 0 <= $1 >>> 0 ? ($2 | 0) >= 1 : 0) {
   break label$1;
  }
  if (__wasm_memory_size() << 16 >>> 0 < $0 >>> 0) {
   if (!(emscripten_resize_heap($0 | 0) | 0)) {
    break label$1;
   }
  }
  HEAP32[8448] = $0;
  return $1;
 }
 wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return -1;
}
function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0;
 $10 = __stack_pointer - 16 | 0;
 __stack_pointer = $10;
 $11 = $8 ^ -2147483648;
 $9 = $4;
 $8 = $6;
 $4 = $11;
 __addtf3($10, $1, $2, $3, $9, $5, $8, $7, $4);
 $9 = $10;
 $4 = HEAP32[$9 >> 2];
 $8 = HEAP32[$9 + 4 >> 2];
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $8;
 $4 = HEAP32[$9 + 12 >> 2];
 $8 = HEAP32[$9 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $8;
 HEAP32[$0 + 12 >> 2] = $4;
 __stack_pointer = $9 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool___SwapAndRestore_28bool__2c_20bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 15 | 0] = $2;
 HEAP32[$0 >> 2] = $1;
 $1 = HEAPU8[$1 | 0];
 HEAP8[$0 + 5 | 0] = 1;
 HEAP8[$0 + 4 | 0] = $1;
 $1 = std____2__remove_reference_bool____type___20std____2__move_bool___28bool__29($3 + 15 | 0);
 HEAP8[HEAP32[$0 >> 2]] = HEAPU8[$1 | 0];
 __stack_pointer = $3 + 16 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___begin_28_29($0) + ($1 << 2) | 0;
}
function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2 >>> 16 | 0;
 $5 = $0 >>> 16 | 0;
 $3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
 $2 = $2 & 65535;
 $0 = $0 & 65535;
 $1 = Math_imul($2, $0);
 $2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
 $3 = $3 + ($2 >>> 16 | 0) | 0;
 $2 = Math_imul($0, $4) + ($2 & 65535) | 0;
 i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
 return $1 & 65535 | $2 << 16;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 2, std____2__numeric_limits_unsigned_20short___min_28_29() & 65535, std____2__numeric_limits_unsigned_20short___max_28_29() & 65535);
 __stack_pointer = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BoolExpr__BoolExpr_28bool_29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, 65, 1, 1, 1);
 HEAP8[$0 + 8 | 0] = $1;
 HEAP32[$0 >> 2] = 23864;
 return $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_double__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_double__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_signed_20char_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 1, std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24, std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24);
 __stack_pointer = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__BoolExpr__20_28anonymous_20namespace_29__DefaultAllocator__makeNode__28anonymous_20namespace_29__itanium_demangle__BoolExpr_2c_20int__28int___29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__BoolExpr__BoolExpr_28bool_29($28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, 12), HEAP32[int___20std____2__forward_int__28std____2__remove_reference_int___type__29($1) >> 2] != 0);
}
function void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_short__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_short__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_float__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_float__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20char_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 1, std____2__numeric_limits_unsigned_20char___min_28_29() & 255, std____2__numeric_limits_unsigned_20char___max_28_29() & 255);
 __stack_pointer = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__initializeOutputStream_28char__2c_20unsigned_20long__2c_20_28anonymous_20namespace_29__itanium_demangle__OutputStream__2c_20unsigned_20long_29($0, $1, $2) {
 label$1 : {
  if (!$0) {
   $1 = 1024;
   $0 = dlmalloc(1024);
   if ($0) {
    break label$1;
   }
   return 0;
  }
  $1 = HEAP32[$1 >> 2];
 }
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__reset_28char__2c_20unsigned_20long_29($2, $0, $1);
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__Node_28_28anonymous_20namespace_29__itanium_demangle__Node__Kind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_2c_20_28anonymous_20namespace_29__itanium_demangle__Node__Cache_29($0, $1, $2, $3, $4) {
 HEAP8[$0 + 7 | 0] = $4;
 HEAP8[$0 + 6 | 0] = $3;
 HEAP8[$0 + 5 | 0] = $2;
 HEAP8[$0 + 4 | 0] = $1;
 HEAP32[$0 >> 2] = 22844;
 return $0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_long__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_long__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_char__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_char__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20long_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4, std____2__numeric_limits_unsigned_20long___min_28_29() | 0, std____2__numeric_limits_unsigned_20long___max_28_29() | 0);
 __stack_pointer = $1 + 16 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), wasm2js_i32$1 = $1 | -2147483648, HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consume_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 >> 2];
 $2 = 0;
 label$1 : {
  if (($1 | 0) == HEAP32[$0 + 4 >> 2]) {
   break label$1;
  }
  HEAP32[$0 >> 2] = $1 + 1;
  $2 = HEAPU8[$1 | 0];
 }
 $0 = $2;
 return $0 << 24 >> 24;
}
function void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_memory_view(emscripten__internal__TypeID_emscripten__memory_view_int__2c_20void___get_28_29() | 0, $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_int__28_29() | 0, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}
function jpeg_idct_1x2($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $1 = HEAP32[$1 + 84 >> 2];
 $5 = Math_imul(HEAP32[$1 + 32 >> 2], HEAPU16[$2 + 16 >> 1]);
 $0 = HEAP32[$0 + 336 >> 2] - 384 | 0;
 $2 = Math_imul(HEAP32[$1 >> 2], HEAPU16[$2 >> 1]) + 4100 | 0;
 HEAP8[HEAP32[$3 >> 2] + $4 | 0] = HEAPU8[$0 + ($5 + $2 >>> 3 & 1023) | 0];
 HEAP8[HEAP32[$3 + 4 >> 2] + $4 | 0] = HEAPU8[($2 - $5 >>> 3 & 1023) + $0 | 0];
}
function jpeg_read_header($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 20 >> 2];
 if (($2 & -2) != 200) {
  $3 = HEAP32[$0 >> 2];
  HEAP32[$3 + 24 >> 2] = $2;
  HEAP32[$3 + 20 >> 2] = 21;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0);
 }
 $2 = jpeg_consume_input($0);
 if (($2 | 0) == 2) {
  if ($1) {
   $1 = HEAP32[$0 >> 2];
   HEAP32[$1 + 20 >> 2] = 53;
   FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
  }
  jpeg_abort($0);
 }
 return $2 | 0;
}
function void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_unsigned_20int_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4, std____2__numeric_limits_unsigned_20int___min_28_29() | 0, std____2__numeric_limits_unsigned_20int___max_28_29() | 0);
 __stack_pointer = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___PODSmallVector_28_29($0) {
 var $1 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 28;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__grow_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 label$1 : {
  $1 = HEAP32[$0 + 4 >> 2] + $1 | 0;
  $2 = HEAP32[$0 + 8 >> 2];
  if ($1 >>> 0 < $2 >>> 0) {
   break label$1;
  }
  $2 = $2 << 1;
  $1 = $1 >>> 0 > $2 >>> 0 ? $1 : $2;
  HEAP32[$0 + 8 >> 2] = $1;
  $1 = dlrealloc(HEAP32[$0 >> 2], $1);
  HEAP32[$0 >> 2] = $1;
  if ($1) {
   break label$1;
  }
  std__terminate_28_29();
  abort();
 }
}
function std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___allocate_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20unsigned_20long_29($0, $1) {
 return std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, 0);
}
function __shlim($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = $0;
 HEAP32[$3 + 112 >> 2] = $1;
 HEAP32[$3 + 116 >> 2] = $2;
 $4 = HEAP32[$3 + 8 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 $3 = $4 - $5 | 0;
 $6 = $3 >> 31;
 $7 = $3;
 $3 = $0;
 HEAP32[$3 + 120 >> 2] = $7;
 HEAP32[$3 + 124 >> 2] = $6;
 $3 = $6;
 $3 = (($2 | 0) < ($3 | 0) ? 1 : ($2 | 0) <= ($3 | 0) ? $1 >>> 0 < $7 >>> 0 : 0) ? $1 + $5 | 0 : $4;
 HEAP32[$0 + 104 >> 2] = $1 | $2 ? $3 : $4;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP8[wasm2js_i32$0 + 11 | 0] = wasm2js_i32$1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
}
function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
 }
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_200_2c_20false_____get_28_29($0);
}
function std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_200_2c_20false_____get_28_29_20const($0);
}
function skip_input_data($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 if (($1 | 0) >= 1) {
  $2 = HEAP32[$0 + 24 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  if (($3 | 0) < ($1 | 0)) {
   while (1) {
    FUNCTION_TABLE[HEAP32[$2 + 12 >> 2]]($0) | 0;
    $1 = $1 - $3 | 0;
    $3 = HEAP32[$2 + 4 >> 2];
    if (($1 | 0) > ($3 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 4 >> 2] = $3 - $1;
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + $1;
 }
}
function std____2____compressed_pair_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__2c_201_2c_20true_____get_28_29($0);
}
function jpeg_idct_2x1($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $4 = HEAP32[$3 >> 2] + $4 | 0;
 $3 = HEAP32[$0 + 336 >> 2] - 384 | 0;
 $0 = HEAP32[$1 + 84 >> 2];
 $1 = Math_imul(HEAP32[$0 + 4 >> 2], HEAPU16[$2 + 2 >> 1]);
 $2 = Math_imul(HEAP32[$0 >> 2], HEAPU16[$2 >> 1]) + 4100 | 0;
 HEAP8[$4 | 0] = HEAPU8[$3 + ($1 + $2 >>> 3 & 1023) | 0];
 HEAP8[$4 + 1 | 0] = HEAPU8[($2 - $1 >>> 3 & 1023) + $3 | 0];
}
function void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_short_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 2, std____2__numeric_limits_short___min_28_29() << 16 >> 16, std____2__numeric_limits_short___max_28_29() << 16 >> 16);
 __stack_pointer = $1 + 16 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0), wasm2js_i32$1 = $1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
}
function $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
}
function void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_char_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 1, std____2__numeric_limits_char___min_28_29() << 24 >> 24, std____2__numeric_limits_char___max_28_29() << 24 >> 24);
 __stack_pointer = $1 + 16 | 0;
}
function std____2____compressed_pair_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_200_2c_20false_____get_28_29($0);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = 10;
 if ($0 >>> 0 >= 11) {
  $0 = unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0 + 1 | 0);
  $1 = $0;
  $0 = $0 - 1 | 0;
  $1 = ($0 | 0) == 11 ? $1 : $0;
 }
 return $1;
}
function std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______operator___28_29_20const($0) {
 return std____2__pointer_traits_std____2____hash_value_type_int_2c_20arIset_____pointer_to_28std____2____hash_value_type_int_2c_20arIset___29(std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________upcast_28_29(HEAP32[$0 >> 2]) + 8 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 $28anonymous_20namespace_29__itanium_demangle__QualType__printQuals_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___consumeIf_28char_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 >> 2];
 if (!(($2 | 0) == HEAP32[$0 + 4 >> 2] | HEAP8[$2 | 0] != ($1 & 255))) {
  HEAP32[$0 >> 2] = $2 + 1;
  $3 = 1;
 }
 return $3;
}
function emscripten__value_object_nftMarker___value_object_28char_20const__29($0, $1) {
 emscripten__internal__noncopyable__noncopyable_28_29($0);
 _embind_register_value_object(emscripten__internal__TypeID_nftMarker_2c_20void___get_28_29() | 0, $1 | 0, char_20const__20emscripten__internal__getGenericSignature_int__28_29() | 0, 17, char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() | 0, 18);
 return $0;
}
function std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___size_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___first_28_29_20const($0) >> 2];
}
function void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_long_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4, std____2__numeric_limits_long___min_28_29() | 0, std____2__numeric_limits_long___max_28_29() | 0);
 __stack_pointer = $1 + 16 | 0;
}
function emscripten__internal__WithPolicies____ArgTypeList_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___getTypes_28_29_20const($0) {
 return emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__dropFront_28unsigned_20long_29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $4 = HEAP32[$1 >> 2];
 $3 = $28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($1);
 $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($0, $4 + ($2 >>> 0 < $3 >>> 0 ? $2 : $3) | 0, HEAP32[$1 + 4 >> 2]);
}
function void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_integer(emscripten__internal__TypeID_int_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4, std____2__numeric_limits_int___min_28_29() | 0, std____2__numeric_limits_int___max_28_29() | 0);
 __stack_pointer = $1 + 16 | 0;
}
function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $7 = HEAP32[$0 + 4 >> 2];
 $6 = $7 >> 8;
 $0 = HEAP32[$0 >> 2];
 $6 = $7 & 1 ? HEAP32[HEAP32[$3 >> 2] + $6 >> 2] : $6;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $6 + $3 | 0, $7 & 2 ? $4 : 2, $5);
}
function std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true___operator_28_29_28std____2____hash_value_type_int_2c_20arIset__20const__2c_20int_20const__29_20const($0, $1, $2) {
 return std____2__equal_to_int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, std____2____hash_value_type_int_2c_20arIset_____get_value_28_29_20const($1), $2);
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__initializePackExpansion_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 if (HEAP32[$1 + 16 >> 2] == (std____2__numeric_limits_unsigned_20int___max_28_29() | 0)) {
  $0 = $28anonymous_20namespace_29__itanium_demangle__NodeArray__size_28_29_20const($0 + 8 | 0);
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = $0;
 }
}
function std____2__tuple_int_20const___20std____2__forward_as_tuple_int_20const___28int_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $0 = HEAP32[std____2__tuple_int_20const____tuple_true_2c_20false__28int_20const__29($1 + 8 | 0, int_20const__20std____2__forward_int_20const___28std____2__remove_reference_int_20const____type__29($0)) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return $0;
}
function std____2__pair__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const____pair_true_2c_20false__28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__Node_20const__20const__29($0, $1, $2) {
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
 return $0;
}
function pad($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 256 | 0;
 __stack_pointer = $5;
 if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
  $2 = $2 - $3 | 0;
  $3 = $2 >>> 0 < 256;
  memset($5, $1 & 255, $3 ? $2 : 256);
  if (!$3) {
   while (1) {
    out($0, $5, 256);
    $2 = $2 - 256 | 0;
    if ($2 >>> 0 > 255) {
     continue;
    }
    break;
   }
  }
  out($0, $5, $2);
 }
 __stack_pointer = $5 + 256 | 0;
}
function std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2__distance_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__29($0, $1) {
 return std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2____distance_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2____compressed_pair_elem_std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true_____unordered_map_equal_28_29($0);
 return $0;
}
function __stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $0 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek(HEAP32[$0 + 60 >> 2], $1, $2, $3 & 255, $4 + 8 | 0));
 __stack_pointer = $4 + 16 | 0;
 $2 = HEAP32[$4 + 12 >> 2];
 i64toi32_i32$HIGH_BITS = $0 ? -1 : $2;
 $1 = HEAP32[$4 + 8 >> 2];
 return ($0 ? -1 : $1) | 0;
}
function jpeg_std_error($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 104 >> 2] = 0;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 31;
 HEAP32[$0 + 12 >> 2] = 32;
 HEAP32[$0 + 8 >> 2] = 33;
 HEAP32[$0 + 4 >> 2] = 34;
 HEAP32[$0 >> 2] = 35;
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 126;
 HEAP32[$0 + 120 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 14464;
 HEAP32[$0 + 20 >> 2] = 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___look_28unsigned_20int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 if ($2 - $0 >>> 0 > $1 >>> 0) {
  $3 = HEAP8[$0 + $1 | 0];
 }
 return $3;
}
function std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________20std____2__forward_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________28std____2__remove_reference_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_________type__29($0) {
 return $0;
}
function void_20std____2__allocator_traits_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____destroy_std____2__pair_int_20const_2c_20arIset__20__28std____2__integral_constant_bool_2c_20false__2c_20std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20std____2__pair_int_20const_2c_20arIset___29($0, $1) {}
function std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_201_2c_20true_____get_28_29($0);
}
function std____2____compressed_pair_elem_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________allocator_28_29($0);
 return $0;
}
function testSetjmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $4 = HEAP32[($3 << 3) + $1 >> 2];
   if (!$4) {
    break label$1;
   }
   if (($0 | 0) == ($4 | 0)) {
    return HEAP32[(($3 << 3) + $1 | 0) + 4 >> 2];
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0) {
 return std____2__pointer_traits_char_20const____pointer_to_28char_20const__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0));
}
function std____2____compressed_pair_elem_std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true_____unordered_map_hasher_28_29($0);
 return $0;
}
function std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20std____2__forward_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20__28std____2__remove_reference_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20___type__29($0) {
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___PODSmallVector_28_29($0) {
 var $1 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 28;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 return $0;
}
function std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________upcast_28_29($0) {
 return std____2__pointer_traits_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________pointer_to_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0);
}
function std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________ptr_28_29($0) {
 return std____2__pointer_traits_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________pointer_to_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0);
}
function std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20_____alloc_28_29($0) {
 return std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___second_28_29($0);
}
function emit_message($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 >> 2];
 if (($1 | 0) <= -1) {
  $1 = HEAP32[$2 + 108 >> 2];
  if (!(HEAP32[$2 + 104 >> 2] < 3 ? $1 : 0)) {
   FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0);
   $1 = HEAP32[$2 + 108 >> 2];
  }
  HEAP32[$2 + 108 >> 2] = $1 + 1;
  return;
 }
 if (HEAP32[$2 + 104 >> 2] >= ($1 | 0)) {
  FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]]($0);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul____PODSmallVector_28_29($0) {
 if (!$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($0)) {
  dlfree(HEAP32[$0 >> 2]);
 }
 return $0;
}
function std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___size_28_29($0) {
 return std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___first_28_29($0);
}
function store_int($0, $1, $2, $3) {
 label$1 : {
  if (!$0) {
   break label$1;
  }
  label$2 : {
   switch ($1 + 2 | 0) {
   case 0:
    HEAP8[$0 | 0] = $2;
    return;
   case 1:
    HEAP16[$0 >> 1] = $2;
    return;
   case 2:
   case 3:
    HEAP32[$0 >> 2] = $2;
    return;
   case 5:
    break label$2;
   default:
    break label$1;
   }
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
 }
}
function std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_201_2c_20true_____get_28_29($0);
}
function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $5 = $6 >> 8;
 $0 = HEAP32[$0 >> 2];
 $5 = $6 & 1 ? HEAP32[HEAP32[$2 >> 2] + $5 >> 2] : $5;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $5 + $2 | 0, $6 & 2 ? $3 : 2, $4);
}
function std____2__tuple_int_20const____tuple_true_2c_20false__28int_20const__29($0, $1) {
 std____2____tuple_impl_std____2____tuple_indices_0ul__2c_20int_20const______tuple_impl_0ul_2c_20int_20const__2c_20int_20const___28std____2____tuple_indices_0ul__2c_20std____2____tuple_types_int_20const___2c_20std____2____tuple_indices___2c_20std____2____tuple_types___2c_20int_20const__29($0, $1);
 return $0;
}
function std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________deallocate_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2 << 2, 4);
}
function std____2____compressed_pair_float_2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_201_2c_20true_____get_28_29($0);
}
function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1 : {
  if (!$2 | ($3 | 0) != ($2 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}
function unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 return unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
}
function unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
 return unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0);
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1) | 0;
}
function void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 label$1 : {
  if (($0 | 0) == ($1 | 0)) {
   break label$1;
  }
  while (1) {
   $1 = $1 - 1 | 0;
   if ($1 >>> 0 <= $0 >>> 0) {
    break label$1;
   }
   void_20std____2__iter_swap_char__2c_20char___28char__2c_20char__29($0, $1);
   $0 = $0 + 1 | 0;
   continue;
  }
 }
}
function std____2____hash_key_value_types_std____2____hash_value_type_int_2c_20arIset__20_____get_ptr_28std____2____hash_value_type_int_2c_20arIset___29($0) {
 return std____2__pair_int_20const_2c_20arIset___20std____2__addressof_std____2__pair_int_20const_2c_20arIset__20__28std____2__pair_int_20const_2c_20arIset___29(std____2____hash_value_type_int_2c_20arIset_____get_value_28_29($0));
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___begin_28_29($0) + ($1 << 2) | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0) {
 return std____2__pointer_traits_char____pointer_to_28char__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___max_size_28_29_20const($0) {
 return std____2__allocator_traits_std____2__allocator_char__20___max_size_28std____2__allocator_char__20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0)) - 16 | 0;
}
function std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______20std____2__addressof_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20__28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0) {
 return $0;
}
function fwrite($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = Math_imul($1, $2);
 label$1 : {
  if (HEAP32[$3 + 76 >> 2] <= -1) {
   $0 = __fwritex($0, $4, $3);
   break label$1;
  }
  $5 = __lockfile($3);
  $0 = __fwritex($0, $4, $3);
  if (!$5) {
   break label$1;
  }
  __unlockfile($3);
 }
 if (($0 | 0) == ($4 | 0)) {
  return $1 ? $2 : 0;
 }
 return ($0 >>> 0) / ($1 >>> 0) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1) | 0;
}
function emscripten__internal__TypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__20___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1) | 0;
}
function std____2____less__28anonymous_20namespace_29__itanium_demangle__ReferenceKind_2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind___operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__2c_20_28anonymous_20namespace_29__itanium_demangle__ReferenceKind_20const__29_20const($0, $1) {
 return HEAP32[$0 >> 2] < HEAP32[$1 >> 2];
}
function std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_200_2c_20false_____compressed_pair_elem_28std____2____value_init_tag_29($0) {
 std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_node_base_28_29($0);
 return $0;
}
function std____2____compressed_pair_elem_float_2c_200_2c_20false_____compressed_pair_elem_float_2c_20void__28float___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
 wasm2js_i32$0 = $0, wasm2js_f32$0 = HEAPF32[float___20std____2__forward_float__28std____2__remove_reference_float___type__29($1) >> 2], HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
 return $0;
}
function __towrite($0) {
 var $1 = 0;
 $1 = HEAPU8[$0 + 74 | 0];
 HEAP8[$0 + 74 | 0] = $1 | $1 - 1;
 $1 = HEAP32[$0 >> 2];
 if ($1 & 8) {
  HEAP32[$0 >> 2] = $1 | 32;
  return -1;
 }
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $1 = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
 return 0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1) | 0;
}
function void_20std____2__advance_unsigned_20int_20const___28unsigned_20int_20const___2c_20std____2__iterator_traits_unsigned_20int_20const____difference_type_29($0, $1) {
 void_20std____2____advance_unsigned_20int_20const___28unsigned_20int_20const___2c_20std____2__iterator_traits_unsigned_20int_20const____difference_type_2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0) {
 return std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0);
}
function std____2____tuple_leaf_0ul_2c_20int_20const__2c_20false_____tuple_leaf_int_20const__2c_20void__28int_20const__29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = int_20const__20std____2__forward_int_20const___28std____2__remove_reference_int_20const____type__29($1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1) | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 8 >> 2] & 2147483647;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul____PODSmallVector_28_29($0) {
 if (!$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___isInline_28_29_20const($0)) {
  dlfree(HEAP32[$0 >> 2]);
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul____PODSmallVector_28_29($0) {
 if (!$28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___isInline_28_29_20const($0)) {
  dlfree(HEAP32[$0 >> 2]);
 }
 return $0;
}
function std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20_____hash_node_destructor_28std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___2c_20bool_29($0, $1, $2) {
 HEAP8[$0 + 4 | 0] = $2;
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____compressed_pair_elem_int_2c_20void__28int___29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[int___20std____2__forward_int__28std____2__remove_reference_int___type__29($1) >> 2], HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 12 >> 2], $1) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 8 | 0, $1);
}
function $28anonymous_20namespace_29__BumpPointerAllocator__reset_28_29($0) {
 var $1 = 0;
 while (1) {
  $1 = HEAP32[$0 + 4096 >> 2];
  if ($1) {
   HEAP32[$0 + 4096 >> 2] = HEAP32[$1 >> 2];
   if (($0 | 0) == ($1 | 0)) {
    continue;
   }
   dlfree($1);
   continue;
  }
  break;
 }
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 4096 >> 2] = $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0) {
 return HEAPU8[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) + 11 | 0] >>> 7 | 0;
}
function std____2____compressed_pair_elem_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__2c_201_2c_20true_____compressed_pair_elem_28std____2____value_init_tag_29($0) {
 std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___allocator_28_29($0);
 return $0;
}
function EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 __embind_register_native_and_builtin_types();
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const(HEAP32[$0 + 8 >> 2], $1);
}
function bool_20std____2__equal_char_20const__2c_20char_20const___28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
 return bool_20std____2__equal_char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__20__28char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2);
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__NodeArray__printWithComma_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0 + 8 | 0, $1);
}
function pop_arg_long_double($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0;
 $2 = HEAP32[$1 >> 2] + 15 & -16;
 HEAP32[$1 >> 2] = $2 + 16;
 wasm2js_i32$0 = $0, wasm2js_f64$0 = __trunctfdf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
}
function std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___deallocate_28std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, Math_imul($2, 56), 4);
}
function merged_1v_upsample($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 476 >> 2] + 12 >> 2]]($0, $1, HEAP32[$2 >> 2], (HEAP32[$5 >> 2] << 2) + $4 | 0);
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
}
function $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20long____SwapAndRestore_28_29($0) {
 var $1 = 0;
 if (HEAPU8[$0 + 8 | 0]) {
  $1 = std____2__remove_reference_unsigned_20long____type___20std____2__move_unsigned_20long___28unsigned_20long__29($0 + 4 | 0);
  HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___begin_28_29($0) + ($1 << 2) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_unsigned_20int____SwapAndRestore_28_29($0) {
 var $1 = 0;
 if (HEAPU8[$0 + 8 | 0]) {
  $1 = std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($0 + 4 | 0);
  HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___operator_5b_5d_28unsigned_20long_29($0, $1) {
 return $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___begin_28_29($0) + ($1 << 2) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clearInline_28_29($0) {
 var $1 = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 28;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
}
function $28anonymous_20namespace_29__BumpPointerAllocator__allocateMassive_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $1 = dlmalloc($1 + 8 | 0);
 if (!$1) {
  std__terminate_28_29();
  abort();
 }
 $0 = HEAP32[$0 + 4096 >> 2];
 $2 = HEAP32[$0 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 return $1 + 8 | 0;
}
function __string_read($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 84 >> 2];
 $3 = $2 + 256 | 0;
 $5 = memchr($4, 0, $3);
 $3 = $5 ? $5 - $4 | 0 : $3;
 $2 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
 memcpy($1, $4, $2);
 $3 = $3 + $4 | 0;
 HEAP32[$0 + 84 >> 2] = $3;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $2 + $4;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_char_20const_____SwapAndRestore_28_29($0) {
 var $1 = 0;
 if (HEAPU8[$0 + 8 | 0]) {
  $1 = std____2__remove_reference_char_20const_____type___20std____2__move_char_20const____28char_20const___29($0 + 4 | 0);
  HEAP32[HEAP32[$0 >> 2] >> 2] = HEAP32[$1 >> 2];
 }
 return $0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0) {
 return char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0));
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0) {
 return HEAP32[std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0) >> 2];
}
function rewind($0) {
 var $1 = 0;
 label$1 : {
  if (HEAP32[$0 + 76 >> 2] >= 0) {
   $1 = __lockfile($0);
   __fseeko_unlocked($0, 0, 0, 0);
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
   if (!$1) {
    break label$1;
   }
   __unlockfile($0);
   return;
  }
  __fseeko_unlocked($0, 0, 0, 0);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -33;
 }
}
function emscripten__internal__TypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__20___get_28_29();
}
function emscripten__internal__TypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__20___get_28_29();
}
function __uflow($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 $2 = -1;
 label$1 : {
  if (__toread($0)) {
   break label$1;
  }
  if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
   break label$1;
  }
  $2 = HEAPU8[$1 + 15 | 0];
 }
 __stack_pointer = $1 + 16 | 0;
 return $2;
}
function reset_input_controller($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 + 460 >> 2];
 HEAP32[$1 + 24 >> 2] = 1;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 >> 2] = 39;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 464 >> 2] >> 2]]($0);
 HEAP32[$0 + 160 >> 2] = 0;
}
function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
 if (!$2) {
  return std__type_info__operator___28std__type_info_20const__29_20const($0, $1);
 }
 if (($0 | 0) == ($1 | 0)) {
  return 1;
 }
 return !strcmp(std__type_info__name_28_29_20const($0), std__type_info__name_28_29_20const($1));
}
function std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, $2) {
 if (std____2__allocator_char___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
  std____2____throw_length_error_28char_20const__29(8364);
  abort();
 }
 return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($1, 1);
}
function jinit_input_controller($0) {
 var $1 = 0;
 $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 28) | 0;
 HEAP32[$0 + 460 >> 2] = $1;
 HEAP32[$1 + 24 >> 2] = 1;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 36;
 HEAP32[$1 + 8 >> 2] = 37;
 HEAP32[$1 + 4 >> 2] = 38;
 HEAP32[$1 >> 2] = 39;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda1__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($0) {
 return HEAPU8[$0 + 5 | 0] == 1;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda0__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($0) {
 return HEAPU8[$0 + 7 | 0] == 1;
}
function void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_float(emscripten__internal__TypeID_double_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack__ParameterPack_28_28anonymous_20namespace_29__itanium_demangle__NodeArray_29___lambda__28_28anonymous_20namespace_29__itanium_demangle__Node__29__operator_28_29_28_28anonymous_20namespace_29__itanium_demangle__Node__29_20const($0) {
 return HEAPU8[$0 + 6 | 0] == 1;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29_20const($0) {
 return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29_20const($0);
}
function void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _embind_register_float(emscripten__internal__TypeID_float_2c_20void___get_28_29() | 0, HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
}
function start_input_pass_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 $1 = 1;
 $2 = HEAP32[$0 + 452 >> 2];
 $1 = HEAP32[$0 + 340 >> 2] <= 1 ? HEAP32[HEAP32[$0 + 344 >> 2] + (HEAP32[$0 + 332 >> 2] == 1 ? 76 : 12) >> 2] : $1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = $1;
}
function emscripten__internal__TypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___get_28_29();
}
function std____2__pointer_traits_std____2____hash_value_type_int_2c_20arIset_____pointer_to_28std____2____hash_value_type_int_2c_20arIset___29($0) {
 return std____2____hash_value_type_int_2c_20arIset___20std____2__addressof_std____2____hash_value_type_int_2c_20arIset__20__28std____2____hash_value_type_int_2c_20arIset___29($0);
}
function std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20std____2__forward_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______28std____2__remove_reference_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______type__29($0) {
 return $0;
}
function void_20emscripten__internal__MemberAccess_nftMarker_2c_20int___setWire_nftMarker__28int_20nftMarker____20const__2c_20nftMarker__2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $2 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29($2);
 HEAP32[HEAP32[$0 >> 2] + $1 >> 2] = $2;
}
function std____2____hash_map_iterator_std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20_____hash_map_iterator_28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function __fmodeflags($0) {
 var $1 = 0;
 $1 = 2;
 if (!strchr($0, 43)) {
  $1 = HEAPU8[$0 | 0] != 114;
 }
 $1 = strchr($0, 120) ? $1 | 128 : $1;
 $1 = strchr($0, 101) ? $1 | 524288 : $1;
 $0 = HEAPU8[$0 | 0];
 $1 = ($0 | 0) == 114 ? $1 : $1 | 64;
 $1 = ($0 | 0) == 119 ? $1 | 512 : $1;
 return ($0 | 0) == 97 ? $1 | 1024 : $1;
}
function std____2__operator___28std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20const__2c_20std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____20const__29($0, $1) {
 return HEAP32[$0 >> 2] == HEAP32[$1 >> 2];
}
function jcopy_sample_rows($0, $1, $2, $3, $4, $5) {
 if (($4 | 0) >= 1) {
  $0 = ($1 << 2) + $0 | 0;
  $1 = ($3 << 2) + $2 | 0;
  while (1) {
   memcpy(HEAP32[$1 >> 2], HEAP32[$0 >> 2], $5);
   $1 = $1 + 4 | 0;
   $0 = $0 + 4 | 0;
   $2 = ($4 | 0) > 1;
   $4 = $4 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
}
function std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___first_28_29_20const($0) {
 return std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____get_28_29_20const($0);
}
function operator_20new_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = $0 ? $0 : 1;
 label$1 : {
  while (1) {
   $0 = dlmalloc($1);
   if ($0) {
    break label$1;
   }
   $0 = std__get_new_handler_28_29();
   if ($0) {
    FUNCTION_TABLE[$0 | 0]();
    continue;
   }
   break;
  }
  abort();
  abort();
 }
 return $0;
}
function arUtilRemoveExt($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = -1;
 while (1) {
  $3 = HEAPU8[$0 + $2 | 0];
  label$2 : {
   if (($3 | 0) != 46) {
    if ($3) {
     break label$2;
    }
    if (($1 | 0) != -1) {
     HEAP8[$0 + $1 | 0] = 0;
    }
    return 0;
   }
   $1 = $2;
  }
  $2 = $2 + 1 | 0;
  continue;
 }
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___numLeft_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____alloc_28_29($0) {
 return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29($0);
}
function emscripten__internal__TypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___get_28_29();
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29_20const($0) {
 return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0);
}
function getint($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 if (isdigit(HEAP8[HEAP32[$0 >> 2]])) {
  while (1) {
   $1 = HEAP32[$0 >> 2];
   $3 = HEAP8[$1 | 0];
   HEAP32[$0 >> 2] = $1 + 1;
   $2 = (Math_imul($2, 10) + $3 | 0) - 48 | 0;
   if (isdigit(HEAP8[$1 + 1 | 0])) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function vsscanf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 144 | 0;
 __stack_pointer = $3;
 $3 = memset($3, 0, 144);
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 32 >> 2] = 161;
 HEAP32[$3 + 84 >> 2] = $0;
 $0 = vfscanf($3, $1, $2);
 __stack_pointer = $3 + 144 | 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___PODSmallVector_28_29($0) {
 var $1 = 0;
 HEAP32[$0 + 8 >> 2] = $0 + 140;
 $1 = $0 + 12 | 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
 memset($1, 0, 128);
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__print_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 if (HEAPU8[$0 + 5 | 0] != 1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 }
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($0, $1) {
 var $2 = 0;
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__grow_28unsigned_20long_29($0, 1);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = $2 + 1;
 HEAP8[HEAP32[$0 >> 2] + $2 | 0] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponent_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 var $2 = 0;
 $2 = HEAPU8[$0 + 5 | 0];
 if (($2 | 0) != 2) {
  return !$2;
 }
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, $1) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasFunction_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 var $2 = 0;
 $2 = HEAPU8[$0 + 7 | 0];
 if (($2 | 0) != 2) {
  return !$2;
 }
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
}
function std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20___first_28_29($0) {
 return std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____get_28_29($0);
}
function int_20emscripten__internal__MemberAccess_nftMarker_2c_20int___getWire_nftMarker__28int_20nftMarker____20const__2c_20nftMarker_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29(HEAP32[$0 >> 2] + $1 | 0) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasArray_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 var $2 = 0;
 $2 = HEAPU8[$0 + 6 | 0];
 if (($2 | 0) != 2) {
  return !$2;
 }
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, $1) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SwapAndRestore_bool____SwapAndRestore_28_29($0) {
 var $1 = 0;
 if (HEAPU8[$0 + 5 | 0]) {
  $1 = std____2__remove_reference_bool____type___20std____2__move_bool___28bool__29($0 + 4 | 0);
  HEAP8[HEAP32[$0 >> 2]] = HEAPU8[$1 | 0];
 }
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___dropBack_28unsigned_20long_29($0, $1) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
}
function std____2____compressed_pair_unsigned_20long_2c_20std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__20___first_28_29($0) {
 return std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____get_28_29($0);
}
function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___second_28_29($0) {
 return std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0);
}
function sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 20 >> 2];
 $4 = $3;
 $3 = HEAP32[$0 + 16 >> 2] - $3 | 0;
 $3 = $2 >>> 0 < $3 >>> 0 ? $2 : $3;
 memcpy($4, $1, $3);
 HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + $3;
 return $2 | 0;
}
function arLog($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(!HEAPU8[$2 | 0] | (!$2 | HEAP32[8316] > ($1 | 0)))) {
  HEAP32[$0 + 12 >> 2] = $3;
  arLogv($2, $1, $2, $3);
 }
 __stack_pointer = $0 + 16 | 0;
}
function std____2__allocator_traits_std____2__allocator_char__20___max_size_28std____2__allocator_char__20const__29($0) {
 return std____2__allocator_traits_std____2__allocator_char__20_____max_size_28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_char__20const__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($0, HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 33216 >> 2]);
}
function std____2____hash_iterator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_iterator_28std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void______29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($0, $1) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 HEAP32[$0 >> 2] = $1;
 wasm2js_i32$0 = $0, wasm2js_i32$1 = strlen($1) + $1 | 0, HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__back_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 $1 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $1 = HEAPU8[(HEAP32[$0 >> 2] + $2 | 0) - 1 | 0];
 }
 $0 = $1;
 return $0 << 24 >> 24;
}
function nftMarker__20emscripten__internal__raw_constructor_nftMarker__28_29() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(20);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__29($0, HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 33240 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function jpeg_idct_1x1($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP8[HEAP32[$3 >> 2] + $4 | 0] = HEAPU8[(HEAP32[$0 + 336 >> 2] + (Math_imul(HEAP32[HEAP32[$1 + 84 >> 2] >> 2], HEAPU16[$2 >> 1]) + 4100 >>> 3 & 1023) | 0) - 384 | 0];
}
function __fpclassifyl($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $3 & 65535;
 $5 = $3 >>> 16 & 32767;
 label$1 : {
  if (($5 | 0) != 32767) {
   $3 = 4;
   if ($5) {
    break label$1;
   }
   return $0 | $2 | ($1 | $4) ? 3 : 2;
  }
  $3 = !($0 | $2 | ($1 | $4));
 }
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___empty_28_29_20const($0) {
 return HEAP32[$0 >> 2] == HEAP32[$0 + 4 >> 2];
}
function std____2____compressed_pair_float_2c_20std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__20___first_28_29($0) {
 return std____2____compressed_pair_elem_float_2c_200_2c_20false_____get_28_29($0);
}
function $28anonymous_20namespace_29__BumpPointerAllocator__grow_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = dlmalloc(4096);
 if (!$1) {
  std__terminate_28_29();
  abort();
 }
 $2 = HEAP32[$0 + 4096 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$0 + 4096 >> 2] = $1;
}
function output_message($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 224 | 0;
 __stack_pointer = $1;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1 + 16 | 0);
 HEAP32[$1 >> 2] = $1 + 16;
 fiprintf(HEAP32[4956], 14976, $1);
 __stack_pointer = $1 + 224 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___isInline_28_29_20const($0) {
 return HEAP32[$0 >> 2] == ($0 + 12 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__QualType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___pop_back_28_29($0) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 4;
}
function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__AbstractManglingParser__28anonymous_20namespace_29__itanium_demangle__ManglingParser__28anonymous_20namespace_29__DefaultAllocator__2c_20_28anonymous_20namespace_29__DefaultAllocator___getDerived_28_29($0) {
 return $0;
}
function ar2ReadJpegImage2($0) {
 var $1 = 0;
 $1 = dlmalloc(20);
 if ($1) {
  $0 = jpgread($0, $1 + 8 | 0, $1 + 12 | 0, $1 + 4 | 0, $1 + 16 | 0);
  HEAP32[$1 >> 2] = $0;
  if (!$0) {
   dlfree($1);
   $1 = 0;
  }
  return $1;
 }
 arLog(0, 3, 1854, 0);
 exit(1);
 abort();
}
function reset_marker_reader($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 216 >> 2] = 0;
 HEAP32[$0 + 440 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 $0 = HEAP32[$0 + 464 >> 2];
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
}
function std____2____compressed_pair_elem_std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__2c_201_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true___operator_28_29_28int_20const__29_20const($0, $1) {
 return std____2__hash_int___operator_28_29_28int_29_20const($0, HEAP32[$1 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___clear_28_29($0) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2];
}
function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
 if (!(HEAP32[$1 + 28 >> 2] == 1 | HEAP32[$1 + 4 >> 2] != ($2 | 0))) {
  HEAP32[$1 + 28 >> 2] = $3;
 }
}
function void_20std____2__iter_swap_char__2c_20char___28char__2c_20char__29($0, $1) {
 std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1);
}
function void_20std____2____advance_unsigned_20int_20const___28unsigned_20int_20const___2c_20std____2__iterator_traits_unsigned_20int_20const____difference_type_2c_20std____2__random_access_iterator_tag_29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
}
function jpeg_abort($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 4 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[$1 + 36 >> 2]]($0, 1);
  if (HEAP32[$0 + 16 >> 2]) {
   HEAP32[$0 + 312 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 200;
   return;
  }
  HEAP32[$0 + 20 >> 2] = 100;
 }
}
function std____2____compressed_pair_elem_std____2____bucket_list_deallocator_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______20__2c_201_2c_20false_____get_28_29($0) {
 return $0;
}
function fmt_x($0, $1, $2, $3) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 - 1 | 0;
   HEAP8[$2 | 0] = HEAPU8[($0 & 15) + 20320 | 0] | $3;
   $0 = ($1 & 15) << 28 | $0 >>> 4;
   $1 = $1 >>> 4 | 0;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___back_28_29($0) {
 return HEAP32[$0 + 4 >> 2] - 4 | 0;
}
function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0) {
 return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0);
}
function __getTypeName($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = __strdup(std__type_info__name_28_29_20const(HEAP32[$1 + 12 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}
function std____2__iterator_traits_unsigned_20int_20const____difference_type_20std____2____distance_unsigned_20int_20const___28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20std____2__random_access_iterator_tag_29($0, $1) {
 return $1 - $0 >> 2;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___end_28_29($0) {
 return HEAP32[$0 + 4 >> 2];
}
function __cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20____unordered_map_28_29(33832);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___2c_204ul___begin_28_29($0) {
 return HEAP32[$0 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28unsigned_20long_20long_29($0, $1, $2) {
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__writeUnsigned_28unsigned_20long_20long_2c_20bool_29($0, $1, $2);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___dropBack_28unsigned_20long_29($0, $1) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
}
function std____2__tuple_element_0ul_2c_20std____2__tuple_int_20const___20___type__20std____2__get_0ul_2c_20int_20const___28std____2__tuple_int_20const____29($0) {
 return std____2____tuple_leaf_0ul_2c_20int_20const__2c_20false___get_28_29($0);
}
function finish_pass_huff($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = HEAP32[$0 + 464 >> 2];
 $2 = HEAP32[$0 + 468 >> 2];
 $0 = $2 + 16 | 0;
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + (HEAP32[$0 >> 2] / 8 | 0);
 HEAP32[$2 + 16 >> 2] = 0;
}
function $28anonymous_20namespace_29__itanium_demangle__operator___28_28anonymous_20namespace_29__itanium_demangle__Qualifiers__2c_20_28anonymous_20namespace_29__itanium_demangle__Qualifiers_29($0, $1) {
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $1;
}
function emscripten__value_object_nftMarker____value_object_28_29($0) {
 _embind_finalize_value_object(emscripten__internal__TypeID_nftMarker_2c_20void___get_28_29() | 0);
 emscripten__internal__noncopyable___noncopyable_28_29($0);
 return $0;
}
function std____2__enable_if__284ul_29_20___20_284_29_2c_20void___type_20std____2____check_for_overflow_4ul__28unsigned_20long_29($0) {
 if ($0 >>> 0 >= 4294967292) {
  std____2____throw_overflow_error_28char_20const__29(21504);
  abort();
 }
}
function std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $1, $2) {
 std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2);
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 return $0;
}
function __fseeko($0, $1, $2, $3) {
 var $4 = 0;
 if (HEAP32[$0 + 76 >> 2] <= -1) {
  return __fseeko_unlocked($0, $1, $2, $3);
 }
 $4 = __lockfile($0);
 $3 = __fseeko_unlocked($0, $1, $2, $3);
 if ($4) {
  __unlockfile($0);
 }
 return $3;
}
function __syscall_ret($0) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if ($0 >>> 0 >= 4294963201) {
  wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = 0 - $0 | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $0 = -1;
 }
 return $0;
}
function std____2___DeallocateCaller____do_deallocate_handle_size_align_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 std____2___DeallocateCaller____do_deallocate_handle_size_28void__2c_20unsigned_20long_29($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
}
function std____2__allocator_traits_std____2__allocator_char__20_____max_size_28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_char__20const__29($0) {
 return std____2__allocator_char___max_size_28_29_20const($0);
}
function std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 std____2___DeallocateCaller____do_deallocate_handle_size_align_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2);
}
function std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($0, $1) {
 return std____2__allocator_char___allocate_28unsigned_20long_2c_20void_20const__29($0, $1, 0);
}
function std____2____constrain_hash_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = $1 - 1 | 0;
 if (!($2 & $1)) {
  return $0 & $2;
 }
 $0 = $0 >>> 0 >= $1 >>> 0 ? ($0 >>> 0) % ($1 >>> 0) | 0 : $0;
 return $0;
}
function fmt_o($0, $1, $2) {
 if ($0 | $1) {
  while (1) {
   $2 = $2 - 1 | 0;
   HEAP8[$2 | 0] = $0 & 7 | 48;
   $0 = ($1 & 7) << 29 | $0 >>> 3;
   $1 = $1 >>> 3 | 0;
   if ($0 | $1) {
    continue;
   }
   break;
  }
 }
 return $2;
}
function finish_output_pass($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 + 444 >> 2];
 if (HEAP32[$0 + 84 >> 2]) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 + 484 >> 2] + 8 >> 2]]($0);
 }
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
}
function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20___get_28_29() {
 return 9392;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_28anonymous_20namespace_29__itanium_demangle__Node___2c_20unsigned_20long_29($0, $1, $2) {
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function std____2____compressed_pair_elem_std____2____hash_node_destructor_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__20__2c_201_2c_20false_____get_28_29($0) {
 return $0;
}
function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = dynCall_jiji($0, $1, $2, $3, $4);
 $2 = i64toi32_i32$HIGH_BITS;
 setTempRet0($2 | 0);
 return $0 | 0;
}
function __cxx_global_var_init() {
 std____2__unordered_map_int_2c_20arIset_2c_20std____2__hash_int__2c_20std____2__equal_to_int__2c_20std____2__allocator_std____2__pair_int_20const_2c_20arIset__20__20___unordered_map_28_29(33832);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function std__logic_error__logic_error_28char_20const__29($0, $1) {
 std__exception__exception_28_29($0);
 HEAP32[$0 >> 2] = 21688;
 std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0 + 4 | 0, $1);
 return $0;
}
function int_20nftMarker_____20emscripten__internal__getContext_int_20nftMarker_____28int_20nftMarker____20const__29($0) {
 var $1 = 0;
 $1 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
 return $1;
}
function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20int_2c_20int___getTypes_28_29_20const($0) {
 return emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20int_2c_20int__20___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = HEAP32[$1 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___dropBack_28unsigned_20long_29($0, $1) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = HEAP32[$1 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___isInline_28_29_20const($0) {
 return HEAP32[$0 >> 2] == ($0 + 12 | 0);
}
function __ofl_add($0) {
 var $1 = 0, $2 = 0;
 $1 = __ofl_lock();
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
 $2 = HEAP32[$1 >> 2];
 if ($2) {
  HEAP32[$2 + 52 >> 2] = $0;
 }
 HEAP32[$1 >> 2] = $0;
 __ofl_unlock();
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = HEAP32[$1 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function emscripten__internal__WithPolicies____ArgTypeList_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___getCount_28_29_20const($0) {
 return 3;
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28unsigned_20int_29($0, $1) {
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28unsigned_20long_20long_29($0, $1, 0);
}
function $28anonymous_20namespace_29__itanium_demangle__QualifiedName__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__getElements_28_29_20const($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
}
function std____2____throw_length_error_28char_20const__29($0) {
 var $1 = 0;
 $1 = __cxa_allocate_exception(8) | 0;
 std__length_error__length_error_28char_20const__29($1, $0);
 __cxa_throw($1 | 0, 21768, 11);
 abort();
}
function std____2____compressed_pair_elem_std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_201_2c_20true_____get_28_29($0) {
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
}
function copysignl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4 & 65535 | ($8 >>> 16 & 32768 | $4 >>> 16 & 32767) << 16;
}
function std__logic_error___logic_error_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 21688;
 std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0);
 std__exception___exception_28_29($0);
 return $0 | 0;
}
function std____2____compressed_pair_elem_std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true__2c_201_2c_20true_____get_28_29($0) {
 return $0;
}
function __wasi_syscall_ret($0) {
 var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
 if (!$0) {
  return 0;
 }
 wasm2js_i32$0 = __errno_location(), wasm2js_i32$1 = $0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 return -1;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function std__type_info__name_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
 return HEAP32[$1 + 12 >> 2];
}
function std____2____compressed_pair_elem_std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true__2c_201_2c_20true_____get_28_29($0) {
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
}
function std____2__piecewise_construct_t_20const__20std____2__forward_std____2__piecewise_construct_t_20const___28std____2__remove_reference_std____2__piecewise_construct_t_20const____type__29($0) {
 return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 std____2__allocator_char___allocator_28_29($0);
 return $0;
}
function std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function arg_n($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 $0 = $1 >>> 0 > 1 ? (($1 << 2) + $0 | 0) - 4 | 0 : $0;
 HEAP32[$2 + 8 >> 2] = $0 + 4;
 return HEAP32[$0 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__operator_5b_5d_28unsigned_20long_29_20const($0) {
 return $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($0);
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___empty_28_29_20const($0) {
 return HEAP32[$0 >> 2] == HEAP32[$0 + 4 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function snprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $3;
 $3 = vsnprintf($0, $1, $2, $3);
 __stack_pointer = $4 + 16 | 0;
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20short__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20short__20___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__Node__getBaseName_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28_29($0);
}
function $28anonymous_20namespace_29__DefaultAllocator__allocateNodeArray_28unsigned_20long_29($0, $1) {
 return $28anonymous_20namespace_29__BumpPointerAllocator__allocate_28unsigned_20long_29($0, $1 << 2);
}
function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1, $2) {
 return HEAPU32[$1 >> 2] < HEAPU32[$2 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___isInline_28_29_20const($0) {
 return HEAP32[$0 >> 2] == ($0 + 12 | 0);
}
function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20long__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20long__20___get_28_29();
}
function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20char__20___get_28_29();
}
function emscripten__internal__LightTypeID_std____2__basic_string_unsigned_20char_2c_20std____2__char_traits_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20__20___get_28_29() {
 return 19060;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___isInline_28_29_20const($0) {
 return HEAP32[$0 >> 2] == ($0 + 12 | 0);
}
function $28anonymous_20namespace_29__itanium_demangle__NameType__getName_28_29_20const($0, $1) {
 var $2 = 0;
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = $2;
}
function std____2____less_unsigned_20int_2c_20unsigned_20long___operator_28_29_28unsigned_20int_20const__2c_20unsigned_20long_20const__29_20const($0, $1, $2) {
 return HEAPU32[$1 >> 2] < HEAPU32[$2 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___pop_back_28_29($0) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - 4;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}
function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20int__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20int__20___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__Node__getSyntaxNode_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $0 | 0;
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function arIset__arIset_28_29($0) {
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 return $0;
}
function __DOUBLE_BITS($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function std__get_new_handler_28_29() {
 return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(35020);
}
function std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_______2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function emscripten__internal__TypeID_emscripten__memory_view_signed_20char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_signed_20char__20___get_28_29();
}
function siprintf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 $2 = vsiprintf($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_int_2c_20int__28int__2c_20int_2c_20int_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] - 1 | 0;
 HEAP32[$0 >> 2] = $1;
 return $1;
}
function fiprintf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 $2 = vfiprintf($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}
function std__get_terminate_28_29() {
 return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(33788);
}
function std____2____compressed_pair_elem_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void_____2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__2c_204ul___begin_28_29($0) {
 return HEAP32[$0 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__reset_28char__2c_20unsigned_20long_29($0, $1, $2) {
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}
function sscanf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $2;
 $2 = vsscanf($0, $1, $2);
 __stack_pointer = $3 + 16 | 0;
 return $2;
}
function std____2____hash_value_type_int_2c_20arIset___20std____2__addressof_std____2____hash_value_type_int_2c_20arIset__20__28std____2____hash_value_type_int_2c_20arIset___29($0) {
 return $0;
}
function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function std____2____compressed_pair_elem_std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20__2c_201_2c_20true_____get_28_29($0) {
 return $0;
}
function grayscale_convert($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 jcopy_sample_rows(HEAP32[$1 >> 2], $2, $3, 0, $4, HEAP32[$0 + 112 >> 2]);
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28char_20const__2c_20char_20const__29($0, $1, $2) {
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___clear_28_29($0) {
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 >> 2];
}
function __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0) {
 return $0 + 15 & -16;
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29_1($0) {
 $28anonymous_20namespace_29__itanium_demangle__OutputStream__operator___28char_29($0, 48);
}
function std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________max_size_28_29_20const($0) {
 return 1073741823;
}
function std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1, $2) {
 std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($1, $2, 1);
}
function process_data_crank_post($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 456 >> 2] + 4 >> 2]]($0, 0, 0, 0, $1, $2, $3);
}
function memchr_28void_20const__2c_20int_2c_20unsigned_20long_29_20_5benable_if_true_5d($0, $1, $2) {
 return __libcpp_memchr_28void_20const__2c_20int_2c_20unsigned_20long_29($0, $1, $2);
}
function emscripten__internal__TypeID_emscripten__memory_view_double__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_double__20___get_28_29();
}
function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b41_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b41_5d___type__29_29_20_5b41_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b34_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b34_5d___type__29_29_20_5b34_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b27_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b27_5d___type__29_29_20_5b27_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b25_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b25_5d___type__29_29_20_5b25_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b22_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b22_5d___type__29_29_20_5b22_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b20_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b20_5d___type__29_29_20_5b20_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b19_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b19_5d___type__29_29_20_5b19_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b18_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b18_5d___type__29_29_20_5b18_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b17_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b17_5d___type__29_29_20_5b17_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b16_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b16_5d___type__29_29_20_5b16_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b15_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b15_5d___type__29_29_20_5b15_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b14_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b14_5d___type__29_29_20_5b14_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b13_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b13_5d___type__29_29_20_5b13_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b12_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b12_5d___type__29_29_20_5b12_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b11_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b11_5d___type__29_29_20_5b11_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b10_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b10_5d___type__29_29_20_5b10_5d($0) {
 return $0;
}
function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
 return HEAP32[$0 >> 2];
}
function std____2__tuple_int_20const_____20std____2__forward_std____2__tuple_int_20const___20__28std____2__remove_reference_std____2__tuple_int_20const___20___type__29($0) {
 return $0;
}
function emscripten__internal__TypeID_emscripten__memory_view_short__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_short__20___get_28_29();
}
function emscripten__internal__TypeID_emscripten__memory_view_float__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_float__20___get_28_29();
}
function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function start_pass_upsample($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 + 476 >> 2];
 HEAP32[$1 + 92 >> 2] = HEAP32[$0 + 320 >> 2];
 HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 116 >> 2];
}
function emscripten__internal__LightTypeID_std____2__basic_string_char32_t_2c_20std____2__char_traits_char32_t__2c_20std____2__allocator_char32_t__20__20___get_28_29() {
 return 19332;
}
function emscripten__internal__LightTypeID_std____2__basic_string_char16_t_2c_20std____2__char_traits_char16_t__2c_20std____2__allocator_char16_t__20__20___get_28_29() {
 return 19240;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function emscripten__internal__TypeID_emscripten__memory_view_long__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_long__20___get_28_29();
}
function emscripten__internal__TypeID_emscripten__memory_view_char__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_char__20___get_28_29();
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b9_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b9_5d___type__29_29_20_5b9_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b8_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b8_5d___type__29_29_20_5b8_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b7_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b7_5d___type__29_29_20_5b7_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b6_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b6_5d___type__29_29_20_5b6_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b5_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b5_5d___type__29_29_20_5b5_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b4_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b4_5d___type__29_29_20_5b4_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b3_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b3_5d___type__29_29_20_5b3_5d($0) {
 return $0;
}
function char_20const_20_28_std____2__forward_char_20const_20_28__29_20_5b2_5d__28std____2__remove_reference_char_20const_20_28__29_20_5b2_5d___type__29_29_20_5b2_5d($0) {
 return $0;
}
function $28anonymous_20namespace_29__DefaultAllocator___DefaultAllocator_28_29($0) {
 $28anonymous_20namespace_29__BumpPointerAllocator___BumpPointerAllocator_28_29($0);
 return $0;
}
function $28anonymous_20namespace_29__BumpPointerAllocator__BumpPointerAllocator_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 4096 >> 2] = $0;
 return $0;
}
function std____2____unordered_map_equal_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__equal_to_int__2c_20true_____unordered_map_equal_28_29($0) {
 return $0;
}
function emscripten__internal__TypeID_emscripten__memory_view_int__2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__memory_view_int__20___get_28_29();
}
function emscripten__internal__LightTypeID_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20___get_28_29() {
 return 19148;
}
function void_20std____2__reverse_char___28char__2c_20char__29($0, $1) {
 void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
}
function std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_node_base_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___end_28_29($0) {
 return HEAP32[$0 + 4 >> 2];
}
function $28anonymous_20namespace_29__DefaultAllocator__DefaultAllocator_28_29($0) {
 $28anonymous_20namespace_29__BumpPointerAllocator__BumpPointerAllocator_28_29($0);
 return $0;
}
function std____2__pair_int_20const_2c_20arIset___20std____2__addressof_std____2__pair_int_20const_2c_20arIset__20__28std____2__pair_int_20const_2c_20arIset___29($0) {
 return $0;
}
function std____2____unordered_map_hasher_int_2c_20std____2____hash_value_type_int_2c_20arIset__2c_20std____2__hash_int__2c_20true_____unordered_map_hasher_28_29($0) {
 return $0;
}
function std____2____compressed_pair_elem_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function jpeg_destroy($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 4 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[$1 + 40 >> 2]]($0);
 }
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_2032ul___begin_28_29($0) {
 return HEAP32[$0 >> 2];
}
function std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($0) {
 return $0 + 12 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__PODSmallVector__28anonymous_20namespace_29__itanium_demangle__Node__2c_208ul___begin_28_29($0) {
 return HEAP32[$0 >> 2];
}
function std____2____default_init_tag___20std____2__forward_std____2____default_init_tag__28std____2__remove_reference_std____2____default_init_tag___type__29($0) {
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution___ExpandedSpecialSubstitution_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__BumpPointerAllocator___BumpPointerAllocator_28_29($0) {
 $28anonymous_20namespace_29__BumpPointerAllocator__reset_28_29($0);
 return $0;
}
function std____2__allocator_std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________allocator_28_29($0) {
 return $0;
}
function std____2____next_hash_pow2_28unsigned_20long_29($0) {
 if ($0 >>> 0 >= 2) {
  $0 = 1 << 32 - std____2____libcpp_clz_28unsigned_20long_29($0 - 1 | 0);
 }
 return $0;
}
function std____2____hash_node_base_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void________hash_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2];
}
function self_destruct($0) {
 $0 = $0 | 0;
 free_pool($0, 1);
 free_pool($0, 0);
 jpeg_free_small($0, HEAP32[$0 + 4 >> 2], 84);
 HEAP32[$0 + 4 >> 2] = 0;
 jpeg_mem_term($0);
}
function $28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName___SyntheticTemplateParamName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2____compressed_pair_elem_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void____2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function start_pass_merged_upsample($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 + 476 >> 2];
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 116 >> 2];
}
function emscripten__internal__LightTypeID_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___get_28_29() {
 return 9536;
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl___TemplateTemplateParamDecl_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
 return HEAP32[HEAP32[$0 >> 2] + ($1 << 2) >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl___NonTypeTemplateParamDecl_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___ForwardTemplateReference_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2__pointer_traits_char_20const____pointer_to_28char_20const__29($0) {
 return char_20const__20std____2__addressof_char_20const__28char_20const__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double____FloatLiteralImpl_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std__length_error__length_error_28char_20const__29($0, $1) {
 std__logic_error__logic_error_28char_20const__29($0, $1);
 HEAP32[$0 >> 2] = 21736;
 return $0;
}
function __wasm_call_ctors() {
 emscripten_stack_init();
 __emscripten_environ_constructor();
 _GLOBAL__sub_I_ARImageSetDisplayJS_cpp();
 _GLOBAL__sub_I_bind_cpp();
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion___ParameterPackExpansion_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType___ElaboratedTypeSpefType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType___ConversionOperatorType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2____equal_to_char_2c_20char___operator_28_29_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
 return HEAPU8[$1 | 0] == HEAPU8[$2 | 0];
}
function std____2___DeallocateCaller____do_deallocate_handle_size_28void__2c_20unsigned_20long_29($0, $1) {
 std____2___DeallocateCaller____do_call_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl___TypeTemplateParamDecl_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl___TemplateParamPackDecl_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName___StructuredBindingName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName___CtorVtableSpecialName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack___TemplateArgumentPack_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType___PostfixQualifiedType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs___NameWithTemplateArgs_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double____FloatLiteralImpl_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec___DynamicExceptionSpec_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___max_size_28_29_20const($0) {
 return 76695844;
}
function $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float____FloatLiteralImpl_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2__numeric_limits_unsigned_20short___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___min_28_29() & 65535;
}
function std____2__numeric_limits_unsigned_20short___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___max_28_29() & 65535;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution___SpecialSubstitution_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr___SizeofParamPackExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType___PointerToMemberType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName___GlobalQualifiedName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2____basic_string_common_true_____throw_length_error_28_29_20const($0) {
 std____2____throw_length_error_28char_20const__29(21526);
 abort();
}
function std____2__numeric_limits_signed_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() << 24 >> 24;
}
function std____2__numeric_limits_signed_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() << 24 >> 24;
}
function $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr___ArraySubscriptExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 if ($2) {
  memcpy($0, $1, $2);
 }
 return $0;
}
function std____2__numeric_limits_unsigned_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() & 255;
}
function std____2__numeric_limits_unsigned_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() & 255;
}
function fabsl($0, $1, $2, $3, $4) {
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $4 & 2147483647;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
}
function emscripten__internal__TypeID_unsigned_20short_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20short___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType___VendorExtQualType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function new_color_map_1_quant($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 HEAP32[$1 + 20 >> 2] = 47;
 FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
}
function emscripten__internal__TypeID_unsigned_20long_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20long___get_28_29();
}
function emscripten__internal__TypeID_unsigned_20char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20char___get_28_29();
}
function emscripten__internal__TypeID_emscripten__val_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_emscripten__val___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName___StdQualifiedName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding___FunctionEncoding_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2__equal_to_int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, $1, $2) {
 return HEAP32[$1 >> 2] == HEAP32[$2 >> 2];
}
function emscripten__internal__TypeID_unsigned_20int_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_unsigned_20int___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName___UnnamedTypeName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__StringView_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__PixelVectorType___PixelVectorType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__LiteralOperator___LiteralOperator_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr___IntegerCastExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr___ConditionalExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName___ClosureTypeName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr___BracedRangeExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2__tuple_____20std____2__forward_std____2__tuple___20__28std____2__remove_reference_std____2__tuple___20___type__29($0) {
 return $0;
}
function jpeg_alloc_quant_table($0) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 132) | 0;
 HEAP32[$0 + 128 >> 2] = 0;
 return $0;
}
function finish_input_pass($0) {
 $0 = $0 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 + 468 >> 2] + 8 >> 2]]($0);
 HEAP32[HEAP32[$0 + 460 >> 2] >> 2] = 39;
}
function std____2__numeric_limits_unsigned_20long___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___min_28_29();
}
function std____2__numeric_limits_unsigned_20long___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_28_29();
}
function jpeg_alloc_huff_table($0) {
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 4 >> 2] >> 2]]($0, 0, 280) | 0;
 HEAP32[$0 + 276 >> 2] = 0;
 return $0;
}
function emscripten__internal__TypeID_signed_20char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_signed_20char___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__end_28_29_20const($0) {
 return HEAP32[$0 >> 2] + (HEAP32[$0 + 4 >> 2] << 2) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__NodeArray_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral___IntegerLiteral_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ConversionExpr___ConversionExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function __emscripten_stdout_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 i64toi32_i32$HIGH_BITS = 0;
 return 0;
}
function __cxx_global_var_init_16() {
 EmscriptenBindingInitializer_constant_bindings__EmscriptenBindingInitializer_constant_bindings_28_29(33856);
}
function std____2__numeric_limits_unsigned_20int___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___min_28_29();
}
function std____2__numeric_limits_unsigned_20int___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___max_28_29();
}
function std____2__allocator_std____2____hash_node_std____2____hash_value_type_int_2c_20arIset__2c_20void___20___allocator_28_29($0) {
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__StringLiteral___StringLiteral_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ReferenceType___ReferenceType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__QualifiedName___QualifiedName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ParameterPack___ParameterPack_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__setCurrentPosition_28unsigned_20long_29($0, $1) {
 HEAP32[$0 + 4 >> 2] = $1;
}
function $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName___ObjCProtoName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode___NodeArrayNode_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionParam___FunctionParam_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr___EnclosingExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std__length_error___length_error_28_29($0) {
 $0 = $0 | 0;
 std__logic_error___logic_error_28_29($0);
 operator_20delete_28void__29($0);
}
function __strdup($0) {
 var $1 = 0, $2 = 0;
 $1 = strlen($0) + 1 | 0;
 $2 = dlmalloc($1);
 if (!$2) {
  return 0;
 }
 return memcpy($2, $0, $1);
}
function $28anonymous_20namespace_29__itanium_demangle__TemplateArgs___TemplateArgs_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec___NoexceptSpec_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__InitListExpr___InitListExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__FunctionType___FunctionType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr___EnableIfAttr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__CtorDtorName___CtorDtorName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0;
}
function std____2__enable_if_is_integral_long___value_2c_20long___type_20std____2____half_positive_long__28long_29($0) {
 return $0 >>> 1 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__SpecialName___SpecialName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__PostfixExpr___PostfixExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__PointerType___PointerType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20short__28_29() {
 return 3;
}
function __wasm_i64_udiv($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
 return $3;
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__empty_28_29_20const($0) {
 return HEAP32[$0 >> 2] == HEAP32[$0 + 4 >> 2];
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20long__28_29() {
 return 5;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20char__28_29() {
 return 1;
}
function std__logic_error__what_28_29_20const($0) {
 $0 = $0 | 0;
 return std____2____libcpp_refstring__c_str_28_29_20const($0 + 4 | 0) | 0;
}
function std__logic_error___logic_error_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(std__logic_error___logic_error_28_29($0));
}
function std____2__numeric_limits_short___min_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() << 16 >> 16;
}
function std____2__numeric_limits_short___max_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() << 16 >> 16;
}
function emscripten__internal__TypeID_nftMarker_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_nftMarker___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__VectorType___VectorType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr___UUIDOfExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__PrefixExpr___PrefixExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__NestedName___NestedName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__MemberExpr___MemberExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__LambdaExpr___LambdaExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__DeleteExpr___DeleteExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__BracedExpr___BracedExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__BinaryExpr___BinaryExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr___AbiTagAttr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_unsigned_20int__28_29() {
 return 5;
}
function lroundf($0) {
 $0 = roundf($0);
 if (Math_fround(Math_abs($0)) < Math_fround(2147483648)) {
  return ~~$0;
 }
 return -2147483648;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_signed_20char__28_29() {
 return 0;
}
function unsigned_20long__20std____2__forward_unsigned_20long___28std____2__remove_reference_unsigned_20long____type__29($0) {
 return $0;
}
function std____2__numeric_limits_char___min_28_29() {
 return std____2____libcpp_numeric_limits_char_2c_20true___min_28_29() << 24 >> 24;
}
function std____2__numeric_limits_char___max_28_29() {
 return std____2____libcpp_numeric_limits_char_2c_20true___max_28_29() << 24 >> 24;
}
function __wasm_rotl_i32($0, $1) {
 var $2 = 0;
 $2 = $1 & 31;
 $1 = 0 - $1 & 31;
 return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
}
function $28anonymous_20namespace_29__itanium_demangle__ThrowExpr___ThrowExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__LocalName___LocalName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__DotSuffix___DotSuffix_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__ArrayType___ArrayType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
 return operator_20new_28unsigned_20long_29($0);
}
function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
 $0 = $0 | 0;
 std__type_info___type_info_28_29($0);
 return $0 | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__getCurrentPosition_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2];
}
function std____2__remove_reference_unsigned_20long____type___20std____2__move_unsigned_20long___28unsigned_20long__29($0) {
 return $0;
}
function $28anonymous_20namespace_29__itanium_demangle__QualType___QualType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__NameType___NameType_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__FoldExpr___FoldExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__DtorName___DtorName_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__CastExpr___CastExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__CallExpr___CallExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__itanium_demangle__BoolExpr___BoolExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function unsigned_20int__20std____2__forward_unsigned_20int___28std____2__remove_reference_unsigned_20int____type__29($0) {
 return $0;
}
function legalfunc$__wasi_fd_seek($0, $1, $2, $3, $4) {
 return legalimport$__wasi_fd_seek($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
}
function jpeg_open_backing_store($0, $1, $2) {
 $1 = HEAP32[$0 >> 2];
 HEAP32[$1 + 20 >> 2] = 51;
 FUNCTION_TABLE[HEAP32[$1 >> 2]]($0);
}
function __wasm_i64_mul($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $3;
}
function void_20emscripten__internal__raw_destructor_nftMarker__28nftMarker__29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std__type_info__operator___28std__type_info_20const__29_20const($0, $1) {
 return HEAP32[$0 + 4 >> 2] == HEAP32[$1 + 4 >> 2];
}
function std__nullptr_t___20std____2__forward_std__nullptr_t__28std____2__remove_reference_std__nullptr_t___type__29($0) {
 return $0;
}
function emscripten__internal__TypeID_double_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_double___get_28_29();
}
function $28anonymous_20namespace_29__itanium_demangle__NewExpr___NewExpr_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2__remove_reference_unsigned_20int____type___20std____2__move_unsigned_20int___28unsigned_20int__29($0) {
 return $0;
}
function std____2__remove_reference_char_20const_____type___20std____2__move_char_20const____28char_20const___29($0) {
 return $0;
}



function error_exit($0) {
 $0 = $0 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 jpeg_destroy($0);
 exit(1);
 abort();
}
function emscripten__internal__TypeID_short_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_short___get_28_29();
}
function emscripten__internal__TypeID_float_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_float___get_28_29();
}
function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20int_2c_20int__20___get_28_29() {
 return 9372;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_double__28_29() {
 return 7;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_short__28_29() {
 return 2;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_float__28_29() {
 return 6;
}
function emscripten__internal__TypeID_void_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_void___get_28_29();
}
function emscripten__internal__TypeID_long_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_long___get_28_29();
}
function emscripten__internal__TypeID_char_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_char___get_28_29();
}
function emscripten__internal__TypeID_bool_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_bool___get_28_29();
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_long__28_29() {
 return 4;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_char__28_29() {
 return 0;
}
function $28anonymous_20namespace_29__TypedArrayIndex_20_28anonymous_20namespace_29__getTypedArrayIndex_int__28_29() {
 return 4;
}
function emscripten__internal__TypeID_int_2c_20void___get_28_29() {
 return emscripten__internal__LightTypeID_int___get_28_29();
}
function std____2__pointer_traits_char____pointer_to_28char__29($0) {
 return char__20std____2__addressof_char__28char__29($0);
}
function std____2__numeric_limits_long___min_28_29() {
 return std____2____libcpp_numeric_limits_long_2c_20true___min_28_29();
}
function std____2__numeric_limits_long___max_28_29() {
 return std____2____libcpp_numeric_limits_long_2c_20true___max_28_29();
}
function int_20const__20std____2__forward_int_20const___28std____2__remove_reference_int_20const____type__29($0) {
 return $0;
}
function std____2__numeric_limits_int___min_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___min_28_29();
}
function std____2__numeric_limits_int___max_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___max_28_29();
}
function std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29($0) {
 return $0 - 12 | 0;
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29_20const($0) {
 return $0;
}
function fullsize_upsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$3 >> 2] = $2;
}
function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() {
 return 9569;
}
function setThrew($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (!HEAP32[8753]) {
  HEAP32[8754] = $1;
  HEAP32[8753] = $0;
 }
}
function reset_error_mgr($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 >> 2];
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 108 >> 2] = 0;
}
function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20int_2c_20int___getCount_28_29_20const($0) {
 return 3;
}
function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int__28_29() {
 return 9384;
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__empty_28_29_20const($0) {
 return !HEAP32[$0 + 4 >> 2];
}
function std____terminate_28void_20_28__29_28_29_29($0) {
 FUNCTION_TABLE[$0 | 0]();
 abort_message(21551, 0);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__end_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__size_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2];
}
function nftMarker___20std____2__forward_nftMarker__28std____2__remove_reference_nftMarker___type__29($0) {
 return $0;
}
function noop_upsample($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$3 >> 2] = 0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20short__20___get_28_29() {
 return 19576;
}
function emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($0) {
 return HEAP32[$0 >> 2];
}
function $28anonymous_20namespace_29__itanium_demangle__StringView__begin_28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
 HEAP8[$0 | 0] = HEAPU8[$1 | 0];
}
function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20long__20___get_28_29() {
 return 19736;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20char__20___get_28_29() {
 return 19496;
}
function $28anonymous_20namespace_29__itanium_demangle__Node__getKind_28_29_20const($0) {
 return HEAPU8[$0 + 4 | 0];
}
function $28anonymous_20namespace_29__itanium_demangle__NodeArray__begin_28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std__terminate_28_29() {
 std____terminate_28void_20_28__29_28_29_29(std__get_terminate_28_29());
 abort();
}
function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____get_28_29($0) {
 return $0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20int__20___get_28_29() {
 return 19656;
}
function $28anonymous_20namespace_29__itanium_demangle__OutputStream__getBuffer_28_29($0) {
 return HEAP32[$0 >> 2];
}
function std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____get_28_29_20const($0) {
 return $0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_signed_20char__20___get_28_29() {
 return 19456;
}
function __libcpp_memchr_28void_20const__2c_20int_2c_20unsigned_20long_29($0, $1, $2) {
 return memchr($0, $1, $2);
}
function fputs($0, $1) {
 var $2 = 0;
 $2 = strlen($0);
 return ($2 | 0) != (fwrite($0, 1, $2, $1) | 0) ? -1 : 0;
}
function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() {
 return 9565;
}
function stackAlloc($0) {
 $0 = $0 | 0;
 $0 = __stack_pointer - $0 & -16;
 __stack_pointer = $0;
 return $0 | 0;
}
function do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __string_read($0, $1, $2) | 0;
}
function $28anonymous_20namespace_29__itanium_demangle__Node___Node_28_29_1($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_double__20___get_28_29() {
 return 19816;
}
function std____2____tuple_leaf_0ul_2c_20int_20const__2c_20false___get_28_29($0) {
 return HEAP32[$0 >> 2];
}
function std____2____compressed_pair_elem_unsigned_20long_2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function float___20std____2__forward_float__28std____2__remove_reference_float___type__29($0) {
 return $0;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_short__20___get_28_29() {
 return 19536;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_float__20___get_28_29() {
 return 19776;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_long__20___get_28_29() {
 return 19696;
}
function emscripten__internal__LightTypeID_emscripten__memory_view_char__20___get_28_29() {
 return 19416;
}
function char__20std____2__end_char_2c_2021ul__28char_20_28__29_20_5b21ul_5d_29($0) {
 return $0 + 21 | 0;
}
function _GLOBAL__sub_I_ARImageSetDisplayJS_cpp() {
 __cxx_global_var_init();
 __cxx_global_var_init_16();
}
function emscripten__internal__LightTypeID_emscripten__memory_view_int__20___get_28_29() {
 return 19616;
}
function dynCall_jiji($0, $1, $2, $3, $4) {
 $3 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
 return $3;
}
function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() {
 return 9562;
}
function bool__20std____2__forward_bool___28std____2__remove_reference_bool____type__29($0) {
 return $0;
}
function bool___20std____2__forward_bool__28std____2__remove_reference_bool___type__29($0) {
 return $0;
}
function __stdio_close($0) {
 $0 = $0 | 0;
 return __wasi_fd_close(dummy(HEAP32[$0 + 60 >> 2]) | 0) | 0;
}
function std____2__remove_reference_char____type___20std____2__move_char___28char__29($0) {
 return $0;
}
function std____2__remove_reference_bool____type___20std____2__move_bool___28bool__29($0) {
 return $0;
}
function my_error_exit($0) {
 $0 = $0 | 0;
 emscripten_longjmp(HEAP32[$0 >> 2] + 132 | 0, 1);
 abort();
}
function $28anonymous_20namespace_29__itanium_demangle__Node___Node_28_29($0) {
 $0 = $0 | 0;
 abort();
}
function int__20std____2__forward_int___28std____2__remove_reference_int____type__29($0) {
 return $0;
}
function std____2____is_hash_power2_28unsigned_20long_29($0) {
 return !($0 - 1 & $0) & $0 >>> 0 > 2;
}
function jround_up($0, $1) {
 $0 = ($0 + $1 | 0) - 1 | 0;
 return $0 - (($0 | 0) % ($1 | 0) | 0) | 0;
}
function int___20std____2__forward_int__28std____2__remove_reference_int___type__29($0) {
 return $0;
}
function __wasm_ctz_i32($0) {
 if ($0) {
  return 31 - Math_clz32($0 - 1 ^ $0) | 0;
 }
 return 32;
}



function std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___max_28_29() {
 return 65535;
}
function strchr($0, $1) {
 $0 = __strchrnul($0, $1);
 return HEAPU8[$0 | 0] == ($1 & 255) ? $0 : 0;
}
function std____2___DeallocateCaller____do_call_28void__29($0) {
 operator_20delete_28void__29($0);
}
function std__exception___exception_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function std____2____hash_value_type_int_2c_20arIset_____get_value_28_29_20const($0) {
 return $0;
}
function emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29($0) {
 return $0;
}
function char_20const__20std____2____to_address_char_20const__28char_20const__29($0) {
 return $0;
}
function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() {
 return 255;
}
function std____2____compressed_pair_elem_float_2c_200_2c_20false_____get_28_29($0) {
 return $0;
}
function std____2____libcpp_numeric_limits_unsigned_20short_2c_20true___min_28_29() {
 return 0;
}
function std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___max_28_29() {
 return -1;
}
function std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() {
 return -128;
}
function new_color_map_2_quant($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 484 >> 2] + 28 >> 2] = 1;
}
function std____2____libcpp_numeric_limits_unsigned_20long_2c_20true___min_28_29() {
 return 0;
}
function std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___max_28_29() {
 return -1;
}
function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() {
 return 0;
}
function std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() {
 return 127;
}
function char_20const__20std____2__addressof_char_20const__28char_20const__29($0) {
 return $0;
}
function char_20const__20emscripten__internal__getGenericSignature_int__28_29() {
 return 9560;
}
function std____2____libcpp_numeric_limits_unsigned_20int_2c_20true___min_28_29() {
 return 0;
}
function std____2____libcpp_numeric_limits_long_2c_20true___min_28_29() {
 return -2147483648;
}
function std____2____libcpp_numeric_limits_long_2c_20true___max_28_29() {
 return 2147483647;
}
function std____2____libcpp_numeric_limits_int_2c_20true___min_28_29() {
 return -2147483648;
}
function std____2____libcpp_numeric_limits_int_2c_20true___max_28_29() {
 return 2147483647;
}
function std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() {
 return -32768;
}
function std____2____hash_value_type_int_2c_20arIset_____get_value_28_29($0) {
 return $0;
}
function emscripten__internal__LightTypeID_unsigned_20short___get_28_29() {
 return 22056;
}
function std____2____libcpp_refstring__c_str_28_29_20const($0) {
 return HEAP32[$0 >> 2];
}
function std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() {
 return 32767;
}
function emscripten__internal__LightTypeID_unsigned_20long___get_28_29() {
 return 22104;
}
function emscripten__internal__LightTypeID_unsigned_20char___get_28_29() {
 return 22020;
}
function emscripten__internal__LightTypeID_emscripten__val___get_28_29() {
 return 19376;
}
function emscripten__internal__LightTypeID_unsigned_20int___get_28_29() {
 return 22080;
}
function std____2____libcpp_numeric_limits_char_2c_20true___min_28_29() {
 return -128;
}
function emscripten__internal__LightTypeID_signed_20char___get_28_29() {
 return 22032;
}
function std____2____throw_overflow_error_28char_20const__29($0) {
 abort();
 abort();
}
function std____2____libcpp_numeric_limits_char_2c_20true___max_28_29() {
 return 127;
}
function std____2____libcpp_refstring____uses_refcount_28_29_20const($0) {
 return 1;
}
function out($0, $1, $2) {
 if (!(HEAPU8[$0 | 0] & 32)) {
  __fwritex($1, $2, $0);
 }
}
function init_source($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 24 >> 2] + 36 >> 2] = 1;
}
function std__exception__exception_28_29($0) {
 HEAP32[$0 >> 2] = 21644;
 return $0;
}
function std____2__hash_int___operator_28_29_28int_29_20const($0, $1) {
 return $1;
}
function demangling_terminate_handler_28_29() {
 abort_message(21539, 0);
 abort();
}
function vfprintf($0, $1, $2) {
 return __vfprintf_internal($0, $1, $2, 159, 160);
}
function std____2____libcpp_clz_28unsigned_20long_29($0) {
 return Math_clz32($0);
}
function isxdigit($0) {
 return (isdigit($0) | 0) != 0 | ($0 | 32) - 97 >>> 0 < 6;
}
function emscripten__internal__LightTypeID_nftMarker___get_28_29() {
 return 9416;
}
function emscripten_stack_get_free() {
 return __stack_pointer - __stack_end | 0;
}
function wctomb($0, $1) {
 if (!$0) {
  return 0;
 }
 return wcrtomb($0, $1, 0);
}
function jdiv_round_up($0, $1) {
 return (($0 + $1 | 0) - 1 | 0) / ($1 | 0) | 0;
}
function emscripten__internal__noncopyable___noncopyable_28_29($0) {
 return $0;
}
function emscripten__internal__LightTypeID_double___get_28_29() {
 return 22128;
}
function vfiprintf($0, $1, $2) {
 return __vfprintf_internal($0, $1, $2, 0, 0);
}
function emscripten__internal__noncopyable__noncopyable_28_29($0) {
 return $0;
}
function emscripten__internal__LightTypeID_short___get_28_29() {
 return 22044;
}
function emscripten__internal__LightTypeID_float___get_28_29() {
 return 22116;
}
function std__exception__what_28_29_20const($0) {
 $0 = $0 | 0;
 return 21621;
}
function emscripten__internal__LightTypeID_void___get_28_29() {
 return 21984;
}
function emscripten__internal__LightTypeID_long___get_28_29() {
 return 22092;
}
function emscripten__internal__LightTypeID_char___get_28_29() {
 return 22008;
}
function emscripten__internal__LightTypeID_bool___get_28_29() {
 return 21996;
}
function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
 $0 = $0 | 0;
}
function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
 $0 = $0 | 0;
}
function std__exception___exception_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function emscripten__internal__LightTypeID_int___get_28_29() {
 return 22068;
}
function vsiprintf($0, $1, $2) {
 return vsniprintf($0, 2147483647, $1, $2);
}
function std____2__allocator_char___max_size_28_29_20const($0) {
 return -1;
}
function mbsinit($0) {
 if (!$0) {
  return 1;
 }
 return !HEAP32[$0 >> 2];
}
function char__20std____2____to_address_char__28char__29($0) {
 return $0;
}
function jpeg_destroy_decompress($0) {
 $0 = $0 | 0;
 jpeg_destroy($0);
}
function char__20std____2__addressof_char__28char__29($0) {
 return $0;
}
function std____2__allocator_char___allocator_28_29($0) {
 return $0;
}
function __cxx_global_var_init_1() {
 FUNCTION_TABLE[155](33857) | 0;
}
function fseek($0, $1, $2) {
 return __fseeko($0, $1, $1 >> 31, $2);
}
function __cxa_pure_virtual() {
 abort_message(21591, 0);
 abort();
}
function strncpy($0, $1, $2) {
 __stpncpy($0, $1, $2);
 return $0;
}
function std____2__tuple___20std____2__forward_as_tuple___28_29() {}
function ceil_28float_29($0) {
 return Math_fround(Math_ceil($0));
}
function isspace($0) {
 return ($0 | 0) == 32 | $0 - 9 >>> 0 < 5;
}
function __emscripten_stdout_close($0) {
 $0 = $0 | 0;
 return 0;
}
function stackRestore($0) {
 $0 = $0 | 0;
 __stack_pointer = $0;
}
function jcopy_block_row($0, $1, $2) {
 memcpy($1, $0, $2 << 7);
}
function _GLOBAL__sub_I_bind_cpp() {
 __cxx_global_var_init_1();
}
function emscripten_stack_get_end() {
 return __stack_end | 0;
}
function __pthread_self_internal() {
 return __pthread_self();
}
function ar2UtilRemoveExt($0) {
 return arUtilRemoveExt($0);
}
function std__type_info___type_info_28_29($0) {
 return $0;
}
function dummy_consume_data($0) {
 $0 = $0 | 0;
 return 0;
}
function jpeg_mem_available($0, $1, $2, $3) {
 return $2;
}
function operator_20delete_28void__29($0) {
 dlfree($0);
}
function emscripten_stack_init() {
 __stack_end = 35520;
}
function jpeg_get_small($0, $1) {
 return dlmalloc($1);
}
function jpeg_get_large($0, $1) {
 return dlmalloc($1);
}
function __ofl_lock() {
 __lock(33936);
 return 33944;
}
function stackSave() {
 return __stack_pointer | 0;
}
function jpeg_free_small($0, $1, $2) {
 dlfree($1);
}
function jpeg_free_large($0, $1, $2) {
 dlfree($1);
}
function islower($0) {
 return $0 - 97 >>> 0 < 26;
}
function isdigit($0) {
 return $0 - 48 >>> 0 < 10;
}
function finish_pass_1_quant($0) {
 $0 = $0 | 0;
}
function start_pass_dcolor($0) {
 $0 = $0 | 0;
}
function __errno_location() {
 return 33860;
}
function __ofl_unlock() {
 __unlock(33936);
}
function abort_message($0, $1) {
 abort();
}
function __pthread_self() {
 return 33268;
}
function __fe_raise_inexact() {
 return 0;
}
function finish_pass2($0) {
 $0 = $0 | 0;
}
function _get_timezone() {
 return 35004;
}
function term_source($0) {
 $0 = $0 | 0;
}
function finish_pass($0) {
 $0 = $0 | 0;
}
function _get_daylight() {
 return 35e3;
}
function jpeg_mem_init($0) {
 return 0;
}
function _get_tzname() {
 return 34992;
}
function __fe_getround() {
 return 0;
}
function __lockfile($0) {
 return 1;
}
function dummy($0) {
 return $0;
}
function jpeg_mem_term($0) {}
function __unlockfile($0) {}
function __unlock($0) {}
function dummy_1($0) {}
function __lock($0) {}

// EMSCRIPTEN_END_FUNCS

;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, jpeg_std_error, my_error_exit, jpeg_destroy_decompress, jpeg_CreateDecompress, jpeg_stdio_src, jpeg_read_header, arLog, jpeg_start_decompress, jpeg_finish_decompress, jpeg_read_scanlines, std__logic_error___logic_error_28_29, __cxx_global_array_dtor, setup, readNFTMarker, emscripten__internal__Invoker_int_2c_20int_2c_20int___invoke_28int_20_28__29_28int_2c_20int_29_2c_20int_2c_20int_29, emscripten__internal__Invoker_nftMarker_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___invoke_28nftMarker_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29, nftMarker__20emscripten__internal__raw_constructor_nftMarker__28_29, void_20emscripten__internal__raw_destructor_nftMarker__28nftMarker__29, int_20emscripten__internal__MemberAccess_nftMarker_2c_20int___getWire_nftMarker__28int_20nftMarker____20const__2c_20nftMarker_20const__29, void_20emscripten__internal__MemberAccess_nftMarker_2c_20int___setWire_nftMarker__28int_20nftMarker____20const__2c_20nftMarker__2c_20int_29, term_source, jpeg_resync_to_restart, skip_input_data, fill_input_buffer, init_source, skip_variable, read_restart_marker, read_markers, reset_marker_reader, get_interesting_appn, reset_error_mgr, format_message, output_message, emit_message, error_exit, finish_input_pass, start_input_pass, reset_input_controller, consume_markers, new_color_map_1_quant, finish_pass_1_quant, start_pass_1_quant, color_quantize3, color_quantize, quantize3_ord_dither, quantize_ord_dither, quantize_fs_dither, start_pass_merged_upsample, h2v2_merged_upsample, merged_2v_upsample, h2v1_merged_upsample, merged_1v_upsample, start_pass_dcolor, grayscale_convert, rgb_gray_convert, rgb1_gray_convert, gray_rgb_convert, ycc_rgb_convert, rgb_convert, rgb1_rgb_convert, ycck_cmyk_convert, null_convert, start_pass, jpeg_idct_1x1, jpeg_idct_2x2, jpeg_idct_3x3, jpeg_idct_4x4, jpeg_idct_5x5, jpeg_idct_6x6, jpeg_idct_7x7, jpeg_idct_10x10, jpeg_idct_11x11, jpeg_idct_12x12, jpeg_idct_13x13, jpeg_idct_14x14, jpeg_idct_15x15, jpeg_idct_16x16, jpeg_idct_16x8, jpeg_idct_14x7, jpeg_idct_12x6, jpeg_idct_10x5, jpeg_idct_8x4, jpeg_idct_6x3, jpeg_idct_4x2, jpeg_idct_2x1, jpeg_idct_8x16, jpeg_idct_7x14, jpeg_idct_6x12, jpeg_idct_5x10, jpeg_idct_4x8, jpeg_idct_3x6, jpeg_idct_2x4, jpeg_idct_1x2, jpeg_idct_9x9, jpeg_idct_islow, jpeg_idct_ifast, jpeg_idct_float, finish_pass, start_pass_1, decode_mcu_DC_first, decode_mcu_AC_first, decode_mcu_DC_refine, decode_mcu_AC_refine, decode_mcu, finish_pass_huff, start_pass_huff_decoder, decode_mcu_AC_refine_1, decode_mcu_DC_refine_1, decode_mcu_AC_first_1, decode_mcu_DC_first_1, decode_mcu_1, decode_mcu_sub, finish_output_pass, prepare_for_output_pass, self_destruct, free_pool, access_virt_barray, access_virt_sarray, realize_virt_arrays, request_virt_barray, request_virt_sarray, alloc_barray, alloc_sarray, alloc_large, alloc_small, new_color_map_2_quant, start_pass_2_quant, pass2_no_dither, pass2_fs_dither, finish_pass2, finish_pass1, prescan_quantize, start_pass_main, process_data_context_main, process_data_crank_post, process_data_simple_main, start_output_pass, start_input_pass_1, decompress_data, consume_data, decompress_onepass, dummy_consume_data, decompress_smooth_data, sep_upsample, start_pass_upsample, noop_upsample, fullsize_upsample, h2v1_upsample, h2v2_upsample, int_upsample, start_pass_dpost, post_process_1pass, post_process_prepass, post_process_2pass, EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29, __stdio_close, __stdio_write, __stdio_seek, fmt_fp, pop_arg_long_double, do_read, __emscripten_stdout_close, __emscripten_stdout_seek, __stdio_read, sn_write, demangling_terminate_handler_28_29, std__exception___exception_28_29, std__exception___exception_28_29_1, std__exception__what_28_29_20const, std__logic_error___logic_error_28_29_1, std__logic_error__what_28_29_20const, std__length_error___length_error_28_29, __cxxabiv1____shim_type_info_____shim_type_info_28_29, __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop2_28_29_20const, __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, $28anonymous_20namespace_29__itanium_demangle__Node__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__Node__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__Node__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__Node__getSyntaxNode_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__SpecialName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__Node__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__Node__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__Node___Node_28_29_1, $28anonymous_20namespace_29__itanium_demangle__SpecialName___SpecialName_28_29, __cxa_pure_virtual, $28anonymous_20namespace_29__itanium_demangle__Node___Node_28_29, $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__CtorVtableSpecialName___CtorVtableSpecialName_28_29, $28anonymous_20namespace_29__itanium_demangle__NameType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__NameType__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__NameType___NameType_28_29, $28anonymous_20namespace_29__itanium_demangle__NestedName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__NestedName__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__NestedName___NestedName_28_29, $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__getSyntaxNode_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ForwardTemplateReference___ForwardTemplateReference_28_29, $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__IntegerLiteral___IntegerLiteral_28_29, $28anonymous_20namespace_29__itanium_demangle__BoolExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__BoolExpr___BoolExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float___printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_float____FloatLiteralImpl_28_29, $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double___printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_double____FloatLiteralImpl_28_29, $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double___printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FloatLiteralImpl_long_20double____FloatLiteralImpl_28_29, $28anonymous_20namespace_29__itanium_demangle__StringLiteral__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__StringLiteral___StringLiteral_28_29, $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__UnnamedTypeName___UnnamedTypeName_28_29, $28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__SyntheticTemplateParamName___SyntheticTemplateParamName_28_29, $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__TypeTemplateParamDecl___TypeTemplateParamDecl_28_29, $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__NonTypeTemplateParamDecl___NonTypeTemplateParamDecl_28_29, $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__TemplateTemplateParamDecl___TemplateTemplateParamDecl_28_29, $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__TemplateParamPackDecl___TemplateParamPackDecl_28_29, $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ClosureTypeName___ClosureTypeName_28_29, $28anonymous_20namespace_29__itanium_demangle__LambdaExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__LambdaExpr___LambdaExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__IntegerCastExpr___IntegerCastExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__FunctionParam__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionParam___FunctionParam_28_29, $28anonymous_20namespace_29__itanium_demangle__FoldExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FoldExpr___FoldExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ParameterPackExpansion___ParameterPackExpansion_28_29, $28anonymous_20namespace_29__itanium_demangle__BinaryExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__BinaryExpr___BinaryExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__PrefixExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PrefixExpr___PrefixExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__CastExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__CastExpr___CastExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__CallExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__CallExpr___CallExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__ConversionExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ConversionExpr___ConversionExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__DeleteExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__DeleteExpr___DeleteExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__QualifiedName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__QualifiedName__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__QualifiedName___QualifiedName_28_29, $28anonymous_20namespace_29__itanium_demangle__DtorName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__DtorName___DtorName_28_29, $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ConversionOperatorType___ConversionOperatorType_28_29, $28anonymous_20namespace_29__itanium_demangle__LiteralOperator__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__LiteralOperator___LiteralOperator_28_29, $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__GlobalQualifiedName___GlobalQualifiedName_28_29, $28anonymous_20namespace_29__itanium_demangle__MemberExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__MemberExpr___MemberExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ArraySubscriptExpr___ArraySubscriptExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__BracedExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__BracedExpr___BracedExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__BracedRangeExpr___BracedRangeExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__InitListExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__InitListExpr___InitListExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__PostfixExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PostfixExpr___PostfixExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__NewExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__NewExpr___NewExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__EnclosingExpr___EnclosingExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ConditionalExpr___ConditionalExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__SizeofParamPackExpr___SizeofParamPackExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__NodeArrayNode___NodeArrayNode_28_29, $28anonymous_20namespace_29__itanium_demangle__ThrowExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ThrowExpr___ThrowExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__UUIDOfExpr___UUIDOfExpr_28_29, $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__ExpandedSpecialSubstitution___ExpandedSpecialSubstitution_28_29, $28anonymous_20namespace_29__itanium_demangle__CtorDtorName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__CtorDtorName___CtorDtorName_28_29, $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__AbiTagAttr___AbiTagAttr_28_29, $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__StructuredBindingName___StructuredBindingName_28_29, $28anonymous_20namespace_29__itanium_demangle__LocalName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__LocalName___LocalName_28_29, $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__SpecialSubstitution___SpecialSubstitution_28_29, $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ParameterPack__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ParameterPack__getSyntaxNode_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ParameterPack__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ParameterPack___ParameterPack_28_29, $28anonymous_20namespace_29__itanium_demangle__TemplateArgs__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__TemplateArgs___TemplateArgs_28_29, $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__NameWithTemplateArgs___NameWithTemplateArgs_28_29, $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName__getBaseName_28_29_20const, $28anonymous_20namespace_29__itanium_demangle__StdQualifiedName___StdQualifiedName_28_29, $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__TemplateArgumentPack___TemplateArgumentPack_28_29, $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__EnableIfAttr___EnableIfAttr_28_29, $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionEncoding___FunctionEncoding_28_29, $28anonymous_20namespace_29__itanium_demangle__DotSuffix__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__DotSuffix___DotSuffix_28_29, $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__NoexceptSpec___NoexceptSpec_28_29, $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__DynamicExceptionSpec___DynamicExceptionSpec_28_29, $28anonymous_20namespace_29__itanium_demangle__FunctionType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionType__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__FunctionType___FunctionType_28_29, $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ObjCProtoName___ObjCProtoName_28_29, $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__VendorExtQualType___VendorExtQualType_28_29, $28anonymous_20namespace_29__itanium_demangle__QualType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__QualType__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__QualType__hasFunctionSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__QualType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__QualType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__QualType___QualType_28_29, $28anonymous_20namespace_29__itanium_demangle__PixelVectorType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PixelVectorType___PixelVectorType_28_29, $28anonymous_20namespace_29__itanium_demangle__VectorType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__VectorType___VectorType_28_29, $28anonymous_20namespace_29__itanium_demangle__ArrayType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ArrayType__hasArraySlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ArrayType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ArrayType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ArrayType___ArrayType_28_29, $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PointerToMemberType___PointerToMemberType_28_29, $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ElaboratedTypeSpefType___ElaboratedTypeSpefType_28_29, $28anonymous_20namespace_29__itanium_demangle__PointerType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PointerType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PointerType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PointerType___PointerType_28_29, $28anonymous_20namespace_29__itanium_demangle__ReferenceType__hasRHSComponentSlow_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ReferenceType__printRight_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__ReferenceType___ReferenceType_28_29, $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType__printLeft_28_28anonymous_20namespace_29__itanium_demangle__OutputStream__29_20const, $28anonymous_20namespace_29__itanium_demangle__PostfixQualifiedType___PostfixQualifiedType_28_29]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
}
 
 return {
  "__indirect_function_table": FUNCTION_TABLE, 
  "__wasm_call_ctors": __wasm_call_ctors, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "__errno_location": __errno_location, 
  "testSetjmp": testSetjmp, 
  "saveSetjmp": saveSetjmp, 
  "fflush": fflush, 
  "__getTypeName": __getTypeName, 
  "__embind_register_native_and_builtin_types": __embind_register_native_and_builtin_types, 
  "realloc": dlrealloc, 
  "_get_tzname": _get_tzname, 
  "_get_daylight": _get_daylight, 
  "_get_timezone": _get_timezone, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "setThrew": setThrew, 
  "__cxa_demangle": __cxa_demangle, 
  "dynCall_jiji": legalstub$dynCall_jiji
};
}

  return asmFunc(asmLibraryArg);
}
// EMSCRIPTEN_END_ASM




)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 268435456;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)') } });

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536
      ,
      'maximum': 2147483648 / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile = 'ariset.debug.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      // Let's not use fetch to get objects over file:// as it's most likely Cordova which doesn't support fetch for file://
      && !isFileURI(wasmBinaryFile)
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary(wasmBinaryFile);
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  9026: function($0, $1, $2) {if (!ariset["frameMalloc"]) { ariset["frameMalloc"] = ({}); } var frameMalloc = ariset["frameMalloc"]; frameMalloc["frameIbwpointer"] = $1; frameMalloc["frameimgBWsize"] = $2;}
};






  function abortStackOverflow(allocSize) {
      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (_emscripten_stack_get_free() + allocSize) + ' bytes available!');
    }

  function callRuntimeCallbacks(callbacks) {
      while(callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      // If demangle has failed before, stop demangling any further function names
      // This avoids an infinite recursion with malloc()->abort()->stackTrace()->demangle()->malloc()->...
      demangle.recursionGuard = (demangle.recursionGuard|0)+1;
      if (demangle.recursionGuard > 1) return func;
      var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
      assert(__cxa_demangle_func);
      var stackTop = stackSave();
      try {
        var s = func;
        if (s.startsWith('__Z'))
          s = s.substr(1);
        var len = lengthBytesUTF8(s)+1;
        var buf = stackAlloc(len);
        stringToUTF8(s, buf, len);
        var status = stackAlloc(4);
        var ret = __cxa_demangle_func(buf, 0, 0, status);
        if (HEAP32[((status)>>2)] === 0 && ret) {
          return UTF8ToString(ret);
        }
        // otherwise, libcxxabi failed
      } catch(e) {
      } finally {
        _free(ret);
        stackRestore(stackTop);
        if (demangle.recursionGuard < 2) --demangle.recursionGuard;
      }
      // failure when using libcxxabi, don't demangle
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};
  function ___cxa_allocate_exception(size) {
      // Thrown object is prepended by exception metadata block
      return _malloc(size + ExceptionInfoAttrs.SIZE) + ExceptionInfoAttrs.SIZE;
    }

  function _atexit(func, arg) {
    }
  function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - ExceptionInfoAttrs.SIZE;
  
      this.set_type = function(type) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)]=type;
      };
  
      this.get_type = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.TYPE_OFFSET))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)]=destructor;
      };
  
      this.get_destructor = function() {
        return HEAP32[(((this.ptr)+(ExceptionInfoAttrs.DESTRUCTOR_OFFSET))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)]=caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.CAUGHT_OFFSET))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)]=rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(ExceptionInfoAttrs.RETHROWN_OFFSET))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)];
        HEAP32[(((this.ptr)+(ExceptionInfoAttrs.REFCOUNT_OFFSET))>>2)]=prev - 1;
        assert(prev > 0);
        return prev === 1;
      };
    }
  
  var exceptionLast=0;
  
  var uncaughtExceptionCount=0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function mmapAlloc(size) {
      var alignedSize = alignMemory(size, 16384);
      var ptr = _malloc(alignedSize);
      while (size < alignedSize) HEAP8[ptr + size++] = 0;
      return ptr;
    }
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          // We don't currently support location hints for the address of the mapping
          assert(address === 0);
  
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};
  var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = varargs ? SYSCALLS.get() : 0;
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var structRegistrations={};
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  var char_0=48;
  
  var char_9=57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  var InternalError=undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
                concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
      whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
          var fields = {};
          fieldRecords.forEach(function(field, i) {
              var fieldName = field.fieldName;
              var getterReturnType = fieldTypes[i];
              var getter = field.getter;
              var getterContext = field.getterContext;
              var setterArgumentType = fieldTypes[i + fieldRecords.length];
              var setter = field.setter;
              var setterContext = field.setterContext;
              fields[fieldName] = {
                  read: function(ptr) {
                      return getterReturnType['fromWireType'](
                          getter(getterContext, ptr));
                  },
                  write: function(ptr, o) {
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                      runDestructors(destructors);
                  }
              };
          });
  
          return [{
              name: reg.name,
              'fromWireType': function(ptr) {
                  var rv = {};
                  for (var i in fields) {
                      rv[i] = fields[i].read(ptr);
                  }
                  rawDestructor(ptr);
                  return rv;
              },
              'toWireType': function(destructors, o) {
                  // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                  // assume all fields are present without checking.
                  for (var fieldName in fields) {
                      if (!(fieldName in o)) {
                          throw new TypeError('Missing field:  "' + fieldName + '"');
                      }
                  }
                  var ptr = rawConstructor();
                  for (fieldName in fields) {
                      fields[fieldName].write(ptr, o[fieldName]);
                  }
                  if (destructors !== null) {
                      destructors.push(rawDestructor, ptr);
                  }
                  return ptr;
              },
              'argPackAdvance': 8,
              'readValueFromPointer': simpleReadValueFromPointer,
              destructorFunction: rawDestructor,
          }];
      });
    }

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes=undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var BindingError=undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function dynCallLegacy(sig, ptr, args) {
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      if (args && args.length) {
        // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
        assert(args.length === sig.substring(1).replace(/j/g, '--').length);
      } else {
        assert(sig.length == 1);
      }
      if (args && args.length) {
        return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
      }
      return Module['dynCall_' + sig].call(null, ptr);
    }
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.indexOf('j') != -1) {
        return dynCallLegacy(sig, ptr, args);
      }
      assert(wasmTable.get(ptr), 'missing table entry in dynCall: ' + ptr);
      return wasmTable.get(ptr).apply(null, args)
    }
  function getDynCaller(sig, ptr) {
      assert(sig.indexOf('j') >= 0, 'getDynCaller should only be called with i64 sigs')
      var argCache = [];
      return function() {
        argCache.length = arguments.length;
        for (var i = 0; i < arguments.length; i++) {
          argCache[i] = arguments[i];
        }
        return dynCall(sig, ptr, argCache);
      };
    }
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.indexOf('j') != -1) {
          return getDynCaller(signature, rawFunction);
        }
        return wasmTable.get(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (i == length || HEAPU8[currentBytePtr] == 0) {
                          var maxRead = currentBytePtr - decodeStartPtr;
                          var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (i == length || HEAP[currentBytePtr >> shift] == 0) {
                      var maxReadBytes = currentBytePtr - decodeStartPtr;
                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
          name: readLatin1String(name),
          rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
          rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
          fields: [],
      };
    }

  function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
          fieldName: readLatin1String(fieldName),
          getterReturnType: getterReturnType,
          getter: embind__requireFunction(getterSignature, getter),
          getterContext: getterContext,
          setterArgumentType: setterArgumentType,
          setter: embind__requireFunction(setterSignature, setter),
          setterContext: setterContext,
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

  function _emscripten_asm_const_int(code, sigPtr, argbuf) {
      var args = readAsmConstArgs(sigPtr, argbuf);
      return ASM_CONSTS[code].apply(null, args);
    }

  function _longjmp(env, value) {
      _setThrew(env, value || 1);
      throw 'longjmp';
    }
  function _emscripten_longjmp(a0,a1
  ) {
  return _longjmp(a0,a1);
  }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
        console.error('emscripten_realloc_buffer: Attempted to grow heap from ' + buffer.byteLength  + ' bytes to ' + size + ' bytes, but got error: ' + e);
      }
      // implicit 0 return to save code size (caller will cast "undefined" into 0
      // anyhow)
    }
  function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
      assert(requestedSize > oldSize);
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      // A limit was set for how much we can grow. We should not exceed that
      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).
      var maxHeapSize = 2147483648;
      if (requestedSize > maxHeapSize) {
        err('Cannot enlarge memory, asked to go up to ' + requestedSize + ' bytes, but the limit is ' + maxHeapSize + ' bytes!');
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), 65536));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
          err('Warning: Enlarging memory arrays, this is not fast! ' + [oldSize, newSize]);
  
          return true;
        }
      }
      err('Failed to grow the heap from ' + oldSize + ' bytes to ' + newSize + ' bytes, not enough memory!');
      return false;
    }

  var ENV={};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  function _environ_get(__environ, environ_buf) {try {
  
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {try {
  
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _getTempRet0() {
      return (getTempRet0() | 0);
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  var readAsmConstArgsArray=[];
  function readAsmConstArgs(sigPtr, buf) {
      // Nobody should have mutated _readAsmConstArgsArray underneath us to be something else than an array.
      assert(Array.isArray(readAsmConstArgsArray));
      // The input buffer is allocated on the stack, so it must be stack-aligned.
      assert(buf % 16 == 0);
      readAsmConstArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      buf >>= 2;
      while (ch = HEAPU8[sigPtr++]) {
        assert(ch === 100/*'d'*/ || ch === 102/*'f'*/ || ch === 105 /*'i'*/);
        // A double takes two 32-bit slots, and must also be aligned - the backend
        // will emit padding to avoid that.
        var double = ch < 105;
        if (double && (buf & 1)) buf++;
        readAsmConstArgsArray.push(double ? HEAPF64[buf++ >> 1] : HEAP32[buf]);
        ++buf;
      }
      return readAsmConstArgsArray;
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_emval();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



__ATINIT__.push({ func: function() { ___wasm_call_ctors() } });
var asmLibraryArg = {
  "__cxa_allocate_exception": ___cxa_allocate_exception,
  "__cxa_atexit": ___cxa_atexit,
  "__cxa_throw": ___cxa_throw,
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "_embind_finalize_value_object": __embind_finalize_value_object,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_value_object": __embind_register_value_object,
  "_embind_register_value_object_field": __embind_register_value_object_field,
  "_embind_register_void": __embind_register_void,
  "abort": _abort,
  "emscripten_asm_const_int": _emscripten_asm_const_int,
  "emscripten_longjmp": _emscripten_longjmp,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "invoke_ii": invoke_ii,
  "invoke_iii": invoke_iii,
  "invoke_iiii": invoke_iiii,
  "invoke_vi": invoke_vi,
  "invoke_vii": invoke_vii,
  "invoke_viii": invoke_viii,
  "invoke_viiii": invoke_viiii,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc");

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _testSetjmp = Module["_testSetjmp"] = createExportWrapper("testSetjmp");

/** @type {function(...*):?} */
var _saveSetjmp = Module["_saveSetjmp"] = createExportWrapper("saveSetjmp");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = createExportWrapper("__getTypeName");

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");

/** @type {function(...*):?} */
var _realloc = Module["_realloc"] = createExportWrapper("realloc");

/** @type {function(...*):?} */
var __get_tzname = Module["__get_tzname"] = createExportWrapper("_get_tzname");

/** @type {function(...*):?} */
var __get_daylight = Module["__get_daylight"] = createExportWrapper("_get_daylight");

/** @type {function(...*):?} */
var __get_timezone = Module["__get_timezone"] = createExportWrapper("_get_timezone");

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = createExportWrapper("setThrew");

/** @type {function(...*):?} */
var ___cxa_demangle = Module["___cxa_demangle"] = createExportWrapper("__cxa_demangle");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");


function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)(a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    wasmTable.get(index)(a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return wasmTable.get(index)(a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}




// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortStackOverflow")) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfoAttrs")) Module["ExceptionInfoAttrs"] = function() { abort("'ExceptionInfoAttrs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {

    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);

    ABORT = true;
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

noExitRuntime = true;

run();





